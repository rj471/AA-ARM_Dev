   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"serial_fifo.c"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.section	.text.fifo_init,"ax",%progbits
  24              		.align	2
  25              		.global	fifo_init
  26              		.thumb
  27              		.thumb_func
  29              	fifo_init:
  30              	.LFB0:
  31              		.file 1 "..//drivers/USB/serial_fifo.c"
   1:..//drivers/USB/serial_fifo.c **** /*
   2:..//drivers/USB/serial_fifo.c **** 	LPCUSB, an USB device driver for LPC microcontrollers	
   3:..//drivers/USB/serial_fifo.c **** 	Copyright (C) 2006 Bertrik Sikken (bertrik@sikken.nl)
   4:..//drivers/USB/serial_fifo.c **** 
   5:..//drivers/USB/serial_fifo.c **** 	Redistribution and use in source and binary forms, with or without
   6:..//drivers/USB/serial_fifo.c **** 	modification, are permitted provided that the following conditions are met:
   7:..//drivers/USB/serial_fifo.c **** 
   8:..//drivers/USB/serial_fifo.c **** 	1. Redistributions of source code must retain the above copyright
   9:..//drivers/USB/serial_fifo.c **** 	   notice, this list of conditions and the following disclaimer.
  10:..//drivers/USB/serial_fifo.c **** 	2. Redistributions in binary form must reproduce the above copyright
  11:..//drivers/USB/serial_fifo.c **** 	   notice, this list of conditions and the following disclaimer in the
  12:..//drivers/USB/serial_fifo.c **** 	   documentation and/or other materials provided with the distribution.
  13:..//drivers/USB/serial_fifo.c **** 	3. The name of the author may not be used to endorse or promote products
  14:..//drivers/USB/serial_fifo.c **** 	   derived from this software without specific prior written permission.
  15:..//drivers/USB/serial_fifo.c **** 
  16:..//drivers/USB/serial_fifo.c **** 	THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  17:..//drivers/USB/serial_fifo.c **** 	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  18:..//drivers/USB/serial_fifo.c **** 	OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  19:..//drivers/USB/serial_fifo.c **** 	IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, 
  20:..//drivers/USB/serial_fifo.c **** 	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  21:..//drivers/USB/serial_fifo.c **** 	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  22:..//drivers/USB/serial_fifo.c **** 	DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  23:..//drivers/USB/serial_fifo.c **** 	THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  24:..//drivers/USB/serial_fifo.c **** 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  25:..//drivers/USB/serial_fifo.c **** 	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  26:..//drivers/USB/serial_fifo.c **** */
  27:..//drivers/USB/serial_fifo.c **** 
  28:..//drivers/USB/serial_fifo.c **** // CodeRed - LPCUSB type.h renamed
  29:..//drivers/USB/serial_fifo.c **** //#include "type.h"
  30:..//drivers/USB/serial_fifo.c **** #include "lpc_types.h"
  31:..//drivers/USB/serial_fifo.c **** #include "serial_fifo.h"
  32:..//drivers/USB/serial_fifo.c **** 
  33:..//drivers/USB/serial_fifo.c **** void fifo_init(fifo_t *fifo, uint8_t *buf)
  34:..//drivers/USB/serial_fifo.c **** {
  32              		.loc 1 34 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 8
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36              		@ link register save eliminated.
  37 0000 80B4     		push	{r7}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 4
  40 0002 83B0     		sub	sp, sp, #12
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_offset 7, -4
  45              	.LCFI2:
  46              		.cfi_def_cfa_register 7
  47 0006 7860     		str	r0, [r7, #4]
  48 0008 3960     		str	r1, [r7, #0]
  35:..//drivers/USB/serial_fifo.c **** 	fifo->head = 0;
  49              		.loc 1 35 0
  50 000a 7B68     		ldr	r3, [r7, #4]
  51 000c 4FF00002 		mov	r2, #0
  52 0010 1A60     		str	r2, [r3, #0]
  36:..//drivers/USB/serial_fifo.c **** 	fifo->tail = 0;
  53              		.loc 1 36 0
  54 0012 7B68     		ldr	r3, [r7, #4]
  55 0014 4FF00002 		mov	r2, #0
  56 0018 5A60     		str	r2, [r3, #4]
  37:..//drivers/USB/serial_fifo.c **** 	fifo->buf = buf;
  57              		.loc 1 37 0
  58 001a 7B68     		ldr	r3, [r7, #4]
  59 001c 3A68     		ldr	r2, [r7, #0]
  60 001e 9A60     		str	r2, [r3, #8]
  38:..//drivers/USB/serial_fifo.c **** }
  61              		.loc 1 38 0
  62 0020 07F10C07 		add	r7, r7, #12
  63 0024 BD46     		mov	sp, r7
  64 0026 80BC     		pop	{r7}
  65 0028 7047     		bx	lr
  66              		.cfi_endproc
  67              	.LFE0:
  69 002a 00BF     		.section	.text.fifo_put,"ax",%progbits
  70              		.align	2
  71              		.global	fifo_put
  72              		.thumb
  73              		.thumb_func
  75              	fifo_put:
  76              	.LFB1:
  39:..//drivers/USB/serial_fifo.c **** 
  40:..//drivers/USB/serial_fifo.c **** 
  41:..//drivers/USB/serial_fifo.c **** BOOL fifo_put(fifo_t *fifo, uint8_t c)
  42:..//drivers/USB/serial_fifo.c **** {
  77              		.loc 1 42 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 16
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              	.LCFI3:
  84              		.cfi_def_cfa_offset 4
  85 0002 85B0     		sub	sp, sp, #20
  86              	.LCFI4:
  87              		.cfi_def_cfa_offset 24
  88 0004 00AF     		add	r7, sp, #0
  89              		.cfi_offset 7, -4
  90              	.LCFI5:
  91              		.cfi_def_cfa_register 7
  92 0006 7860     		str	r0, [r7, #4]
  93 0008 0B46     		mov	r3, r1
  94 000a FB70     		strb	r3, [r7, #3]
  43:..//drivers/USB/serial_fifo.c **** 	int next;
  44:..//drivers/USB/serial_fifo.c **** 	
  45:..//drivers/USB/serial_fifo.c **** 	// check if FIFO has room
  46:..//drivers/USB/serial_fifo.c **** 	next = (fifo->head + 1) % VCOM_FIFO_SIZE;
  95              		.loc 1 46 0
  96 000c 7B68     		ldr	r3, [r7, #4]
  97 000e 1B68     		ldr	r3, [r3, #0]
  98 0010 03F10103 		add	r3, r3, #1
  99 0014 4FEAE372 		asr	r2, r3, #31
 100 0018 4FEAD252 		lsr	r2, r2, #23
 101 001c 1344     		add	r3, r3, r2
 102 001e 4FEAC353 		lsl	r3, r3, #23
 103 0022 4FEAD353 		lsr	r3, r3, #23
 104 0026 C2EB0303 		rsb	r3, r2, r3
 105 002a FB60     		str	r3, [r7, #12]
  47:..//drivers/USB/serial_fifo.c **** 	if (next == fifo->tail) {
 106              		.loc 1 47 0
 107 002c 7B68     		ldr	r3, [r7, #4]
 108 002e 5A68     		ldr	r2, [r3, #4]
 109 0030 FB68     		ldr	r3, [r7, #12]
 110 0032 9A42     		cmp	r2, r3
 111 0034 02D1     		bne	.L4
  48:..//drivers/USB/serial_fifo.c **** 		// full
  49:..//drivers/USB/serial_fifo.c **** 		return FALSE;
 112              		.loc 1 49 0
 113 0036 4FF00003 		mov	r3, #0
 114 003a 0BE0     		b	.L5
 115              	.L4:
  50:..//drivers/USB/serial_fifo.c **** 	}
  51:..//drivers/USB/serial_fifo.c **** 	
  52:..//drivers/USB/serial_fifo.c **** 	fifo->buf[fifo->head] = c;
 116              		.loc 1 52 0
 117 003c 7B68     		ldr	r3, [r7, #4]
 118 003e 9A68     		ldr	r2, [r3, #8]
 119 0040 7B68     		ldr	r3, [r7, #4]
 120 0042 1B68     		ldr	r3, [r3, #0]
 121 0044 1344     		add	r3, r2, r3
 122 0046 FA78     		ldrb	r2, [r7, #3]
 123 0048 1A70     		strb	r2, [r3, #0]
  53:..//drivers/USB/serial_fifo.c **** 	fifo->head = next;
 124              		.loc 1 53 0
 125 004a 7B68     		ldr	r3, [r7, #4]
 126 004c FA68     		ldr	r2, [r7, #12]
 127 004e 1A60     		str	r2, [r3, #0]
  54:..//drivers/USB/serial_fifo.c **** 	
  55:..//drivers/USB/serial_fifo.c **** 	return TRUE;
 128              		.loc 1 55 0
 129 0050 4FF00103 		mov	r3, #1
 130              	.L5:
  56:..//drivers/USB/serial_fifo.c **** }
 131              		.loc 1 56 0
 132 0054 1846     		mov	r0, r3
 133 0056 07F11407 		add	r7, r7, #20
 134 005a BD46     		mov	sp, r7
 135 005c 80BC     		pop	{r7}
 136 005e 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE1:
 140              		.section	.text.fifo_get,"ax",%progbits
 141              		.align	2
 142              		.global	fifo_get
 143              		.thumb
 144              		.thumb_func
 146              	fifo_get:
 147              	.LFB2:
  57:..//drivers/USB/serial_fifo.c **** 
  58:..//drivers/USB/serial_fifo.c **** 
  59:..//drivers/USB/serial_fifo.c **** BOOL fifo_get(fifo_t *fifo, uint8_t *pc)
  60:..//drivers/USB/serial_fifo.c **** {
 148              		.loc 1 60 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 16
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153 0000 80B4     		push	{r7}
 154              	.LCFI6:
 155              		.cfi_def_cfa_offset 4
 156 0002 85B0     		sub	sp, sp, #20
 157              	.LCFI7:
 158              		.cfi_def_cfa_offset 24
 159 0004 00AF     		add	r7, sp, #0
 160              		.cfi_offset 7, -4
 161              	.LCFI8:
 162              		.cfi_def_cfa_register 7
 163 0006 7860     		str	r0, [r7, #4]
 164 0008 3960     		str	r1, [r7, #0]
  61:..//drivers/USB/serial_fifo.c **** 	int next;
  62:..//drivers/USB/serial_fifo.c **** 	
  63:..//drivers/USB/serial_fifo.c **** 	// check if FIFO has data
  64:..//drivers/USB/serial_fifo.c **** 	if (fifo->head == fifo->tail) {
 165              		.loc 1 64 0
 166 000a 7B68     		ldr	r3, [r7, #4]
 167 000c 1A68     		ldr	r2, [r3, #0]
 168 000e 7B68     		ldr	r3, [r7, #4]
 169 0010 5B68     		ldr	r3, [r3, #4]
 170 0012 9A42     		cmp	r2, r3
 171 0014 02D1     		bne	.L8
  65:..//drivers/USB/serial_fifo.c **** 		return FALSE;
 172              		.loc 1 65 0
 173 0016 4FF00003 		mov	r3, #0
 174 001a 1CE0     		b	.L9
 175              	.L8:
  66:..//drivers/USB/serial_fifo.c **** 	}
  67:..//drivers/USB/serial_fifo.c **** 	
  68:..//drivers/USB/serial_fifo.c **** 	next = (fifo->tail + 1) % VCOM_FIFO_SIZE;
 176              		.loc 1 68 0
 177 001c 7B68     		ldr	r3, [r7, #4]
 178 001e 5B68     		ldr	r3, [r3, #4]
 179 0020 03F10103 		add	r3, r3, #1
 180 0024 4FEAE372 		asr	r2, r3, #31
 181 0028 4FEAD252 		lsr	r2, r2, #23
 182 002c 1344     		add	r3, r3, r2
 183 002e 4FEAC353 		lsl	r3, r3, #23
 184 0032 4FEAD353 		lsr	r3, r3, #23
 185 0036 C2EB0303 		rsb	r3, r2, r3
 186 003a FB60     		str	r3, [r7, #12]
  69:..//drivers/USB/serial_fifo.c **** 	
  70:..//drivers/USB/serial_fifo.c **** 	*pc = fifo->buf[fifo->tail];
 187              		.loc 1 70 0
 188 003c 7B68     		ldr	r3, [r7, #4]
 189 003e 9A68     		ldr	r2, [r3, #8]
 190 0040 7B68     		ldr	r3, [r7, #4]
 191 0042 5B68     		ldr	r3, [r3, #4]
 192 0044 1344     		add	r3, r2, r3
 193 0046 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 194 0048 3B68     		ldr	r3, [r7, #0]
 195 004a 1A70     		strb	r2, [r3, #0]
  71:..//drivers/USB/serial_fifo.c **** 	fifo->tail = next;
 196              		.loc 1 71 0
 197 004c 7B68     		ldr	r3, [r7, #4]
 198 004e FA68     		ldr	r2, [r7, #12]
 199 0050 5A60     		str	r2, [r3, #4]
  72:..//drivers/USB/serial_fifo.c **** 
  73:..//drivers/USB/serial_fifo.c **** 	return TRUE;
 200              		.loc 1 73 0
 201 0052 4FF00103 		mov	r3, #1
 202              	.L9:
  74:..//drivers/USB/serial_fifo.c **** }
 203              		.loc 1 74 0
 204 0056 1846     		mov	r0, r3
 205 0058 07F11407 		add	r7, r7, #20
 206 005c BD46     		mov	sp, r7
 207 005e 80BC     		pop	{r7}
 208 0060 7047     		bx	lr
 209              		.cfi_endproc
 210              	.LFE2:
 212 0062 00BF     		.section	.text.fifo_avail,"ax",%progbits
 213              		.align	2
 214              		.global	fifo_avail
 215              		.thumb
 216              		.thumb_func
 218              	fifo_avail:
 219              	.LFB3:
  75:..//drivers/USB/serial_fifo.c **** 
  76:..//drivers/USB/serial_fifo.c **** 
  77:..//drivers/USB/serial_fifo.c **** int fifo_avail(fifo_t *fifo)
  78:..//drivers/USB/serial_fifo.c **** {
 220              		.loc 1 78 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 8
 223              		@ frame_needed = 1, uses_anonymous_args = 0
 224              		@ link register save eliminated.
 225 0000 80B4     		push	{r7}
 226              	.LCFI9:
 227              		.cfi_def_cfa_offset 4
 228 0002 83B0     		sub	sp, sp, #12
 229              	.LCFI10:
 230              		.cfi_def_cfa_offset 16
 231 0004 00AF     		add	r7, sp, #0
 232              		.cfi_offset 7, -4
 233              	.LCFI11:
 234              		.cfi_def_cfa_register 7
 235 0006 7860     		str	r0, [r7, #4]
  79:..//drivers/USB/serial_fifo.c **** 	return (VCOM_FIFO_SIZE + fifo->head - fifo->tail) % VCOM_FIFO_SIZE;
 236              		.loc 1 79 0
 237 0008 7B68     		ldr	r3, [r7, #4]
 238 000a 1B68     		ldr	r3, [r3, #0]
 239 000c 03F50072 		add	r2, r3, #512
 240 0010 7B68     		ldr	r3, [r7, #4]
 241 0012 5B68     		ldr	r3, [r3, #4]
 242 0014 C3EB0203 		rsb	r3, r3, r2
 243 0018 4FEAE372 		asr	r2, r3, #31
 244 001c 4FEAD252 		lsr	r2, r2, #23
 245 0020 1344     		add	r3, r3, r2
 246 0022 4FEAC353 		lsl	r3, r3, #23
 247 0026 4FEAD353 		lsr	r3, r3, #23
 248 002a C2EB0303 		rsb	r3, r2, r3
  80:..//drivers/USB/serial_fifo.c **** }
 249              		.loc 1 80 0
 250 002e 1846     		mov	r0, r3
 251 0030 07F10C07 		add	r7, r7, #12
 252 0034 BD46     		mov	sp, r7
 253 0036 80BC     		pop	{r7}
 254 0038 7047     		bx	lr
 255              		.cfi_endproc
 256              	.LFE3:
 258 003a 00BF     		.section	.text.fifo_free,"ax",%progbits
 259              		.align	2
 260              		.global	fifo_free
 261              		.thumb
 262              		.thumb_func
 264              	fifo_free:
 265              	.LFB4:
  81:..//drivers/USB/serial_fifo.c **** 
  82:..//drivers/USB/serial_fifo.c **** 
  83:..//drivers/USB/serial_fifo.c **** int fifo_free(fifo_t *fifo)
  84:..//drivers/USB/serial_fifo.c **** {
 266              		.loc 1 84 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 8
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270 0000 80B5     		push	{r7, lr}
 271              	.LCFI12:
 272              		.cfi_def_cfa_offset 8
 273 0002 82B0     		sub	sp, sp, #8
 274              	.LCFI13:
 275              		.cfi_def_cfa_offset 16
 276 0004 00AF     		add	r7, sp, #0
 277              		.cfi_offset 14, -4
 278              		.cfi_offset 7, -8
 279              	.LCFI14:
 280              		.cfi_def_cfa_register 7
 281 0006 7860     		str	r0, [r7, #4]
  85:..//drivers/USB/serial_fifo.c **** 	return (VCOM_FIFO_SIZE - 1 - fifo_avail(fifo));
 282              		.loc 1 85 0
 283 0008 7868     		ldr	r0, [r7, #4]
 284 000a 40F20003 		movw	r3, #:lower16:fifo_avail
 285 000e C0F20003 		movt	r3, #:upper16:fifo_avail
 286 0012 9847     		blx	r3
 287 0014 0346     		mov	r3, r0
 288 0016 C3F5FE73 		rsb	r3, r3, #508
 289 001a 03F10303 		add	r3, r3, #3
  86:..//drivers/USB/serial_fifo.c **** }
 290              		.loc 1 86 0
 291 001e 1846     		mov	r0, r3
 292 0020 07F10807 		add	r7, r7, #8
 293 0024 BD46     		mov	sp, r7
 294 0026 80BD     		pop	{r7, pc}
 295              		.cfi_endproc
 296              	.LFE4:
 298              		.text
 299              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 serial_fifo.c
C:\Users\hdhed\AppData\Local\Temp\cc0zwbQx.s:24     .text.fifo_init:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\cc0zwbQx.s:29     .text.fifo_init:00000000 fifo_init
C:\Users\hdhed\AppData\Local\Temp\cc0zwbQx.s:70     .text.fifo_put:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\cc0zwbQx.s:75     .text.fifo_put:00000000 fifo_put
C:\Users\hdhed\AppData\Local\Temp\cc0zwbQx.s:141    .text.fifo_get:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\cc0zwbQx.s:146    .text.fifo_get:00000000 fifo_get
C:\Users\hdhed\AppData\Local\Temp\cc0zwbQx.s:213    .text.fifo_avail:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\cc0zwbQx.s:218    .text.fifo_avail:00000000 fifo_avail
C:\Users\hdhed\AppData\Local\Temp\cc0zwbQx.s:259    .text.fifo_free:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\cc0zwbQx.s:264    .text.fifo_free:00000000 fifo_free
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
