   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"timer.c"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  24              		.align	2
  25              		.thumb
  26              		.thumb_func
  28              	NVIC_EnableIRQ:
  29              	.LFB14:
  30              		.file 1 "..//common/Core/CM3/core_cm3.h"
   1:..//common/Core/CM3/core_cm3.h **** /**************************************************************************//**
   2:..//common/Core/CM3/core_cm3.h ****  * @file     core_cm3.h
   3:..//common/Core/CM3/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:..//common/Core/CM3/core_cm3.h ****  * @version  V1.30
   5:..//common/Core/CM3/core_cm3.h ****  * @date     30. October 2009
   6:..//common/Core/CM3/core_cm3.h ****  *
   7:..//common/Core/CM3/core_cm3.h ****  * @note
   8:..//common/Core/CM3/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:..//common/Core/CM3/core_cm3.h ****  *
  10:..//common/Core/CM3/core_cm3.h ****  * @par
  11:..//common/Core/CM3/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:..//common/Core/CM3/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:..//common/Core/CM3/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:..//common/Core/CM3/core_cm3.h ****  *
  15:..//common/Core/CM3/core_cm3.h ****  * @par
  16:..//common/Core/CM3/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:..//common/Core/CM3/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:..//common/Core/CM3/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:..//common/Core/CM3/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:..//common/Core/CM3/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:..//common/Core/CM3/core_cm3.h ****  *
  22:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
  23:..//common/Core/CM3/core_cm3.h **** 
  24:..//common/Core/CM3/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:..//common/Core/CM3/core_cm3.h **** #define __CM3_CORE_H__
  26:..//common/Core/CM3/core_cm3.h **** 
  27:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:..//common/Core/CM3/core_cm3.h ****  *
  29:..//common/Core/CM3/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:..//common/Core/CM3/core_cm3.h ****  *   - Error 10: \n
  31:..//common/Core/CM3/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:..//common/Core/CM3/core_cm3.h ****  *     Error 10: Expecting ';'
  33:..//common/Core/CM3/core_cm3.h ****  * .
  34:..//common/Core/CM3/core_cm3.h ****  *   - Error 530: \n
  35:..//common/Core/CM3/core_cm3.h ****  *     return(__regBasePri); \n
  36:..//common/Core/CM3/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:..//common/Core/CM3/core_cm3.h ****  * . 
  38:..//common/Core/CM3/core_cm3.h ****  *   - Error 550: \n
  39:..//common/Core/CM3/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:..//common/Core/CM3/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:..//common/Core/CM3/core_cm3.h ****  * .
  42:..//common/Core/CM3/core_cm3.h ****  *   - Error 754: \n
  43:..//common/Core/CM3/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:..//common/Core/CM3/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:..//common/Core/CM3/core_cm3.h ****  * .
  46:..//common/Core/CM3/core_cm3.h ****  *   - Error 750: \n
  47:..//common/Core/CM3/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:..//common/Core/CM3/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:..//common/Core/CM3/core_cm3.h ****  * .
  50:..//common/Core/CM3/core_cm3.h ****  *   - Error 528: \n
  51:..//common/Core/CM3/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:..//common/Core/CM3/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:..//common/Core/CM3/core_cm3.h ****  * .
  54:..//common/Core/CM3/core_cm3.h ****  *   - Error 751: \n
  55:..//common/Core/CM3/core_cm3.h ****  *     } InterruptType_Type; \n
  56:..//common/Core/CM3/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:..//common/Core/CM3/core_cm3.h ****  * .
  58:..//common/Core/CM3/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:..//common/Core/CM3/core_cm3.h ****  *
  60:..//common/Core/CM3/core_cm3.h ****  */
  61:..//common/Core/CM3/core_cm3.h **** 
  62:..//common/Core/CM3/core_cm3.h **** /*lint -save */
  63:..//common/Core/CM3/core_cm3.h **** /*lint -e10  */
  64:..//common/Core/CM3/core_cm3.h **** /*lint -e530 */
  65:..//common/Core/CM3/core_cm3.h **** /*lint -e550 */
  66:..//common/Core/CM3/core_cm3.h **** /*lint -e754 */
  67:..//common/Core/CM3/core_cm3.h **** /*lint -e750 */
  68:..//common/Core/CM3/core_cm3.h **** /*lint -e528 */
  69:..//common/Core/CM3/core_cm3.h **** /*lint -e751 */
  70:..//common/Core/CM3/core_cm3.h **** 
  71:..//common/Core/CM3/core_cm3.h **** 
  72:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:..//common/Core/CM3/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:..//common/Core/CM3/core_cm3.h ****     - CMSIS version number
  75:..//common/Core/CM3/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:..//common/Core/CM3/core_cm3.h ****     - Cortex-M core peripheral base address
  77:..//common/Core/CM3/core_cm3.h ****   @{
  78:..//common/Core/CM3/core_cm3.h ****  */
  79:..//common/Core/CM3/core_cm3.h **** 
  80:..//common/Core/CM3/core_cm3.h **** #ifdef __cplusplus
  81:..//common/Core/CM3/core_cm3.h ****  extern "C" {
  82:..//common/Core/CM3/core_cm3.h **** #endif 
  83:..//common/Core/CM3/core_cm3.h **** 
  84:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:..//common/Core/CM3/core_cm3.h **** 
  88:..//common/Core/CM3/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:..//common/Core/CM3/core_cm3.h **** 
  90:..//common/Core/CM3/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:..//common/Core/CM3/core_cm3.h **** 
  92:..//common/Core/CM3/core_cm3.h **** #if defined (__ICCARM__)
  93:..//common/Core/CM3/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:..//common/Core/CM3/core_cm3.h **** #endif
  95:..//common/Core/CM3/core_cm3.h **** 
  96:..//common/Core/CM3/core_cm3.h **** 
  97:..//common/Core/CM3/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:..//common/Core/CM3/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:..//common/Core/CM3/core_cm3.h **** #endif
 100:..//common/Core/CM3/core_cm3.h **** 
 101:..//common/Core/CM3/core_cm3.h **** 
 102:..//common/Core/CM3/core_cm3.h **** 
 103:..//common/Core/CM3/core_cm3.h **** 
 104:..//common/Core/CM3/core_cm3.h **** /**
 105:..//common/Core/CM3/core_cm3.h ****  * IO definitions
 106:..//common/Core/CM3/core_cm3.h ****  *
 107:..//common/Core/CM3/core_cm3.h ****  * define access restrictions to peripheral registers
 108:..//common/Core/CM3/core_cm3.h ****  */
 109:..//common/Core/CM3/core_cm3.h **** 
 110:..//common/Core/CM3/core_cm3.h **** #ifdef __cplusplus
 111:..//common/Core/CM3/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:..//common/Core/CM3/core_cm3.h **** #else
 113:..//common/Core/CM3/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:..//common/Core/CM3/core_cm3.h **** #endif
 115:..//common/Core/CM3/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:..//common/Core/CM3/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:..//common/Core/CM3/core_cm3.h **** 
 118:..//common/Core/CM3/core_cm3.h **** 
 119:..//common/Core/CM3/core_cm3.h **** 
 120:..//common/Core/CM3/core_cm3.h **** /*******************************************************************************
 121:..//common/Core/CM3/core_cm3.h ****  *                 Register Abstraction
 122:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
 123:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:..//common/Core/CM3/core_cm3.h ****  @{
 125:..//common/Core/CM3/core_cm3.h **** */
 126:..//common/Core/CM3/core_cm3.h **** 
 127:..//common/Core/CM3/core_cm3.h **** 
 128:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:..//common/Core/CM3/core_cm3.h ****   @{
 131:..//common/Core/CM3/core_cm3.h ****  */
 132:..//common/Core/CM3/core_cm3.h **** typedef struct
 133:..//common/Core/CM3/core_cm3.h **** {
 134:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:..//common/Core/CM3/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:..//common/Core/CM3/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:..//common/Core/CM3/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:..//common/Core/CM3/core_cm3.h **** }  NVIC_Type;                                               
 148:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:..//common/Core/CM3/core_cm3.h **** 
 150:..//common/Core/CM3/core_cm3.h **** 
 151:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:..//common/Core/CM3/core_cm3.h ****   @{
 154:..//common/Core/CM3/core_cm3.h ****  */
 155:..//common/Core/CM3/core_cm3.h **** typedef struct
 156:..//common/Core/CM3/core_cm3.h **** {
 157:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:..//common/Core/CM3/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:..//common/Core/CM3/core_cm3.h **** } SCB_Type;                                                
 177:..//common/Core/CM3/core_cm3.h **** 
 178:..//common/Core/CM3/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:..//common/Core/CM3/core_cm3.h **** 
 182:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:..//common/Core/CM3/core_cm3.h **** 
 185:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:..//common/Core/CM3/core_cm3.h **** 
 188:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:..//common/Core/CM3/core_cm3.h **** 
 191:..//common/Core/CM3/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:..//common/Core/CM3/core_cm3.h **** 
 195:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:..//common/Core/CM3/core_cm3.h **** 
 198:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:..//common/Core/CM3/core_cm3.h **** 
 201:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:..//common/Core/CM3/core_cm3.h **** 
 204:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:..//common/Core/CM3/core_cm3.h **** 
 207:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:..//common/Core/CM3/core_cm3.h **** 
 210:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:..//common/Core/CM3/core_cm3.h **** 
 213:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:..//common/Core/CM3/core_cm3.h **** 
 216:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:..//common/Core/CM3/core_cm3.h **** 
 219:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:..//common/Core/CM3/core_cm3.h **** 
 222:..//common/Core/CM3/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:..//common/Core/CM3/core_cm3.h **** 
 226:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:..//common/Core/CM3/core_cm3.h **** 
 229:..//common/Core/CM3/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:..//common/Core/CM3/core_cm3.h **** 
 233:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:..//common/Core/CM3/core_cm3.h **** 
 236:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:..//common/Core/CM3/core_cm3.h **** 
 239:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:..//common/Core/CM3/core_cm3.h **** 
 242:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:..//common/Core/CM3/core_cm3.h **** 
 245:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:..//common/Core/CM3/core_cm3.h **** 
 248:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:..//common/Core/CM3/core_cm3.h **** 
 251:..//common/Core/CM3/core_cm3.h **** /* SCB System Control Register Definitions */
 252:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:..//common/Core/CM3/core_cm3.h **** 
 255:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:..//common/Core/CM3/core_cm3.h **** 
 258:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:..//common/Core/CM3/core_cm3.h **** 
 261:..//common/Core/CM3/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:..//common/Core/CM3/core_cm3.h **** 
 265:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:..//common/Core/CM3/core_cm3.h **** 
 268:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:..//common/Core/CM3/core_cm3.h **** 
 271:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:..//common/Core/CM3/core_cm3.h **** 
 274:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:..//common/Core/CM3/core_cm3.h **** 
 277:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:..//common/Core/CM3/core_cm3.h **** 
 280:..//common/Core/CM3/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:..//common/Core/CM3/core_cm3.h **** 
 284:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:..//common/Core/CM3/core_cm3.h **** 
 287:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:..//common/Core/CM3/core_cm3.h **** 
 290:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:..//common/Core/CM3/core_cm3.h **** 
 293:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:..//common/Core/CM3/core_cm3.h **** 
 296:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:..//common/Core/CM3/core_cm3.h **** 
 299:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:..//common/Core/CM3/core_cm3.h **** 
 302:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:..//common/Core/CM3/core_cm3.h **** 
 305:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:..//common/Core/CM3/core_cm3.h **** 
 308:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:..//common/Core/CM3/core_cm3.h **** 
 311:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:..//common/Core/CM3/core_cm3.h ****                                      
 314:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:..//common/Core/CM3/core_cm3.h **** 
 317:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:..//common/Core/CM3/core_cm3.h **** 
 320:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:..//common/Core/CM3/core_cm3.h **** 
 323:..//common/Core/CM3/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:..//common/Core/CM3/core_cm3.h **** 
 327:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:..//common/Core/CM3/core_cm3.h **** 
 330:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:..//common/Core/CM3/core_cm3.h **** 
 333:..//common/Core/CM3/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:..//common/Core/CM3/core_cm3.h **** 
 337:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:..//common/Core/CM3/core_cm3.h **** 
 340:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:..//common/Core/CM3/core_cm3.h **** 
 343:..//common/Core/CM3/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:..//common/Core/CM3/core_cm3.h **** 
 347:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:..//common/Core/CM3/core_cm3.h **** 
 350:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:..//common/Core/CM3/core_cm3.h **** 
 353:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:..//common/Core/CM3/core_cm3.h **** 
 356:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:..//common/Core/CM3/core_cm3.h **** 
 360:..//common/Core/CM3/core_cm3.h **** 
 361:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for SysTick
 363:..//common/Core/CM3/core_cm3.h ****   @{
 364:..//common/Core/CM3/core_cm3.h ****  */
 365:..//common/Core/CM3/core_cm3.h **** typedef struct
 366:..//common/Core/CM3/core_cm3.h **** {
 367:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:..//common/Core/CM3/core_cm3.h **** } SysTick_Type;
 372:..//common/Core/CM3/core_cm3.h **** 
 373:..//common/Core/CM3/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:..//common/Core/CM3/core_cm3.h **** 
 377:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:..//common/Core/CM3/core_cm3.h **** 
 380:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:..//common/Core/CM3/core_cm3.h **** 
 383:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:..//common/Core/CM3/core_cm3.h **** 
 386:..//common/Core/CM3/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:..//common/Core/CM3/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:..//common/Core/CM3/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:..//common/Core/CM3/core_cm3.h **** 
 390:..//common/Core/CM3/core_cm3.h **** /* SysTick Current Register Definitions */
 391:..//common/Core/CM3/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:..//common/Core/CM3/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:..//common/Core/CM3/core_cm3.h **** 
 394:..//common/Core/CM3/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:..//common/Core/CM3/core_cm3.h **** 
 398:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:..//common/Core/CM3/core_cm3.h **** 
 401:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:..//common/Core/CM3/core_cm3.h **** 
 405:..//common/Core/CM3/core_cm3.h **** 
 406:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:..//common/Core/CM3/core_cm3.h ****   @{
 409:..//common/Core/CM3/core_cm3.h ****  */
 410:..//common/Core/CM3/core_cm3.h **** typedef struct
 411:..//common/Core/CM3/core_cm3.h **** {
 412:..//common/Core/CM3/core_cm3.h ****   __O  union  
 413:..//common/Core/CM3/core_cm3.h ****   {
 414:..//common/Core/CM3/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:..//common/Core/CM3/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:..//common/Core/CM3/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:..//common/Core/CM3/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:..//common/Core/CM3/core_cm3.h **** } ITM_Type;                                                
 445:..//common/Core/CM3/core_cm3.h **** 
 446:..//common/Core/CM3/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:..//common/Core/CM3/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:..//common/Core/CM3/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:..//common/Core/CM3/core_cm3.h **** 
 450:..//common/Core/CM3/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:..//common/Core/CM3/core_cm3.h **** 
 454:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:..//common/Core/CM3/core_cm3.h **** 
 457:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:..//common/Core/CM3/core_cm3.h **** 
 460:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:..//common/Core/CM3/core_cm3.h **** 
 463:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:..//common/Core/CM3/core_cm3.h **** 
 466:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:..//common/Core/CM3/core_cm3.h **** 
 469:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:..//common/Core/CM3/core_cm3.h **** 
 472:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:..//common/Core/CM3/core_cm3.h **** 
 475:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:..//common/Core/CM3/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:..//common/Core/CM3/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:..//common/Core/CM3/core_cm3.h **** 
 479:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:..//common/Core/CM3/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:..//common/Core/CM3/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:..//common/Core/CM3/core_cm3.h **** 
 483:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:..//common/Core/CM3/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:..//common/Core/CM3/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:..//common/Core/CM3/core_cm3.h **** 
 487:..//common/Core/CM3/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:..//common/Core/CM3/core_cm3.h **** 
 491:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:..//common/Core/CM3/core_cm3.h **** 
 494:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:..//common/Core/CM3/core_cm3.h **** 
 498:..//common/Core/CM3/core_cm3.h **** 
 499:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:..//common/Core/CM3/core_cm3.h ****   @{
 502:..//common/Core/CM3/core_cm3.h ****  */
 503:..//common/Core/CM3/core_cm3.h **** typedef struct
 504:..//common/Core/CM3/core_cm3.h **** {
 505:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0;
 506:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:..//common/Core/CM3/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:..//common/Core/CM3/core_cm3.h **** #else
 510:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED1;
 511:..//common/Core/CM3/core_cm3.h **** #endif
 512:..//common/Core/CM3/core_cm3.h **** } InterruptType_Type;
 513:..//common/Core/CM3/core_cm3.h **** 
 514:..//common/Core/CM3/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:..//common/Core/CM3/core_cm3.h **** 
 518:..//common/Core/CM3/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:..//common/Core/CM3/core_cm3.h **** 
 522:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:..//common/Core/CM3/core_cm3.h **** 
 525:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:..//common/Core/CM3/core_cm3.h **** 
 529:..//common/Core/CM3/core_cm3.h **** 
 530:..//common/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:..//common/Core/CM3/core_cm3.h ****   @{
 534:..//common/Core/CM3/core_cm3.h ****  */
 535:..//common/Core/CM3/core_cm3.h **** typedef struct
 536:..//common/Core/CM3/core_cm3.h **** {
 537:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:..//common/Core/CM3/core_cm3.h **** } MPU_Type;                                                
 549:..//common/Core/CM3/core_cm3.h **** 
 550:..//common/Core/CM3/core_cm3.h **** /* MPU Type Register */
 551:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:..//common/Core/CM3/core_cm3.h **** 
 554:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:..//common/Core/CM3/core_cm3.h **** 
 557:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:..//common/Core/CM3/core_cm3.h **** 
 560:..//common/Core/CM3/core_cm3.h **** /* MPU Control Register */
 561:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:..//common/Core/CM3/core_cm3.h **** 
 564:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:..//common/Core/CM3/core_cm3.h **** 
 567:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:..//common/Core/CM3/core_cm3.h **** 
 570:..//common/Core/CM3/core_cm3.h **** /* MPU Region Number Register */
 571:..//common/Core/CM3/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:..//common/Core/CM3/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:..//common/Core/CM3/core_cm3.h **** 
 574:..//common/Core/CM3/core_cm3.h **** /* MPU Region Base Address Register */
 575:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:..//common/Core/CM3/core_cm3.h **** 
 578:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:..//common/Core/CM3/core_cm3.h **** 
 581:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:..//common/Core/CM3/core_cm3.h **** 
 584:..//common/Core/CM3/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:..//common/Core/CM3/core_cm3.h **** 
 588:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:..//common/Core/CM3/core_cm3.h **** 
 591:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:..//common/Core/CM3/core_cm3.h **** 
 594:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:..//common/Core/CM3/core_cm3.h **** 
 597:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:..//common/Core/CM3/core_cm3.h **** 
 600:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:..//common/Core/CM3/core_cm3.h **** 
 603:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:..//common/Core/CM3/core_cm3.h **** 
 606:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:..//common/Core/CM3/core_cm3.h **** 
 609:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:..//common/Core/CM3/core_cm3.h **** 
 612:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:..//common/Core/CM3/core_cm3.h **** #endif
 614:..//common/Core/CM3/core_cm3.h **** 
 615:..//common/Core/CM3/core_cm3.h **** 
 616:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:..//common/Core/CM3/core_cm3.h ****   @{
 619:..//common/Core/CM3/core_cm3.h ****  */
 620:..//common/Core/CM3/core_cm3.h **** typedef struct
 621:..//common/Core/CM3/core_cm3.h **** {
 622:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:..//common/Core/CM3/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:..//common/Core/CM3/core_cm3.h **** } CoreDebug_Type;
 627:..//common/Core/CM3/core_cm3.h **** 
 628:..//common/Core/CM3/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:..//common/Core/CM3/core_cm3.h **** 
 632:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:..//common/Core/CM3/core_cm3.h **** 
 635:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:..//common/Core/CM3/core_cm3.h **** 
 638:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:..//common/Core/CM3/core_cm3.h **** 
 641:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:..//common/Core/CM3/core_cm3.h **** 
 644:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:..//common/Core/CM3/core_cm3.h **** 
 647:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:..//common/Core/CM3/core_cm3.h **** 
 650:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:..//common/Core/CM3/core_cm3.h **** 
 653:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:..//common/Core/CM3/core_cm3.h **** 
 656:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:..//common/Core/CM3/core_cm3.h **** 
 659:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:..//common/Core/CM3/core_cm3.h **** 
 662:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:..//common/Core/CM3/core_cm3.h **** 
 665:..//common/Core/CM3/core_cm3.h **** /* Debug Core Register Selector Register */
 666:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:..//common/Core/CM3/core_cm3.h **** 
 669:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:..//common/Core/CM3/core_cm3.h **** 
 672:..//common/Core/CM3/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:..//common/Core/CM3/core_cm3.h **** 
 676:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:..//common/Core/CM3/core_cm3.h **** 
 679:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:..//common/Core/CM3/core_cm3.h **** 
 682:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:..//common/Core/CM3/core_cm3.h **** 
 685:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:..//common/Core/CM3/core_cm3.h **** 
 688:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:..//common/Core/CM3/core_cm3.h **** 
 691:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:..//common/Core/CM3/core_cm3.h **** 
 694:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:..//common/Core/CM3/core_cm3.h **** 
 697:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:..//common/Core/CM3/core_cm3.h **** 
 700:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:..//common/Core/CM3/core_cm3.h **** 
 703:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:..//common/Core/CM3/core_cm3.h **** 
 706:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:..//common/Core/CM3/core_cm3.h **** 
 709:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:..//common/Core/CM3/core_cm3.h **** 
 713:..//common/Core/CM3/core_cm3.h **** 
 714:..//common/Core/CM3/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:..//common/Core/CM3/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:..//common/Core/CM3/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:..//common/Core/CM3/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:..//common/Core/CM3/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:..//common/Core/CM3/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:..//common/Core/CM3/core_cm3.h **** 
 722:..//common/Core/CM3/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:..//common/Core/CM3/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:..//common/Core/CM3/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:..//common/Core/CM3/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:..//common/Core/CM3/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:..//common/Core/CM3/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:..//common/Core/CM3/core_cm3.h **** 
 729:..//common/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:..//common/Core/CM3/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:..//common/Core/CM3/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:..//common/Core/CM3/core_cm3.h **** #endif
 733:..//common/Core/CM3/core_cm3.h **** 
 734:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:..//common/Core/CM3/core_cm3.h **** 
 736:..//common/Core/CM3/core_cm3.h **** 
 737:..//common/Core/CM3/core_cm3.h **** /*******************************************************************************
 738:..//common/Core/CM3/core_cm3.h ****  *                Hardware Abstraction Layer
 739:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
 740:..//common/Core/CM3/core_cm3.h **** 
 741:..//common/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   )
 742:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:..//common/Core/CM3/core_cm3.h **** 
 745:..//common/Core/CM3/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:..//common/Core/CM3/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:..//common/Core/CM3/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:..//common/Core/CM3/core_cm3.h **** 
 749:..//common/Core/CM3/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:..//common/Core/CM3/core_cm3.h **** 
 753:..//common/Core/CM3/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:..//common/Core/CM3/core_cm3.h **** 
 757:..//common/Core/CM3/core_cm3.h **** #endif
 758:..//common/Core/CM3/core_cm3.h **** 
 759:..//common/Core/CM3/core_cm3.h **** 
 760:..//common/Core/CM3/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:..//common/Core/CM3/core_cm3.h **** 
 762:..//common/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:..//common/Core/CM3/core_cm3.h **** /* ARM armcc specific functions */
 764:..//common/Core/CM3/core_cm3.h **** 
 765:..//common/Core/CM3/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:..//common/Core/CM3/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:..//common/Core/CM3/core_cm3.h **** 
 768:..//common/Core/CM3/core_cm3.h **** #define __NOP                             __nop
 769:..//common/Core/CM3/core_cm3.h **** #define __WFI                             __wfi
 770:..//common/Core/CM3/core_cm3.h **** #define __WFE                             __wfe
 771:..//common/Core/CM3/core_cm3.h **** #define __SEV                             __sev
 772:..//common/Core/CM3/core_cm3.h **** #define __ISB()                           __isb(0)
 773:..//common/Core/CM3/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:..//common/Core/CM3/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:..//common/Core/CM3/core_cm3.h **** #define __REV                             __rev
 776:..//common/Core/CM3/core_cm3.h **** #define __RBIT                            __rbit
 777:..//common/Core/CM3/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:..//common/Core/CM3/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:..//common/Core/CM3/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:..//common/Core/CM3/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:..//common/Core/CM3/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:..//common/Core/CM3/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:..//common/Core/CM3/core_cm3.h **** 
 784:..//common/Core/CM3/core_cm3.h **** 
 785:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:..//common/Core/CM3/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:..//common/Core/CM3/core_cm3.h **** 
 790:..//common/Core/CM3/core_cm3.h **** 
 791:..//common/Core/CM3/core_cm3.h **** /**
 792:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:..//common/Core/CM3/core_cm3.h ****  *
 794:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
 795:..//common/Core/CM3/core_cm3.h ****  *
 796:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 797:..//common/Core/CM3/core_cm3.h ****  */
 798:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:..//common/Core/CM3/core_cm3.h **** 
 800:..//common/Core/CM3/core_cm3.h **** /**
 801:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:..//common/Core/CM3/core_cm3.h ****  *
 803:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:..//common/Core/CM3/core_cm3.h ****  *
 805:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:..//common/Core/CM3/core_cm3.h ****  */
 808:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:..//common/Core/CM3/core_cm3.h **** 
 810:..//common/Core/CM3/core_cm3.h **** /**
 811:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:..//common/Core/CM3/core_cm3.h ****  *
 813:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
 814:..//common/Core/CM3/core_cm3.h ****  *
 815:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
 817:..//common/Core/CM3/core_cm3.h ****  */
 818:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:..//common/Core/CM3/core_cm3.h **** 
 820:..//common/Core/CM3/core_cm3.h **** /**
 821:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:..//common/Core/CM3/core_cm3.h ****  *
 823:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:..//common/Core/CM3/core_cm3.h ****  *
 825:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:..//common/Core/CM3/core_cm3.h ****  */
 828:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:..//common/Core/CM3/core_cm3.h **** 
 830:..//common/Core/CM3/core_cm3.h **** /**
 831:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:..//common/Core/CM3/core_cm3.h ****  *
 833:..//common/Core/CM3/core_cm3.h ****  * @param   value  value to reverse
 834:..//common/Core/CM3/core_cm3.h ****  * @return         reversed value
 835:..//common/Core/CM3/core_cm3.h ****  *
 836:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:..//common/Core/CM3/core_cm3.h ****  */
 838:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:..//common/Core/CM3/core_cm3.h **** 
 840:..//common/Core/CM3/core_cm3.h **** /**
 841:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:..//common/Core/CM3/core_cm3.h ****  *
 843:..//common/Core/CM3/core_cm3.h ****  * @param   value  value to reverse
 844:..//common/Core/CM3/core_cm3.h ****  * @return         reversed value
 845:..//common/Core/CM3/core_cm3.h ****  *
 846:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:..//common/Core/CM3/core_cm3.h ****  */
 848:..//common/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:..//common/Core/CM3/core_cm3.h **** 
 850:..//common/Core/CM3/core_cm3.h **** 
 851:..//common/Core/CM3/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:..//common/Core/CM3/core_cm3.h **** 
 853:..//common/Core/CM3/core_cm3.h **** /**
 854:..//common/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:..//common/Core/CM3/core_cm3.h ****  *
 856:..//common/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:..//common/Core/CM3/core_cm3.h ****  */
 858:..//common/Core/CM3/core_cm3.h **** extern void __CLREX(void);
 859:..//common/Core/CM3/core_cm3.h **** 
 860:..//common/Core/CM3/core_cm3.h **** /**
 861:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 862:..//common/Core/CM3/core_cm3.h ****  *
 863:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
 864:..//common/Core/CM3/core_cm3.h ****  *
 865:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 866:..//common/Core/CM3/core_cm3.h ****  */
 867:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:..//common/Core/CM3/core_cm3.h **** 
 869:..//common/Core/CM3/core_cm3.h **** /**
 870:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 871:..//common/Core/CM3/core_cm3.h ****  *
 872:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
 873:..//common/Core/CM3/core_cm3.h ****  *
 874:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
 875:..//common/Core/CM3/core_cm3.h ****  */
 876:..//common/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:..//common/Core/CM3/core_cm3.h **** 
 878:..//common/Core/CM3/core_cm3.h **** /**
 879:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:..//common/Core/CM3/core_cm3.h ****  *
 881:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
 882:..//common/Core/CM3/core_cm3.h ****  *
 883:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:..//common/Core/CM3/core_cm3.h ****  */
 885:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:..//common/Core/CM3/core_cm3.h **** 
 887:..//common/Core/CM3/core_cm3.h **** /**
 888:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:..//common/Core/CM3/core_cm3.h ****  *
 890:..//common/Core/CM3/core_cm3.h ****  * @param   priMask  PriMask
 891:..//common/Core/CM3/core_cm3.h ****  *
 892:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:..//common/Core/CM3/core_cm3.h ****  */
 894:..//common/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:..//common/Core/CM3/core_cm3.h **** 
 896:..//common/Core/CM3/core_cm3.h **** /**
 897:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:..//common/Core/CM3/core_cm3.h ****  *
 899:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
 900:..//common/Core/CM3/core_cm3.h ****  *
 901:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 902:..//common/Core/CM3/core_cm3.h ****  */
 903:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:..//common/Core/CM3/core_cm3.h **** 
 905:..//common/Core/CM3/core_cm3.h **** /**
 906:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:..//common/Core/CM3/core_cm3.h ****  *
 908:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask faultMask value
 909:..//common/Core/CM3/core_cm3.h ****  *
 910:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
 911:..//common/Core/CM3/core_cm3.h ****  */
 912:..//common/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:..//common/Core/CM3/core_cm3.h **** 
 914:..//common/Core/CM3/core_cm3.h **** /**
 915:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 916:..//common/Core/CM3/core_cm3.h ****  * 
 917:..//common/Core/CM3/core_cm3.h ****  * @return Control value
 918:..//common/Core/CM3/core_cm3.h ****  *
 919:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
 920:..//common/Core/CM3/core_cm3.h ****  */
 921:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:..//common/Core/CM3/core_cm3.h **** 
 923:..//common/Core/CM3/core_cm3.h **** /**
 924:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 925:..//common/Core/CM3/core_cm3.h ****  *
 926:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
 927:..//common/Core/CM3/core_cm3.h ****  *
 928:..//common/Core/CM3/core_cm3.h ****  * Set the control register
 929:..//common/Core/CM3/core_cm3.h ****  */
 930:..//common/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:..//common/Core/CM3/core_cm3.h **** 
 932:..//common/Core/CM3/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:..//common/Core/CM3/core_cm3.h **** 
 934:..//common/Core/CM3/core_cm3.h **** /**
 935:..//common/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:..//common/Core/CM3/core_cm3.h ****  *
 937:..//common/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:..//common/Core/CM3/core_cm3.h ****  */
 939:..//common/Core/CM3/core_cm3.h **** #define __CLREX                           __clrex
 940:..//common/Core/CM3/core_cm3.h **** 
 941:..//common/Core/CM3/core_cm3.h **** /**
 942:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 943:..//common/Core/CM3/core_cm3.h ****  *
 944:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
 945:..//common/Core/CM3/core_cm3.h ****  *
 946:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 947:..//common/Core/CM3/core_cm3.h ****  */
 948:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:..//common/Core/CM3/core_cm3.h **** {
 950:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:..//common/Core/CM3/core_cm3.h ****   return(__regBasePri);
 952:..//common/Core/CM3/core_cm3.h **** }
 953:..//common/Core/CM3/core_cm3.h **** 
 954:..//common/Core/CM3/core_cm3.h **** /**
 955:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 956:..//common/Core/CM3/core_cm3.h ****  *
 957:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
 958:..//common/Core/CM3/core_cm3.h ****  *
 959:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
 960:..//common/Core/CM3/core_cm3.h ****  */
 961:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:..//common/Core/CM3/core_cm3.h **** {
 963:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:..//common/Core/CM3/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:..//common/Core/CM3/core_cm3.h **** }
 966:..//common/Core/CM3/core_cm3.h **** 
 967:..//common/Core/CM3/core_cm3.h **** /**
 968:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:..//common/Core/CM3/core_cm3.h ****  *
 970:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
 971:..//common/Core/CM3/core_cm3.h ****  *
 972:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:..//common/Core/CM3/core_cm3.h ****  */
 974:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:..//common/Core/CM3/core_cm3.h **** {
 976:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:..//common/Core/CM3/core_cm3.h ****   return(__regPriMask);
 978:..//common/Core/CM3/core_cm3.h **** }
 979:..//common/Core/CM3/core_cm3.h **** 
 980:..//common/Core/CM3/core_cm3.h **** /**
 981:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:..//common/Core/CM3/core_cm3.h ****  *
 983:..//common/Core/CM3/core_cm3.h ****  * @param  priMask  PriMask
 984:..//common/Core/CM3/core_cm3.h ****  *
 985:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:..//common/Core/CM3/core_cm3.h ****  */
 987:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:..//common/Core/CM3/core_cm3.h **** {
 989:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:..//common/Core/CM3/core_cm3.h ****   __regPriMask = (priMask);
 991:..//common/Core/CM3/core_cm3.h **** }
 992:..//common/Core/CM3/core_cm3.h **** 
 993:..//common/Core/CM3/core_cm3.h **** /**
 994:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:..//common/Core/CM3/core_cm3.h ****  *
 996:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
 997:..//common/Core/CM3/core_cm3.h ****  *
 998:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 999:..//common/Core/CM3/core_cm3.h ****  */
1000:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:..//common/Core/CM3/core_cm3.h **** {
1002:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:..//common/Core/CM3/core_cm3.h ****   return(__regFaultMask);
1004:..//common/Core/CM3/core_cm3.h **** }
1005:..//common/Core/CM3/core_cm3.h **** 
1006:..//common/Core/CM3/core_cm3.h **** /**
1007:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:..//common/Core/CM3/core_cm3.h ****  *
1009:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask  faultMask value
1010:..//common/Core/CM3/core_cm3.h ****  *
1011:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
1012:..//common/Core/CM3/core_cm3.h ****  */
1013:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:..//common/Core/CM3/core_cm3.h **** {
1015:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:..//common/Core/CM3/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:..//common/Core/CM3/core_cm3.h **** }
1018:..//common/Core/CM3/core_cm3.h **** 
1019:..//common/Core/CM3/core_cm3.h **** /**
1020:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
1021:..//common/Core/CM3/core_cm3.h ****  * 
1022:..//common/Core/CM3/core_cm3.h ****  * @return Control value
1023:..//common/Core/CM3/core_cm3.h ****  *
1024:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
1025:..//common/Core/CM3/core_cm3.h ****  */
1026:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:..//common/Core/CM3/core_cm3.h **** {
1028:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:..//common/Core/CM3/core_cm3.h ****   return(__regControl);
1030:..//common/Core/CM3/core_cm3.h **** }
1031:..//common/Core/CM3/core_cm3.h **** 
1032:..//common/Core/CM3/core_cm3.h **** /**
1033:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
1034:..//common/Core/CM3/core_cm3.h ****  *
1035:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
1036:..//common/Core/CM3/core_cm3.h ****  *
1037:..//common/Core/CM3/core_cm3.h ****  * Set the control register
1038:..//common/Core/CM3/core_cm3.h ****  */
1039:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:..//common/Core/CM3/core_cm3.h **** {
1041:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:..//common/Core/CM3/core_cm3.h ****   __regControl = control;
1043:..//common/Core/CM3/core_cm3.h **** }
1044:..//common/Core/CM3/core_cm3.h **** 
1045:..//common/Core/CM3/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:..//common/Core/CM3/core_cm3.h **** 
1047:..//common/Core/CM3/core_cm3.h **** 
1048:..//common/Core/CM3/core_cm3.h **** 
1049:..//common/Core/CM3/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:..//common/Core/CM3/core_cm3.h **** /* IAR iccarm specific functions */
1051:..//common/Core/CM3/core_cm3.h **** 
1052:..//common/Core/CM3/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:..//common/Core/CM3/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:..//common/Core/CM3/core_cm3.h **** 
1055:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:..//common/Core/CM3/core_cm3.h **** 
1058:..//common/Core/CM3/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:..//common/Core/CM3/core_cm3.h **** 
1064:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:..//common/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:..//common/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:..//common/Core/CM3/core_cm3.h **** 
1076:..//common/Core/CM3/core_cm3.h **** 
1077:..//common/Core/CM3/core_cm3.h **** /**
1078:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:..//common/Core/CM3/core_cm3.h ****  *
1080:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
1081:..//common/Core/CM3/core_cm3.h ****  *
1082:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
1083:..//common/Core/CM3/core_cm3.h ****  */
1084:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:..//common/Core/CM3/core_cm3.h **** 
1086:..//common/Core/CM3/core_cm3.h **** /**
1087:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:..//common/Core/CM3/core_cm3.h ****  *
1089:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:..//common/Core/CM3/core_cm3.h ****  *
1091:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:..//common/Core/CM3/core_cm3.h ****  */
1094:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:..//common/Core/CM3/core_cm3.h **** 
1096:..//common/Core/CM3/core_cm3.h **** /**
1097:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:..//common/Core/CM3/core_cm3.h ****  *
1099:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
1100:..//common/Core/CM3/core_cm3.h ****  *
1101:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
1103:..//common/Core/CM3/core_cm3.h ****  */
1104:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:..//common/Core/CM3/core_cm3.h **** 
1106:..//common/Core/CM3/core_cm3.h **** /**
1107:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:..//common/Core/CM3/core_cm3.h ****  *
1109:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:..//common/Core/CM3/core_cm3.h ****  *
1111:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:..//common/Core/CM3/core_cm3.h ****  */
1114:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:..//common/Core/CM3/core_cm3.h **** 
1116:..//common/Core/CM3/core_cm3.h **** /**
1117:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:..//common/Core/CM3/core_cm3.h ****  *
1119:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1120:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1121:..//common/Core/CM3/core_cm3.h ****  *
1122:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:..//common/Core/CM3/core_cm3.h ****  */
1124:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:..//common/Core/CM3/core_cm3.h **** 
1126:..//common/Core/CM3/core_cm3.h **** /**
1127:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
1128:..//common/Core/CM3/core_cm3.h ****  *
1129:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1130:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1131:..//common/Core/CM3/core_cm3.h ****  *
1132:..//common/Core/CM3/core_cm3.h ****  * Reverse bit order of value
1133:..//common/Core/CM3/core_cm3.h ****  */
1134:..//common/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:..//common/Core/CM3/core_cm3.h **** 
1136:..//common/Core/CM3/core_cm3.h **** /**
1137:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:..//common/Core/CM3/core_cm3.h ****  *
1139:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1140:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1141:..//common/Core/CM3/core_cm3.h ****  *
1142:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:..//common/Core/CM3/core_cm3.h ****  */
1144:..//common/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:..//common/Core/CM3/core_cm3.h **** 
1146:..//common/Core/CM3/core_cm3.h **** /**
1147:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:..//common/Core/CM3/core_cm3.h ****  *
1149:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1150:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1151:..//common/Core/CM3/core_cm3.h ****  *
1152:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:..//common/Core/CM3/core_cm3.h ****  */
1154:..//common/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:..//common/Core/CM3/core_cm3.h **** 
1156:..//common/Core/CM3/core_cm3.h **** /**
1157:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:..//common/Core/CM3/core_cm3.h ****  *
1159:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1160:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1161:..//common/Core/CM3/core_cm3.h ****  *
1162:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:..//common/Core/CM3/core_cm3.h ****  */
1164:..//common/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:..//common/Core/CM3/core_cm3.h **** 
1166:..//common/Core/CM3/core_cm3.h **** /**
1167:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:..//common/Core/CM3/core_cm3.h ****  *
1169:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1170:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1171:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1172:..//common/Core/CM3/core_cm3.h ****  *
1173:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:..//common/Core/CM3/core_cm3.h ****  */
1175:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:..//common/Core/CM3/core_cm3.h **** 
1177:..//common/Core/CM3/core_cm3.h **** /**
1178:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:..//common/Core/CM3/core_cm3.h ****  *
1180:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1181:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1182:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1183:..//common/Core/CM3/core_cm3.h ****  *
1184:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:..//common/Core/CM3/core_cm3.h ****  */
1186:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:..//common/Core/CM3/core_cm3.h **** 
1188:..//common/Core/CM3/core_cm3.h **** /**
1189:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:..//common/Core/CM3/core_cm3.h ****  *
1191:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1192:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1193:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1194:..//common/Core/CM3/core_cm3.h ****  *
1195:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:..//common/Core/CM3/core_cm3.h ****  */
1197:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:..//common/Core/CM3/core_cm3.h **** 
1199:..//common/Core/CM3/core_cm3.h **** 
1200:..//common/Core/CM3/core_cm3.h **** 
1201:..//common/Core/CM3/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:..//common/Core/CM3/core_cm3.h **** /* GNU gcc specific functions */
1203:..//common/Core/CM3/core_cm3.h **** 
1204:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:..//common/Core/CM3/core_cm3.h **** 
1207:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:..//common/Core/CM3/core_cm3.h **** 
1210:..//common/Core/CM3/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:..//common/Core/CM3/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:..//common/Core/CM3/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:..//common/Core/CM3/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:..//common/Core/CM3/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:..//common/Core/CM3/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:..//common/Core/CM3/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:..//common/Core/CM3/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:..//common/Core/CM3/core_cm3.h **** 
1219:..//common/Core/CM3/core_cm3.h **** 
1220:..//common/Core/CM3/core_cm3.h **** /**
1221:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:..//common/Core/CM3/core_cm3.h ****  *
1223:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
1224:..//common/Core/CM3/core_cm3.h ****  *
1225:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
1226:..//common/Core/CM3/core_cm3.h ****  */
1227:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:..//common/Core/CM3/core_cm3.h **** 
1229:..//common/Core/CM3/core_cm3.h **** /**
1230:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:..//common/Core/CM3/core_cm3.h ****  *
1232:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:..//common/Core/CM3/core_cm3.h ****  *
1234:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:..//common/Core/CM3/core_cm3.h ****  */
1237:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:..//common/Core/CM3/core_cm3.h **** 
1239:..//common/Core/CM3/core_cm3.h **** /**
1240:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:..//common/Core/CM3/core_cm3.h ****  *
1242:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
1243:..//common/Core/CM3/core_cm3.h ****  *
1244:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
1246:..//common/Core/CM3/core_cm3.h ****  */
1247:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:..//common/Core/CM3/core_cm3.h **** 
1249:..//common/Core/CM3/core_cm3.h **** /**
1250:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:..//common/Core/CM3/core_cm3.h ****  *
1252:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:..//common/Core/CM3/core_cm3.h ****  *
1254:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:..//common/Core/CM3/core_cm3.h ****  */
1257:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:..//common/Core/CM3/core_cm3.h **** 
1259:..//common/Core/CM3/core_cm3.h **** /**
1260:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
1261:..//common/Core/CM3/core_cm3.h ****  *
1262:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
1263:..//common/Core/CM3/core_cm3.h ****  *
1264:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
1265:..//common/Core/CM3/core_cm3.h ****  */
1266:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:..//common/Core/CM3/core_cm3.h **** 
1268:..//common/Core/CM3/core_cm3.h **** /**
1269:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
1270:..//common/Core/CM3/core_cm3.h ****  *
1271:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
1272:..//common/Core/CM3/core_cm3.h ****  *
1273:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
1274:..//common/Core/CM3/core_cm3.h ****  */
1275:..//common/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:..//common/Core/CM3/core_cm3.h **** 
1277:..//common/Core/CM3/core_cm3.h **** /**
1278:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:..//common/Core/CM3/core_cm3.h ****  *
1280:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
1281:..//common/Core/CM3/core_cm3.h ****  *
1282:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:..//common/Core/CM3/core_cm3.h ****  */
1284:..//common/Core/CM3/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:..//common/Core/CM3/core_cm3.h **** 
1286:..//common/Core/CM3/core_cm3.h **** /**
1287:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:..//common/Core/CM3/core_cm3.h ****  *
1289:..//common/Core/CM3/core_cm3.h ****  * @param  priMask  PriMask
1290:..//common/Core/CM3/core_cm3.h ****  *
1291:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:..//common/Core/CM3/core_cm3.h ****  */
1293:..//common/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:..//common/Core/CM3/core_cm3.h **** 
1295:..//common/Core/CM3/core_cm3.h **** /**
1296:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:..//common/Core/CM3/core_cm3.h ****  *
1298:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
1299:..//common/Core/CM3/core_cm3.h ****  *
1300:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
1301:..//common/Core/CM3/core_cm3.h ****  */
1302:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:..//common/Core/CM3/core_cm3.h **** 
1304:..//common/Core/CM3/core_cm3.h **** /**
1305:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:..//common/Core/CM3/core_cm3.h ****  *
1307:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask  faultMask value
1308:..//common/Core/CM3/core_cm3.h ****  *
1309:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
1310:..//common/Core/CM3/core_cm3.h ****  */
1311:..//common/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:..//common/Core/CM3/core_cm3.h **** 
1313:..//common/Core/CM3/core_cm3.h **** /**
1314:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
1315:..//common/Core/CM3/core_cm3.h **** * 
1316:..//common/Core/CM3/core_cm3.h **** *  @return Control value
1317:..//common/Core/CM3/core_cm3.h ****  *
1318:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
1319:..//common/Core/CM3/core_cm3.h ****  */
1320:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:..//common/Core/CM3/core_cm3.h **** 
1322:..//common/Core/CM3/core_cm3.h **** /**
1323:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
1324:..//common/Core/CM3/core_cm3.h ****  *
1325:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
1326:..//common/Core/CM3/core_cm3.h ****  *
1327:..//common/Core/CM3/core_cm3.h ****  * Set the control register
1328:..//common/Core/CM3/core_cm3.h ****  */
1329:..//common/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:..//common/Core/CM3/core_cm3.h **** 
1331:..//common/Core/CM3/core_cm3.h **** /**
1332:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:..//common/Core/CM3/core_cm3.h ****  *
1334:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1335:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1336:..//common/Core/CM3/core_cm3.h ****  *
1337:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in integer value
1338:..//common/Core/CM3/core_cm3.h ****  */
1339:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:..//common/Core/CM3/core_cm3.h **** 
1341:..//common/Core/CM3/core_cm3.h **** /**
1342:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:..//common/Core/CM3/core_cm3.h ****  *
1344:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1345:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1346:..//common/Core/CM3/core_cm3.h ****  *
1347:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:..//common/Core/CM3/core_cm3.h ****  */
1349:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:..//common/Core/CM3/core_cm3.h **** 
1351:..//common/Core/CM3/core_cm3.h **** /**
1352:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:..//common/Core/CM3/core_cm3.h ****  *
1354:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1355:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1356:..//common/Core/CM3/core_cm3.h ****  *
1357:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:..//common/Core/CM3/core_cm3.h ****  */
1359:..//common/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:..//common/Core/CM3/core_cm3.h **** 
1361:..//common/Core/CM3/core_cm3.h **** /**
1362:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
1363:..//common/Core/CM3/core_cm3.h ****  *
1364:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1365:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1366:..//common/Core/CM3/core_cm3.h ****  *
1367:..//common/Core/CM3/core_cm3.h ****  * Reverse bit order of value
1368:..//common/Core/CM3/core_cm3.h ****  */
1369:..//common/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:..//common/Core/CM3/core_cm3.h **** 
1371:..//common/Core/CM3/core_cm3.h **** /**
1372:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:..//common/Core/CM3/core_cm3.h ****  *
1374:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1375:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1376:..//common/Core/CM3/core_cm3.h ****  *
1377:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:..//common/Core/CM3/core_cm3.h ****  */
1379:..//common/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:..//common/Core/CM3/core_cm3.h **** 
1381:..//common/Core/CM3/core_cm3.h **** /**
1382:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:..//common/Core/CM3/core_cm3.h ****  *
1384:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1385:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1386:..//common/Core/CM3/core_cm3.h ****  *
1387:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:..//common/Core/CM3/core_cm3.h ****  */
1389:..//common/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:..//common/Core/CM3/core_cm3.h **** 
1391:..//common/Core/CM3/core_cm3.h **** /**
1392:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:..//common/Core/CM3/core_cm3.h ****  *
1394:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1395:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1396:..//common/Core/CM3/core_cm3.h ****  *
1397:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:..//common/Core/CM3/core_cm3.h ****  */
1399:..//common/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:..//common/Core/CM3/core_cm3.h **** 
1401:..//common/Core/CM3/core_cm3.h **** /**
1402:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:..//common/Core/CM3/core_cm3.h ****  *
1404:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1405:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1406:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1407:..//common/Core/CM3/core_cm3.h ****  *
1408:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:..//common/Core/CM3/core_cm3.h ****  */
1410:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:..//common/Core/CM3/core_cm3.h **** 
1412:..//common/Core/CM3/core_cm3.h **** /**
1413:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:..//common/Core/CM3/core_cm3.h ****  *
1415:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1416:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1417:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1418:..//common/Core/CM3/core_cm3.h ****  *
1419:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:..//common/Core/CM3/core_cm3.h ****  */
1421:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:..//common/Core/CM3/core_cm3.h **** 
1423:..//common/Core/CM3/core_cm3.h **** /**
1424:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:..//common/Core/CM3/core_cm3.h ****  *
1426:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1427:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1428:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1429:..//common/Core/CM3/core_cm3.h ****  *
1430:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:..//common/Core/CM3/core_cm3.h ****  */
1432:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:..//common/Core/CM3/core_cm3.h **** 
1434:..//common/Core/CM3/core_cm3.h **** 
1435:..//common/Core/CM3/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:..//common/Core/CM3/core_cm3.h **** /* TASKING carm specific functions */
1437:..//common/Core/CM3/core_cm3.h **** 
1438:..//common/Core/CM3/core_cm3.h **** /*
1439:..//common/Core/CM3/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:..//common/Core/CM3/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:..//common/Core/CM3/core_cm3.h ****  * Including the CMSIS ones.
1442:..//common/Core/CM3/core_cm3.h ****  */
1443:..//common/Core/CM3/core_cm3.h **** 
1444:..//common/Core/CM3/core_cm3.h **** #endif
1445:..//common/Core/CM3/core_cm3.h **** 
1446:..//common/Core/CM3/core_cm3.h **** 
1447:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:..//common/Core/CM3/core_cm3.h ****   Core  Function Interface containing:
1449:..//common/Core/CM3/core_cm3.h ****   - Core NVIC Functions
1450:..//common/Core/CM3/core_cm3.h ****   - Core SysTick Functions
1451:..//common/Core/CM3/core_cm3.h ****   - Core Reset Functions
1452:..//common/Core/CM3/core_cm3.h **** */
1453:..//common/Core/CM3/core_cm3.h **** /*@{*/
1454:..//common/Core/CM3/core_cm3.h **** 
1455:..//common/Core/CM3/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:..//common/Core/CM3/core_cm3.h **** 
1457:..//common/Core/CM3/core_cm3.h **** /**
1458:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:..//common/Core/CM3/core_cm3.h ****  *
1460:..//common/Core/CM3/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:..//common/Core/CM3/core_cm3.h ****  *
1462:..//common/Core/CM3/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:..//common/Core/CM3/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:..//common/Core/CM3/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:..//common/Core/CM3/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:..//common/Core/CM3/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:..//common/Core/CM3/core_cm3.h ****  */
1468:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:..//common/Core/CM3/core_cm3.h **** {
1470:..//common/Core/CM3/core_cm3.h ****   uint32_t reg_value;
1471:..//common/Core/CM3/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:..//common/Core/CM3/core_cm3.h ****   
1473:..//common/Core/CM3/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:..//common/Core/CM3/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:..//common/Core/CM3/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:..//common/Core/CM3/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:..//common/Core/CM3/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:..//common/Core/CM3/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:..//common/Core/CM3/core_cm3.h **** }
1480:..//common/Core/CM3/core_cm3.h **** 
1481:..//common/Core/CM3/core_cm3.h **** /**
1482:..//common/Core/CM3/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:..//common/Core/CM3/core_cm3.h ****  *
1484:..//common/Core/CM3/core_cm3.h ****  * @return priority grouping field 
1485:..//common/Core/CM3/core_cm3.h ****  *
1486:..//common/Core/CM3/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:..//common/Core/CM3/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:..//common/Core/CM3/core_cm3.h ****  */
1489:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:..//common/Core/CM3/core_cm3.h **** {
1491:..//common/Core/CM3/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:..//common/Core/CM3/core_cm3.h **** }
1493:..//common/Core/CM3/core_cm3.h **** 
1494:..//common/Core/CM3/core_cm3.h **** /**
1495:..//common/Core/CM3/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:..//common/Core/CM3/core_cm3.h ****  *
1497:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:..//common/Core/CM3/core_cm3.h ****  *
1499:..//common/Core/CM3/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:..//common/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:..//common/Core/CM3/core_cm3.h ****  */
1502:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:..//common/Core/CM3/core_cm3.h **** {
  31              		.loc 1 1503 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  36 0000 80B4     		push	{r7}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 4
  39 0002 83B0     		sub	sp, sp, #12
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 16
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_offset 7, -4
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 0346     		mov	r3, r0
  47 0008 FB71     		strb	r3, [r7, #7]
1504:..//common/Core/CM3/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  48              		.loc 1 1504 0
  49 000a 4EF20013 		movw	r3, #:lower16:-536813312
  50 000e CEF20003 		movt	r3, #:upper16:-536813312
  51 0012 97F90720 		ldrsb	r2, [r7, #7]
  52 0016 4FEA5212 		lsr	r2, r2, #5
  53 001a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
  54 001c 01F01F01 		and	r1, r1, #31
  55 0020 4FF00100 		mov	r0, #1
  56 0024 00FA01F1 		lsl	r1, r0, r1
  57 0028 43F82210 		str	r1, [r3, r2, lsl #2]
1505:..//common/Core/CM3/core_cm3.h **** }
  58              		.loc 1 1505 0
  59 002c 07F10C07 		add	r7, r7, #12
  60 0030 BD46     		mov	sp, r7
  61 0032 80BC     		pop	{r7}
  62 0034 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE14:
  66 0036 00BF     		.section	.text.NVIC_SetPriority,"ax",%progbits
  67              		.align	2
  68              		.thumb
  69              		.thumb_func
  71              	NVIC_SetPriority:
  72              	.LFB20:
1506:..//common/Core/CM3/core_cm3.h **** 
1507:..//common/Core/CM3/core_cm3.h **** /**
1508:..//common/Core/CM3/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:..//common/Core/CM3/core_cm3.h ****  * 
1510:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:..//common/Core/CM3/core_cm3.h ****  * 
1512:..//common/Core/CM3/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:..//common/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:..//common/Core/CM3/core_cm3.h ****  */
1515:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:..//common/Core/CM3/core_cm3.h **** {
1517:..//common/Core/CM3/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1518:..//common/Core/CM3/core_cm3.h **** }
1519:..//common/Core/CM3/core_cm3.h **** 
1520:..//common/Core/CM3/core_cm3.h **** /**
1521:..//common/Core/CM3/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1522:..//common/Core/CM3/core_cm3.h ****  * 
1523:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn    The number of the device specifc interrupt
1524:..//common/Core/CM3/core_cm3.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
1525:..//common/Core/CM3/core_cm3.h ****  *
1526:..//common/Core/CM3/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
1527:..//common/Core/CM3/core_cm3.h ****  * otherwise it returns 0
1528:..//common/Core/CM3/core_cm3.h ****  */
1529:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1530:..//common/Core/CM3/core_cm3.h **** {
1531:..//common/Core/CM3/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1532:..//common/Core/CM3/core_cm3.h **** }
1533:..//common/Core/CM3/core_cm3.h **** 
1534:..//common/Core/CM3/core_cm3.h **** /**
1535:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1536:..//common/Core/CM3/core_cm3.h ****  * 
1537:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn    The number of the interrupt for set pending
1538:..//common/Core/CM3/core_cm3.h ****  *
1539:..//common/Core/CM3/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1540:..//common/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1541:..//common/Core/CM3/core_cm3.h ****  */
1542:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1543:..//common/Core/CM3/core_cm3.h **** {
1544:..//common/Core/CM3/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1545:..//common/Core/CM3/core_cm3.h **** }
1546:..//common/Core/CM3/core_cm3.h **** 
1547:..//common/Core/CM3/core_cm3.h **** /**
1548:..//common/Core/CM3/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1549:..//common/Core/CM3/core_cm3.h ****  *
1550:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn    The number of the interrupt for clear pending
1551:..//common/Core/CM3/core_cm3.h ****  *
1552:..//common/Core/CM3/core_cm3.h ****  * Clear the pending bit for the specified interrupt. 
1553:..//common/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1554:..//common/Core/CM3/core_cm3.h ****  */
1555:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1556:..//common/Core/CM3/core_cm3.h **** {
1557:..//common/Core/CM3/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1558:..//common/Core/CM3/core_cm3.h **** }
1559:..//common/Core/CM3/core_cm3.h **** 
1560:..//common/Core/CM3/core_cm3.h **** /**
1561:..//common/Core/CM3/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1562:..//common/Core/CM3/core_cm3.h ****  *
1563:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn    The number of the interrupt for read active bit
1564:..//common/Core/CM3/core_cm3.h ****  * @return         1 = interrupt active, 0 = interrupt not active
1565:..//common/Core/CM3/core_cm3.h ****  *
1566:..//common/Core/CM3/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active, 
1567:..//common/Core/CM3/core_cm3.h ****  * otherwise it returns 0.
1568:..//common/Core/CM3/core_cm3.h ****  */
1569:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1570:..//common/Core/CM3/core_cm3.h **** {
1571:..//common/Core/CM3/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1572:..//common/Core/CM3/core_cm3.h **** }
1573:..//common/Core/CM3/core_cm3.h **** 
1574:..//common/Core/CM3/core_cm3.h **** /**
1575:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the priority for an interrupt
1576:..//common/Core/CM3/core_cm3.h ****  *
1577:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn      The number of the interrupt for set priority
1578:..//common/Core/CM3/core_cm3.h ****  * @param  priority  The priority to set
1579:..//common/Core/CM3/core_cm3.h ****  *
1580:..//common/Core/CM3/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt 
1581:..//common/Core/CM3/core_cm3.h ****  * number can be positive to specify an external (device specific) 
1582:..//common/Core/CM3/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1583:..//common/Core/CM3/core_cm3.h ****  *
1584:..//common/Core/CM3/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1585:..//common/Core/CM3/core_cm3.h ****  */
1586:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1587:..//common/Core/CM3/core_cm3.h **** {
  73              		.loc 1 1587 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 8
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78 0000 80B4     		push	{r7}
  79              	.LCFI3:
  80              		.cfi_def_cfa_offset 4
  81 0002 83B0     		sub	sp, sp, #12
  82              	.LCFI4:
  83              		.cfi_def_cfa_offset 16
  84 0004 00AF     		add	r7, sp, #0
  85              		.cfi_offset 7, -4
  86              	.LCFI5:
  87              		.cfi_def_cfa_register 7
  88 0006 0346     		mov	r3, r0
  89 0008 3960     		str	r1, [r7, #0]
  90 000a FB71     		strb	r3, [r7, #7]
1588:..//common/Core/CM3/core_cm3.h ****   if(IRQn < 0) {
  91              		.loc 1 1588 0
  92 000c 97F90730 		ldrsb	r3, [r7, #7]
  93 0010 002B     		cmp	r3, #0
  94 0012 10DA     		bge	.L4
1589:..//common/Core/CM3/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  95              		.loc 1 1589 0
  96 0014 4EF60053 		movw	r3, #:lower16:-536810240
  97 0018 CEF20003 		movt	r3, #:upper16:-536810240
  98 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  99 001e 02F00F02 		and	r2, r2, #15
 100 0022 A2F10401 		sub	r1, r2, #4
 101 0026 3A68     		ldr	r2, [r7, #0]
 102 0028 D2B2     		uxtb	r2, r2
 103 002a 4FEAC202 		lsl	r2, r2, #3
 104 002e D2B2     		uxtb	r2, r2
 105 0030 0B44     		add	r3, r1, r3
 106 0032 1A76     		strb	r2, [r3, #24]
 107 0034 0DE0     		b	.L6
 108              	.L4:
1590:..//common/Core/CM3/core_cm3.h ****   else {
1591:..//common/Core/CM3/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
 109              		.loc 1 1591 0
 110 0036 4EF20013 		movw	r3, #:lower16:-536813312
 111 003a CEF20003 		movt	r3, #:upper16:-536813312
 112 003e 97F90710 		ldrsb	r1, [r7, #7]
 113 0042 3A68     		ldr	r2, [r7, #0]
 114 0044 D2B2     		uxtb	r2, r2
 115 0046 4FEAC202 		lsl	r2, r2, #3
 116 004a D2B2     		uxtb	r2, r2
 117 004c 0B44     		add	r3, r1, r3
 118 004e 83F80023 		strb	r2, [r3, #768]
 119              	.L6:
1592:..//common/Core/CM3/core_cm3.h **** }
 120              		.loc 1 1592 0
 121 0052 07F10C07 		add	r7, r7, #12
 122 0056 BD46     		mov	sp, r7
 123 0058 80BC     		pop	{r7}
 124 005a 7047     		bx	lr
 125              		.cfi_endproc
 126              	.LFE20:
 128              		.comm	TIM_ConfigStruct,8,4
 129              		.comm	TIM_MatchConfigStruct,12,4
 130              		.section	.text.enable_timer,"ax",%progbits
 131              		.align	2
 132              		.global	enable_timer
 133              		.thumb
 134              		.thumb_func
 136              	enable_timer:
 137              	.LFB29:
 138              		.file 2 "..//drivers/timer/timer.c"
   1:..//drivers/timer/timer.c **** /*****************************************************************************
   2:..//drivers/timer/timer.c ****  *   timer.c:  Timer C file for Philips LPC214x Family Microprocessors
   3:..//drivers/timer/timer.c ****  *
   4:..//drivers/timer/timer.c ****  *   Copyright(C) 2006, Philips Semiconductor
   5:..//drivers/timer/timer.c ****  *   All rights reserved.
   6:..//drivers/timer/timer.c ****  *
   7:..//drivers/timer/timer.c ****  *   History
   8:..//drivers/timer/timer.c ****  *   2005.10.01  ver 1.00    Prelimnary version, first Release
   9:..//drivers/timer/timer.c ****  *
  10:..//drivers/timer/timer.c **** ******************************************************************************/
  11:..//drivers/timer/timer.c **** #include "timer.h"
  12:..//drivers/timer/timer.c **** #include <stdio.h>
  13:..//drivers/timer/timer.c **** 
  14:..//drivers/timer/timer.c **** TIM_TIMERCFG_Type TIM_ConfigStruct;
  15:..//drivers/timer/timer.c **** TIM_MATCHCFG_Type TIM_MatchConfigStruct;
  16:..//drivers/timer/timer.c **** 
  17:..//drivers/timer/timer.c **** #define TIMER0_PRIORITY		2
  18:..//drivers/timer/timer.c **** #define TIMER1_PRIORITY		4
  19:..//drivers/timer/timer.c **** #define TIMER2_PRIORITY		5
  20:..//drivers/timer/timer.c **** #define TIMER3_PRIORITY		6 //higher priority than uart2
  21:..//drivers/timer/timer.c **** 
  22:..//drivers/timer/timer.c **** /******************************************************************************
  23:..//drivers/timer/timer.c **** ** Function name:		
  24:..//drivers/timer/timer.c **** **
  25:..//drivers/timer/timer.c **** ** Descriptions:		Enable timer
  26:..//drivers/timer/timer.c **** **
  27:..//drivers/timer/timer.c **** ** parameters:			timer number: 0 or 1
  28:..//drivers/timer/timer.c **** ** Returned value:		None
  29:..//drivers/timer/timer.c **** ** 
  30:..//drivers/timer/timer.c **** ******************************************************************************/
  31:..//drivers/timer/timer.c **** void enable_timer(LPC_TIM_TypeDef *TIMx)
  32:..//drivers/timer/timer.c **** {
 139              		.loc 2 32 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 8
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143 0000 80B5     		push	{r7, lr}
 144              	.LCFI6:
 145              		.cfi_def_cfa_offset 8
 146 0002 82B0     		sub	sp, sp, #8
 147              	.LCFI7:
 148              		.cfi_def_cfa_offset 16
 149 0004 00AF     		add	r7, sp, #0
 150              		.cfi_offset 14, -4
 151              		.cfi_offset 7, -8
 152              	.LCFI8:
 153              		.cfi_def_cfa_register 7
 154 0006 7860     		str	r0, [r7, #4]
  33:..//drivers/timer/timer.c ****     if (TIMx == LPC_TIM0)
 155              		.loc 2 33 0
 156 0008 7A68     		ldr	r2, [r7, #4]
 157 000a 44F20003 		movw	r3, #:lower16:1073758208
 158 000e C4F20003 		movt	r3, #:upper16:1073758208
 159 0012 9A42     		cmp	r2, r3
 160 0014 0BD1     		bne	.L8
  34:..//drivers/timer/timer.c **** 		TIM_Cmd(LPC_TIM0,ENABLE);
 161              		.loc 2 34 0
 162 0016 44F20000 		movw	r0, #:lower16:1073758208
 163 001a C4F20000 		movt	r0, #:upper16:1073758208
 164 001e 4FF00101 		mov	r1, #1
 165 0022 40F20003 		movw	r3, #:lower16:TIM_Cmd
 166 0026 C0F20003 		movt	r3, #:upper16:TIM_Cmd
 167 002a 9847     		blx	r3
 168 002c 37E0     		b	.L12
 169              	.L8:
  35:..//drivers/timer/timer.c **** 
  36:..//drivers/timer/timer.c **** 	else if (TIMx == LPC_TIM1)
 170              		.loc 2 36 0
 171 002e 7A68     		ldr	r2, [r7, #4]
 172 0030 48F20003 		movw	r3, #:lower16:1073774592
 173 0034 C4F20003 		movt	r3, #:upper16:1073774592
 174 0038 9A42     		cmp	r2, r3
 175 003a 0BD1     		bne	.L10
  37:..//drivers/timer/timer.c **** 		TIM_Cmd(LPC_TIM1,ENABLE);
 176              		.loc 2 37 0
 177 003c 48F20000 		movw	r0, #:lower16:1073774592
 178 0040 C4F20000 		movt	r0, #:upper16:1073774592
 179 0044 4FF00101 		mov	r1, #1
 180 0048 40F20003 		movw	r3, #:lower16:TIM_Cmd
 181 004c C0F20003 		movt	r3, #:upper16:TIM_Cmd
 182 0050 9847     		blx	r3
 183 0052 24E0     		b	.L12
 184              	.L10:
  38:..//drivers/timer/timer.c **** 
  39:..//drivers/timer/timer.c **** 	else if (TIMx == LPC_TIM2)
 185              		.loc 2 39 0
 186 0054 7A68     		ldr	r2, [r7, #4]
 187 0056 40F20003 		movw	r3, #:lower16:1074331648
 188 005a C4F20903 		movt	r3, #:upper16:1074331648
 189 005e 9A42     		cmp	r2, r3
 190 0060 0BD1     		bne	.L11
  40:..//drivers/timer/timer.c **** 		TIM_Cmd(LPC_TIM2,ENABLE);
 191              		.loc 2 40 0
 192 0062 40F20000 		movw	r0, #:lower16:1074331648
 193 0066 C4F20900 		movt	r0, #:upper16:1074331648
 194 006a 4FF00101 		mov	r1, #1
 195 006e 40F20003 		movw	r3, #:lower16:TIM_Cmd
 196 0072 C0F20003 		movt	r3, #:upper16:TIM_Cmd
 197 0076 9847     		blx	r3
 198 0078 11E0     		b	.L12
 199              	.L11:
  41:..//drivers/timer/timer.c **** 
  42:..//drivers/timer/timer.c **** 	else if (TIMx == LPC_TIM3)
 200              		.loc 2 42 0
 201 007a 7A68     		ldr	r2, [r7, #4]
 202 007c 44F20003 		movw	r3, #:lower16:1074348032
 203 0080 C4F20903 		movt	r3, #:upper16:1074348032
 204 0084 9A42     		cmp	r2, r3
 205 0086 0AD1     		bne	.L12
  43:..//drivers/timer/timer.c **** 		TIM_Cmd(LPC_TIM3,ENABLE);
 206              		.loc 2 43 0
 207 0088 44F20000 		movw	r0, #:lower16:1074348032
 208 008c C4F20900 		movt	r0, #:upper16:1074348032
 209 0090 4FF00101 		mov	r1, #1
 210 0094 40F20003 		movw	r3, #:lower16:TIM_Cmd
 211 0098 C0F20003 		movt	r3, #:upper16:TIM_Cmd
 212 009c 9847     		blx	r3
 213              	.L12:
  44:..//drivers/timer/timer.c ****     return;
  45:..//drivers/timer/timer.c **** }
 214              		.loc 2 45 0
 215 009e 07F10807 		add	r7, r7, #8
 216 00a2 BD46     		mov	sp, r7
 217 00a4 80BD     		pop	{r7, pc}
 218              		.cfi_endproc
 219              	.LFE29:
 221 00a6 00BF     		.section	.text.disable_timer,"ax",%progbits
 222              		.align	2
 223              		.global	disable_timer
 224              		.thumb
 225              		.thumb_func
 227              	disable_timer:
 228              	.LFB30:
  46:..//drivers/timer/timer.c **** /******************************************************************************
  47:..//drivers/timer/timer.c **** ** Function name:		disable_timer
  48:..//drivers/timer/timer.c **** **
  49:..//drivers/timer/timer.c **** ** Descriptions:		Disable timer
  50:..//drivers/timer/timer.c **** **
  51:..//drivers/timer/timer.c **** ** parameters:			timer number: 0 or 1
  52:..//drivers/timer/timer.c **** ** Returned value:		None
  53:..//drivers/timer/timer.c **** ** 
  54:..//drivers/timer/timer.c **** ******************************************************************************/
  55:..//drivers/timer/timer.c **** void disable_timer(LPC_TIM_TypeDef *TIMx)
  56:..//drivers/timer/timer.c **** {
 229              		.loc 2 56 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 8
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233 0000 80B5     		push	{r7, lr}
 234              	.LCFI9:
 235              		.cfi_def_cfa_offset 8
 236 0002 82B0     		sub	sp, sp, #8
 237              	.LCFI10:
 238              		.cfi_def_cfa_offset 16
 239 0004 00AF     		add	r7, sp, #0
 240              		.cfi_offset 14, -4
 241              		.cfi_offset 7, -8
 242              	.LCFI11:
 243              		.cfi_def_cfa_register 7
 244 0006 7860     		str	r0, [r7, #4]
  57:..//drivers/timer/timer.c ****     if (TIMx== LPC_TIM0)
 245              		.loc 2 57 0
 246 0008 7A68     		ldr	r2, [r7, #4]
 247 000a 44F20003 		movw	r3, #:lower16:1073758208
 248 000e C4F20003 		movt	r3, #:upper16:1073758208
 249 0012 9A42     		cmp	r2, r3
 250 0014 0BD1     		bne	.L14
  58:..//drivers/timer/timer.c **** 		TIM_Cmd(LPC_TIM0,DISABLE);
 251              		.loc 2 58 0
 252 0016 44F20000 		movw	r0, #:lower16:1073758208
 253 001a C4F20000 		movt	r0, #:upper16:1073758208
 254 001e 4FF00001 		mov	r1, #0
 255 0022 40F20003 		movw	r3, #:lower16:TIM_Cmd
 256 0026 C0F20003 		movt	r3, #:upper16:TIM_Cmd
 257 002a 9847     		blx	r3
 258 002c 37E0     		b	.L18
 259              	.L14:
  59:..//drivers/timer/timer.c **** 
  60:..//drivers/timer/timer.c **** 	else if (TIMx== LPC_TIM1)
 260              		.loc 2 60 0
 261 002e 7A68     		ldr	r2, [r7, #4]
 262 0030 48F20003 		movw	r3, #:lower16:1073774592
 263 0034 C4F20003 		movt	r3, #:upper16:1073774592
 264 0038 9A42     		cmp	r2, r3
 265 003a 0BD1     		bne	.L16
  61:..//drivers/timer/timer.c **** 		TIM_Cmd(LPC_TIM1,DISABLE);
 266              		.loc 2 61 0
 267 003c 48F20000 		movw	r0, #:lower16:1073774592
 268 0040 C4F20000 		movt	r0, #:upper16:1073774592
 269 0044 4FF00001 		mov	r1, #0
 270 0048 40F20003 		movw	r3, #:lower16:TIM_Cmd
 271 004c C0F20003 		movt	r3, #:upper16:TIM_Cmd
 272 0050 9847     		blx	r3
 273 0052 24E0     		b	.L18
 274              	.L16:
  62:..//drivers/timer/timer.c **** 
  63:..//drivers/timer/timer.c **** 	else if (TIMx== LPC_TIM2)
 275              		.loc 2 63 0
 276 0054 7A68     		ldr	r2, [r7, #4]
 277 0056 40F20003 		movw	r3, #:lower16:1074331648
 278 005a C4F20903 		movt	r3, #:upper16:1074331648
 279 005e 9A42     		cmp	r2, r3
 280 0060 0BD1     		bne	.L17
  64:..//drivers/timer/timer.c **** 		TIM_Cmd(LPC_TIM2,DISABLE);
 281              		.loc 2 64 0
 282 0062 40F20000 		movw	r0, #:lower16:1074331648
 283 0066 C4F20900 		movt	r0, #:upper16:1074331648
 284 006a 4FF00001 		mov	r1, #0
 285 006e 40F20003 		movw	r3, #:lower16:TIM_Cmd
 286 0072 C0F20003 		movt	r3, #:upper16:TIM_Cmd
 287 0076 9847     		blx	r3
 288 0078 11E0     		b	.L18
 289              	.L17:
  65:..//drivers/timer/timer.c **** 
  66:..//drivers/timer/timer.c **** 	else if (TIMx== LPC_TIM3)
 290              		.loc 2 66 0
 291 007a 7A68     		ldr	r2, [r7, #4]
 292 007c 44F20003 		movw	r3, #:lower16:1074348032
 293 0080 C4F20903 		movt	r3, #:upper16:1074348032
 294 0084 9A42     		cmp	r2, r3
 295 0086 0AD1     		bne	.L18
  67:..//drivers/timer/timer.c **** 		TIM_Cmd(LPC_TIM3,DISABLE);
 296              		.loc 2 67 0
 297 0088 44F20000 		movw	r0, #:lower16:1074348032
 298 008c C4F20900 		movt	r0, #:upper16:1074348032
 299 0090 4FF00001 		mov	r1, #0
 300 0094 40F20003 		movw	r3, #:lower16:TIM_Cmd
 301 0098 C0F20003 		movt	r3, #:upper16:TIM_Cmd
 302 009c 9847     		blx	r3
 303              	.L18:
  68:..//drivers/timer/timer.c **** 	return;	
  69:..//drivers/timer/timer.c **** }
 304              		.loc 2 69 0
 305 009e 07F10807 		add	r7, r7, #8
 306 00a2 BD46     		mov	sp, r7
 307 00a4 80BD     		pop	{r7, pc}
 308              		.cfi_endproc
 309              	.LFE30:
 311 00a6 00BF     		.section	.text.reset_timer,"ax",%progbits
 312              		.align	2
 313              		.global	reset_timer
 314              		.thumb
 315              		.thumb_func
 317              	reset_timer:
 318              	.LFB31:
  70:..//drivers/timer/timer.c **** 
  71:..//drivers/timer/timer.c **** /******************************************************************************
  72:..//drivers/timer/timer.c **** ** Function name:		reset_timer
  73:..//drivers/timer/timer.c **** **
  74:..//drivers/timer/timer.c **** ** Descriptions:		Reset timer
  75:..//drivers/timer/timer.c **** **
  76:..//drivers/timer/timer.c **** ** parameters:			timer number: 0 or 1
  77:..//drivers/timer/timer.c **** ** Returned value:		None
  78:..//drivers/timer/timer.c **** ** 
  79:..//drivers/timer/timer.c **** ******************************************************************************/
  80:..//drivers/timer/timer.c **** void reset_timer(LPC_TIM_TypeDef *TIMx)
  81:..//drivers/timer/timer.c **** {
 319              		.loc 2 81 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 8
 322              		@ frame_needed = 1, uses_anonymous_args = 0
 323 0000 80B5     		push	{r7, lr}
 324              	.LCFI12:
 325              		.cfi_def_cfa_offset 8
 326 0002 82B0     		sub	sp, sp, #8
 327              	.LCFI13:
 328              		.cfi_def_cfa_offset 16
 329 0004 00AF     		add	r7, sp, #0
 330              		.cfi_offset 14, -4
 331              		.cfi_offset 7, -8
 332              	.LCFI14:
 333              		.cfi_def_cfa_register 7
 334 0006 7860     		str	r0, [r7, #4]
  82:..//drivers/timer/timer.c ****     if (TIMx== LPC_TIM0)
 335              		.loc 2 82 0
 336 0008 7A68     		ldr	r2, [r7, #4]
 337 000a 44F20003 		movw	r3, #:lower16:1073758208
 338 000e C4F20003 		movt	r3, #:upper16:1073758208
 339 0012 9A42     		cmp	r2, r3
 340 0014 09D1     		bne	.L20
  83:..//drivers/timer/timer.c **** 		TIM_ResetCounter(LPC_TIM0);
 341              		.loc 2 83 0
 342 0016 44F20000 		movw	r0, #:lower16:1073758208
 343 001a C4F20000 		movt	r0, #:upper16:1073758208
 344 001e 40F20003 		movw	r3, #:lower16:TIM_ResetCounter
 345 0022 C0F20003 		movt	r3, #:upper16:TIM_ResetCounter
 346 0026 9847     		blx	r3
 347 0028 31E0     		b	.L24
 348              	.L20:
  84:..//drivers/timer/timer.c **** 
  85:..//drivers/timer/timer.c **** 	else if (TIMx== LPC_TIM1)
 349              		.loc 2 85 0
 350 002a 7A68     		ldr	r2, [r7, #4]
 351 002c 48F20003 		movw	r3, #:lower16:1073774592
 352 0030 C4F20003 		movt	r3, #:upper16:1073774592
 353 0034 9A42     		cmp	r2, r3
 354 0036 09D1     		bne	.L22
  86:..//drivers/timer/timer.c **** 		TIM_ResetCounter(LPC_TIM1);
 355              		.loc 2 86 0
 356 0038 48F20000 		movw	r0, #:lower16:1073774592
 357 003c C4F20000 		movt	r0, #:upper16:1073774592
 358 0040 40F20003 		movw	r3, #:lower16:TIM_ResetCounter
 359 0044 C0F20003 		movt	r3, #:upper16:TIM_ResetCounter
 360 0048 9847     		blx	r3
 361 004a 20E0     		b	.L24
 362              	.L22:
  87:..//drivers/timer/timer.c **** 
  88:..//drivers/timer/timer.c **** 	else if (TIMx== LPC_TIM2)
 363              		.loc 2 88 0
 364 004c 7A68     		ldr	r2, [r7, #4]
 365 004e 40F20003 		movw	r3, #:lower16:1074331648
 366 0052 C4F20903 		movt	r3, #:upper16:1074331648
 367 0056 9A42     		cmp	r2, r3
 368 0058 09D1     		bne	.L23
  89:..//drivers/timer/timer.c **** 		TIM_ResetCounter(LPC_TIM2);
 369              		.loc 2 89 0
 370 005a 40F20000 		movw	r0, #:lower16:1074331648
 371 005e C4F20900 		movt	r0, #:upper16:1074331648
 372 0062 40F20003 		movw	r3, #:lower16:TIM_ResetCounter
 373 0066 C0F20003 		movt	r3, #:upper16:TIM_ResetCounter
 374 006a 9847     		blx	r3
 375 006c 0FE0     		b	.L24
 376              	.L23:
  90:..//drivers/timer/timer.c **** 
  91:..//drivers/timer/timer.c **** 	else if (TIMx== LPC_TIM3)
 377              		.loc 2 91 0
 378 006e 7A68     		ldr	r2, [r7, #4]
 379 0070 44F20003 		movw	r3, #:lower16:1074348032
 380 0074 C4F20903 		movt	r3, #:upper16:1074348032
 381 0078 9A42     		cmp	r2, r3
 382 007a 08D1     		bne	.L24
  92:..//drivers/timer/timer.c **** 		TIM_ResetCounter(LPC_TIM3);
 383              		.loc 2 92 0
 384 007c 44F20000 		movw	r0, #:lower16:1074348032
 385 0080 C4F20900 		movt	r0, #:upper16:1074348032
 386 0084 40F20003 		movw	r3, #:lower16:TIM_ResetCounter
 387 0088 C0F20003 		movt	r3, #:upper16:TIM_ResetCounter
 388 008c 9847     		blx	r3
 389              	.L24:
  93:..//drivers/timer/timer.c **** 		
  94:..//drivers/timer/timer.c **** 	return;
  95:..//drivers/timer/timer.c **** }
 390              		.loc 2 95 0
 391 008e 07F10807 		add	r7, r7, #8
 392 0092 BD46     		mov	sp, r7
 393 0094 80BD     		pop	{r7, pc}
 394              		.cfi_endproc
 395              	.LFE31:
 397 0096 00BF     		.section	.text.init_timer0,"ax",%progbits
 398              		.align	2
 399              		.global	init_timer0
 400              		.thumb
 401              		.thumb_func
 403              	init_timer0:
 404              	.LFB32:
  96:..//drivers/timer/timer.c **** 
  97:..//drivers/timer/timer.c **** /******************************************************************************
  98:..//drivers/timer/timer.c **** ** Function name:		init_timer
  99:..//drivers/timer/timer.c **** **
 100:..//drivers/timer/timer.c **** ** Descriptions:		Initialize timer, set timer interval, reset timer,
 101:..//drivers/timer/timer.c **** **				install timer interrupt handler
 102:..//drivers/timer/timer.c **** **
 103:..//drivers/timer/timer.c **** ** parameters:			None
 104:..//drivers/timer/timer.c **** ** Returned value:		true or false, if the interrupt handler can't be
 105:..//drivers/timer/timer.c **** **				installed, return false.
 106:..//drivers/timer/timer.c **** ** 
 107:..//drivers/timer/timer.c **** ******************************************************************************/
 108:..//drivers/timer/timer.c **** 
 109:..//drivers/timer/timer.c **** //---------Timer 0 initialized---------------
 110:..//drivers/timer/timer.c **** 
 111:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 112:..//drivers/timer/timer.c **** //--------------------------------------------------------
 113:..//drivers/timer/timer.c **** int init_timer0 (void){
 405              		.loc 2 113 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 1, uses_anonymous_args = 0
 409 0000 80B5     		push	{r7, lr}
 410              	.LCFI15:
 411              		.cfi_def_cfa_offset 8
 412 0002 00AF     		add	r7, sp, #0
 413              		.cfi_offset 14, -4
 414              		.cfi_offset 7, -8
 415              	.LCFI16:
 416              		.cfi_def_cfa_register 7
 114:..//drivers/timer/timer.c **** 	// Initialize timer 0, prescale count time of 100uS
 115:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 417              		.loc 2 115 0
 418 0004 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 419 0008 C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 420 000c 4FF00102 		mov	r2, #1
 421 0010 1A70     		strb	r2, [r3, #0]
 116:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1; // prescalar value for 1us
 422              		.loc 2 116 0
 423 0012 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 424 0016 C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 425 001a 4FF00102 		mov	r2, #1
 426 001e 5A60     		str	r2, [r3, #4]
 117:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 118:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 1;
 427              		.loc 2 118 0
 428 0020 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 429 0024 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 430 0028 4FF00102 		mov	r2, #1
 431 002c 1A70     		strb	r2, [r3, #0]
 119:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 120:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = ENABLE;
 432              		.loc 2 120 0
 433 002e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 434 0032 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 435 0036 4FF00102 		mov	r2, #1
 436 003a 5A70     		strb	r2, [r3, #1]
 121:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 122:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 437              		.loc 2 122 0
 438 003c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 439 0040 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 440 0044 4FF00102 		mov	r2, #1
 441 0048 DA70     		strb	r2, [r3, #3]
 123:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 124:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = FALSE;
 442              		.loc 2 124 0
 443 004a 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 444 004e C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 445 0052 4FF00002 		mov	r2, #0
 446 0056 9A70     		strb	r2, [r3, #2]
 125:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 126:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 447              		.loc 2 126 0
 448 0058 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 449 005c C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 450 0060 4FF00002 		mov	r2, #0
 451 0064 1A71     		strb	r2, [r3, #4]
 127:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 1000mS --> 1 Hz)
 128:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = 25;
 452              		.loc 2 128 0
 453 0066 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 454 006a C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 455 006e 4FF01902 		mov	r2, #25
 456 0072 9A60     		str	r2, [r3, #8]
 129:..//drivers/timer/timer.c **** 
 130:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 131:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
 457              		.loc 2 131 0
 458 0074 44F20000 		movw	r0, #:lower16:1073758208
 459 0078 C4F20000 		movt	r0, #:upper16:1073758208
 460 007c 4FF00001 		mov	r1, #0
 461 0080 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 462 0084 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 463 0088 40F20003 		movw	r3, #:lower16:TIM_Init
 464 008c C0F20003 		movt	r3, #:upper16:TIM_Init
 465 0090 9847     		blx	r3
 132:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM0,&TIM_MatchConfigStruct);
 466              		.loc 2 132 0
 467 0092 44F20000 		movw	r0, #:lower16:1073758208
 468 0096 C4F20000 		movt	r0, #:upper16:1073758208
 469 009a 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 470 009e C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 471 00a2 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 472 00a6 C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 473 00aa 9847     		blx	r3
 133:..//drivers/timer/timer.c **** 
 134:..//drivers/timer/timer.c **** //--------------------------------------------------------			
 135:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */
 136:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER0_IRQn, TIMER0_PRIORITY);
 474              		.loc 2 136 0
 475 00ac 4FF00100 		mov	r0, #1
 476 00b0 4FF00201 		mov	r1, #2
 477 00b4 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 478 00b8 C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 479 00bc 9847     		blx	r3
 137:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */
 138:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER0_IRQn);	
 480              		.loc 2 138 0
 481 00be 4FF00100 		mov	r0, #1
 482 00c2 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 483 00c6 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 484 00ca 9847     		blx	r3
 139:..//drivers/timer/timer.c **** 	return 0;
 485              		.loc 2 139 0
 486 00cc 4FF00003 		mov	r3, #0
 140:..//drivers/timer/timer.c **** }
 487              		.loc 2 140 0
 488 00d0 1846     		mov	r0, r3
 489 00d2 80BD     		pop	{r7, pc}
 490              		.cfi_endproc
 491              	.LFE32:
 493              		.section	.text.init_timer0_freq,"ax",%progbits
 494              		.align	2
 495              		.global	init_timer0_freq
 496              		.thumb
 497              		.thumb_func
 499              	init_timer0_freq:
 500              	.LFB33:
 141:..//drivers/timer/timer.c **** 
 142:..//drivers/timer/timer.c **** //---------Timer 0 initialized---------------
 143:..//drivers/timer/timer.c **** 
 144:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 145:..//drivers/timer/timer.c **** //--------------------------------------------------------
 146:..//drivers/timer/timer.c **** int init_timer0_freq (uint32_t freq){	
 501              		.loc 2 146 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 8
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505 0000 80B5     		push	{r7, lr}
 506              	.LCFI17:
 507              		.cfi_def_cfa_offset 8
 508 0002 82B0     		sub	sp, sp, #8
 509              	.LCFI18:
 510              		.cfi_def_cfa_offset 16
 511 0004 00AF     		add	r7, sp, #0
 512              		.cfi_offset 14, -4
 513              		.cfi_offset 7, -8
 514              	.LCFI19:
 515              		.cfi_def_cfa_register 7
 516 0006 7860     		str	r0, [r7, #4]
 147:..//drivers/timer/timer.c **** 	// Initialize timer 0, prescale count time of 1000uS
 148:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 517              		.loc 2 148 0
 518 0008 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 519 000c C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 520 0010 4FF00102 		mov	r2, #1
 521 0014 1A70     		strb	r2, [r3, #0]
 149:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1;
 522              		.loc 2 149 0
 523 0016 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 524 001a C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 525 001e 4FF00102 		mov	r2, #1
 526 0022 5A60     		str	r2, [r3, #4]
 150:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 151:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 0;
 527              		.loc 2 151 0
 528 0024 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 529 0028 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 530 002c 4FF00002 		mov	r2, #0
 531 0030 1A70     		strb	r2, [r3, #0]
 152:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 153:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
 532              		.loc 2 153 0
 533 0032 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 534 0036 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 535 003a 4FF00102 		mov	r2, #1
 536 003e 5A70     		strb	r2, [r3, #1]
 154:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 155:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 537              		.loc 2 155 0
 538 0040 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 539 0044 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 540 0048 4FF00102 		mov	r2, #1
 541 004c DA70     		strb	r2, [r3, #3]
 156:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 157:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = FALSE;
 542              		.loc 2 157 0
 543 004e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 544 0052 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 545 0056 4FF00002 		mov	r2, #0
 546 005a 9A70     		strb	r2, [r3, #2]
 158:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 159:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 547              		.loc 2 159 0
 548 005c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 549 0060 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 550 0064 4FF00002 		mov	r2, #0
 551 0068 1A71     		strb	r2, [r3, #4]
 160:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 100mS --> 1 Hz)
 161:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = freq;
 552              		.loc 2 161 0
 553 006a 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 554 006e C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 555 0072 7A68     		ldr	r2, [r7, #4]
 556 0074 9A60     		str	r2, [r3, #8]
 162:..//drivers/timer/timer.c **** 
 163:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 164:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
 557              		.loc 2 164 0
 558 0076 44F20000 		movw	r0, #:lower16:1073758208
 559 007a C4F20000 		movt	r0, #:upper16:1073758208
 560 007e 4FF00001 		mov	r1, #0
 561 0082 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 562 0086 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 563 008a 40F20003 		movw	r3, #:lower16:TIM_Init
 564 008e C0F20003 		movt	r3, #:upper16:TIM_Init
 565 0092 9847     		blx	r3
 165:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM0,&TIM_MatchConfigStruct);
 566              		.loc 2 165 0
 567 0094 44F20000 		movw	r0, #:lower16:1073758208
 568 0098 C4F20000 		movt	r0, #:upper16:1073758208
 569 009c 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 570 00a0 C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 571 00a4 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 572 00a8 C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 573 00ac 9847     		blx	r3
 166:..//drivers/timer/timer.c **** 
 167:..//drivers/timer/timer.c **** //--------------------------------------------------------		
 168:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */
 169:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER0_IRQn, TIMER0_PRIORITY);
 574              		.loc 2 169 0
 575 00ae 4FF00100 		mov	r0, #1
 576 00b2 4FF00201 		mov	r1, #2
 577 00b6 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 578 00ba C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 579 00be 9847     		blx	r3
 170:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */
 171:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER0_IRQn);
 580              		.loc 2 171 0
 581 00c0 4FF00100 		mov	r0, #1
 582 00c4 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 583 00c8 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 584 00cc 9847     		blx	r3
 172:..//drivers/timer/timer.c **** 	
 173:..//drivers/timer/timer.c **** 	return 0;
 585              		.loc 2 173 0
 586 00ce 4FF00003 		mov	r3, #0
 174:..//drivers/timer/timer.c **** }
 587              		.loc 2 174 0
 588 00d2 1846     		mov	r0, r3
 589 00d4 07F10807 		add	r7, r7, #8
 590 00d8 BD46     		mov	sp, r7
 591 00da 80BD     		pop	{r7, pc}
 592              		.cfi_endproc
 593              	.LFE33:
 595              		.section	.text.init_timer0_mode_match,"ax",%progbits
 596              		.align	2
 597              		.global	init_timer0_mode_match
 598              		.thumb
 599              		.thumb_func
 601              	init_timer0_mode_match:
 602              	.LFB34:
 175:..//drivers/timer/timer.c **** 
 176:..//drivers/timer/timer.c **** //---------Timer 0 initialized---------------
 177:..//drivers/timer/timer.c **** 
 178:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 179:..//drivers/timer/timer.c **** //--------------------------------------------------------
 180:..//drivers/timer/timer.c **** int init_timer0_mode_match (uint32_t mode, uint32_t match){
 603              		.loc 2 180 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 8
 606              		@ frame_needed = 1, uses_anonymous_args = 0
 607 0000 80B5     		push	{r7, lr}
 608              	.LCFI20:
 609              		.cfi_def_cfa_offset 8
 610 0002 82B0     		sub	sp, sp, #8
 611              	.LCFI21:
 612              		.cfi_def_cfa_offset 16
 613 0004 00AF     		add	r7, sp, #0
 614              		.cfi_offset 14, -4
 615              		.cfi_offset 7, -8
 616              	.LCFI22:
 617              		.cfi_def_cfa_register 7
 618 0006 7860     		str	r0, [r7, #4]
 619 0008 3960     		str	r1, [r7, #0]
 181:..//drivers/timer/timer.c **** 	// Initialize timer 0, prescale count time of 1000uS
 182:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 620              		.loc 2 182 0
 621 000a 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 622 000e C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 623 0012 4FF00102 		mov	r2, #1
 624 0016 1A70     		strb	r2, [r3, #0]
 183:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1;
 625              		.loc 2 183 0
 626 0018 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 627 001c C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 628 0020 4FF00102 		mov	r2, #1
 629 0024 5A60     		str	r2, [r3, #4]
 184:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 185:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 0;
 630              		.loc 2 185 0
 631 0026 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 632 002a C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 633 002e 4FF00002 		mov	r2, #0
 634 0032 1A70     		strb	r2, [r3, #0]
 186:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 187:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
 635              		.loc 2 187 0
 636 0034 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 637 0038 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 638 003c 4FF00102 		mov	r2, #1
 639 0040 5A70     		strb	r2, [r3, #1]
 188:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 189:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 640              		.loc 2 189 0
 641 0042 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 642 0046 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 643 004a 4FF00102 		mov	r2, #1
 644 004e DA70     		strb	r2, [r3, #3]
 190:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 191:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = FALSE;
 645              		.loc 2 191 0
 646 0050 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 647 0054 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 648 0058 4FF00002 		mov	r2, #0
 649 005c 9A70     		strb	r2, [r3, #2]
 192:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 193:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 650              		.loc 2 193 0
 651 005e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 652 0062 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 653 0066 4FF00002 		mov	r2, #0
 654 006a 1A71     		strb	r2, [r3, #4]
 194:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 100mS --> 1 Hz)
 195:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = match;
 655              		.loc 2 195 0
 656 006c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 657 0070 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 658 0074 3A68     		ldr	r2, [r7, #0]
 659 0076 9A60     		str	r2, [r3, #8]
 196:..//drivers/timer/timer.c **** 
 197:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 198:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM0, TIM_TIMER_MODE,&TIM_ConfigStruct);
 660              		.loc 2 198 0
 661 0078 44F20000 		movw	r0, #:lower16:1073758208
 662 007c C4F20000 		movt	r0, #:upper16:1073758208
 663 0080 4FF00001 		mov	r1, #0
 664 0084 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 665 0088 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 666 008c 40F20003 		movw	r3, #:lower16:TIM_Init
 667 0090 C0F20003 		movt	r3, #:upper16:TIM_Init
 668 0094 9847     		blx	r3
 199:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM0,&TIM_MatchConfigStruct);
 669              		.loc 2 199 0
 670 0096 44F20000 		movw	r0, #:lower16:1073758208
 671 009a C4F20000 		movt	r0, #:upper16:1073758208
 672 009e 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 673 00a2 C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 674 00a6 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 675 00aa C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 676 00ae 9847     		blx	r3
 200:..//drivers/timer/timer.c **** 
 201:..//drivers/timer/timer.c **** //--------------------------------------------------------		
 202:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */
 203:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER0_IRQn, TIMER0_PRIORITY);
 677              		.loc 2 203 0
 678 00b0 4FF00100 		mov	r0, #1
 679 00b4 4FF00201 		mov	r1, #2
 680 00b8 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 681 00bc C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 682 00c0 9847     		blx	r3
 204:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */
 205:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER0_IRQn);
 683              		.loc 2 205 0
 684 00c2 4FF00100 		mov	r0, #1
 685 00c6 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 686 00ca C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 687 00ce 9847     		blx	r3
 206:..//drivers/timer/timer.c **** 	
 207:..//drivers/timer/timer.c **** 	return 0;
 688              		.loc 2 207 0
 689 00d0 4FF00003 		mov	r3, #0
 208:..//drivers/timer/timer.c **** }
 690              		.loc 2 208 0
 691 00d4 1846     		mov	r0, r3
 692 00d6 07F10807 		add	r7, r7, #8
 693 00da BD46     		mov	sp, r7
 694 00dc 80BD     		pop	{r7, pc}
 695              		.cfi_endproc
 696              	.LFE34:
 698 00de 00BF     		.section	.text.init_timer1,"ax",%progbits
 699              		.align	2
 700              		.global	init_timer1
 701              		.thumb
 702              		.thumb_func
 704              	init_timer1:
 705              	.LFB35:
 209:..//drivers/timer/timer.c **** 
 210:..//drivers/timer/timer.c **** //---------Timer 1 initialized---------------
 211:..//drivers/timer/timer.c **** 
 212:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 213:..//drivers/timer/timer.c **** //--------------------------------------------------------
 214:..//drivers/timer/timer.c **** int init_timer1 (void){
 706              		.loc 2 214 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 1, uses_anonymous_args = 0
 710 0000 80B5     		push	{r7, lr}
 711              	.LCFI23:
 712              		.cfi_def_cfa_offset 8
 713 0002 00AF     		add	r7, sp, #0
 714              		.cfi_offset 14, -4
 715              		.cfi_offset 7, -8
 716              	.LCFI24:
 717              		.cfi_def_cfa_register 7
 215:..//drivers/timer/timer.c **** 	// Initialize timer 0, prescale count time of 1000uS
 216:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 718              		.loc 2 216 0
 719 0004 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 720 0008 C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 721 000c 4FF00102 		mov	r2, #1
 722 0010 1A70     		strb	r2, [r3, #0]
 217:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1;
 723              		.loc 2 217 0
 724 0012 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 725 0016 C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 726 001a 4FF00102 		mov	r2, #1
 727 001e 5A60     		str	r2, [r3, #4]
 218:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 219:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 0;
 728              		.loc 2 219 0
 729 0020 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 730 0024 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 731 0028 4FF00002 		mov	r2, #0
 732 002c 1A70     		strb	r2, [r3, #0]
 220:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 221:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
 733              		.loc 2 221 0
 734 002e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 735 0032 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 736 0036 4FF00102 		mov	r2, #1
 737 003a 5A70     		strb	r2, [r3, #1]
 222:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 223:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 738              		.loc 2 223 0
 739 003c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 740 0040 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 741 0044 4FF00102 		mov	r2, #1
 742 0048 DA70     		strb	r2, [r3, #3]
 224:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 225:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = TRUE;
 743              		.loc 2 225 0
 744 004a 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 745 004e C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 746 0052 4FF00102 		mov	r2, #1
 747 0056 9A70     		strb	r2, [r3, #2]
 226:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 227:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 748              		.loc 2 227 0
 749 0058 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 750 005c C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 751 0060 4FF00002 		mov	r2, #0
 752 0064 1A71     		strb	r2, [r3, #4]
 228:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 100mS --> 1 Hz)
 229:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = 1000;
 753              		.loc 2 229 0
 754 0066 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 755 006a C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 756 006e 4FF47A72 		mov	r2, #1000
 757 0072 9A60     		str	r2, [r3, #8]
 230:..//drivers/timer/timer.c **** 
 231:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 232:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM1, TIM_TIMER_MODE,&TIM_ConfigStruct);
 758              		.loc 2 232 0
 759 0074 48F20000 		movw	r0, #:lower16:1073774592
 760 0078 C4F20000 		movt	r0, #:upper16:1073774592
 761 007c 4FF00001 		mov	r1, #0
 762 0080 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 763 0084 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 764 0088 40F20003 		movw	r3, #:lower16:TIM_Init
 765 008c C0F20003 		movt	r3, #:upper16:TIM_Init
 766 0090 9847     		blx	r3
 233:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM1,&TIM_MatchConfigStruct);
 767              		.loc 2 233 0
 768 0092 48F20000 		movw	r0, #:lower16:1073774592
 769 0096 C4F20000 		movt	r0, #:upper16:1073774592
 770 009a 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 771 009e C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 772 00a2 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 773 00a6 C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 774 00aa 9847     		blx	r3
 234:..//drivers/timer/timer.c **** 
 235:..//drivers/timer/timer.c **** //--------------------------------------------------------		
 236:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */
 237:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER1_IRQn, TIMER1_PRIORITY);
 775              		.loc 2 237 0
 776 00ac 4FF00200 		mov	r0, #2
 777 00b0 4FF00401 		mov	r1, #4
 778 00b4 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 779 00b8 C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 780 00bc 9847     		blx	r3
 238:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */
 239:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER1_IRQn);
 781              		.loc 2 239 0
 782 00be 4FF00200 		mov	r0, #2
 783 00c2 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 784 00c6 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 785 00ca 9847     		blx	r3
 240:..//drivers/timer/timer.c **** 	
 241:..//drivers/timer/timer.c **** 	return 0;
 786              		.loc 2 241 0
 787 00cc 4FF00003 		mov	r3, #0
 242:..//drivers/timer/timer.c **** }
 788              		.loc 2 242 0
 789 00d0 1846     		mov	r0, r3
 790 00d2 80BD     		pop	{r7, pc}
 791              		.cfi_endproc
 792              	.LFE35:
 794              		.section	.text.init_timer1_freq,"ax",%progbits
 795              		.align	2
 796              		.global	init_timer1_freq
 797              		.thumb
 798              		.thumb_func
 800              	init_timer1_freq:
 801              	.LFB36:
 243:..//drivers/timer/timer.c **** 
 244:..//drivers/timer/timer.c **** //---------Timer 1 initialized---------------
 245:..//drivers/timer/timer.c **** 
 246:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 247:..//drivers/timer/timer.c **** //--------------------------------------------------------
 248:..//drivers/timer/timer.c **** int init_timer1_freq (uint32_t freq){
 802              		.loc 2 248 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 8
 805              		@ frame_needed = 1, uses_anonymous_args = 0
 806 0000 80B5     		push	{r7, lr}
 807              	.LCFI25:
 808              		.cfi_def_cfa_offset 8
 809 0002 82B0     		sub	sp, sp, #8
 810              	.LCFI26:
 811              		.cfi_def_cfa_offset 16
 812 0004 00AF     		add	r7, sp, #0
 813              		.cfi_offset 14, -4
 814              		.cfi_offset 7, -8
 815              	.LCFI27:
 816              		.cfi_def_cfa_register 7
 817 0006 7860     		str	r0, [r7, #4]
 249:..//drivers/timer/timer.c **** 	// Initialize timer 0, prescale count time of 1000uS
 250:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 818              		.loc 2 250 0
 819 0008 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 820 000c C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 821 0010 4FF00102 		mov	r2, #1
 822 0014 1A70     		strb	r2, [r3, #0]
 251:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1;
 823              		.loc 2 251 0
 824 0016 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 825 001a C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 826 001e 4FF00102 		mov	r2, #1
 827 0022 5A60     		str	r2, [r3, #4]
 252:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 253:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 0;
 828              		.loc 2 253 0
 829 0024 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 830 0028 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 831 002c 4FF00002 		mov	r2, #0
 832 0030 1A70     		strb	r2, [r3, #0]
 254:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 255:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
 833              		.loc 2 255 0
 834 0032 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 835 0036 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 836 003a 4FF00102 		mov	r2, #1
 837 003e 5A70     		strb	r2, [r3, #1]
 256:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 257:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 838              		.loc 2 257 0
 839 0040 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 840 0044 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 841 0048 4FF00102 		mov	r2, #1
 842 004c DA70     		strb	r2, [r3, #3]
 258:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 259:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = FALSE;
 843              		.loc 2 259 0
 844 004e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 845 0052 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 846 0056 4FF00002 		mov	r2, #0
 847 005a 9A70     		strb	r2, [r3, #2]
 260:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 261:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 848              		.loc 2 261 0
 849 005c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 850 0060 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 851 0064 4FF00002 		mov	r2, #0
 852 0068 1A71     		strb	r2, [r3, #4]
 262:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 100mS --> 1 Hz)
 263:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = freq;
 853              		.loc 2 263 0
 854 006a 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 855 006e C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 856 0072 7A68     		ldr	r2, [r7, #4]
 857 0074 9A60     		str	r2, [r3, #8]
 264:..//drivers/timer/timer.c **** 
 265:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 266:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM1, TIM_TIMER_MODE,&TIM_ConfigStruct);
 858              		.loc 2 266 0
 859 0076 48F20000 		movw	r0, #:lower16:1073774592
 860 007a C4F20000 		movt	r0, #:upper16:1073774592
 861 007e 4FF00001 		mov	r1, #0
 862 0082 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 863 0086 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 864 008a 40F20003 		movw	r3, #:lower16:TIM_Init
 865 008e C0F20003 		movt	r3, #:upper16:TIM_Init
 866 0092 9847     		blx	r3
 267:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM1,&TIM_MatchConfigStruct);
 867              		.loc 2 267 0
 868 0094 48F20000 		movw	r0, #:lower16:1073774592
 869 0098 C4F20000 		movt	r0, #:upper16:1073774592
 870 009c 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 871 00a0 C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 872 00a4 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 873 00a8 C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 874 00ac 9847     		blx	r3
 268:..//drivers/timer/timer.c **** 
 269:..//drivers/timer/timer.c **** //--------------------------------------------------------		
 270:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */
 271:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER1_IRQn, TIMER1_PRIORITY);
 875              		.loc 2 271 0
 876 00ae 4FF00200 		mov	r0, #2
 877 00b2 4FF00401 		mov	r1, #4
 878 00b6 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 879 00ba C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 880 00be 9847     		blx	r3
 272:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */
 273:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER1_IRQn);
 881              		.loc 2 273 0
 882 00c0 4FF00200 		mov	r0, #2
 883 00c4 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 884 00c8 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 885 00cc 9847     		blx	r3
 274:..//drivers/timer/timer.c **** 	
 275:..//drivers/timer/timer.c **** 	return 0;
 886              		.loc 2 275 0
 887 00ce 4FF00003 		mov	r3, #0
 276:..//drivers/timer/timer.c **** }
 888              		.loc 2 276 0
 889 00d2 1846     		mov	r0, r3
 890 00d4 07F10807 		add	r7, r7, #8
 891 00d8 BD46     		mov	sp, r7
 892 00da 80BD     		pop	{r7, pc}
 893              		.cfi_endproc
 894              	.LFE36:
 896              		.section	.text.init_timer1_mode_match,"ax",%progbits
 897              		.align	2
 898              		.global	init_timer1_mode_match
 899              		.thumb
 900              		.thumb_func
 902              	init_timer1_mode_match:
 903              	.LFB37:
 277:..//drivers/timer/timer.c **** 
 278:..//drivers/timer/timer.c **** //---------Timer 1 initialized---------------
 279:..//drivers/timer/timer.c **** 
 280:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 281:..//drivers/timer/timer.c **** //--------------------------------------------------------
 282:..//drivers/timer/timer.c **** int init_timer1_mode_match (uint32_t mode, uint32_t match){
 904              		.loc 2 282 0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 8
 907              		@ frame_needed = 1, uses_anonymous_args = 0
 908 0000 80B5     		push	{r7, lr}
 909              	.LCFI28:
 910              		.cfi_def_cfa_offset 8
 911 0002 82B0     		sub	sp, sp, #8
 912              	.LCFI29:
 913              		.cfi_def_cfa_offset 16
 914 0004 00AF     		add	r7, sp, #0
 915              		.cfi_offset 14, -4
 916              		.cfi_offset 7, -8
 917              	.LCFI30:
 918              		.cfi_def_cfa_register 7
 919 0006 7860     		str	r0, [r7, #4]
 920 0008 3960     		str	r1, [r7, #0]
 283:..//drivers/timer/timer.c **** 	// Initialize timer 0, prescale count time of 1000uS
 284:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 921              		.loc 2 284 0
 922 000a 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 923 000e C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 924 0012 4FF00102 		mov	r2, #1
 925 0016 1A70     		strb	r2, [r3, #0]
 285:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1;
 926              		.loc 2 285 0
 927 0018 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 928 001c C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 929 0020 4FF00102 		mov	r2, #1
 930 0024 5A60     		str	r2, [r3, #4]
 286:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 287:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 0;
 931              		.loc 2 287 0
 932 0026 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 933 002a C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 934 002e 4FF00002 		mov	r2, #0
 935 0032 1A70     		strb	r2, [r3, #0]
 288:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 289:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
 936              		.loc 2 289 0
 937 0034 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 938 0038 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 939 003c 4FF00102 		mov	r2, #1
 940 0040 5A70     		strb	r2, [r3, #1]
 290:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 291:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 941              		.loc 2 291 0
 942 0042 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 943 0046 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 944 004a 4FF00102 		mov	r2, #1
 945 004e DA70     		strb	r2, [r3, #3]
 292:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 293:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = TRUE;
 946              		.loc 2 293 0
 947 0050 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 948 0054 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 949 0058 4FF00102 		mov	r2, #1
 950 005c 9A70     		strb	r2, [r3, #2]
 294:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 295:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 951              		.loc 2 295 0
 952 005e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 953 0062 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 954 0066 4FF00002 		mov	r2, #0
 955 006a 1A71     		strb	r2, [r3, #4]
 296:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 100mS --> 1 Hz)
 297:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = match;
 956              		.loc 2 297 0
 957 006c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 958 0070 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 959 0074 3A68     		ldr	r2, [r7, #0]
 960 0076 9A60     		str	r2, [r3, #8]
 298:..//drivers/timer/timer.c **** 
 299:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 300:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM1, TIM_TIMER_MODE,&TIM_ConfigStruct);
 961              		.loc 2 300 0
 962 0078 48F20000 		movw	r0, #:lower16:1073774592
 963 007c C4F20000 		movt	r0, #:upper16:1073774592
 964 0080 4FF00001 		mov	r1, #0
 965 0084 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 966 0088 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 967 008c 40F20003 		movw	r3, #:lower16:TIM_Init
 968 0090 C0F20003 		movt	r3, #:upper16:TIM_Init
 969 0094 9847     		blx	r3
 301:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM1,&TIM_MatchConfigStruct);
 970              		.loc 2 301 0
 971 0096 48F20000 		movw	r0, #:lower16:1073774592
 972 009a C4F20000 		movt	r0, #:upper16:1073774592
 973 009e 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 974 00a2 C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 975 00a6 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 976 00aa C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 977 00ae 9847     		blx	r3
 302:..//drivers/timer/timer.c **** 
 303:..//drivers/timer/timer.c **** //--------------------------------------------------------		
 304:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */
 305:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER1_IRQn, TIMER1_PRIORITY);
 978              		.loc 2 305 0
 979 00b0 4FF00200 		mov	r0, #2
 980 00b4 4FF00401 		mov	r1, #4
 981 00b8 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 982 00bc C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 983 00c0 9847     		blx	r3
 306:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */
 307:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER1_IRQn);
 984              		.loc 2 307 0
 985 00c2 4FF00200 		mov	r0, #2
 986 00c6 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 987 00ca C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 988 00ce 9847     		blx	r3
 308:..//drivers/timer/timer.c **** 	
 309:..//drivers/timer/timer.c **** 	return 0;
 989              		.loc 2 309 0
 990 00d0 4FF00003 		mov	r3, #0
 310:..//drivers/timer/timer.c **** }
 991              		.loc 2 310 0
 992 00d4 1846     		mov	r0, r3
 993 00d6 07F10807 		add	r7, r7, #8
 994 00da BD46     		mov	sp, r7
 995 00dc 80BD     		pop	{r7, pc}
 996              		.cfi_endproc
 997              	.LFE37:
 999 00de 00BF     		.section	.text.init_timer2,"ax",%progbits
 1000              		.align	2
 1001              		.global	init_timer2
 1002              		.thumb
 1003              		.thumb_func
 1005              	init_timer2:
 1006              	.LFB38:
 311:..//drivers/timer/timer.c **** 
 312:..//drivers/timer/timer.c **** //---------Timer 2 initialized---------------
 313:..//drivers/timer/timer.c **** 
 314:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 315:..//drivers/timer/timer.c **** //--------------------------------------------------------
 316:..//drivers/timer/timer.c **** int init_timer2 (void){
 1007              		.loc 2 316 0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 0
 1010              		@ frame_needed = 1, uses_anonymous_args = 0
 1011 0000 80B5     		push	{r7, lr}
 1012              	.LCFI31:
 1013              		.cfi_def_cfa_offset 8
 1014 0002 00AF     		add	r7, sp, #0
 1015              		.cfi_offset 14, -4
 1016              		.cfi_offset 7, -8
 1017              	.LCFI32:
 1018              		.cfi_def_cfa_register 7
 317:..//drivers/timer/timer.c **** 	// Initialize timer 2, prescale count time of 1000uS
 318:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 1019              		.loc 2 318 0
 1020 0004 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1021 0008 C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1022 000c 4FF00102 		mov	r2, #1
 1023 0010 1A70     		strb	r2, [r3, #0]
 319:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1;
 1024              		.loc 2 319 0
 1025 0012 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1026 0016 C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1027 001a 4FF00102 		mov	r2, #1
 1028 001e 5A60     		str	r2, [r3, #4]
 320:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 321:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 0;
 1029              		.loc 2 321 0
 1030 0020 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1031 0024 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1032 0028 4FF00002 		mov	r2, #0
 1033 002c 1A70     		strb	r2, [r3, #0]
 322:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 323:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
 1034              		.loc 2 323 0
 1035 002e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1036 0032 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1037 0036 4FF00102 		mov	r2, #1
 1038 003a 5A70     		strb	r2, [r3, #1]
 324:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 325:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 1039              		.loc 2 325 0
 1040 003c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1041 0040 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1042 0044 4FF00102 		mov	r2, #1
 1043 0048 DA70     		strb	r2, [r3, #3]
 326:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 327:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = FALSE;
 1044              		.loc 2 327 0
 1045 004a 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1046 004e C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1047 0052 4FF00002 		mov	r2, #0
 1048 0056 9A70     		strb	r2, [r3, #2]
 328:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 329:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 1049              		.loc 2 329 0
 1050 0058 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1051 005c C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1052 0060 4FF00002 		mov	r2, #0
 1053 0064 1A71     		strb	r2, [r3, #4]
 330:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 100mS --> 1 Hz)
 331:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = 1;
 1054              		.loc 2 331 0
 1055 0066 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1056 006a C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1057 006e 4FF00102 		mov	r2, #1
 1058 0072 9A60     		str	r2, [r3, #8]
 332:..//drivers/timer/timer.c **** 
 333:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 334:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM2, TIM_TIMER_MODE,&TIM_ConfigStruct);
 1059              		.loc 2 334 0
 1060 0074 40F20000 		movw	r0, #:lower16:1074331648
 1061 0078 C4F20900 		movt	r0, #:upper16:1074331648
 1062 007c 4FF00001 		mov	r1, #0
 1063 0080 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 1064 0084 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 1065 0088 40F20003 		movw	r3, #:lower16:TIM_Init
 1066 008c C0F20003 		movt	r3, #:upper16:TIM_Init
 1067 0090 9847     		blx	r3
 335:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM2,&TIM_MatchConfigStruct);
 1068              		.loc 2 335 0
 1069 0092 40F20000 		movw	r0, #:lower16:1074331648
 1070 0096 C4F20900 		movt	r0, #:upper16:1074331648
 1071 009a 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 1072 009e C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 1073 00a2 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 1074 00a6 C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 1075 00aa 9847     		blx	r3
 336:..//drivers/timer/timer.c **** 
 337:..//drivers/timer/timer.c **** //--------------------------------------------------------		
 338:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */
 339:..//drivers/timer/timer.c **** 	// NVIC_SetPriority((IRQn_Type)ISR_Tc2, ((0x01<<3)|0x01));
 340:..//drivers/timer/timer.c **** 	// NVIC_SetPriority((IRQn_Type)ISR_Tc2, (3));
 341:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER2_IRQn, TIMER2_PRIORITY);
 1076              		.loc 2 341 0
 1077 00ac 4FF00300 		mov	r0, #3
 1078 00b0 4FF00501 		mov	r1, #5
 1079 00b4 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 1080 00b8 C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 1081 00bc 9847     		blx	r3
 342:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */
 343:..//drivers/timer/timer.c **** 	// NVIC_EnableIRQ((IRQn_Type)ISR_Tc2);
 344:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER2_IRQn);	
 1082              		.loc 2 344 0
 1083 00be 4FF00300 		mov	r0, #3
 1084 00c2 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 1085 00c6 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 1086 00ca 9847     		blx	r3
 345:..//drivers/timer/timer.c **** 	
 346:..//drivers/timer/timer.c **** 	return 0;
 1087              		.loc 2 346 0
 1088 00cc 4FF00003 		mov	r3, #0
 347:..//drivers/timer/timer.c **** }
 1089              		.loc 2 347 0
 1090 00d0 1846     		mov	r0, r3
 1091 00d2 80BD     		pop	{r7, pc}
 1092              		.cfi_endproc
 1093              	.LFE38:
 1095              		.section	.text.init_timer2_freq,"ax",%progbits
 1096              		.align	2
 1097              		.global	init_timer2_freq
 1098              		.thumb
 1099              		.thumb_func
 1101              	init_timer2_freq:
 1102              	.LFB39:
 348:..//drivers/timer/timer.c **** 
 349:..//drivers/timer/timer.c **** //---------Timer 2 initialized---------------
 350:..//drivers/timer/timer.c **** 
 351:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 352:..//drivers/timer/timer.c **** //--------------------------------------------------------
 353:..//drivers/timer/timer.c **** int init_timer2_freq (uint32_t freq){
 1103              		.loc 2 353 0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 8
 1106              		@ frame_needed = 1, uses_anonymous_args = 0
 1107 0000 80B5     		push	{r7, lr}
 1108              	.LCFI33:
 1109              		.cfi_def_cfa_offset 8
 1110 0002 82B0     		sub	sp, sp, #8
 1111              	.LCFI34:
 1112              		.cfi_def_cfa_offset 16
 1113 0004 00AF     		add	r7, sp, #0
 1114              		.cfi_offset 14, -4
 1115              		.cfi_offset 7, -8
 1116              	.LCFI35:
 1117              		.cfi_def_cfa_register 7
 1118 0006 7860     		str	r0, [r7, #4]
 354:..//drivers/timer/timer.c **** 	// Initialize timer 0, prescale count time of 1000uS
 355:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 1119              		.loc 2 355 0
 1120 0008 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1121 000c C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1122 0010 4FF00102 		mov	r2, #1
 1123 0014 1A70     		strb	r2, [r3, #0]
 356:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1;
 1124              		.loc 2 356 0
 1125 0016 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1126 001a C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1127 001e 4FF00102 		mov	r2, #1
 1128 0022 5A60     		str	r2, [r3, #4]
 357:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 358:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 0;
 1129              		.loc 2 358 0
 1130 0024 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1131 0028 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1132 002c 4FF00002 		mov	r2, #0
 1133 0030 1A70     		strb	r2, [r3, #0]
 359:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 360:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
 1134              		.loc 2 360 0
 1135 0032 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1136 0036 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1137 003a 4FF00102 		mov	r2, #1
 1138 003e 5A70     		strb	r2, [r3, #1]
 361:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 362:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 1139              		.loc 2 362 0
 1140 0040 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1141 0044 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1142 0048 4FF00102 		mov	r2, #1
 1143 004c DA70     		strb	r2, [r3, #3]
 363:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 364:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = TRUE;
 1144              		.loc 2 364 0
 1145 004e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1146 0052 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1147 0056 4FF00102 		mov	r2, #1
 1148 005a 9A70     		strb	r2, [r3, #2]
 365:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 366:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 1149              		.loc 2 366 0
 1150 005c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1151 0060 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1152 0064 4FF00002 		mov	r2, #0
 1153 0068 1A71     		strb	r2, [r3, #4]
 367:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 100mS --> 1 Hz)
 368:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = freq;
 1154              		.loc 2 368 0
 1155 006a 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1156 006e C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1157 0072 7A68     		ldr	r2, [r7, #4]
 1158 0074 9A60     		str	r2, [r3, #8]
 369:..//drivers/timer/timer.c **** 
 370:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 371:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM2, TIM_TIMER_MODE,&TIM_ConfigStruct);
 1159              		.loc 2 371 0
 1160 0076 40F20000 		movw	r0, #:lower16:1074331648
 1161 007a C4F20900 		movt	r0, #:upper16:1074331648
 1162 007e 4FF00001 		mov	r1, #0
 1163 0082 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 1164 0086 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 1165 008a 40F20003 		movw	r3, #:lower16:TIM_Init
 1166 008e C0F20003 		movt	r3, #:upper16:TIM_Init
 1167 0092 9847     		blx	r3
 372:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM2,&TIM_MatchConfigStruct);
 1168              		.loc 2 372 0
 1169 0094 40F20000 		movw	r0, #:lower16:1074331648
 1170 0098 C4F20900 		movt	r0, #:upper16:1074331648
 1171 009c 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 1172 00a0 C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 1173 00a4 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 1174 00a8 C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 1175 00ac 9847     		blx	r3
 373:..//drivers/timer/timer.c **** 
 374:..//drivers/timer/timer.c **** //--------------------------------------------------------		
 375:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */
 376:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER2_IRQn, TIMER2_PRIORITY);
 1176              		.loc 2 376 0
 1177 00ae 4FF00300 		mov	r0, #3
 1178 00b2 4FF00501 		mov	r1, #5
 1179 00b6 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 1180 00ba C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 1181 00be 9847     		blx	r3
 377:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */
 378:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER2_IRQn);
 1182              		.loc 2 378 0
 1183 00c0 4FF00300 		mov	r0, #3
 1184 00c4 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 1185 00c8 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 1186 00cc 9847     		blx	r3
 379:..//drivers/timer/timer.c **** 	
 380:..//drivers/timer/timer.c **** 	return 0;
 1187              		.loc 2 380 0
 1188 00ce 4FF00003 		mov	r3, #0
 381:..//drivers/timer/timer.c **** }
 1189              		.loc 2 381 0
 1190 00d2 1846     		mov	r0, r3
 1191 00d4 07F10807 		add	r7, r7, #8
 1192 00d8 BD46     		mov	sp, r7
 1193 00da 80BD     		pop	{r7, pc}
 1194              		.cfi_endproc
 1195              	.LFE39:
 1197              		.section	.text.init_timer2_mode_match,"ax",%progbits
 1198              		.align	2
 1199              		.global	init_timer2_mode_match
 1200              		.thumb
 1201              		.thumb_func
 1203              	init_timer2_mode_match:
 1204              	.LFB40:
 382:..//drivers/timer/timer.c **** 
 383:..//drivers/timer/timer.c **** //---------Timer 2 initialized---------------
 384:..//drivers/timer/timer.c **** 
 385:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 386:..//drivers/timer/timer.c **** //--------------------------------------------------------
 387:..//drivers/timer/timer.c **** int init_timer2_mode_match (uint32_t mode, uint32_t match){
 1205              		.loc 2 387 0
 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 8
 1208              		@ frame_needed = 1, uses_anonymous_args = 0
 1209 0000 80B5     		push	{r7, lr}
 1210              	.LCFI36:
 1211              		.cfi_def_cfa_offset 8
 1212 0002 82B0     		sub	sp, sp, #8
 1213              	.LCFI37:
 1214              		.cfi_def_cfa_offset 16
 1215 0004 00AF     		add	r7, sp, #0
 1216              		.cfi_offset 14, -4
 1217              		.cfi_offset 7, -8
 1218              	.LCFI38:
 1219              		.cfi_def_cfa_register 7
 1220 0006 7860     		str	r0, [r7, #4]
 1221 0008 3960     		str	r1, [r7, #0]
 388:..//drivers/timer/timer.c **** 	// Initialize timer 0, prescale count time of 1000uS
 389:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 1222              		.loc 2 389 0
 1223 000a 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1224 000e C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1225 0012 4FF00102 		mov	r2, #1
 1226 0016 1A70     		strb	r2, [r3, #0]
 390:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1;
 1227              		.loc 2 390 0
 1228 0018 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1229 001c C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1230 0020 4FF00102 		mov	r2, #1
 1231 0024 5A60     		str	r2, [r3, #4]
 391:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 392:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 0;
 1232              		.loc 2 392 0
 1233 0026 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1234 002a C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1235 002e 4FF00002 		mov	r2, #0
 1236 0032 1A70     		strb	r2, [r3, #0]
 393:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 394:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
 1237              		.loc 2 394 0
 1238 0034 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1239 0038 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1240 003c 4FF00102 		mov	r2, #1
 1241 0040 5A70     		strb	r2, [r3, #1]
 395:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 396:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 1242              		.loc 2 396 0
 1243 0042 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1244 0046 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1245 004a 4FF00102 		mov	r2, #1
 1246 004e DA70     		strb	r2, [r3, #3]
 397:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 398:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = FALSE;
 1247              		.loc 2 398 0
 1248 0050 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1249 0054 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1250 0058 4FF00002 		mov	r2, #0
 1251 005c 9A70     		strb	r2, [r3, #2]
 399:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 400:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 1252              		.loc 2 400 0
 1253 005e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1254 0062 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1255 0066 4FF00002 		mov	r2, #0
 1256 006a 1A71     		strb	r2, [r3, #4]
 401:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 100mS --> 1 Hz)
 402:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = match;
 1257              		.loc 2 402 0
 1258 006c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1259 0070 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1260 0074 3A68     		ldr	r2, [r7, #0]
 1261 0076 9A60     		str	r2, [r3, #8]
 403:..//drivers/timer/timer.c **** 
 404:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 405:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM2, TIM_TIMER_MODE,&TIM_ConfigStruct);
 1262              		.loc 2 405 0
 1263 0078 40F20000 		movw	r0, #:lower16:1074331648
 1264 007c C4F20900 		movt	r0, #:upper16:1074331648
 1265 0080 4FF00001 		mov	r1, #0
 1266 0084 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 1267 0088 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 1268 008c 40F20003 		movw	r3, #:lower16:TIM_Init
 1269 0090 C0F20003 		movt	r3, #:upper16:TIM_Init
 1270 0094 9847     		blx	r3
 406:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM2,&TIM_MatchConfigStruct);
 1271              		.loc 2 406 0
 1272 0096 40F20000 		movw	r0, #:lower16:1074331648
 1273 009a C4F20900 		movt	r0, #:upper16:1074331648
 1274 009e 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 1275 00a2 C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 1276 00a6 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 1277 00aa C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 1278 00ae 9847     		blx	r3
 407:..//drivers/timer/timer.c **** 
 408:..//drivers/timer/timer.c **** //--------------------------------------------------------		
 409:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */
 410:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER2_IRQn, TIMER2_PRIORITY);
 1279              		.loc 2 410 0
 1280 00b0 4FF00300 		mov	r0, #3
 1281 00b4 4FF00501 		mov	r1, #5
 1282 00b8 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 1283 00bc C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 1284 00c0 9847     		blx	r3
 411:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */
 412:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER2_IRQn);
 1285              		.loc 2 412 0
 1286 00c2 4FF00300 		mov	r0, #3
 1287 00c6 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 1288 00ca C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 1289 00ce 9847     		blx	r3
 413:..//drivers/timer/timer.c **** 	
 414:..//drivers/timer/timer.c **** 	return 0;
 1290              		.loc 2 414 0
 1291 00d0 4FF00003 		mov	r3, #0
 415:..//drivers/timer/timer.c **** }
 1292              		.loc 2 415 0
 1293 00d4 1846     		mov	r0, r3
 1294 00d6 07F10807 		add	r7, r7, #8
 1295 00da BD46     		mov	sp, r7
 1296 00dc 80BD     		pop	{r7, pc}
 1297              		.cfi_endproc
 1298              	.LFE40:
 1300 00de 00BF     		.section	.text.init_timer3,"ax",%progbits
 1301              		.align	2
 1302              		.global	init_timer3
 1303              		.thumb
 1304              		.thumb_func
 1306              	init_timer3:
 1307              	.LFB41:
 416:..//drivers/timer/timer.c **** 
 417:..//drivers/timer/timer.c **** //---------Timer 3 initialized---------------
 418:..//drivers/timer/timer.c **** 
 419:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 420:..//drivers/timer/timer.c **** //--------------------------------------------------------
 421:..//drivers/timer/timer.c **** int init_timer3 (void){
 1308              		.loc 2 421 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 0
 1311              		@ frame_needed = 1, uses_anonymous_args = 0
 1312 0000 80B5     		push	{r7, lr}
 1313              	.LCFI39:
 1314              		.cfi_def_cfa_offset 8
 1315 0002 00AF     		add	r7, sp, #0
 1316              		.cfi_offset 14, -4
 1317              		.cfi_offset 7, -8
 1318              	.LCFI40:
 1319              		.cfi_def_cfa_register 7
 422:..//drivers/timer/timer.c **** 	// Initialize timer 2, prescale count time of 1000uS
 423:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 1320              		.loc 2 423 0
 1321 0004 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1322 0008 C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1323 000c 4FF00102 		mov	r2, #1
 1324 0010 1A70     		strb	r2, [r3, #0]
 424:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1000;
 1325              		.loc 2 424 0
 1326 0012 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1327 0016 C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1328 001a 4FF47A72 		mov	r2, #1000
 1329 001e 5A60     		str	r2, [r3, #4]
 425:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 426:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 0;
 1330              		.loc 2 426 0
 1331 0020 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1332 0024 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1333 0028 4FF00002 		mov	r2, #0
 1334 002c 1A70     		strb	r2, [r3, #0]
 427:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 428:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
 1335              		.loc 2 428 0
 1336 002e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1337 0032 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1338 0036 4FF00102 		mov	r2, #1
 1339 003a 5A70     		strb	r2, [r3, #1]
 429:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 430:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 1340              		.loc 2 430 0
 1341 003c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1342 0040 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1343 0044 4FF00102 		mov	r2, #1
 1344 0048 DA70     		strb	r2, [r3, #3]
 431:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 432:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = FALSE;
 1345              		.loc 2 432 0
 1346 004a 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1347 004e C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1348 0052 4FF00002 		mov	r2, #0
 1349 0056 9A70     		strb	r2, [r3, #2]
 433:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 434:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 1350              		.loc 2 434 0
 1351 0058 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1352 005c C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1353 0060 4FF00002 		mov	r2, #0
 1354 0064 1A71     		strb	r2, [r3, #4]
 435:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 100mS --> 1 Hz)
 436:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = 1000;
 1355              		.loc 2 436 0
 1356 0066 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1357 006a C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1358 006e 4FF47A72 		mov	r2, #1000
 1359 0072 9A60     		str	r2, [r3, #8]
 437:..//drivers/timer/timer.c **** 
 438:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 439:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM3, TIM_TIMER_MODE,&TIM_ConfigStruct);
 1360              		.loc 2 439 0
 1361 0074 44F20000 		movw	r0, #:lower16:1074348032
 1362 0078 C4F20900 		movt	r0, #:upper16:1074348032
 1363 007c 4FF00001 		mov	r1, #0
 1364 0080 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 1365 0084 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 1366 0088 40F20003 		movw	r3, #:lower16:TIM_Init
 1367 008c C0F20003 		movt	r3, #:upper16:TIM_Init
 1368 0090 9847     		blx	r3
 440:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM3,&TIM_MatchConfigStruct);
 1369              		.loc 2 440 0
 1370 0092 44F20000 		movw	r0, #:lower16:1074348032
 1371 0096 C4F20900 		movt	r0, #:upper16:1074348032
 1372 009a 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 1373 009e C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 1374 00a2 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 1375 00a6 C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 1376 00aa 9847     		blx	r3
 441:..//drivers/timer/timer.c **** 
 442:..//drivers/timer/timer.c **** //--------------------------------------------------------		
 443:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */	
 444:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER3_IRQn, TIMER3_PRIORITY);
 1377              		.loc 2 444 0
 1378 00ac 4FF00400 		mov	r0, #4
 1379 00b0 4FF00601 		mov	r1, #6
 1380 00b4 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 1381 00b8 C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 1382 00bc 9847     		blx	r3
 445:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */	
 446:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER3_IRQn);	
 1383              		.loc 2 446 0
 1384 00be 4FF00400 		mov	r0, #4
 1385 00c2 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 1386 00c6 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 1387 00ca 9847     		blx	r3
 447:..//drivers/timer/timer.c **** 	
 448:..//drivers/timer/timer.c **** 	return 0;
 1388              		.loc 2 448 0
 1389 00cc 4FF00003 		mov	r3, #0
 449:..//drivers/timer/timer.c **** }
 1390              		.loc 2 449 0
 1391 00d0 1846     		mov	r0, r3
 1392 00d2 80BD     		pop	{r7, pc}
 1393              		.cfi_endproc
 1394              	.LFE41:
 1396              		.section	.text.init_timer3_freq,"ax",%progbits
 1397              		.align	2
 1398              		.global	init_timer3_freq
 1399              		.thumb
 1400              		.thumb_func
 1402              	init_timer3_freq:
 1403              	.LFB42:
 450:..//drivers/timer/timer.c **** 
 451:..//drivers/timer/timer.c **** //---------Timer 2 initialized---------------
 452:..//drivers/timer/timer.c **** 
 453:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 454:..//drivers/timer/timer.c **** //--------------------------------------------------------
 455:..//drivers/timer/timer.c **** int init_timer3_freq (uint32_t freq){
 1404              		.loc 2 455 0
 1405              		.cfi_startproc
 1406              		@ args = 0, pretend = 0, frame = 8
 1407              		@ frame_needed = 1, uses_anonymous_args = 0
 1408 0000 80B5     		push	{r7, lr}
 1409              	.LCFI41:
 1410              		.cfi_def_cfa_offset 8
 1411 0002 82B0     		sub	sp, sp, #8
 1412              	.LCFI42:
 1413              		.cfi_def_cfa_offset 16
 1414 0004 00AF     		add	r7, sp, #0
 1415              		.cfi_offset 14, -4
 1416              		.cfi_offset 7, -8
 1417              	.LCFI43:
 1418              		.cfi_def_cfa_register 7
 1419 0006 7860     		str	r0, [r7, #4]
 456:..//drivers/timer/timer.c **** 	// Initialize timer 0, prescale count time of 1000uS
 457:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 1420              		.loc 2 457 0
 1421 0008 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1422 000c C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1423 0010 4FF00102 		mov	r2, #1
 1424 0014 1A70     		strb	r2, [r3, #0]
 458:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1;
 1425              		.loc 2 458 0
 1426 0016 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1427 001a C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1428 001e 4FF00102 		mov	r2, #1
 1429 0022 5A60     		str	r2, [r3, #4]
 459:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 460:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 0;
 1430              		.loc 2 460 0
 1431 0024 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1432 0028 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1433 002c 4FF00002 		mov	r2, #0
 1434 0030 1A70     		strb	r2, [r3, #0]
 461:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 462:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
 1435              		.loc 2 462 0
 1436 0032 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1437 0036 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1438 003a 4FF00102 		mov	r2, #1
 1439 003e 5A70     		strb	r2, [r3, #1]
 463:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 464:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 1440              		.loc 2 464 0
 1441 0040 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1442 0044 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1443 0048 4FF00102 		mov	r2, #1
 1444 004c DA70     		strb	r2, [r3, #3]
 465:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 466:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = FALSE;
 1445              		.loc 2 466 0
 1446 004e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1447 0052 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1448 0056 4FF00002 		mov	r2, #0
 1449 005a 9A70     		strb	r2, [r3, #2]
 467:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 468:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 1450              		.loc 2 468 0
 1451 005c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1452 0060 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1453 0064 4FF00002 		mov	r2, #0
 1454 0068 1A71     		strb	r2, [r3, #4]
 469:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 100mS --> 1 Hz)
 470:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = freq;
 1455              		.loc 2 470 0
 1456 006a 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1457 006e C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1458 0072 7A68     		ldr	r2, [r7, #4]
 1459 0074 9A60     		str	r2, [r3, #8]
 471:..//drivers/timer/timer.c **** 
 472:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 473:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM3, TIM_TIMER_MODE,&TIM_ConfigStruct);
 1460              		.loc 2 473 0
 1461 0076 44F20000 		movw	r0, #:lower16:1074348032
 1462 007a C4F20900 		movt	r0, #:upper16:1074348032
 1463 007e 4FF00001 		mov	r1, #0
 1464 0082 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 1465 0086 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 1466 008a 40F20003 		movw	r3, #:lower16:TIM_Init
 1467 008e C0F20003 		movt	r3, #:upper16:TIM_Init
 1468 0092 9847     		blx	r3
 474:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM3,&TIM_MatchConfigStruct);
 1469              		.loc 2 474 0
 1470 0094 44F20000 		movw	r0, #:lower16:1074348032
 1471 0098 C4F20900 		movt	r0, #:upper16:1074348032
 1472 009c 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 1473 00a0 C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 1474 00a4 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 1475 00a8 C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 1476 00ac 9847     		blx	r3
 475:..//drivers/timer/timer.c **** 
 476:..//drivers/timer/timer.c **** //--------------------------------------------------------		
 477:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */
 478:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER3_IRQn, TIMER3_PRIORITY);
 1477              		.loc 2 478 0
 1478 00ae 4FF00400 		mov	r0, #4
 1479 00b2 4FF00601 		mov	r1, #6
 1480 00b6 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 1481 00ba C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 1482 00be 9847     		blx	r3
 479:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */
 480:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER3_IRQn);
 1483              		.loc 2 480 0
 1484 00c0 4FF00400 		mov	r0, #4
 1485 00c4 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 1486 00c8 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 1487 00cc 9847     		blx	r3
 481:..//drivers/timer/timer.c **** 	
 482:..//drivers/timer/timer.c **** 	return 0;
 1488              		.loc 2 482 0
 1489 00ce 4FF00003 		mov	r3, #0
 483:..//drivers/timer/timer.c **** }
 1490              		.loc 2 483 0
 1491 00d2 1846     		mov	r0, r3
 1492 00d4 07F10807 		add	r7, r7, #8
 1493 00d8 BD46     		mov	sp, r7
 1494 00da 80BD     		pop	{r7, pc}
 1495              		.cfi_endproc
 1496              	.LFE42:
 1498              		.section	.text.init_timer3_mode_match,"ax",%progbits
 1499              		.align	2
 1500              		.global	init_timer3_mode_match
 1501              		.thumb
 1502              		.thumb_func
 1504              	init_timer3_mode_match:
 1505              	.LFB43:
 484:..//drivers/timer/timer.c **** 
 485:..//drivers/timer/timer.c **** //---------Timer 2 initialized---------------
 486:..//drivers/timer/timer.c **** 
 487:..//drivers/timer/timer.c **** //default timer working at 100Mhz
 488:..//drivers/timer/timer.c **** //--------------------------------------------------------
 489:..//drivers/timer/timer.c **** int init_timer3_mode_match (uint32_t mode,uint32_t match){
 1506              		.loc 2 489 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 8
 1509              		@ frame_needed = 1, uses_anonymous_args = 0
 1510 0000 80B5     		push	{r7, lr}
 1511              	.LCFI44:
 1512              		.cfi_def_cfa_offset 8
 1513 0002 82B0     		sub	sp, sp, #8
 1514              	.LCFI45:
 1515              		.cfi_def_cfa_offset 16
 1516 0004 00AF     		add	r7, sp, #0
 1517              		.cfi_offset 14, -4
 1518              		.cfi_offset 7, -8
 1519              	.LCFI46:
 1520              		.cfi_def_cfa_register 7
 1521 0006 7860     		str	r0, [r7, #4]
 1522 0008 3960     		str	r1, [r7, #0]
 490:..//drivers/timer/timer.c **** 	// Initialize timer 0, prescale count time of 1000uS
 491:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
 1523              		.loc 2 491 0
 1524 000a 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1525 000e C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1526 0012 4FF00102 		mov	r2, #1
 1527 0016 1A70     		strb	r2, [r3, #0]
 492:..//drivers/timer/timer.c **** 	TIM_ConfigStruct.PrescaleValue	= 1;
 1528              		.loc 2 492 0
 1529 0018 40F20003 		movw	r3, #:lower16:TIM_ConfigStruct
 1530 001c C0F20003 		movt	r3, #:upper16:TIM_ConfigStruct
 1531 0020 4FF00102 		mov	r2, #1
 1532 0024 5A60     		str	r2, [r3, #4]
 493:..//drivers/timer/timer.c **** 	// use channel 0, MR0
 494:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchChannel = 0;
 1533              		.loc 2 494 0
 1534 0026 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1535 002a C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1536 002e 4FF00002 		mov	r2, #0
 1537 0032 1A70     		strb	r2, [r3, #0]
 495:..//drivers/timer/timer.c **** 	// Enable interrupt when MR0 matches the value in TC register
 496:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
 1538              		.loc 2 496 0
 1539 0034 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1540 0038 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1541 003c 4FF00102 		mov	r2, #1
 1542 0040 5A70     		strb	r2, [r3, #1]
 497:..//drivers/timer/timer.c **** 	//Enable reset on MR0: TIMER will reset if MR0 matches it
 498:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
 1543              		.loc 2 498 0
 1544 0042 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1545 0046 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1546 004a 4FF00102 		mov	r2, #1
 1547 004e DA70     		strb	r2, [r3, #3]
 499:..//drivers/timer/timer.c **** 	//Stop on MR0 if MR0 matches it
 500:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.StopOnMatch  = FALSE;
 1548              		.loc 2 500 0
 1549 0050 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1550 0054 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1551 0058 4FF00002 		mov	r2, #0
 1552 005c 9A70     		strb	r2, [r3, #2]
 501:..//drivers/timer/timer.c **** 	//Toggle MR0.0 pin if MR0 matches it
 502:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 1553              		.loc 2 502 0
 1554 005e 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1555 0062 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1556 0066 4FF00002 		mov	r2, #0
 1557 006a 1A71     		strb	r2, [r3, #4]
 503:..//drivers/timer/timer.c **** 	// Set Match value, count value of 1000 (1000 * 1000uS = 100mS --> 1 Hz)
 504:..//drivers/timer/timer.c **** 	TIM_MatchConfigStruct.MatchValue   = match;
 1558              		.loc 2 504 0
 1559 006c 40F20003 		movw	r3, #:lower16:TIM_MatchConfigStruct
 1560 0070 C0F20003 		movt	r3, #:upper16:TIM_MatchConfigStruct
 1561 0074 3A68     		ldr	r2, [r7, #0]
 1562 0076 9A60     		str	r2, [r3, #8]
 505:..//drivers/timer/timer.c **** 
 506:..//drivers/timer/timer.c **** 	// Set configuration for Tim_config and Tim_MatchConfig
 507:..//drivers/timer/timer.c **** 	TIM_Init(LPC_TIM3, TIM_TIMER_MODE,&TIM_ConfigStruct);
 1563              		.loc 2 507 0
 1564 0078 44F20000 		movw	r0, #:lower16:1074348032
 1565 007c C4F20900 		movt	r0, #:upper16:1074348032
 1566 0080 4FF00001 		mov	r1, #0
 1567 0084 40F20002 		movw	r2, #:lower16:TIM_ConfigStruct
 1568 0088 C0F20002 		movt	r2, #:upper16:TIM_ConfigStruct
 1569 008c 40F20003 		movw	r3, #:lower16:TIM_Init
 1570 0090 C0F20003 		movt	r3, #:upper16:TIM_Init
 1571 0094 9847     		blx	r3
 508:..//drivers/timer/timer.c **** 	TIM_ConfigMatch(LPC_TIM3,&TIM_MatchConfigStruct);
 1572              		.loc 2 508 0
 1573 0096 44F20000 		movw	r0, #:lower16:1074348032
 1574 009a C4F20900 		movt	r0, #:upper16:1074348032
 1575 009e 40F20001 		movw	r1, #:lower16:TIM_MatchConfigStruct
 1576 00a2 C0F20001 		movt	r1, #:upper16:TIM_MatchConfigStruct
 1577 00a6 40F20003 		movw	r3, #:lower16:TIM_ConfigMatch
 1578 00aa C0F20003 		movt	r3, #:upper16:TIM_ConfigMatch
 1579 00ae 9847     		blx	r3
 509:..//drivers/timer/timer.c **** 
 510:..//drivers/timer/timer.c **** //--------------------------------------------------------		
 511:..//drivers/timer/timer.c **** 	/* preemption = 1, sub-priority = 1 */
 512:..//drivers/timer/timer.c **** 	NVIC_SetPriority(TIMER3_IRQn, TIMER3_PRIORITY);
 1580              		.loc 2 512 0
 1581 00b0 4FF00400 		mov	r0, #4
 1582 00b4 4FF00601 		mov	r1, #6
 1583 00b8 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 1584 00bc C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 1585 00c0 9847     		blx	r3
 513:..//drivers/timer/timer.c **** 	/* Enable interrupt for timer 0 */
 514:..//drivers/timer/timer.c **** 	NVIC_EnableIRQ(TIMER3_IRQn);
 1586              		.loc 2 514 0
 1587 00c2 4FF00400 		mov	r0, #4
 1588 00c6 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 1589 00ca C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 1590 00ce 9847     		blx	r3
 515:..//drivers/timer/timer.c **** 	
 516:..//drivers/timer/timer.c **** 	return 0;
 1591              		.loc 2 516 0
 1592 00d0 4FF00003 		mov	r3, #0
 517:..//drivers/timer/timer.c **** }
 1593              		.loc 2 517 0
 1594 00d4 1846     		mov	r0, r3
 1595 00d6 07F10807 		add	r7, r7, #8
 1596 00da BD46     		mov	sp, r7
 1597 00dc 80BD     		pop	{r7, pc}
 1598              		.cfi_endproc
 1599              	.LFE43:
 1601 00de 00BF     		.text
 1602              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:24     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:28     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:67     .text.NVIC_SetPriority:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:71     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
                            *COM*:00000008 TIM_ConfigStruct
                            *COM*:0000000c TIM_MatchConfigStruct
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:131    .text.enable_timer:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:136    .text.enable_timer:00000000 enable_timer
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:222    .text.disable_timer:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:227    .text.disable_timer:00000000 disable_timer
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:312    .text.reset_timer:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:317    .text.reset_timer:00000000 reset_timer
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:398    .text.init_timer0:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:403    .text.init_timer0:00000000 init_timer0
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:494    .text.init_timer0_freq:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:499    .text.init_timer0_freq:00000000 init_timer0_freq
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:596    .text.init_timer0_mode_match:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:601    .text.init_timer0_mode_match:00000000 init_timer0_mode_match
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:699    .text.init_timer1:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:704    .text.init_timer1:00000000 init_timer1
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:795    .text.init_timer1_freq:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:800    .text.init_timer1_freq:00000000 init_timer1_freq
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:897    .text.init_timer1_mode_match:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:902    .text.init_timer1_mode_match:00000000 init_timer1_mode_match
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1000   .text.init_timer2:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1005   .text.init_timer2:00000000 init_timer2
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1096   .text.init_timer2_freq:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1101   .text.init_timer2_freq:00000000 init_timer2_freq
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1198   .text.init_timer2_mode_match:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1203   .text.init_timer2_mode_match:00000000 init_timer2_mode_match
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1301   .text.init_timer3:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1306   .text.init_timer3:00000000 init_timer3
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1397   .text.init_timer3_freq:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1402   .text.init_timer3_freq:00000000 init_timer3_freq
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1499   .text.init_timer3_mode_match:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccSkIACo.s:1504   .text.init_timer3_mode_match:00000000 init_timer3_mode_match
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TIM_Cmd
TIM_ResetCounter
TIM_Init
TIM_ConfigMatch
