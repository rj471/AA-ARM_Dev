   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"uart.c"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  24              		.align	2
  25              		.thumb
  26              		.thumb_func
  28              	NVIC_EnableIRQ:
  29              	.LFB14:
  30              		.file 1 "..//common/Core/CM3/core_cm3.h"
   1:..//common/Core/CM3/core_cm3.h **** /**************************************************************************//**
   2:..//common/Core/CM3/core_cm3.h ****  * @file     core_cm3.h
   3:..//common/Core/CM3/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:..//common/Core/CM3/core_cm3.h ****  * @version  V1.30
   5:..//common/Core/CM3/core_cm3.h ****  * @date     30. October 2009
   6:..//common/Core/CM3/core_cm3.h ****  *
   7:..//common/Core/CM3/core_cm3.h ****  * @note
   8:..//common/Core/CM3/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:..//common/Core/CM3/core_cm3.h ****  *
  10:..//common/Core/CM3/core_cm3.h ****  * @par
  11:..//common/Core/CM3/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:..//common/Core/CM3/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:..//common/Core/CM3/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:..//common/Core/CM3/core_cm3.h ****  *
  15:..//common/Core/CM3/core_cm3.h ****  * @par
  16:..//common/Core/CM3/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:..//common/Core/CM3/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:..//common/Core/CM3/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:..//common/Core/CM3/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:..//common/Core/CM3/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:..//common/Core/CM3/core_cm3.h ****  *
  22:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
  23:..//common/Core/CM3/core_cm3.h **** 
  24:..//common/Core/CM3/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:..//common/Core/CM3/core_cm3.h **** #define __CM3_CORE_H__
  26:..//common/Core/CM3/core_cm3.h **** 
  27:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:..//common/Core/CM3/core_cm3.h ****  *
  29:..//common/Core/CM3/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:..//common/Core/CM3/core_cm3.h ****  *   - Error 10: \n
  31:..//common/Core/CM3/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:..//common/Core/CM3/core_cm3.h ****  *     Error 10: Expecting ';'
  33:..//common/Core/CM3/core_cm3.h ****  * .
  34:..//common/Core/CM3/core_cm3.h ****  *   - Error 530: \n
  35:..//common/Core/CM3/core_cm3.h ****  *     return(__regBasePri); \n
  36:..//common/Core/CM3/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:..//common/Core/CM3/core_cm3.h ****  * . 
  38:..//common/Core/CM3/core_cm3.h ****  *   - Error 550: \n
  39:..//common/Core/CM3/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:..//common/Core/CM3/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:..//common/Core/CM3/core_cm3.h ****  * .
  42:..//common/Core/CM3/core_cm3.h ****  *   - Error 754: \n
  43:..//common/Core/CM3/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:..//common/Core/CM3/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:..//common/Core/CM3/core_cm3.h ****  * .
  46:..//common/Core/CM3/core_cm3.h ****  *   - Error 750: \n
  47:..//common/Core/CM3/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:..//common/Core/CM3/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:..//common/Core/CM3/core_cm3.h ****  * .
  50:..//common/Core/CM3/core_cm3.h ****  *   - Error 528: \n
  51:..//common/Core/CM3/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:..//common/Core/CM3/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:..//common/Core/CM3/core_cm3.h ****  * .
  54:..//common/Core/CM3/core_cm3.h ****  *   - Error 751: \n
  55:..//common/Core/CM3/core_cm3.h ****  *     } InterruptType_Type; \n
  56:..//common/Core/CM3/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:..//common/Core/CM3/core_cm3.h ****  * .
  58:..//common/Core/CM3/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:..//common/Core/CM3/core_cm3.h ****  *
  60:..//common/Core/CM3/core_cm3.h ****  */
  61:..//common/Core/CM3/core_cm3.h **** 
  62:..//common/Core/CM3/core_cm3.h **** /*lint -save */
  63:..//common/Core/CM3/core_cm3.h **** /*lint -e10  */
  64:..//common/Core/CM3/core_cm3.h **** /*lint -e530 */
  65:..//common/Core/CM3/core_cm3.h **** /*lint -e550 */
  66:..//common/Core/CM3/core_cm3.h **** /*lint -e754 */
  67:..//common/Core/CM3/core_cm3.h **** /*lint -e750 */
  68:..//common/Core/CM3/core_cm3.h **** /*lint -e528 */
  69:..//common/Core/CM3/core_cm3.h **** /*lint -e751 */
  70:..//common/Core/CM3/core_cm3.h **** 
  71:..//common/Core/CM3/core_cm3.h **** 
  72:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:..//common/Core/CM3/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:..//common/Core/CM3/core_cm3.h ****     - CMSIS version number
  75:..//common/Core/CM3/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:..//common/Core/CM3/core_cm3.h ****     - Cortex-M core peripheral base address
  77:..//common/Core/CM3/core_cm3.h ****   @{
  78:..//common/Core/CM3/core_cm3.h ****  */
  79:..//common/Core/CM3/core_cm3.h **** 
  80:..//common/Core/CM3/core_cm3.h **** #ifdef __cplusplus
  81:..//common/Core/CM3/core_cm3.h ****  extern "C" {
  82:..//common/Core/CM3/core_cm3.h **** #endif 
  83:..//common/Core/CM3/core_cm3.h **** 
  84:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:..//common/Core/CM3/core_cm3.h **** 
  88:..//common/Core/CM3/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:..//common/Core/CM3/core_cm3.h **** 
  90:..//common/Core/CM3/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:..//common/Core/CM3/core_cm3.h **** 
  92:..//common/Core/CM3/core_cm3.h **** #if defined (__ICCARM__)
  93:..//common/Core/CM3/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:..//common/Core/CM3/core_cm3.h **** #endif
  95:..//common/Core/CM3/core_cm3.h **** 
  96:..//common/Core/CM3/core_cm3.h **** 
  97:..//common/Core/CM3/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:..//common/Core/CM3/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:..//common/Core/CM3/core_cm3.h **** #endif
 100:..//common/Core/CM3/core_cm3.h **** 
 101:..//common/Core/CM3/core_cm3.h **** 
 102:..//common/Core/CM3/core_cm3.h **** 
 103:..//common/Core/CM3/core_cm3.h **** 
 104:..//common/Core/CM3/core_cm3.h **** /**
 105:..//common/Core/CM3/core_cm3.h ****  * IO definitions
 106:..//common/Core/CM3/core_cm3.h ****  *
 107:..//common/Core/CM3/core_cm3.h ****  * define access restrictions to peripheral registers
 108:..//common/Core/CM3/core_cm3.h ****  */
 109:..//common/Core/CM3/core_cm3.h **** 
 110:..//common/Core/CM3/core_cm3.h **** #ifdef __cplusplus
 111:..//common/Core/CM3/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:..//common/Core/CM3/core_cm3.h **** #else
 113:..//common/Core/CM3/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:..//common/Core/CM3/core_cm3.h **** #endif
 115:..//common/Core/CM3/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:..//common/Core/CM3/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:..//common/Core/CM3/core_cm3.h **** 
 118:..//common/Core/CM3/core_cm3.h **** 
 119:..//common/Core/CM3/core_cm3.h **** 
 120:..//common/Core/CM3/core_cm3.h **** /*******************************************************************************
 121:..//common/Core/CM3/core_cm3.h ****  *                 Register Abstraction
 122:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
 123:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:..//common/Core/CM3/core_cm3.h ****  @{
 125:..//common/Core/CM3/core_cm3.h **** */
 126:..//common/Core/CM3/core_cm3.h **** 
 127:..//common/Core/CM3/core_cm3.h **** 
 128:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:..//common/Core/CM3/core_cm3.h ****   @{
 131:..//common/Core/CM3/core_cm3.h ****  */
 132:..//common/Core/CM3/core_cm3.h **** typedef struct
 133:..//common/Core/CM3/core_cm3.h **** {
 134:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:..//common/Core/CM3/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:..//common/Core/CM3/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:..//common/Core/CM3/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:..//common/Core/CM3/core_cm3.h **** }  NVIC_Type;                                               
 148:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:..//common/Core/CM3/core_cm3.h **** 
 150:..//common/Core/CM3/core_cm3.h **** 
 151:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:..//common/Core/CM3/core_cm3.h ****   @{
 154:..//common/Core/CM3/core_cm3.h ****  */
 155:..//common/Core/CM3/core_cm3.h **** typedef struct
 156:..//common/Core/CM3/core_cm3.h **** {
 157:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:..//common/Core/CM3/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:..//common/Core/CM3/core_cm3.h **** } SCB_Type;                                                
 177:..//common/Core/CM3/core_cm3.h **** 
 178:..//common/Core/CM3/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:..//common/Core/CM3/core_cm3.h **** 
 182:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:..//common/Core/CM3/core_cm3.h **** 
 185:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:..//common/Core/CM3/core_cm3.h **** 
 188:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:..//common/Core/CM3/core_cm3.h **** 
 191:..//common/Core/CM3/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:..//common/Core/CM3/core_cm3.h **** 
 195:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:..//common/Core/CM3/core_cm3.h **** 
 198:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:..//common/Core/CM3/core_cm3.h **** 
 201:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:..//common/Core/CM3/core_cm3.h **** 
 204:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:..//common/Core/CM3/core_cm3.h **** 
 207:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:..//common/Core/CM3/core_cm3.h **** 
 210:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:..//common/Core/CM3/core_cm3.h **** 
 213:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:..//common/Core/CM3/core_cm3.h **** 
 216:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:..//common/Core/CM3/core_cm3.h **** 
 219:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:..//common/Core/CM3/core_cm3.h **** 
 222:..//common/Core/CM3/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:..//common/Core/CM3/core_cm3.h **** 
 226:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:..//common/Core/CM3/core_cm3.h **** 
 229:..//common/Core/CM3/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:..//common/Core/CM3/core_cm3.h **** 
 233:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:..//common/Core/CM3/core_cm3.h **** 
 236:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:..//common/Core/CM3/core_cm3.h **** 
 239:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:..//common/Core/CM3/core_cm3.h **** 
 242:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:..//common/Core/CM3/core_cm3.h **** 
 245:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:..//common/Core/CM3/core_cm3.h **** 
 248:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:..//common/Core/CM3/core_cm3.h **** 
 251:..//common/Core/CM3/core_cm3.h **** /* SCB System Control Register Definitions */
 252:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:..//common/Core/CM3/core_cm3.h **** 
 255:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:..//common/Core/CM3/core_cm3.h **** 
 258:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:..//common/Core/CM3/core_cm3.h **** 
 261:..//common/Core/CM3/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:..//common/Core/CM3/core_cm3.h **** 
 265:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:..//common/Core/CM3/core_cm3.h **** 
 268:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:..//common/Core/CM3/core_cm3.h **** 
 271:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:..//common/Core/CM3/core_cm3.h **** 
 274:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:..//common/Core/CM3/core_cm3.h **** 
 277:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:..//common/Core/CM3/core_cm3.h **** 
 280:..//common/Core/CM3/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:..//common/Core/CM3/core_cm3.h **** 
 284:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:..//common/Core/CM3/core_cm3.h **** 
 287:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:..//common/Core/CM3/core_cm3.h **** 
 290:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:..//common/Core/CM3/core_cm3.h **** 
 293:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:..//common/Core/CM3/core_cm3.h **** 
 296:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:..//common/Core/CM3/core_cm3.h **** 
 299:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:..//common/Core/CM3/core_cm3.h **** 
 302:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:..//common/Core/CM3/core_cm3.h **** 
 305:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:..//common/Core/CM3/core_cm3.h **** 
 308:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:..//common/Core/CM3/core_cm3.h **** 
 311:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:..//common/Core/CM3/core_cm3.h ****                                      
 314:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:..//common/Core/CM3/core_cm3.h **** 
 317:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:..//common/Core/CM3/core_cm3.h **** 
 320:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:..//common/Core/CM3/core_cm3.h **** 
 323:..//common/Core/CM3/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:..//common/Core/CM3/core_cm3.h **** 
 327:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:..//common/Core/CM3/core_cm3.h **** 
 330:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:..//common/Core/CM3/core_cm3.h **** 
 333:..//common/Core/CM3/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:..//common/Core/CM3/core_cm3.h **** 
 337:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:..//common/Core/CM3/core_cm3.h **** 
 340:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:..//common/Core/CM3/core_cm3.h **** 
 343:..//common/Core/CM3/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:..//common/Core/CM3/core_cm3.h **** 
 347:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:..//common/Core/CM3/core_cm3.h **** 
 350:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:..//common/Core/CM3/core_cm3.h **** 
 353:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:..//common/Core/CM3/core_cm3.h **** 
 356:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:..//common/Core/CM3/core_cm3.h **** 
 360:..//common/Core/CM3/core_cm3.h **** 
 361:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for SysTick
 363:..//common/Core/CM3/core_cm3.h ****   @{
 364:..//common/Core/CM3/core_cm3.h ****  */
 365:..//common/Core/CM3/core_cm3.h **** typedef struct
 366:..//common/Core/CM3/core_cm3.h **** {
 367:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:..//common/Core/CM3/core_cm3.h **** } SysTick_Type;
 372:..//common/Core/CM3/core_cm3.h **** 
 373:..//common/Core/CM3/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:..//common/Core/CM3/core_cm3.h **** 
 377:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:..//common/Core/CM3/core_cm3.h **** 
 380:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:..//common/Core/CM3/core_cm3.h **** 
 383:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:..//common/Core/CM3/core_cm3.h **** 
 386:..//common/Core/CM3/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:..//common/Core/CM3/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:..//common/Core/CM3/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:..//common/Core/CM3/core_cm3.h **** 
 390:..//common/Core/CM3/core_cm3.h **** /* SysTick Current Register Definitions */
 391:..//common/Core/CM3/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:..//common/Core/CM3/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:..//common/Core/CM3/core_cm3.h **** 
 394:..//common/Core/CM3/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:..//common/Core/CM3/core_cm3.h **** 
 398:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:..//common/Core/CM3/core_cm3.h **** 
 401:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:..//common/Core/CM3/core_cm3.h **** 
 405:..//common/Core/CM3/core_cm3.h **** 
 406:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:..//common/Core/CM3/core_cm3.h ****   @{
 409:..//common/Core/CM3/core_cm3.h ****  */
 410:..//common/Core/CM3/core_cm3.h **** typedef struct
 411:..//common/Core/CM3/core_cm3.h **** {
 412:..//common/Core/CM3/core_cm3.h ****   __O  union  
 413:..//common/Core/CM3/core_cm3.h ****   {
 414:..//common/Core/CM3/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:..//common/Core/CM3/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:..//common/Core/CM3/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:..//common/Core/CM3/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:..//common/Core/CM3/core_cm3.h **** } ITM_Type;                                                
 445:..//common/Core/CM3/core_cm3.h **** 
 446:..//common/Core/CM3/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:..//common/Core/CM3/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:..//common/Core/CM3/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:..//common/Core/CM3/core_cm3.h **** 
 450:..//common/Core/CM3/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:..//common/Core/CM3/core_cm3.h **** 
 454:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:..//common/Core/CM3/core_cm3.h **** 
 457:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:..//common/Core/CM3/core_cm3.h **** 
 460:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:..//common/Core/CM3/core_cm3.h **** 
 463:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:..//common/Core/CM3/core_cm3.h **** 
 466:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:..//common/Core/CM3/core_cm3.h **** 
 469:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:..//common/Core/CM3/core_cm3.h **** 
 472:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:..//common/Core/CM3/core_cm3.h **** 
 475:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:..//common/Core/CM3/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:..//common/Core/CM3/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:..//common/Core/CM3/core_cm3.h **** 
 479:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:..//common/Core/CM3/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:..//common/Core/CM3/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:..//common/Core/CM3/core_cm3.h **** 
 483:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:..//common/Core/CM3/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:..//common/Core/CM3/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:..//common/Core/CM3/core_cm3.h **** 
 487:..//common/Core/CM3/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:..//common/Core/CM3/core_cm3.h **** 
 491:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:..//common/Core/CM3/core_cm3.h **** 
 494:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:..//common/Core/CM3/core_cm3.h **** 
 498:..//common/Core/CM3/core_cm3.h **** 
 499:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:..//common/Core/CM3/core_cm3.h ****   @{
 502:..//common/Core/CM3/core_cm3.h ****  */
 503:..//common/Core/CM3/core_cm3.h **** typedef struct
 504:..//common/Core/CM3/core_cm3.h **** {
 505:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0;
 506:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:..//common/Core/CM3/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:..//common/Core/CM3/core_cm3.h **** #else
 510:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED1;
 511:..//common/Core/CM3/core_cm3.h **** #endif
 512:..//common/Core/CM3/core_cm3.h **** } InterruptType_Type;
 513:..//common/Core/CM3/core_cm3.h **** 
 514:..//common/Core/CM3/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:..//common/Core/CM3/core_cm3.h **** 
 518:..//common/Core/CM3/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:..//common/Core/CM3/core_cm3.h **** 
 522:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:..//common/Core/CM3/core_cm3.h **** 
 525:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:..//common/Core/CM3/core_cm3.h **** 
 529:..//common/Core/CM3/core_cm3.h **** 
 530:..//common/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:..//common/Core/CM3/core_cm3.h ****   @{
 534:..//common/Core/CM3/core_cm3.h ****  */
 535:..//common/Core/CM3/core_cm3.h **** typedef struct
 536:..//common/Core/CM3/core_cm3.h **** {
 537:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:..//common/Core/CM3/core_cm3.h **** } MPU_Type;                                                
 549:..//common/Core/CM3/core_cm3.h **** 
 550:..//common/Core/CM3/core_cm3.h **** /* MPU Type Register */
 551:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:..//common/Core/CM3/core_cm3.h **** 
 554:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:..//common/Core/CM3/core_cm3.h **** 
 557:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:..//common/Core/CM3/core_cm3.h **** 
 560:..//common/Core/CM3/core_cm3.h **** /* MPU Control Register */
 561:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:..//common/Core/CM3/core_cm3.h **** 
 564:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:..//common/Core/CM3/core_cm3.h **** 
 567:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:..//common/Core/CM3/core_cm3.h **** 
 570:..//common/Core/CM3/core_cm3.h **** /* MPU Region Number Register */
 571:..//common/Core/CM3/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:..//common/Core/CM3/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:..//common/Core/CM3/core_cm3.h **** 
 574:..//common/Core/CM3/core_cm3.h **** /* MPU Region Base Address Register */
 575:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:..//common/Core/CM3/core_cm3.h **** 
 578:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:..//common/Core/CM3/core_cm3.h **** 
 581:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:..//common/Core/CM3/core_cm3.h **** 
 584:..//common/Core/CM3/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:..//common/Core/CM3/core_cm3.h **** 
 588:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:..//common/Core/CM3/core_cm3.h **** 
 591:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:..//common/Core/CM3/core_cm3.h **** 
 594:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:..//common/Core/CM3/core_cm3.h **** 
 597:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:..//common/Core/CM3/core_cm3.h **** 
 600:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:..//common/Core/CM3/core_cm3.h **** 
 603:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:..//common/Core/CM3/core_cm3.h **** 
 606:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:..//common/Core/CM3/core_cm3.h **** 
 609:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:..//common/Core/CM3/core_cm3.h **** 
 612:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:..//common/Core/CM3/core_cm3.h **** #endif
 614:..//common/Core/CM3/core_cm3.h **** 
 615:..//common/Core/CM3/core_cm3.h **** 
 616:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:..//common/Core/CM3/core_cm3.h ****   @{
 619:..//common/Core/CM3/core_cm3.h ****  */
 620:..//common/Core/CM3/core_cm3.h **** typedef struct
 621:..//common/Core/CM3/core_cm3.h **** {
 622:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:..//common/Core/CM3/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:..//common/Core/CM3/core_cm3.h **** } CoreDebug_Type;
 627:..//common/Core/CM3/core_cm3.h **** 
 628:..//common/Core/CM3/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:..//common/Core/CM3/core_cm3.h **** 
 632:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:..//common/Core/CM3/core_cm3.h **** 
 635:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:..//common/Core/CM3/core_cm3.h **** 
 638:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:..//common/Core/CM3/core_cm3.h **** 
 641:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:..//common/Core/CM3/core_cm3.h **** 
 644:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:..//common/Core/CM3/core_cm3.h **** 
 647:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:..//common/Core/CM3/core_cm3.h **** 
 650:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:..//common/Core/CM3/core_cm3.h **** 
 653:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:..//common/Core/CM3/core_cm3.h **** 
 656:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:..//common/Core/CM3/core_cm3.h **** 
 659:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:..//common/Core/CM3/core_cm3.h **** 
 662:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:..//common/Core/CM3/core_cm3.h **** 
 665:..//common/Core/CM3/core_cm3.h **** /* Debug Core Register Selector Register */
 666:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:..//common/Core/CM3/core_cm3.h **** 
 669:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:..//common/Core/CM3/core_cm3.h **** 
 672:..//common/Core/CM3/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:..//common/Core/CM3/core_cm3.h **** 
 676:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:..//common/Core/CM3/core_cm3.h **** 
 679:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:..//common/Core/CM3/core_cm3.h **** 
 682:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:..//common/Core/CM3/core_cm3.h **** 
 685:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:..//common/Core/CM3/core_cm3.h **** 
 688:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:..//common/Core/CM3/core_cm3.h **** 
 691:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:..//common/Core/CM3/core_cm3.h **** 
 694:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:..//common/Core/CM3/core_cm3.h **** 
 697:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:..//common/Core/CM3/core_cm3.h **** 
 700:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:..//common/Core/CM3/core_cm3.h **** 
 703:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:..//common/Core/CM3/core_cm3.h **** 
 706:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:..//common/Core/CM3/core_cm3.h **** 
 709:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:..//common/Core/CM3/core_cm3.h **** 
 713:..//common/Core/CM3/core_cm3.h **** 
 714:..//common/Core/CM3/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:..//common/Core/CM3/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:..//common/Core/CM3/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:..//common/Core/CM3/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:..//common/Core/CM3/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:..//common/Core/CM3/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:..//common/Core/CM3/core_cm3.h **** 
 722:..//common/Core/CM3/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:..//common/Core/CM3/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:..//common/Core/CM3/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:..//common/Core/CM3/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:..//common/Core/CM3/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:..//common/Core/CM3/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:..//common/Core/CM3/core_cm3.h **** 
 729:..//common/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:..//common/Core/CM3/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:..//common/Core/CM3/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:..//common/Core/CM3/core_cm3.h **** #endif
 733:..//common/Core/CM3/core_cm3.h **** 
 734:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:..//common/Core/CM3/core_cm3.h **** 
 736:..//common/Core/CM3/core_cm3.h **** 
 737:..//common/Core/CM3/core_cm3.h **** /*******************************************************************************
 738:..//common/Core/CM3/core_cm3.h ****  *                Hardware Abstraction Layer
 739:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
 740:..//common/Core/CM3/core_cm3.h **** 
 741:..//common/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   )
 742:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:..//common/Core/CM3/core_cm3.h **** 
 745:..//common/Core/CM3/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:..//common/Core/CM3/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:..//common/Core/CM3/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:..//common/Core/CM3/core_cm3.h **** 
 749:..//common/Core/CM3/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:..//common/Core/CM3/core_cm3.h **** 
 753:..//common/Core/CM3/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:..//common/Core/CM3/core_cm3.h **** 
 757:..//common/Core/CM3/core_cm3.h **** #endif
 758:..//common/Core/CM3/core_cm3.h **** 
 759:..//common/Core/CM3/core_cm3.h **** 
 760:..//common/Core/CM3/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:..//common/Core/CM3/core_cm3.h **** 
 762:..//common/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:..//common/Core/CM3/core_cm3.h **** /* ARM armcc specific functions */
 764:..//common/Core/CM3/core_cm3.h **** 
 765:..//common/Core/CM3/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:..//common/Core/CM3/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:..//common/Core/CM3/core_cm3.h **** 
 768:..//common/Core/CM3/core_cm3.h **** #define __NOP                             __nop
 769:..//common/Core/CM3/core_cm3.h **** #define __WFI                             __wfi
 770:..//common/Core/CM3/core_cm3.h **** #define __WFE                             __wfe
 771:..//common/Core/CM3/core_cm3.h **** #define __SEV                             __sev
 772:..//common/Core/CM3/core_cm3.h **** #define __ISB()                           __isb(0)
 773:..//common/Core/CM3/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:..//common/Core/CM3/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:..//common/Core/CM3/core_cm3.h **** #define __REV                             __rev
 776:..//common/Core/CM3/core_cm3.h **** #define __RBIT                            __rbit
 777:..//common/Core/CM3/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:..//common/Core/CM3/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:..//common/Core/CM3/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:..//common/Core/CM3/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:..//common/Core/CM3/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:..//common/Core/CM3/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:..//common/Core/CM3/core_cm3.h **** 
 784:..//common/Core/CM3/core_cm3.h **** 
 785:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:..//common/Core/CM3/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:..//common/Core/CM3/core_cm3.h **** 
 790:..//common/Core/CM3/core_cm3.h **** 
 791:..//common/Core/CM3/core_cm3.h **** /**
 792:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:..//common/Core/CM3/core_cm3.h ****  *
 794:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
 795:..//common/Core/CM3/core_cm3.h ****  *
 796:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 797:..//common/Core/CM3/core_cm3.h ****  */
 798:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:..//common/Core/CM3/core_cm3.h **** 
 800:..//common/Core/CM3/core_cm3.h **** /**
 801:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:..//common/Core/CM3/core_cm3.h ****  *
 803:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:..//common/Core/CM3/core_cm3.h ****  *
 805:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:..//common/Core/CM3/core_cm3.h ****  */
 808:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:..//common/Core/CM3/core_cm3.h **** 
 810:..//common/Core/CM3/core_cm3.h **** /**
 811:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:..//common/Core/CM3/core_cm3.h ****  *
 813:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
 814:..//common/Core/CM3/core_cm3.h ****  *
 815:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
 817:..//common/Core/CM3/core_cm3.h ****  */
 818:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:..//common/Core/CM3/core_cm3.h **** 
 820:..//common/Core/CM3/core_cm3.h **** /**
 821:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:..//common/Core/CM3/core_cm3.h ****  *
 823:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:..//common/Core/CM3/core_cm3.h ****  *
 825:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:..//common/Core/CM3/core_cm3.h ****  */
 828:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:..//common/Core/CM3/core_cm3.h **** 
 830:..//common/Core/CM3/core_cm3.h **** /**
 831:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:..//common/Core/CM3/core_cm3.h ****  *
 833:..//common/Core/CM3/core_cm3.h ****  * @param   value  value to reverse
 834:..//common/Core/CM3/core_cm3.h ****  * @return         reversed value
 835:..//common/Core/CM3/core_cm3.h ****  *
 836:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:..//common/Core/CM3/core_cm3.h ****  */
 838:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:..//common/Core/CM3/core_cm3.h **** 
 840:..//common/Core/CM3/core_cm3.h **** /**
 841:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:..//common/Core/CM3/core_cm3.h ****  *
 843:..//common/Core/CM3/core_cm3.h ****  * @param   value  value to reverse
 844:..//common/Core/CM3/core_cm3.h ****  * @return         reversed value
 845:..//common/Core/CM3/core_cm3.h ****  *
 846:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:..//common/Core/CM3/core_cm3.h ****  */
 848:..//common/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:..//common/Core/CM3/core_cm3.h **** 
 850:..//common/Core/CM3/core_cm3.h **** 
 851:..//common/Core/CM3/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:..//common/Core/CM3/core_cm3.h **** 
 853:..//common/Core/CM3/core_cm3.h **** /**
 854:..//common/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:..//common/Core/CM3/core_cm3.h ****  *
 856:..//common/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:..//common/Core/CM3/core_cm3.h ****  */
 858:..//common/Core/CM3/core_cm3.h **** extern void __CLREX(void);
 859:..//common/Core/CM3/core_cm3.h **** 
 860:..//common/Core/CM3/core_cm3.h **** /**
 861:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 862:..//common/Core/CM3/core_cm3.h ****  *
 863:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
 864:..//common/Core/CM3/core_cm3.h ****  *
 865:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 866:..//common/Core/CM3/core_cm3.h ****  */
 867:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:..//common/Core/CM3/core_cm3.h **** 
 869:..//common/Core/CM3/core_cm3.h **** /**
 870:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 871:..//common/Core/CM3/core_cm3.h ****  *
 872:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
 873:..//common/Core/CM3/core_cm3.h ****  *
 874:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
 875:..//common/Core/CM3/core_cm3.h ****  */
 876:..//common/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:..//common/Core/CM3/core_cm3.h **** 
 878:..//common/Core/CM3/core_cm3.h **** /**
 879:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:..//common/Core/CM3/core_cm3.h ****  *
 881:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
 882:..//common/Core/CM3/core_cm3.h ****  *
 883:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:..//common/Core/CM3/core_cm3.h ****  */
 885:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:..//common/Core/CM3/core_cm3.h **** 
 887:..//common/Core/CM3/core_cm3.h **** /**
 888:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:..//common/Core/CM3/core_cm3.h ****  *
 890:..//common/Core/CM3/core_cm3.h ****  * @param   priMask  PriMask
 891:..//common/Core/CM3/core_cm3.h ****  *
 892:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:..//common/Core/CM3/core_cm3.h ****  */
 894:..//common/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:..//common/Core/CM3/core_cm3.h **** 
 896:..//common/Core/CM3/core_cm3.h **** /**
 897:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:..//common/Core/CM3/core_cm3.h ****  *
 899:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
 900:..//common/Core/CM3/core_cm3.h ****  *
 901:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 902:..//common/Core/CM3/core_cm3.h ****  */
 903:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:..//common/Core/CM3/core_cm3.h **** 
 905:..//common/Core/CM3/core_cm3.h **** /**
 906:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:..//common/Core/CM3/core_cm3.h ****  *
 908:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask faultMask value
 909:..//common/Core/CM3/core_cm3.h ****  *
 910:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
 911:..//common/Core/CM3/core_cm3.h ****  */
 912:..//common/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:..//common/Core/CM3/core_cm3.h **** 
 914:..//common/Core/CM3/core_cm3.h **** /**
 915:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 916:..//common/Core/CM3/core_cm3.h ****  * 
 917:..//common/Core/CM3/core_cm3.h ****  * @return Control value
 918:..//common/Core/CM3/core_cm3.h ****  *
 919:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
 920:..//common/Core/CM3/core_cm3.h ****  */
 921:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:..//common/Core/CM3/core_cm3.h **** 
 923:..//common/Core/CM3/core_cm3.h **** /**
 924:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 925:..//common/Core/CM3/core_cm3.h ****  *
 926:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
 927:..//common/Core/CM3/core_cm3.h ****  *
 928:..//common/Core/CM3/core_cm3.h ****  * Set the control register
 929:..//common/Core/CM3/core_cm3.h ****  */
 930:..//common/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:..//common/Core/CM3/core_cm3.h **** 
 932:..//common/Core/CM3/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:..//common/Core/CM3/core_cm3.h **** 
 934:..//common/Core/CM3/core_cm3.h **** /**
 935:..//common/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:..//common/Core/CM3/core_cm3.h ****  *
 937:..//common/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:..//common/Core/CM3/core_cm3.h ****  */
 939:..//common/Core/CM3/core_cm3.h **** #define __CLREX                           __clrex
 940:..//common/Core/CM3/core_cm3.h **** 
 941:..//common/Core/CM3/core_cm3.h **** /**
 942:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 943:..//common/Core/CM3/core_cm3.h ****  *
 944:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
 945:..//common/Core/CM3/core_cm3.h ****  *
 946:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 947:..//common/Core/CM3/core_cm3.h ****  */
 948:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:..//common/Core/CM3/core_cm3.h **** {
 950:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:..//common/Core/CM3/core_cm3.h ****   return(__regBasePri);
 952:..//common/Core/CM3/core_cm3.h **** }
 953:..//common/Core/CM3/core_cm3.h **** 
 954:..//common/Core/CM3/core_cm3.h **** /**
 955:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 956:..//common/Core/CM3/core_cm3.h ****  *
 957:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
 958:..//common/Core/CM3/core_cm3.h ****  *
 959:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
 960:..//common/Core/CM3/core_cm3.h ****  */
 961:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:..//common/Core/CM3/core_cm3.h **** {
 963:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:..//common/Core/CM3/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:..//common/Core/CM3/core_cm3.h **** }
 966:..//common/Core/CM3/core_cm3.h **** 
 967:..//common/Core/CM3/core_cm3.h **** /**
 968:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:..//common/Core/CM3/core_cm3.h ****  *
 970:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
 971:..//common/Core/CM3/core_cm3.h ****  *
 972:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:..//common/Core/CM3/core_cm3.h ****  */
 974:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:..//common/Core/CM3/core_cm3.h **** {
 976:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:..//common/Core/CM3/core_cm3.h ****   return(__regPriMask);
 978:..//common/Core/CM3/core_cm3.h **** }
 979:..//common/Core/CM3/core_cm3.h **** 
 980:..//common/Core/CM3/core_cm3.h **** /**
 981:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:..//common/Core/CM3/core_cm3.h ****  *
 983:..//common/Core/CM3/core_cm3.h ****  * @param  priMask  PriMask
 984:..//common/Core/CM3/core_cm3.h ****  *
 985:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:..//common/Core/CM3/core_cm3.h ****  */
 987:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:..//common/Core/CM3/core_cm3.h **** {
 989:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:..//common/Core/CM3/core_cm3.h ****   __regPriMask = (priMask);
 991:..//common/Core/CM3/core_cm3.h **** }
 992:..//common/Core/CM3/core_cm3.h **** 
 993:..//common/Core/CM3/core_cm3.h **** /**
 994:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:..//common/Core/CM3/core_cm3.h ****  *
 996:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
 997:..//common/Core/CM3/core_cm3.h ****  *
 998:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 999:..//common/Core/CM3/core_cm3.h ****  */
1000:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:..//common/Core/CM3/core_cm3.h **** {
1002:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:..//common/Core/CM3/core_cm3.h ****   return(__regFaultMask);
1004:..//common/Core/CM3/core_cm3.h **** }
1005:..//common/Core/CM3/core_cm3.h **** 
1006:..//common/Core/CM3/core_cm3.h **** /**
1007:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:..//common/Core/CM3/core_cm3.h ****  *
1009:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask  faultMask value
1010:..//common/Core/CM3/core_cm3.h ****  *
1011:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
1012:..//common/Core/CM3/core_cm3.h ****  */
1013:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:..//common/Core/CM3/core_cm3.h **** {
1015:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:..//common/Core/CM3/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:..//common/Core/CM3/core_cm3.h **** }
1018:..//common/Core/CM3/core_cm3.h **** 
1019:..//common/Core/CM3/core_cm3.h **** /**
1020:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
1021:..//common/Core/CM3/core_cm3.h ****  * 
1022:..//common/Core/CM3/core_cm3.h ****  * @return Control value
1023:..//common/Core/CM3/core_cm3.h ****  *
1024:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
1025:..//common/Core/CM3/core_cm3.h ****  */
1026:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:..//common/Core/CM3/core_cm3.h **** {
1028:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:..//common/Core/CM3/core_cm3.h ****   return(__regControl);
1030:..//common/Core/CM3/core_cm3.h **** }
1031:..//common/Core/CM3/core_cm3.h **** 
1032:..//common/Core/CM3/core_cm3.h **** /**
1033:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
1034:..//common/Core/CM3/core_cm3.h ****  *
1035:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
1036:..//common/Core/CM3/core_cm3.h ****  *
1037:..//common/Core/CM3/core_cm3.h ****  * Set the control register
1038:..//common/Core/CM3/core_cm3.h ****  */
1039:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:..//common/Core/CM3/core_cm3.h **** {
1041:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:..//common/Core/CM3/core_cm3.h ****   __regControl = control;
1043:..//common/Core/CM3/core_cm3.h **** }
1044:..//common/Core/CM3/core_cm3.h **** 
1045:..//common/Core/CM3/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:..//common/Core/CM3/core_cm3.h **** 
1047:..//common/Core/CM3/core_cm3.h **** 
1048:..//common/Core/CM3/core_cm3.h **** 
1049:..//common/Core/CM3/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:..//common/Core/CM3/core_cm3.h **** /* IAR iccarm specific functions */
1051:..//common/Core/CM3/core_cm3.h **** 
1052:..//common/Core/CM3/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:..//common/Core/CM3/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:..//common/Core/CM3/core_cm3.h **** 
1055:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:..//common/Core/CM3/core_cm3.h **** 
1058:..//common/Core/CM3/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:..//common/Core/CM3/core_cm3.h **** 
1064:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:..//common/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:..//common/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:..//common/Core/CM3/core_cm3.h **** 
1076:..//common/Core/CM3/core_cm3.h **** 
1077:..//common/Core/CM3/core_cm3.h **** /**
1078:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:..//common/Core/CM3/core_cm3.h ****  *
1080:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
1081:..//common/Core/CM3/core_cm3.h ****  *
1082:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
1083:..//common/Core/CM3/core_cm3.h ****  */
1084:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:..//common/Core/CM3/core_cm3.h **** 
1086:..//common/Core/CM3/core_cm3.h **** /**
1087:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:..//common/Core/CM3/core_cm3.h ****  *
1089:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:..//common/Core/CM3/core_cm3.h ****  *
1091:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:..//common/Core/CM3/core_cm3.h ****  */
1094:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:..//common/Core/CM3/core_cm3.h **** 
1096:..//common/Core/CM3/core_cm3.h **** /**
1097:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:..//common/Core/CM3/core_cm3.h ****  *
1099:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
1100:..//common/Core/CM3/core_cm3.h ****  *
1101:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
1103:..//common/Core/CM3/core_cm3.h ****  */
1104:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:..//common/Core/CM3/core_cm3.h **** 
1106:..//common/Core/CM3/core_cm3.h **** /**
1107:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:..//common/Core/CM3/core_cm3.h ****  *
1109:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:..//common/Core/CM3/core_cm3.h ****  *
1111:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:..//common/Core/CM3/core_cm3.h ****  */
1114:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:..//common/Core/CM3/core_cm3.h **** 
1116:..//common/Core/CM3/core_cm3.h **** /**
1117:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:..//common/Core/CM3/core_cm3.h ****  *
1119:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1120:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1121:..//common/Core/CM3/core_cm3.h ****  *
1122:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:..//common/Core/CM3/core_cm3.h ****  */
1124:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:..//common/Core/CM3/core_cm3.h **** 
1126:..//common/Core/CM3/core_cm3.h **** /**
1127:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
1128:..//common/Core/CM3/core_cm3.h ****  *
1129:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1130:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1131:..//common/Core/CM3/core_cm3.h ****  *
1132:..//common/Core/CM3/core_cm3.h ****  * Reverse bit order of value
1133:..//common/Core/CM3/core_cm3.h ****  */
1134:..//common/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:..//common/Core/CM3/core_cm3.h **** 
1136:..//common/Core/CM3/core_cm3.h **** /**
1137:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:..//common/Core/CM3/core_cm3.h ****  *
1139:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1140:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1141:..//common/Core/CM3/core_cm3.h ****  *
1142:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:..//common/Core/CM3/core_cm3.h ****  */
1144:..//common/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:..//common/Core/CM3/core_cm3.h **** 
1146:..//common/Core/CM3/core_cm3.h **** /**
1147:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:..//common/Core/CM3/core_cm3.h ****  *
1149:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1150:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1151:..//common/Core/CM3/core_cm3.h ****  *
1152:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:..//common/Core/CM3/core_cm3.h ****  */
1154:..//common/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:..//common/Core/CM3/core_cm3.h **** 
1156:..//common/Core/CM3/core_cm3.h **** /**
1157:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:..//common/Core/CM3/core_cm3.h ****  *
1159:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1160:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1161:..//common/Core/CM3/core_cm3.h ****  *
1162:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:..//common/Core/CM3/core_cm3.h ****  */
1164:..//common/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:..//common/Core/CM3/core_cm3.h **** 
1166:..//common/Core/CM3/core_cm3.h **** /**
1167:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:..//common/Core/CM3/core_cm3.h ****  *
1169:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1170:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1171:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1172:..//common/Core/CM3/core_cm3.h ****  *
1173:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:..//common/Core/CM3/core_cm3.h ****  */
1175:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:..//common/Core/CM3/core_cm3.h **** 
1177:..//common/Core/CM3/core_cm3.h **** /**
1178:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:..//common/Core/CM3/core_cm3.h ****  *
1180:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1181:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1182:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1183:..//common/Core/CM3/core_cm3.h ****  *
1184:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:..//common/Core/CM3/core_cm3.h ****  */
1186:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:..//common/Core/CM3/core_cm3.h **** 
1188:..//common/Core/CM3/core_cm3.h **** /**
1189:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:..//common/Core/CM3/core_cm3.h ****  *
1191:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1192:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1193:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1194:..//common/Core/CM3/core_cm3.h ****  *
1195:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:..//common/Core/CM3/core_cm3.h ****  */
1197:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:..//common/Core/CM3/core_cm3.h **** 
1199:..//common/Core/CM3/core_cm3.h **** 
1200:..//common/Core/CM3/core_cm3.h **** 
1201:..//common/Core/CM3/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:..//common/Core/CM3/core_cm3.h **** /* GNU gcc specific functions */
1203:..//common/Core/CM3/core_cm3.h **** 
1204:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:..//common/Core/CM3/core_cm3.h **** 
1207:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:..//common/Core/CM3/core_cm3.h **** 
1210:..//common/Core/CM3/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:..//common/Core/CM3/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:..//common/Core/CM3/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:..//common/Core/CM3/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:..//common/Core/CM3/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:..//common/Core/CM3/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:..//common/Core/CM3/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:..//common/Core/CM3/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:..//common/Core/CM3/core_cm3.h **** 
1219:..//common/Core/CM3/core_cm3.h **** 
1220:..//common/Core/CM3/core_cm3.h **** /**
1221:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:..//common/Core/CM3/core_cm3.h ****  *
1223:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
1224:..//common/Core/CM3/core_cm3.h ****  *
1225:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
1226:..//common/Core/CM3/core_cm3.h ****  */
1227:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:..//common/Core/CM3/core_cm3.h **** 
1229:..//common/Core/CM3/core_cm3.h **** /**
1230:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:..//common/Core/CM3/core_cm3.h ****  *
1232:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:..//common/Core/CM3/core_cm3.h ****  *
1234:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:..//common/Core/CM3/core_cm3.h ****  */
1237:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:..//common/Core/CM3/core_cm3.h **** 
1239:..//common/Core/CM3/core_cm3.h **** /**
1240:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:..//common/Core/CM3/core_cm3.h ****  *
1242:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
1243:..//common/Core/CM3/core_cm3.h ****  *
1244:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
1246:..//common/Core/CM3/core_cm3.h ****  */
1247:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:..//common/Core/CM3/core_cm3.h **** 
1249:..//common/Core/CM3/core_cm3.h **** /**
1250:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:..//common/Core/CM3/core_cm3.h ****  *
1252:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:..//common/Core/CM3/core_cm3.h ****  *
1254:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:..//common/Core/CM3/core_cm3.h ****  */
1257:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:..//common/Core/CM3/core_cm3.h **** 
1259:..//common/Core/CM3/core_cm3.h **** /**
1260:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
1261:..//common/Core/CM3/core_cm3.h ****  *
1262:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
1263:..//common/Core/CM3/core_cm3.h ****  *
1264:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
1265:..//common/Core/CM3/core_cm3.h ****  */
1266:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:..//common/Core/CM3/core_cm3.h **** 
1268:..//common/Core/CM3/core_cm3.h **** /**
1269:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
1270:..//common/Core/CM3/core_cm3.h ****  *
1271:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
1272:..//common/Core/CM3/core_cm3.h ****  *
1273:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
1274:..//common/Core/CM3/core_cm3.h ****  */
1275:..//common/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:..//common/Core/CM3/core_cm3.h **** 
1277:..//common/Core/CM3/core_cm3.h **** /**
1278:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:..//common/Core/CM3/core_cm3.h ****  *
1280:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
1281:..//common/Core/CM3/core_cm3.h ****  *
1282:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:..//common/Core/CM3/core_cm3.h ****  */
1284:..//common/Core/CM3/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:..//common/Core/CM3/core_cm3.h **** 
1286:..//common/Core/CM3/core_cm3.h **** /**
1287:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:..//common/Core/CM3/core_cm3.h ****  *
1289:..//common/Core/CM3/core_cm3.h ****  * @param  priMask  PriMask
1290:..//common/Core/CM3/core_cm3.h ****  *
1291:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:..//common/Core/CM3/core_cm3.h ****  */
1293:..//common/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:..//common/Core/CM3/core_cm3.h **** 
1295:..//common/Core/CM3/core_cm3.h **** /**
1296:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:..//common/Core/CM3/core_cm3.h ****  *
1298:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
1299:..//common/Core/CM3/core_cm3.h ****  *
1300:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
1301:..//common/Core/CM3/core_cm3.h ****  */
1302:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:..//common/Core/CM3/core_cm3.h **** 
1304:..//common/Core/CM3/core_cm3.h **** /**
1305:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:..//common/Core/CM3/core_cm3.h ****  *
1307:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask  faultMask value
1308:..//common/Core/CM3/core_cm3.h ****  *
1309:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
1310:..//common/Core/CM3/core_cm3.h ****  */
1311:..//common/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:..//common/Core/CM3/core_cm3.h **** 
1313:..//common/Core/CM3/core_cm3.h **** /**
1314:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
1315:..//common/Core/CM3/core_cm3.h **** * 
1316:..//common/Core/CM3/core_cm3.h **** *  @return Control value
1317:..//common/Core/CM3/core_cm3.h ****  *
1318:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
1319:..//common/Core/CM3/core_cm3.h ****  */
1320:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:..//common/Core/CM3/core_cm3.h **** 
1322:..//common/Core/CM3/core_cm3.h **** /**
1323:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
1324:..//common/Core/CM3/core_cm3.h ****  *
1325:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
1326:..//common/Core/CM3/core_cm3.h ****  *
1327:..//common/Core/CM3/core_cm3.h ****  * Set the control register
1328:..//common/Core/CM3/core_cm3.h ****  */
1329:..//common/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:..//common/Core/CM3/core_cm3.h **** 
1331:..//common/Core/CM3/core_cm3.h **** /**
1332:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:..//common/Core/CM3/core_cm3.h ****  *
1334:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1335:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1336:..//common/Core/CM3/core_cm3.h ****  *
1337:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in integer value
1338:..//common/Core/CM3/core_cm3.h ****  */
1339:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:..//common/Core/CM3/core_cm3.h **** 
1341:..//common/Core/CM3/core_cm3.h **** /**
1342:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:..//common/Core/CM3/core_cm3.h ****  *
1344:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1345:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1346:..//common/Core/CM3/core_cm3.h ****  *
1347:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:..//common/Core/CM3/core_cm3.h ****  */
1349:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:..//common/Core/CM3/core_cm3.h **** 
1351:..//common/Core/CM3/core_cm3.h **** /**
1352:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:..//common/Core/CM3/core_cm3.h ****  *
1354:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1355:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1356:..//common/Core/CM3/core_cm3.h ****  *
1357:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:..//common/Core/CM3/core_cm3.h ****  */
1359:..//common/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:..//common/Core/CM3/core_cm3.h **** 
1361:..//common/Core/CM3/core_cm3.h **** /**
1362:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
1363:..//common/Core/CM3/core_cm3.h ****  *
1364:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1365:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1366:..//common/Core/CM3/core_cm3.h ****  *
1367:..//common/Core/CM3/core_cm3.h ****  * Reverse bit order of value
1368:..//common/Core/CM3/core_cm3.h ****  */
1369:..//common/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:..//common/Core/CM3/core_cm3.h **** 
1371:..//common/Core/CM3/core_cm3.h **** /**
1372:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:..//common/Core/CM3/core_cm3.h ****  *
1374:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1375:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1376:..//common/Core/CM3/core_cm3.h ****  *
1377:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:..//common/Core/CM3/core_cm3.h ****  */
1379:..//common/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:..//common/Core/CM3/core_cm3.h **** 
1381:..//common/Core/CM3/core_cm3.h **** /**
1382:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:..//common/Core/CM3/core_cm3.h ****  *
1384:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1385:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1386:..//common/Core/CM3/core_cm3.h ****  *
1387:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:..//common/Core/CM3/core_cm3.h ****  */
1389:..//common/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:..//common/Core/CM3/core_cm3.h **** 
1391:..//common/Core/CM3/core_cm3.h **** /**
1392:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:..//common/Core/CM3/core_cm3.h ****  *
1394:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1395:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1396:..//common/Core/CM3/core_cm3.h ****  *
1397:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:..//common/Core/CM3/core_cm3.h ****  */
1399:..//common/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:..//common/Core/CM3/core_cm3.h **** 
1401:..//common/Core/CM3/core_cm3.h **** /**
1402:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:..//common/Core/CM3/core_cm3.h ****  *
1404:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1405:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1406:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1407:..//common/Core/CM3/core_cm3.h ****  *
1408:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:..//common/Core/CM3/core_cm3.h ****  */
1410:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:..//common/Core/CM3/core_cm3.h **** 
1412:..//common/Core/CM3/core_cm3.h **** /**
1413:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:..//common/Core/CM3/core_cm3.h ****  *
1415:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1416:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1417:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1418:..//common/Core/CM3/core_cm3.h ****  *
1419:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:..//common/Core/CM3/core_cm3.h ****  */
1421:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:..//common/Core/CM3/core_cm3.h **** 
1423:..//common/Core/CM3/core_cm3.h **** /**
1424:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:..//common/Core/CM3/core_cm3.h ****  *
1426:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1427:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1428:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1429:..//common/Core/CM3/core_cm3.h ****  *
1430:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:..//common/Core/CM3/core_cm3.h ****  */
1432:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:..//common/Core/CM3/core_cm3.h **** 
1434:..//common/Core/CM3/core_cm3.h **** 
1435:..//common/Core/CM3/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:..//common/Core/CM3/core_cm3.h **** /* TASKING carm specific functions */
1437:..//common/Core/CM3/core_cm3.h **** 
1438:..//common/Core/CM3/core_cm3.h **** /*
1439:..//common/Core/CM3/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:..//common/Core/CM3/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:..//common/Core/CM3/core_cm3.h ****  * Including the CMSIS ones.
1442:..//common/Core/CM3/core_cm3.h ****  */
1443:..//common/Core/CM3/core_cm3.h **** 
1444:..//common/Core/CM3/core_cm3.h **** #endif
1445:..//common/Core/CM3/core_cm3.h **** 
1446:..//common/Core/CM3/core_cm3.h **** 
1447:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:..//common/Core/CM3/core_cm3.h ****   Core  Function Interface containing:
1449:..//common/Core/CM3/core_cm3.h ****   - Core NVIC Functions
1450:..//common/Core/CM3/core_cm3.h ****   - Core SysTick Functions
1451:..//common/Core/CM3/core_cm3.h ****   - Core Reset Functions
1452:..//common/Core/CM3/core_cm3.h **** */
1453:..//common/Core/CM3/core_cm3.h **** /*@{*/
1454:..//common/Core/CM3/core_cm3.h **** 
1455:..//common/Core/CM3/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:..//common/Core/CM3/core_cm3.h **** 
1457:..//common/Core/CM3/core_cm3.h **** /**
1458:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:..//common/Core/CM3/core_cm3.h ****  *
1460:..//common/Core/CM3/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:..//common/Core/CM3/core_cm3.h ****  *
1462:..//common/Core/CM3/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:..//common/Core/CM3/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:..//common/Core/CM3/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:..//common/Core/CM3/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:..//common/Core/CM3/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:..//common/Core/CM3/core_cm3.h ****  */
1468:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:..//common/Core/CM3/core_cm3.h **** {
1470:..//common/Core/CM3/core_cm3.h ****   uint32_t reg_value;
1471:..//common/Core/CM3/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:..//common/Core/CM3/core_cm3.h ****   
1473:..//common/Core/CM3/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:..//common/Core/CM3/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:..//common/Core/CM3/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:..//common/Core/CM3/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:..//common/Core/CM3/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:..//common/Core/CM3/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:..//common/Core/CM3/core_cm3.h **** }
1480:..//common/Core/CM3/core_cm3.h **** 
1481:..//common/Core/CM3/core_cm3.h **** /**
1482:..//common/Core/CM3/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:..//common/Core/CM3/core_cm3.h ****  *
1484:..//common/Core/CM3/core_cm3.h ****  * @return priority grouping field 
1485:..//common/Core/CM3/core_cm3.h ****  *
1486:..//common/Core/CM3/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:..//common/Core/CM3/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:..//common/Core/CM3/core_cm3.h ****  */
1489:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:..//common/Core/CM3/core_cm3.h **** {
1491:..//common/Core/CM3/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:..//common/Core/CM3/core_cm3.h **** }
1493:..//common/Core/CM3/core_cm3.h **** 
1494:..//common/Core/CM3/core_cm3.h **** /**
1495:..//common/Core/CM3/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:..//common/Core/CM3/core_cm3.h ****  *
1497:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:..//common/Core/CM3/core_cm3.h ****  *
1499:..//common/Core/CM3/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:..//common/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:..//common/Core/CM3/core_cm3.h ****  */
1502:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:..//common/Core/CM3/core_cm3.h **** {
  31              		.loc 1 1503 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  36 0000 80B4     		push	{r7}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 4
  39 0002 83B0     		sub	sp, sp, #12
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 16
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_offset 7, -4
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 0346     		mov	r3, r0
  47 0008 FB71     		strb	r3, [r7, #7]
1504:..//common/Core/CM3/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  48              		.loc 1 1504 0
  49 000a 4EF20013 		movw	r3, #:lower16:-536813312
  50 000e CEF20003 		movt	r3, #:upper16:-536813312
  51 0012 97F90720 		ldrsb	r2, [r7, #7]
  52 0016 4FEA5212 		lsr	r2, r2, #5
  53 001a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
  54 001c 01F01F01 		and	r1, r1, #31
  55 0020 4FF00100 		mov	r0, #1
  56 0024 00FA01F1 		lsl	r1, r0, r1
  57 0028 43F82210 		str	r1, [r3, r2, lsl #2]
1505:..//common/Core/CM3/core_cm3.h **** }
  58              		.loc 1 1505 0
  59 002c 07F10C07 		add	r7, r7, #12
  60 0030 BD46     		mov	sp, r7
  61 0032 80BC     		pop	{r7}
  62 0034 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE14:
  66 0036 00BF     		.section	.text.NVIC_SetPriority,"ax",%progbits
  67              		.align	2
  68              		.thumb
  69              		.thumb_func
  71              	NVIC_SetPriority:
  72              	.LFB20:
1506:..//common/Core/CM3/core_cm3.h **** 
1507:..//common/Core/CM3/core_cm3.h **** /**
1508:..//common/Core/CM3/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:..//common/Core/CM3/core_cm3.h ****  * 
1510:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:..//common/Core/CM3/core_cm3.h ****  * 
1512:..//common/Core/CM3/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:..//common/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:..//common/Core/CM3/core_cm3.h ****  */
1515:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:..//common/Core/CM3/core_cm3.h **** {
1517:..//common/Core/CM3/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1518:..//common/Core/CM3/core_cm3.h **** }
1519:..//common/Core/CM3/core_cm3.h **** 
1520:..//common/Core/CM3/core_cm3.h **** /**
1521:..//common/Core/CM3/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1522:..//common/Core/CM3/core_cm3.h ****  * 
1523:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn    The number of the device specifc interrupt
1524:..//common/Core/CM3/core_cm3.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
1525:..//common/Core/CM3/core_cm3.h ****  *
1526:..//common/Core/CM3/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
1527:..//common/Core/CM3/core_cm3.h ****  * otherwise it returns 0
1528:..//common/Core/CM3/core_cm3.h ****  */
1529:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1530:..//common/Core/CM3/core_cm3.h **** {
1531:..//common/Core/CM3/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1532:..//common/Core/CM3/core_cm3.h **** }
1533:..//common/Core/CM3/core_cm3.h **** 
1534:..//common/Core/CM3/core_cm3.h **** /**
1535:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1536:..//common/Core/CM3/core_cm3.h ****  * 
1537:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn    The number of the interrupt for set pending
1538:..//common/Core/CM3/core_cm3.h ****  *
1539:..//common/Core/CM3/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1540:..//common/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1541:..//common/Core/CM3/core_cm3.h ****  */
1542:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1543:..//common/Core/CM3/core_cm3.h **** {
1544:..//common/Core/CM3/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1545:..//common/Core/CM3/core_cm3.h **** }
1546:..//common/Core/CM3/core_cm3.h **** 
1547:..//common/Core/CM3/core_cm3.h **** /**
1548:..//common/Core/CM3/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1549:..//common/Core/CM3/core_cm3.h ****  *
1550:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn    The number of the interrupt for clear pending
1551:..//common/Core/CM3/core_cm3.h ****  *
1552:..//common/Core/CM3/core_cm3.h ****  * Clear the pending bit for the specified interrupt. 
1553:..//common/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1554:..//common/Core/CM3/core_cm3.h ****  */
1555:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1556:..//common/Core/CM3/core_cm3.h **** {
1557:..//common/Core/CM3/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1558:..//common/Core/CM3/core_cm3.h **** }
1559:..//common/Core/CM3/core_cm3.h **** 
1560:..//common/Core/CM3/core_cm3.h **** /**
1561:..//common/Core/CM3/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1562:..//common/Core/CM3/core_cm3.h ****  *
1563:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn    The number of the interrupt for read active bit
1564:..//common/Core/CM3/core_cm3.h ****  * @return         1 = interrupt active, 0 = interrupt not active
1565:..//common/Core/CM3/core_cm3.h ****  *
1566:..//common/Core/CM3/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active, 
1567:..//common/Core/CM3/core_cm3.h ****  * otherwise it returns 0.
1568:..//common/Core/CM3/core_cm3.h ****  */
1569:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1570:..//common/Core/CM3/core_cm3.h **** {
1571:..//common/Core/CM3/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1572:..//common/Core/CM3/core_cm3.h **** }
1573:..//common/Core/CM3/core_cm3.h **** 
1574:..//common/Core/CM3/core_cm3.h **** /**
1575:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the priority for an interrupt
1576:..//common/Core/CM3/core_cm3.h ****  *
1577:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn      The number of the interrupt for set priority
1578:..//common/Core/CM3/core_cm3.h ****  * @param  priority  The priority to set
1579:..//common/Core/CM3/core_cm3.h ****  *
1580:..//common/Core/CM3/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt 
1581:..//common/Core/CM3/core_cm3.h ****  * number can be positive to specify an external (device specific) 
1582:..//common/Core/CM3/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1583:..//common/Core/CM3/core_cm3.h ****  *
1584:..//common/Core/CM3/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1585:..//common/Core/CM3/core_cm3.h ****  */
1586:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1587:..//common/Core/CM3/core_cm3.h **** {
  73              		.loc 1 1587 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 8
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78 0000 80B4     		push	{r7}
  79              	.LCFI3:
  80              		.cfi_def_cfa_offset 4
  81 0002 83B0     		sub	sp, sp, #12
  82              	.LCFI4:
  83              		.cfi_def_cfa_offset 16
  84 0004 00AF     		add	r7, sp, #0
  85              		.cfi_offset 7, -4
  86              	.LCFI5:
  87              		.cfi_def_cfa_register 7
  88 0006 0346     		mov	r3, r0
  89 0008 3960     		str	r1, [r7, #0]
  90 000a FB71     		strb	r3, [r7, #7]
1588:..//common/Core/CM3/core_cm3.h ****   if(IRQn < 0) {
  91              		.loc 1 1588 0
  92 000c 97F90730 		ldrsb	r3, [r7, #7]
  93 0010 002B     		cmp	r3, #0
  94 0012 10DA     		bge	.L4
1589:..//common/Core/CM3/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  95              		.loc 1 1589 0
  96 0014 4EF60053 		movw	r3, #:lower16:-536810240
  97 0018 CEF20003 		movt	r3, #:upper16:-536810240
  98 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  99 001e 02F00F02 		and	r2, r2, #15
 100 0022 A2F10401 		sub	r1, r2, #4
 101 0026 3A68     		ldr	r2, [r7, #0]
 102 0028 D2B2     		uxtb	r2, r2
 103 002a 4FEAC202 		lsl	r2, r2, #3
 104 002e D2B2     		uxtb	r2, r2
 105 0030 0B44     		add	r3, r1, r3
 106 0032 1A76     		strb	r2, [r3, #24]
 107 0034 0DE0     		b	.L6
 108              	.L4:
1590:..//common/Core/CM3/core_cm3.h ****   else {
1591:..//common/Core/CM3/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
 109              		.loc 1 1591 0
 110 0036 4EF20013 		movw	r3, #:lower16:-536813312
 111 003a CEF20003 		movt	r3, #:upper16:-536813312
 112 003e 97F90710 		ldrsb	r1, [r7, #7]
 113 0042 3A68     		ldr	r2, [r7, #0]
 114 0044 D2B2     		uxtb	r2, r2
 115 0046 4FEAC202 		lsl	r2, r2, #3
 116 004a D2B2     		uxtb	r2, r2
 117 004c 0B44     		add	r3, r1, r3
 118 004e 83F80023 		strb	r2, [r3, #768]
 119              	.L6:
1592:..//common/Core/CM3/core_cm3.h **** }
 120              		.loc 1 1592 0
 121 0052 07F10C07 		add	r7, r7, #12
 122 0056 BD46     		mov	sp, r7
 123 0058 80BC     		pop	{r7}
 124 005a 7047     		bx	lr
 125              		.cfi_endproc
 126              	.LFE20:
 128              		.global	uart_enable_accumulator
 129              		.section	.bss.uart_enable_accumulator,"aw",%nobits
 130              		.align	2
 133              	uart_enable_accumulator:
 134 0000 00000000 		.space	16
 134      00000000 
 134      00000000 
 134      00000000 
 135              		.global	preset_enable
 136              		.section	.bss.preset_enable,"aw",%nobits
 137              		.align	2
 140              	preset_enable:
 141 0000 00000000 		.space	16
 141      00000000 
 141      00000000 
 141      00000000 
 142              		.comm	UART2Status,4,4
 143              		.comm	UART3Status,4,4
 144              		.comm	UART0Status,4,4
 145              		.comm	ring_rx0,12,4
 146              		.comm	ring_rx2,12,4
 147              		.comm	ring_tx2,12,4
 148              		.comm	ring_rx3,12,4
 149              		.comm	ring_tx3,12,4
 150              		.global	buff_rx0
 151              		.section	.Ram1,"aw",%progbits
 152              		.align	2
 155              	buff_rx0:
 156 0000 00000000 		.space	128
 156      00000000 
 156      00000000 
 156      00000000 
 156      00000000 
 157              		.global	buff_rx2
 158              		.align	2
 161              	buff_rx2:
 162 0080 00000000 		.space	256
 162      00000000 
 162      00000000 
 162      00000000 
 162      00000000 
 163              		.global	buff_tx2
 164              		.align	2
 167              	buff_tx2:
 168 0180 00000000 		.space	256
 168      00000000 
 168      00000000 
 168      00000000 
 168      00000000 
 169              		.global	buff_rx3
 170              		.align	2
 173              	buff_rx3:
 174 0280 00000000 		.space	128
 174      00000000 
 174      00000000 
 174      00000000 
 174      00000000 
 175              		.global	buff_tx3
 176              		.align	2
 179              	buff_tx3:
 180 0300 00000000 		.space	128
 180      00000000 
 180      00000000 
 180      00000000 
 180      00000000 
 181              		.global	buff_rxusb
 182              		.align	2
 185              	buff_rxusb:
 186 0380 00000000 		.space	256
 186      00000000 
 186      00000000 
 186      00000000 
 186      00000000 
 187              		.global	buff_rxu
 188              		.align	2
 191              	buff_rxu:
 192 0480 00000000 		.space	128
 192      00000000 
 192      00000000 
 192      00000000 
 192      00000000 
 193              		.global	buff_txu
 194              		.align	2
 197              	buff_txu:
 198 0500 00000000 		.space	512
 198      00000000 
 198      00000000 
 198      00000000 
 198      00000000 
 199              		.comm	modbus2,180,4
 200              		.section	.text.UART0_IRQHandler,"ax",%progbits
 201              		.align	2
 202              		.global	UART0_IRQHandler
 203              		.thumb
 204              		.thumb_func
 206              	UART0_IRQHandler:
 207              	.LFB29:
 208              		.file 2 "..//drivers/UART/uart.c"
   1:..//drivers/UART/uart.c **** /*****************************************************************************
   2:..//drivers/UART/uart.c ****  *   uart.c:  UART API file for NXP LPC17xx Family Microprocessors
   3:..//drivers/UART/uart.c ****  *
   4:..//drivers/UART/uart.c ****  *   Copyright(C) 2009, NXP Semiconductor
   5:..//drivers/UART/uart.c ****  *   All rights reserved.
   6:..//drivers/UART/uart.c ****  *
   7:..//drivers/UART/uart.c ****  *		..\Sample_ARM\from_NXP\LPC1700 CANActivity Wakup\CAN
   8:..//drivers/UART/uart.c **** ******************************************************************************/
   9:..//drivers/UART/uart.c **** /*
  10:..//drivers/UART/uart.c ****  *  Modified for mbed NXP LPC1768 board
  11:..//drivers/UART/uart.c ****  *  Use UART2 & 3 modules
  12:..//drivers/UART/uart.c ****  *  By Kenji Arai / JH1PJL on April 24th,2010
  13:..//drivers/UART/uart.c ****  *  	September 27th,2010
  14:..//drivers/UART/uart.c ****  */
  15:..//drivers/UART/uart.c **** 
  16:..//drivers/UART/uart.c **** #include "lpc17xx.h"
  17:..//drivers/UART/uart.c **** // #include "type.h"
  18:..//drivers/UART/uart.c **** #include "lpc_types.h"
  19:..//drivers/UART/uart.c **** #include "uart.h"
  20:..//drivers/UART/uart.c **** #include "ring.h"
  21:..//drivers/UART/uart.c **** #include "lpc17xx_uart.h"
  22:..//drivers/UART/uart.c **** #include "interrupts.h"
  23:..//drivers/UART/uart.c **** int uart_enable_accumulator[4] = {0,0,0,0}; //for rs485
  24:..//drivers/UART/uart.c **** int preset_enable[4] = {0,0,0,0};
  25:..//drivers/UART/uart.c **** 
  26:..//drivers/UART/uart.c **** uint32_t UART2Status, UART3Status,UART0Status;
  27:..//drivers/UART/uart.c **** ring_t	 ring_rx0;
  28:..//drivers/UART/uart.c **** ring_t	 ring_rx2;
  29:..//drivers/UART/uart.c **** ring_t	 ring_tx2;
  30:..//drivers/UART/uart.c **** ring_t	 ring_rx3;
  31:..//drivers/UART/uart.c **** ring_t	 ring_tx3;
  32:..//drivers/UART/uart.c **** #define USE_AHB_RAM 1
  33:..//drivers/UART/uart.c **** #if (USE_AHB_RAM == 1)
  34:..//drivers/UART/uart.c **** uint8_t	 buff_rx0[UART_0_SIZE]	__attribute__((section(".Ram1")));
  35:..//drivers/UART/uart.c **** uint8_t	 buff_rx2[UART_2_SIZE]	__attribute__((section(".Ram1")));
  36:..//drivers/UART/uart.c **** uint8_t	 buff_tx2[UART_2_SIZE]	__attribute__((section(".Ram1")));
  37:..//drivers/UART/uart.c **** uint8_t	 buff_rx3[UART_3_SIZE]	__attribute__((section(".Ram1")));
  38:..//drivers/UART/uart.c **** uint8_t	 buff_tx3[UART_3_SIZE]	__attribute__((section(".Ram1")));
  39:..//drivers/UART/uart.c **** uint8_t	 buff_rxusb[USB_SIZE]	__attribute__((section(".Ram1")));
  40:..//drivers/UART/uart.c **** 
  41:..//drivers/UART/uart.c **** uint8_t	 buff_rxu[SIZE_COMBUF_B]	__attribute__((section(".Ram1")));
  42:..//drivers/UART/uart.c **** uint8_t	 buff_txu[SIZE_COMBUF_H]	__attribute__((section(".Ram1")));
  43:..//drivers/UART/uart.c **** #else
  44:..//drivers/UART/uart.c **** uint8_t	 buff_rx0[UART_0_SIZE];
  45:..//drivers/UART/uart.c **** uint8_t	 buff_rx2[UART_2_SIZE];
  46:..//drivers/UART/uart.c **** uint8_t	 buff_tx2[UART_2_SIZE];
  47:..//drivers/UART/uart.c **** uint8_t	 buff_rx3[UART_3_SIZE];
  48:..//drivers/UART/uart.c **** uint8_t	 buff_tx3[UART_3_SIZE];
  49:..//drivers/UART/uart.c **** uint8_t	 buff_rxusb[USB_SIZE];
  50:..//drivers/UART/uart.c **** 
  51:..//drivers/UART/uart.c **** uint8_t	 buff_rxu[SIZE_COMBUF_B];
  52:..//drivers/UART/uart.c **** uint8_t	 buff_txu[SIZE_COMBUF_H];
  53:..//drivers/UART/uart.c **** #endif
  54:..//drivers/UART/uart.c **** 
  55:..//drivers/UART/uart.c **** #ifdef MOD_UART0
  56:..//drivers/UART/uart.c **** modbus_t	modbus0;
  57:..//drivers/UART/uart.c **** #endif
  58:..//drivers/UART/uart.c **** #ifdef MOD_UART2
  59:..//drivers/UART/uart.c **** modbus_t	modbus2;
  60:..//drivers/UART/uart.c **** #endif
  61:..//drivers/UART/uart.c **** #ifdef MOD_UART3
  62:..//drivers/UART/uart.c **** modbus_t	modbus3;
  63:..//drivers/UART/uart.c **** #endif
  64:..//drivers/UART/uart.c **** 
  65:..//drivers/UART/uart.c **** extern uint32_t SystemFrequency;	/*!< System Clock Frequency (Core Clock)  */
  66:..//drivers/UART/uart.c **** 
  67:..//drivers/UART/uart.c **** /*****************************************************************************
  68:..//drivers/UART/uart.c **** ** Function name:		UART0Handler
  69:..//drivers/UART/uart.c **** *****************************************************************************/
  70:..//drivers/UART/uart.c **** void UART0_IRQHandler (void){
 209              		.loc 2 70 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 8
 212              		@ frame_needed = 1, uses_anonymous_args = 0
 213 0000 80B5     		push	{r7, lr}
 214              	.LCFI6:
 215              		.cfi_def_cfa_offset 8
 216 0002 82B0     		sub	sp, sp, #8
 217              	.LCFI7:
 218              		.cfi_def_cfa_offset 16
 219 0004 00AF     		add	r7, sp, #0
 220              		.cfi_offset 14, -4
 221              		.cfi_offset 7, -8
 222              	.LCFI8:
 223              		.cfi_def_cfa_register 7
  71:..//drivers/UART/uart.c **** 	uint8_t IIRValue, LSRValue;
  72:..//drivers/UART/uart.c **** 	uint8_t Dummy = Dummy;
  73:..//drivers/UART/uart.c **** 	uint8_t c;
  74:..//drivers/UART/uart.c **** 
  75:..//drivers/UART/uart.c **** 	IIRValue = LPC_UART0->IIR;
 224              		.loc 2 75 0
 225 0006 4CF20003 		movw	r3, #:lower16:1073790976
 226 000a C4F20003 		movt	r3, #:upper16:1073790976
 227 000e 9B68     		ldr	r3, [r3, #8]
 228 0010 3B71     		strb	r3, [r7, #4]
  76:..//drivers/UART/uart.c **** 	IIRValue >>= 1;					/* skip pending bit in IIR */
 229              		.loc 2 76 0
 230 0012 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 231 0014 4FEA5303 		lsr	r3, r3, #1
 232 0018 3B71     		strb	r3, [r7, #4]
  77:..//drivers/UART/uart.c **** 	IIRValue &= 0x07;				/* check bit 1~3, interrupt identification */
 233              		.loc 2 77 0
 234 001a 3B79     		ldrb	r3, [r7, #4]
 235 001c 03F00703 		and	r3, r3, #7
 236 0020 3B71     		strb	r3, [r7, #4]
  78:..//drivers/UART/uart.c **** 	if ( IIRValue == IIR_RLS ){		/* Receive Line Status */
 237              		.loc 2 78 0
 238 0022 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 239 0024 032B     		cmp	r3, #3
 240 0026 2FD1     		bne	.L8
  79:..//drivers/UART/uart.c **** 		LSRValue = LPC_UART0->LSR;
 241              		.loc 2 79 0
 242 0028 4CF20003 		movw	r3, #:lower16:1073790976
 243 002c C4F20003 		movt	r3, #:upper16:1073790976
 244 0030 1B7D     		ldrb	r3, [r3, #20]
 245 0032 7B71     		strb	r3, [r7, #5]
  80:..//drivers/UART/uart.c **** 		/* Receive Line Status */
  81:..//drivers/UART/uart.c **** 		if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) ){
 246              		.loc 2 81 0
 247 0034 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 248 0036 03F09E03 		and	r3, r3, #158
 249 003a 002B     		cmp	r3, #0
 250 003c 0CD0     		beq	.L9
  82:..//drivers/UART/uart.c **** 			/* There are errors or break interrupt */
  83:..//drivers/UART/uart.c **** 			/* Read LSR will clear the interrupt */
  84:..//drivers/UART/uart.c **** 			UART0Status = LSRValue;
 251              		.loc 2 84 0
 252 003e 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 253 0040 40F20003 		movw	r3, #:lower16:UART0Status
 254 0044 C0F20003 		movt	r3, #:upper16:UART0Status
 255 0048 1A60     		str	r2, [r3, #0]
  85:..//drivers/UART/uart.c **** 			Dummy = LPC_UART0->RBR;	/* Dummy read on RX to clear interrupt, then bail out */
 256              		.loc 2 85 0
 257 004a 4CF20003 		movw	r3, #:lower16:1073790976
 258 004e C4F20003 		movt	r3, #:upper16:1073790976
 259 0052 1B78     		ldrb	r3, [r3, #0]
 260 0054 BB71     		strb	r3, [r7, #6]
  86:..//drivers/UART/uart.c **** 			return;
 261              		.loc 2 86 0
 262 0056 3DE0     		b	.L13
 263              	.L9:
  87:..//drivers/UART/uart.c **** 		}
  88:..//drivers/UART/uart.c **** 		if ( LSRValue & LSR_RDR ){	/* Receive Data Ready */
 264              		.loc 2 88 0
 265 0058 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 266 005a 03F00103 		and	r3, r3, #1
 267 005e DBB2     		uxtb	r3, r3
 268 0060 002B     		cmp	r3, #0
 269 0062 36D0     		beq	.L14
  89:..//drivers/UART/uart.c **** 			/* If no error on RLS, normal ready, save into the data buffer. */
  90:..//drivers/UART/uart.c **** 			/* Note: read RBR will clear the interrupt */
  91:..//drivers/UART/uart.c **** 			c = LPC_UART0->RBR;
 270              		.loc 2 91 0
 271 0064 4CF20003 		movw	r3, #:lower16:1073790976
 272 0068 C4F20003 		movt	r3, #:upper16:1073790976
 273 006c 1B78     		ldrb	r3, [r3, #0]
 274 006e FB71     		strb	r3, [r7, #7]
  92:..//drivers/UART/uart.c **** 			#ifdef MOD_UART0
  93:..//drivers/UART/uart.c **** 			checkModbusData(&modbus0,c);
  94:..//drivers/UART/uart.c **** 			#else
  95:..//drivers/UART/uart.c **** 			ring_putc(&ring_rx0, c);
 275              		.loc 2 95 0
 276 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 277 0072 40F20000 		movw	r0, #:lower16:ring_rx0
 278 0076 C0F20000 		movt	r0, #:upper16:ring_rx0
 279 007a 1946     		mov	r1, r3
 280 007c 40F20003 		movw	r3, #:lower16:ring_putc
 281 0080 C0F20003 		movt	r3, #:upper16:ring_putc
 282 0084 9847     		blx	r3
 283 0086 25E0     		b	.L13
 284              	.L8:
  96:..//drivers/UART/uart.c **** 			#endif
  97:..//drivers/UART/uart.c **** 		}
  98:..//drivers/UART/uart.c **** 	} else if ( IIRValue == IIR_RDA ){	/* Receive Data Available */
 285              		.loc 2 98 0
 286 0088 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 287 008a 022B     		cmp	r3, #2
 288 008c 11D1     		bne	.L12
  99:..//drivers/UART/uart.c **** 		/* Receive Data Available */
 100:..//drivers/UART/uart.c **** 		c = LPC_UART0->RBR;
 289              		.loc 2 100 0
 290 008e 4CF20003 		movw	r3, #:lower16:1073790976
 291 0092 C4F20003 		movt	r3, #:upper16:1073790976
 292 0096 1B78     		ldrb	r3, [r3, #0]
 293 0098 FB71     		strb	r3, [r7, #7]
 101:..//drivers/UART/uart.c **** 		#ifdef MOD_UART0
 102:..//drivers/UART/uart.c **** 		checkModbusData(&modbus0,c);
 103:..//drivers/UART/uart.c **** 		#else
 104:..//drivers/UART/uart.c **** 		ring_putc(&ring_rx0, c);
 294              		.loc 2 104 0
 295 009a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 296 009c 40F20000 		movw	r0, #:lower16:ring_rx0
 297 00a0 C0F20000 		movt	r0, #:upper16:ring_rx0
 298 00a4 1946     		mov	r1, r3
 299 00a6 40F20003 		movw	r3, #:lower16:ring_putc
 300 00aa C0F20003 		movt	r3, #:upper16:ring_putc
 301 00ae 9847     		blx	r3
 302 00b0 10E0     		b	.L13
 303              	.L12:
 105:..//drivers/UART/uart.c **** 		#endif
 106:..//drivers/UART/uart.c **** 	} else if ( IIRValue == IIR_CTI ){	/* Character timeout indicator */
 304              		.loc 2 106 0
 305 00b2 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 306 00b4 062B     		cmp	r3, #6
 307 00b6 0DD1     		bne	.L13
 107:..//drivers/UART/uart.c **** 		/* Character Time-out indicator */
 108:..//drivers/UART/uart.c **** 		UART0Status |= 0x100;		/* Bit 9 as the CTI error */
 308              		.loc 2 108 0
 309 00b8 40F20003 		movw	r3, #:lower16:UART0Status
 310 00bc C0F20003 		movt	r3, #:upper16:UART0Status
 311 00c0 1B68     		ldr	r3, [r3, #0]
 312 00c2 43F48072 		orr	r2, r3, #256
 313 00c6 40F20003 		movw	r3, #:lower16:UART0Status
 314 00ca C0F20003 		movt	r3, #:upper16:UART0Status
 315 00ce 1A60     		str	r2, [r3, #0]
 316 00d0 00E0     		b	.L13
 317              	.L14:
 318              		.loc 2 95 0
 319 00d2 00BF     		nop
 320              	.L13:
 109:..//drivers/UART/uart.c **** 	}
 110:..//drivers/UART/uart.c **** }
 321              		.loc 2 110 0
 322 00d4 07F10807 		add	r7, r7, #8
 323 00d8 BD46     		mov	sp, r7
 324 00da 80BD     		pop	{r7, pc}
 325              		.cfi_endproc
 326              	.LFE29:
 328              		.section	.text.UART2_IRQHandler,"ax",%progbits
 329              		.align	2
 330              		.global	UART2_IRQHandler
 331              		.thumb
 332              		.thumb_func
 334              	UART2_IRQHandler:
 335              	.LFB30:
 111:..//drivers/UART/uart.c **** /*****************************************************************************
 112:..//drivers/UART/uart.c **** ** Function name:		UART2Handler
 113:..//drivers/UART/uart.c **** *****************************************************************************/
 114:..//drivers/UART/uart.c **** void UART2_IRQHandler (void){
 336              		.loc 2 114 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 8
 339              		@ frame_needed = 1, uses_anonymous_args = 0
 340 0000 80B5     		push	{r7, lr}
 341              	.LCFI9:
 342              		.cfi_def_cfa_offset 8
 343 0002 82B0     		sub	sp, sp, #8
 344              	.LCFI10:
 345              		.cfi_def_cfa_offset 16
 346 0004 00AF     		add	r7, sp, #0
 347              		.cfi_offset 14, -4
 348              		.cfi_offset 7, -8
 349              	.LCFI11:
 350              		.cfi_def_cfa_register 7
 115:..//drivers/UART/uart.c **** 	uint8_t IIRValue, LSRValue;
 116:..//drivers/UART/uart.c **** 	uint8_t Dummy = Dummy;
 117:..//drivers/UART/uart.c **** 	uint8_t c;
 118:..//drivers/UART/uart.c **** 
 119:..//drivers/UART/uart.c **** 	IIRValue = LPC_UART2->IIR;
 351              		.loc 2 119 0
 352 0006 48F20003 		movw	r3, #:lower16:1074364416
 353 000a C4F20903 		movt	r3, #:upper16:1074364416
 354 000e 9B68     		ldr	r3, [r3, #8]
 355 0010 3B70     		strb	r3, [r7, #0]
 120:..//drivers/UART/uart.c **** 	IIRValue >>= 1;					/* skip pending bit in IIR */
 356              		.loc 2 120 0
 357 0012 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 358 0014 4FEA5303 		lsr	r3, r3, #1
 359 0018 3B70     		strb	r3, [r7, #0]
 121:..//drivers/UART/uart.c **** 	IIRValue &= 0x07;				/* check bit 1~3, interrupt identification */
 360              		.loc 2 121 0
 361 001a 3B78     		ldrb	r3, [r7, #0]
 362 001c 03F00703 		and	r3, r3, #7
 363 0020 3B70     		strb	r3, [r7, #0]
 122:..//drivers/UART/uart.c **** 	if ( IIRValue == IIR_RLS ){		/* Receive Line Status */
 364              		.loc 2 122 0
 365 0022 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 366 0024 032B     		cmp	r3, #3
 367 0026 2FD1     		bne	.L16
 123:..//drivers/UART/uart.c **** 		LSRValue = LPC_UART2->LSR;
 368              		.loc 2 123 0
 369 0028 48F20003 		movw	r3, #:lower16:1074364416
 370 002c C4F20903 		movt	r3, #:upper16:1074364416
 371 0030 1B7D     		ldrb	r3, [r3, #20]
 372 0032 7B70     		strb	r3, [r7, #1]
 124:..//drivers/UART/uart.c **** 		/* Receive Line Status */
 125:..//drivers/UART/uart.c **** 		if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) ){
 373              		.loc 2 125 0
 374 0034 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 375 0036 03F09E03 		and	r3, r3, #158
 376 003a 002B     		cmp	r3, #0
 377 003c 0CD0     		beq	.L17
 126:..//drivers/UART/uart.c **** 			/* There are errors or break interrupt */
 127:..//drivers/UART/uart.c **** 			/* Read LSR will clear the interrupt */
 128:..//drivers/UART/uart.c **** 			UART2Status = LSRValue;
 378              		.loc 2 128 0
 379 003e 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 380 0040 40F20003 		movw	r3, #:lower16:UART2Status
 381 0044 C0F20003 		movt	r3, #:upper16:UART2Status
 382 0048 1A60     		str	r2, [r3, #0]
 129:..//drivers/UART/uart.c **** 			Dummy = (uint8_t)LPC_UART2->RBR;	/* Dummy read on RX to clear interrupt, then bail out */
 383              		.loc 2 129 0
 384 004a 48F20003 		movw	r3, #:lower16:1074364416
 385 004e C4F20903 		movt	r3, #:upper16:1074364416
 386 0052 1B78     		ldrb	r3, [r3, #0]
 387 0054 BB70     		strb	r3, [r7, #2]
 130:..//drivers/UART/uart.c **** 			return;
 388              		.loc 2 130 0
 389 0056 7EE0     		b	.L25
 390              	.L17:
 131:..//drivers/UART/uart.c **** 		}
 132:..//drivers/UART/uart.c **** 		if ( LSRValue & LSR_RDR ){	/* Receive Data Ready */
 391              		.loc 2 132 0
 392 0058 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 393 005a 03F00103 		and	r3, r3, #1
 394 005e DBB2     		uxtb	r3, r3
 395 0060 002B     		cmp	r3, #0
 396 0062 77D0     		beq	.L26
 133:..//drivers/UART/uart.c **** 			/* If no error on RLS, normal ready, save into the data buffer. */
 134:..//drivers/UART/uart.c **** 			/* Note: read RBR will clear the interrupt */
 135:..//drivers/UART/uart.c **** 			c = LPC_UART2->RBR;
 397              		.loc 2 135 0
 398 0064 48F20003 		movw	r3, #:lower16:1074364416
 399 0068 C4F20903 		movt	r3, #:upper16:1074364416
 400 006c 1B78     		ldrb	r3, [r3, #0]
 401 006e FB70     		strb	r3, [r7, #3]
 136:..//drivers/UART/uart.c **** 			#ifdef MOD_UART2
 137:..//drivers/UART/uart.c **** 			checkModbusData(&modbus2,c);
 402              		.loc 2 137 0
 403 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 404 0072 40F20000 		movw	r0, #:lower16:modbus2
 405 0076 C0F20000 		movt	r0, #:upper16:modbus2
 406 007a 1946     		mov	r1, r3
 407 007c 40F20003 		movw	r3, #:lower16:checkModbusData
 408 0080 C0F20003 		movt	r3, #:upper16:checkModbusData
 409 0084 9847     		blx	r3
 410 0086 66E0     		b	.L25
 411              	.L16:
 138:..//drivers/UART/uart.c **** 			#else
 139:..//drivers/UART/uart.c **** 			ring_putc(&ring_rx2, c);
 140:..//drivers/UART/uart.c **** 			#endif
 141:..//drivers/UART/uart.c **** 		}
 142:..//drivers/UART/uart.c **** 	} else if ( IIRValue == IIR_RDA ){	/* Receive Data Available */
 412              		.loc 2 142 0
 413 0088 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 414 008a 022B     		cmp	r3, #2
 415 008c 11D1     		bne	.L20
 143:..//drivers/UART/uart.c **** 		/* Receive Data Available */
 144:..//drivers/UART/uart.c **** 		c = LPC_UART2->RBR;
 416              		.loc 2 144 0
 417 008e 48F20003 		movw	r3, #:lower16:1074364416
 418 0092 C4F20903 		movt	r3, #:upper16:1074364416
 419 0096 1B78     		ldrb	r3, [r3, #0]
 420 0098 FB70     		strb	r3, [r7, #3]
 145:..//drivers/UART/uart.c **** 		#ifdef MOD_UART2
 146:..//drivers/UART/uart.c **** 		checkModbusData(&modbus2,c);
 421              		.loc 2 146 0
 422 009a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 423 009c 40F20000 		movw	r0, #:lower16:modbus2
 424 00a0 C0F20000 		movt	r0, #:upper16:modbus2
 425 00a4 1946     		mov	r1, r3
 426 00a6 40F20003 		movw	r3, #:lower16:checkModbusData
 427 00aa C0F20003 		movt	r3, #:upper16:checkModbusData
 428 00ae 9847     		blx	r3
 429 00b0 51E0     		b	.L25
 430              	.L20:
 147:..//drivers/UART/uart.c **** 		#else
 148:..//drivers/UART/uart.c **** 		ring_putc(&ring_rx2, c);
 149:..//drivers/UART/uart.c **** 		#endif
 150:..//drivers/UART/uart.c **** 	} else if ( IIRValue == IIR_CTI ){	/* Character timeout indicator */
 431              		.loc 2 150 0
 432 00b2 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 433 00b4 062B     		cmp	r3, #6
 434 00b6 0CD1     		bne	.L21
 151:..//drivers/UART/uart.c **** 		/* Character Time-out indicator */
 152:..//drivers/UART/uart.c **** 		UART2Status |= 0x100;		/* Bit 9 as the CTI error */
 435              		.loc 2 152 0
 436 00b8 40F20003 		movw	r3, #:lower16:UART2Status
 437 00bc C0F20003 		movt	r3, #:upper16:UART2Status
 438 00c0 1B68     		ldr	r3, [r3, #0]
 439 00c2 43F48072 		orr	r2, r3, #256
 440 00c6 40F20003 		movw	r3, #:lower16:UART2Status
 441 00ca C0F20003 		movt	r3, #:upper16:UART2Status
 442 00ce 1A60     		str	r2, [r3, #0]
 443 00d0 41E0     		b	.L25
 444              	.L21:
 153:..//drivers/UART/uart.c **** 	} else if ( IIRValue == IIR_THRE){ /* Transmission from TX FIFO complete */
 445              		.loc 2 153 0
 446 00d2 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 447 00d4 012B     		cmp	r3, #1
 448 00d6 3ED1     		bne	.L25
 449              	.LBB2:
 154:..//drivers/UART/uart.c **** 		// if txfifo is not empty
 155:..//drivers/UART/uart.c **** 		// copy next set of data to TX FIFO
 156:..//drivers/UART/uart.c **** 		int count = 0;
 450              		.loc 2 156 0
 451 00d8 4FF00003 		mov	r3, #0
 452 00dc 7B60     		str	r3, [r7, #4]
 157:..//drivers/UART/uart.c **** 		if(ring_is_empty(&ring_tx2)){
 453              		.loc 2 157 0
 454 00de 40F20000 		movw	r0, #:lower16:ring_tx2
 455 00e2 C0F20000 		movt	r0, #:upper16:ring_tx2
 456 00e6 40F20003 		movw	r3, #:lower16:ring_is_empty
 457 00ea C0F20003 		movt	r3, #:upper16:ring_is_empty
 458 00ee 9847     		blx	r3
 459 00f0 0346     		mov	r3, r0
 460 00f2 002B     		cmp	r3, #0
 461 00f4 1ED0     		beq	.L23
 158:..//drivers/UART/uart.c **** 			// LPC_GPIO0->FIOSET |= (1<<19);
 159:..//drivers/UART/uart.c **** 
 160:..//drivers/UART/uart.c **** 		 	uart_enable_accumulator[2] = 0;
 462              		.loc 2 160 0
 463 00f6 40F20003 		movw	r3, #:lower16:uart_enable_accumulator
 464 00fa C0F20003 		movt	r3, #:upper16:uart_enable_accumulator
 465 00fe 4FF00002 		mov	r2, #0
 466 0102 9A60     		str	r2, [r3, #8]
 161:..//drivers/UART/uart.c **** 		}
 162:..//drivers/UART/uart.c **** 		while((count<16) && (!ring_is_empty(&ring_tx2))){ //TX FIFO not full yet and ring_tx2 is not empt
 467              		.loc 2 162 0
 468 0104 16E0     		b	.L23
 469              	.L24:
 163:..//drivers/UART/uart.c **** 			// get next (1) charcter and drop it into TX FIFO
 164:..//drivers/UART/uart.c **** 			ring_getc(&ring_tx2);
 470              		.loc 2 164 0
 471 0106 40F20000 		movw	r0, #:lower16:ring_tx2
 472 010a C0F20000 		movt	r0, #:upper16:ring_tx2
 473 010e 40F20003 		movw	r3, #:lower16:ring_getc
 474 0112 C0F20003 		movt	r3, #:upper16:ring_getc
 475 0116 9847     		blx	r3
 165:..//drivers/UART/uart.c **** 			LPC_UART2->THR = (uint16_t)ring_tx2.dt_got & 0xFF;
 476              		.loc 2 165 0
 477 0118 48F20003 		movw	r3, #:lower16:1074364416
 478 011c C4F20903 		movt	r3, #:upper16:1074364416
 479 0120 40F20002 		movw	r2, #:lower16:ring_tx2
 480 0124 C0F20002 		movt	r2, #:upper16:ring_tx2
 481 0128 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 482 012a 1A70     		strb	r2, [r3, #0]
 166:..//drivers/UART/uart.c **** 			count += 1;
 483              		.loc 2 166 0
 484 012c 7B68     		ldr	r3, [r7, #4]
 485 012e 03F10103 		add	r3, r3, #1
 486 0132 7B60     		str	r3, [r7, #4]
 487              	.L23:
 488              		.loc 2 162 0
 489 0134 7B68     		ldr	r3, [r7, #4]
 490 0136 0F2B     		cmp	r3, #15
 491 0138 0DDC     		bgt	.L25
 492 013a 40F20000 		movw	r0, #:lower16:ring_tx2
 493 013e C0F20000 		movt	r0, #:upper16:ring_tx2
 494 0142 40F20003 		movw	r3, #:lower16:ring_is_empty
 495 0146 C0F20003 		movt	r3, #:upper16:ring_is_empty
 496 014a 9847     		blx	r3
 497 014c 0346     		mov	r3, r0
 498 014e 002B     		cmp	r3, #0
 499 0150 D9D0     		beq	.L24
 500 0152 00E0     		b	.L25
 501              	.L26:
 502              	.LBE2:
 503              		.loc 2 137 0
 504 0154 00BF     		nop
 505              	.L25:
 167:..//drivers/UART/uart.c **** 		}
 168:..//drivers/UART/uart.c **** 	}
 169:..//drivers/UART/uart.c **** }
 506              		.loc 2 169 0
 507 0156 07F10807 		add	r7, r7, #8
 508 015a BD46     		mov	sp, r7
 509 015c 80BD     		pop	{r7, pc}
 510              		.cfi_endproc
 511              	.LFE30:
 513 015e 00BF     		.section	.text.UART3_IRQHandler,"ax",%progbits
 514              		.align	2
 515              		.global	UART3_IRQHandler
 516              		.thumb
 517              		.thumb_func
 519              	UART3_IRQHandler:
 520              	.LFB31:
 170:..//drivers/UART/uart.c **** 
 171:..//drivers/UART/uart.c **** /*****************************************************************************
 172:..//drivers/UART/uart.c **** ** Function name:		UART3Handler
 173:..//drivers/UART/uart.c **** *****************************************************************************/
 174:..//drivers/UART/uart.c **** void UART3_IRQHandler (void){
 521              		.loc 2 174 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 8
 524              		@ frame_needed = 1, uses_anonymous_args = 0
 525 0000 80B5     		push	{r7, lr}
 526              	.LCFI12:
 527              		.cfi_def_cfa_offset 8
 528 0002 82B0     		sub	sp, sp, #8
 529              	.LCFI13:
 530              		.cfi_def_cfa_offset 16
 531 0004 00AF     		add	r7, sp, #0
 532              		.cfi_offset 14, -4
 533              		.cfi_offset 7, -8
 534              	.LCFI14:
 535              		.cfi_def_cfa_register 7
 175:..//drivers/UART/uart.c **** 	uint8_t IIRValue, LSRValue;
 176:..//drivers/UART/uart.c **** 	uint8_t Dummy = Dummy;
 177:..//drivers/UART/uart.c **** 	uint8_t c;
 178:..//drivers/UART/uart.c **** 
 179:..//drivers/UART/uart.c **** 	IIRValue = LPC_UART3->IIR;
 536              		.loc 2 179 0
 537 0006 4CF20003 		movw	r3, #:lower16:1074380800
 538 000a C4F20903 		movt	r3, #:upper16:1074380800
 539 000e 9B68     		ldr	r3, [r3, #8]
 540 0010 3B70     		strb	r3, [r7, #0]
 180:..//drivers/UART/uart.c **** 	IIRValue >>= 1;					/* skip pending bit in IIR */
 541              		.loc 2 180 0
 542 0012 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 543 0014 4FEA5303 		lsr	r3, r3, #1
 544 0018 3B70     		strb	r3, [r7, #0]
 181:..//drivers/UART/uart.c **** 	IIRValue &= 0x07;				/* check bit 1~3, interrupt identification */
 545              		.loc 2 181 0
 546 001a 3B78     		ldrb	r3, [r7, #0]
 547 001c 03F00703 		and	r3, r3, #7
 548 0020 3B70     		strb	r3, [r7, #0]
 182:..//drivers/UART/uart.c **** 	if ( IIRValue == IIR_RLS ){		/* Receive Line Status */
 549              		.loc 2 182 0
 550 0022 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 551 0024 032B     		cmp	r3, #3
 552 0026 2FD1     		bne	.L28
 183:..//drivers/UART/uart.c **** 		LSRValue = LPC_UART3->LSR;
 553              		.loc 2 183 0
 554 0028 4CF20003 		movw	r3, #:lower16:1074380800
 555 002c C4F20903 		movt	r3, #:upper16:1074380800
 556 0030 1B7D     		ldrb	r3, [r3, #20]
 557 0032 7B70     		strb	r3, [r7, #1]
 184:..//drivers/UART/uart.c **** 		/* Receive Line Status */
 185:..//drivers/UART/uart.c **** 		if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) ){
 558              		.loc 2 185 0
 559 0034 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 560 0036 03F09E03 		and	r3, r3, #158
 561 003a 002B     		cmp	r3, #0
 562 003c 0CD0     		beq	.L29
 186:..//drivers/UART/uart.c **** 			/* There are errors or break interrupt */
 187:..//drivers/UART/uart.c **** 			/* Read LSR will clear the interrupt */
 188:..//drivers/UART/uart.c **** 			UART3Status = LSRValue;
 563              		.loc 2 188 0
 564 003e 7A78     		ldrb	r2, [r7, #1]	@ zero_extendqisi2
 565 0040 40F20003 		movw	r3, #:lower16:UART3Status
 566 0044 C0F20003 		movt	r3, #:upper16:UART3Status
 567 0048 1A60     		str	r2, [r3, #0]
 189:..//drivers/UART/uart.c **** 			Dummy = (uint8_t)LPC_UART3->RBR;	/* Dummy read on RX to clear interrupt, then bail out */
 568              		.loc 2 189 0
 569 004a 4CF20003 		movw	r3, #:lower16:1074380800
 570 004e C4F20903 		movt	r3, #:upper16:1074380800
 571 0052 1B78     		ldrb	r3, [r3, #0]
 572 0054 BB70     		strb	r3, [r7, #2]
 190:..//drivers/UART/uart.c **** 			return;
 573              		.loc 2 190 0
 574 0056 6BE0     		b	.L36
 575              	.L29:
 191:..//drivers/UART/uart.c **** 		}
 192:..//drivers/UART/uart.c **** 		if ( LSRValue & LSR_RDR ){	/* Receive Data Ready */
 576              		.loc 2 192 0
 577 0058 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 578 005a 03F00103 		and	r3, r3, #1
 579 005e DBB2     		uxtb	r3, r3
 580 0060 002B     		cmp	r3, #0
 581 0062 64D0     		beq	.L37
 193:..//drivers/UART/uart.c **** 			/* If no error on RLS, normal ready, save into the data buffer. */
 194:..//drivers/UART/uart.c **** 			/* Note: read RBR will clear the interrupt */
 195:..//drivers/UART/uart.c **** 			c = (uint8_t)LPC_UART3->RBR;
 582              		.loc 2 195 0
 583 0064 4CF20003 		movw	r3, #:lower16:1074380800
 584 0068 C4F20903 		movt	r3, #:upper16:1074380800
 585 006c 1B78     		ldrb	r3, [r3, #0]
 586 006e FB70     		strb	r3, [r7, #3]
 196:..//drivers/UART/uart.c **** 			#ifdef MOD_UART3
 197:..//drivers/UART/uart.c **** 			checkModbusData(&modbus3,c);
 198:..//drivers/UART/uart.c **** 			#else
 199:..//drivers/UART/uart.c **** 			ring_putc(&ring_rx3, c);
 587              		.loc 2 199 0
 588 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 589 0072 40F20000 		movw	r0, #:lower16:ring_rx3
 590 0076 C0F20000 		movt	r0, #:upper16:ring_rx3
 591 007a 1946     		mov	r1, r3
 592 007c 40F20003 		movw	r3, #:lower16:ring_putc
 593 0080 C0F20003 		movt	r3, #:upper16:ring_putc
 594 0084 9847     		blx	r3
 595 0086 53E0     		b	.L36
 596              	.L28:
 200:..//drivers/UART/uart.c **** 			#endif
 201:..//drivers/UART/uart.c **** 			// DEBUG only
 202:..//drivers/UART/uart.c **** 			//LPC_UART2->THR = (uint16_t)c & 0xFF;
 203:..//drivers/UART/uart.c **** 		}
 204:..//drivers/UART/uart.c **** 	} else if ( IIRValue == IIR_RDA ){	/* Receive Data Available */
 597              		.loc 2 204 0
 598 0088 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 599 008a 022B     		cmp	r3, #2
 600 008c 11D1     		bne	.L32
 205:..//drivers/UART/uart.c **** 		/* Receive Data Available */
 206:..//drivers/UART/uart.c **** 		c = (uint8_t)LPC_UART3->RBR;
 601              		.loc 2 206 0
 602 008e 4CF20003 		movw	r3, #:lower16:1074380800
 603 0092 C4F20903 		movt	r3, #:upper16:1074380800
 604 0096 1B78     		ldrb	r3, [r3, #0]
 605 0098 FB70     		strb	r3, [r7, #3]
 207:..//drivers/UART/uart.c **** 		#ifdef MOD_UART3
 208:..//drivers/UART/uart.c **** 		checkModbusData(&modbus3,c);
 209:..//drivers/UART/uart.c **** 		#else
 210:..//drivers/UART/uart.c **** 		ring_putc(&ring_rx3, c);
 606              		.loc 2 210 0
 607 009a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 608 009c 40F20000 		movw	r0, #:lower16:ring_rx3
 609 00a0 C0F20000 		movt	r0, #:upper16:ring_rx3
 610 00a4 1946     		mov	r1, r3
 611 00a6 40F20003 		movw	r3, #:lower16:ring_putc
 612 00aa C0F20003 		movt	r3, #:upper16:ring_putc
 613 00ae 9847     		blx	r3
 614 00b0 3EE0     		b	.L36
 615              	.L32:
 211:..//drivers/UART/uart.c **** 		#endif
 212:..//drivers/UART/uart.c **** 		// DEBUG only
 213:..//drivers/UART/uart.c **** 		//LPC_UART2->THR = (uint16_t)c & 0xFF;
 214:..//drivers/UART/uart.c **** 	} else if ( IIRValue == IIR_CTI ){	/* Character timeout indicator */
 616              		.loc 2 214 0
 617 00b2 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 618 00b4 062B     		cmp	r3, #6
 619 00b6 0CD1     		bne	.L33
 215:..//drivers/UART/uart.c **** 		/* Character Time-out indicator */
 216:..//drivers/UART/uart.c **** 		UART3Status |= 0x100;		/* Bit 9 as the CTI error */
 620              		.loc 2 216 0
 621 00b8 40F20003 		movw	r3, #:lower16:UART3Status
 622 00bc C0F20003 		movt	r3, #:upper16:UART3Status
 623 00c0 1B68     		ldr	r3, [r3, #0]
 624 00c2 43F48072 		orr	r2, r3, #256
 625 00c6 40F20003 		movw	r3, #:lower16:UART3Status
 626 00ca C0F20003 		movt	r3, #:upper16:UART3Status
 627 00ce 1A60     		str	r2, [r3, #0]
 628 00d0 2EE0     		b	.L36
 629              	.L33:
 217:..//drivers/UART/uart.c **** 	} else if ( IIRValue == IIR_THRE){ /* Transmission from TX FIFO complete */
 630              		.loc 2 217 0
 631 00d2 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 632 00d4 012B     		cmp	r3, #1
 633 00d6 2BD1     		bne	.L36
 634              	.LBB3:
 218:..//drivers/UART/uart.c **** 		// if txfifo is not empty
 219:..//drivers/UART/uart.c **** 		// copy next set of data to TX FIFO
 220:..//drivers/UART/uart.c **** 		int count = 0;
 635              		.loc 2 220 0
 636 00d8 4FF00003 		mov	r3, #0
 637 00dc 7B60     		str	r3, [r7, #4]
 221:..//drivers/UART/uart.c **** 		while((count<16) && (!ring_is_empty(&ring_tx3))){ //TX FIFO not full yet and ring_tx2 is not empt
 638              		.loc 2 221 0
 639 00de 16E0     		b	.L34
 640              	.L35:
 222:..//drivers/UART/uart.c **** 			// get next (1) charcter and drop it into TX FIFO
 223:..//drivers/UART/uart.c **** 			ring_getc(&ring_tx3);
 641              		.loc 2 223 0
 642 00e0 40F20000 		movw	r0, #:lower16:ring_tx3
 643 00e4 C0F20000 		movt	r0, #:upper16:ring_tx3
 644 00e8 40F20003 		movw	r3, #:lower16:ring_getc
 645 00ec C0F20003 		movt	r3, #:upper16:ring_getc
 646 00f0 9847     		blx	r3
 224:..//drivers/UART/uart.c **** 			LPC_UART3->THR = (uint16_t)ring_tx3.dt_got & 0xFF;
 647              		.loc 2 224 0
 648 00f2 4CF20003 		movw	r3, #:lower16:1074380800
 649 00f6 C4F20903 		movt	r3, #:upper16:1074380800
 650 00fa 40F20002 		movw	r2, #:lower16:ring_tx3
 651 00fe C0F20002 		movt	r2, #:upper16:ring_tx3
 652 0102 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 653 0104 1A70     		strb	r2, [r3, #0]
 225:..//drivers/UART/uart.c **** 			count += 1;
 654              		.loc 2 225 0
 655 0106 7B68     		ldr	r3, [r7, #4]
 656 0108 03F10103 		add	r3, r3, #1
 657 010c 7B60     		str	r3, [r7, #4]
 658              	.L34:
 659              		.loc 2 221 0
 660 010e 7B68     		ldr	r3, [r7, #4]
 661 0110 0F2B     		cmp	r3, #15
 662 0112 0DDC     		bgt	.L36
 663 0114 40F20000 		movw	r0, #:lower16:ring_tx3
 664 0118 C0F20000 		movt	r0, #:upper16:ring_tx3
 665 011c 40F20003 		movw	r3, #:lower16:ring_is_empty
 666 0120 C0F20003 		movt	r3, #:upper16:ring_is_empty
 667 0124 9847     		blx	r3
 668 0126 0346     		mov	r3, r0
 669 0128 002B     		cmp	r3, #0
 670 012a D9D0     		beq	.L35
 671 012c 00E0     		b	.L36
 672              	.L37:
 673              	.LBE3:
 674              		.loc 2 199 0
 675 012e 00BF     		nop
 676              	.L36:
 226:..//drivers/UART/uart.c **** 		}
 227:..//drivers/UART/uart.c **** 	}
 228:..//drivers/UART/uart.c **** }
 677              		.loc 2 228 0
 678 0130 07F10807 		add	r7, r7, #8
 679 0134 BD46     		mov	sp, r7
 680 0136 80BD     		pop	{r7, pc}
 681              		.cfi_endproc
 682              	.LFE31:
 684              		.section	.text.UARTInit,"ax",%progbits
 685              		.align	2
 686              		.global	UARTInit
 687              		.thumb
 688              		.thumb_func
 690              	UARTInit:
 691              	.LFB32:
 229:..//drivers/UART/uart.c **** 
 230:..//drivers/UART/uart.c **** 
 231:..//drivers/UART/uart.c **** /*****************************************************************************
 232:..//drivers/UART/uart.c **** ** Function name:		UARTInit
 233:..//drivers/UART/uart.c **** *****************************************************************************/
 234:..//drivers/UART/uart.c **** uint16_t UARTInit( uint32_t portNum, uint32_t baudrate ,uint8_t uartLCR){
 692              		.loc 2 234 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 16
 695              		@ frame_needed = 1, uses_anonymous_args = 0
 696 0000 80B5     		push	{r7, lr}
 697              	.LCFI15:
 698              		.cfi_def_cfa_offset 8
 699 0002 84B0     		sub	sp, sp, #16
 700              	.LCFI16:
 701              		.cfi_def_cfa_offset 24
 702 0004 00AF     		add	r7, sp, #0
 703              		.cfi_offset 14, -4
 704              		.cfi_offset 7, -8
 705              	.LCFI17:
 706              		.cfi_def_cfa_register 7
 707 0006 F860     		str	r0, [r7, #12]
 708 0008 B960     		str	r1, [r7, #8]
 709 000a 1346     		mov	r3, r2
 710 000c FB71     		strb	r3, [r7, #7]
 235:..//drivers/UART/uart.c **** 	if ( portNum == 0 ){
 711              		.loc 2 235 0
 712 000e FB68     		ldr	r3, [r7, #12]
 713 0010 002B     		cmp	r3, #0
 714 0012 40F0D280 		bne	.L39
 236:..//drivers/UART/uart.c **** 		// LPC_PINCON->PINSEL0 &= ~0xC0000000;
 237:..//drivers/UART/uart.c **** 		// LPC_PINCON->PINSEL0 |= 0x0000000C;	/* Enable TxD0 P0.2 and RxD P0.3 */
 238:..//drivers/UART/uart.c **** 		LPC_SC->PCONP |= (1UL << 3UL );//eanble power to the UART0
 715              		.loc 2 238 0
 716 0016 4CF20003 		movw	r3, #:lower16:1074774016
 717 001a C4F20F03 		movt	r3, #:upper16:1074774016
 718 001e 4CF20002 		movw	r2, #:lower16:1074774016
 719 0022 C4F20F02 		movt	r2, #:upper16:1074774016
 720 0026 D2F8C420 		ldr	r2, [r2, #196]
 721 002a 42F00802 		orr	r2, r2, #8
 722 002e C3F8C420 		str	r2, [r3, #196]
 239:..//drivers/UART/uart.c **** 		LPC_PINCON->PINSEL0 |= ( 1UL << 6UL )|( 1UL << 4UL );/* Enable TxD0 P0.2 and RxD P0.3 */
 723              		.loc 2 239 0
 724 0032 4CF20003 		movw	r3, #:lower16:1073922048
 725 0036 C4F20203 		movt	r3, #:upper16:1073922048
 726 003a 4CF20002 		movw	r2, #:lower16:1073922048
 727 003e C4F20202 		movt	r2, #:upper16:1073922048
 728 0042 1268     		ldr	r2, [r2, #0]
 729 0044 42F05002 		orr	r2, r2, #80
 730 0048 1A60     		str	r2, [r3, #0]
 240:..//drivers/UART/uart.c **** 		/* By default, the PCLKSELx value is zero, thus, the PCLK for
 241:..//drivers/UART/uart.c **** 		all the peripherals is 1/4 of the SystemCoreClock. */
 242:..//drivers/UART/uart.c **** 		/* Bit 8,9 are for UART0 *//*
 243:..//drivers/UART/uart.c **** 		pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
 244:..//drivers/UART/uart.c **** 		switch ( pclkdiv )
 245:..//drivers/UART/uart.c **** 		{
 246:..//drivers/UART/uart.c **** 		  case 0x00:
 247:..//drivers/UART/uart.c **** 		  default:
 248:..//drivers/UART/uart.c **** 			pclk = SystemCoreClock/4;
 249:..//drivers/UART/uart.c **** 			break;
 250:..//drivers/UART/uart.c **** 		  case 0x01:
 251:..//drivers/UART/uart.c **** 			pclk = SystemCoreClock;
 252:..//drivers/UART/uart.c **** 			break; 
 253:..//drivers/UART/uart.c **** 		  case 0x02:
 254:..//drivers/UART/uart.c **** 			pclk = SystemCoreClock/2;
 255:..//drivers/UART/uart.c **** 			break; 
 256:..//drivers/UART/uart.c **** 		  case 0x03:
 257:..//drivers/UART/uart.c **** 			pclk = SystemCoreClock/8;
 258:..//drivers/UART/uart.c **** 			break;
 259:..//drivers/UART/uart.c **** 		}
 260:..//drivers/UART/uart.c **** 	*/
 261:..//drivers/UART/uart.c **** 		LPC_UART0->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
 731              		.loc 2 261 0
 732 004a 4CF20003 		movw	r3, #:lower16:1073790976
 733 004e C4F20003 		movt	r3, #:upper16:1073790976
 734 0052 6FF07C02 		mvn	r2, #124
 735 0056 1A73     		strb	r2, [r3, #12]
 262:..//drivers/UART/uart.c **** 		
 263:..//drivers/UART/uart.c **** 		switch (baudrate){
 736              		.loc 2 263 0
 737 0058 BB68     		ldr	r3, [r7, #8]
 738 005a B3F5165F 		cmp	r3, #9600
 739 005e 3AD0     		beq	.L42
 740 0060 B3F5165F 		cmp	r3, #9600
 741 0064 03D8     		bhi	.L45
 742 0066 B3F5965F 		cmp	r3, #4800
 743 006a 4BD0     		beq	.L41
 744 006c 61E0     		b	.L40
 745              	.L45:
 746 006e B3F5964F 		cmp	r3, #19200
 747 0072 19D0     		beq	.L43
 748 0074 B3F5E13F 		cmp	r3, #115200
 749 0078 5BD1     		bne	.L40
 750              	.L44:
 264:..//drivers/UART/uart.c **** 			case 115200 :
 265:..//drivers/UART/uart.c **** 				LPC_UART0->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 751              		.loc 2 265 0
 752 007a 4CF20003 		movw	r3, #:lower16:1073790976
 753 007e C4F20003 		movt	r3, #:upper16:1073790976
 754 0082 4FF00002 		mov	r2, #0
 755 0086 1A71     		strb	r2, [r3, #4]
 266:..//drivers/UART/uart.c **** 				LPC_UART0->DLL = 8;
 756              		.loc 2 266 0
 757 0088 4CF20003 		movw	r3, #:lower16:1073790976
 758 008c C4F20003 		movt	r3, #:upper16:1073790976
 759 0090 4FF00802 		mov	r2, #8
 760 0094 1A70     		strb	r2, [r3, #0]
 267:..//drivers/UART/uart.c **** 				LPC_UART0->FDR = 50;	//DIVADDVAL=1, MULVAL=2
 761              		.loc 2 267 0
 762 0096 4CF20003 		movw	r3, #:lower16:1073790976
 763 009a C4F20003 		movt	r3, #:upper16:1073790976
 764 009e 4FF03202 		mov	r2, #50
 765 00a2 83F82820 		strb	r2, [r3, #40]
 268:..//drivers/UART/uart.c **** 				break;
 766              		.loc 2 268 0
 767 00a6 5AE0     		b	.L46
 768              	.L43:
 269:..//drivers/UART/uart.c **** 			case 19200 :
 270:..//drivers/UART/uart.c **** 				LPC_UART0->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 769              		.loc 2 270 0
 770 00a8 4CF20003 		movw	r3, #:lower16:1073790976
 771 00ac C4F20003 		movt	r3, #:upper16:1073790976
 772 00b0 4FF00002 		mov	r2, #0
 773 00b4 1A71     		strb	r2, [r3, #4]
 271:..//drivers/UART/uart.c **** 				LPC_UART0->DLL = 53;
 774              		.loc 2 271 0
 775 00b6 4CF20003 		movw	r3, #:lower16:1073790976
 776 00ba C4F20003 		movt	r3, #:upper16:1073790976
 777 00be 4FF03502 		mov	r2, #53
 778 00c2 1A70     		strb	r2, [r3, #0]
 272:..//drivers/UART/uart.c **** 				LPC_UART0->FDR = 248;   //DIVADDVAL=1, MULVAL=2
 779              		.loc 2 272 0
 780 00c4 4CF20003 		movw	r3, #:lower16:1073790976
 781 00c8 C4F20003 		movt	r3, #:upper16:1073790976
 782 00cc 6FF00702 		mvn	r2, #7
 783 00d0 83F82820 		strb	r2, [r3, #40]
 273:..//drivers/UART/uart.c **** 				break;
 784              		.loc 2 273 0
 785 00d4 43E0     		b	.L46
 786              	.L42:
 274:..//drivers/UART/uart.c **** 			case 9600 :
 275:..//drivers/UART/uart.c **** 				LPC_UART0->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 787              		.loc 2 275 0
 788 00d6 4CF20003 		movw	r3, #:lower16:1073790976
 789 00da C4F20003 		movt	r3, #:upper16:1073790976
 790 00de 4FF00002 		mov	r2, #0
 791 00e2 1A71     		strb	r2, [r3, #4]
 276:..//drivers/UART/uart.c **** 				LPC_UART0->DLL = 107;
 792              		.loc 2 276 0
 793 00e4 4CF20003 		movw	r3, #:lower16:1073790976
 794 00e8 C4F20003 		movt	r3, #:upper16:1073790976
 795 00ec 4FF06B02 		mov	r2, #107
 796 00f0 1A70     		strb	r2, [r3, #0]
 277:..//drivers/UART/uart.c **** 				LPC_UART0->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 797              		.loc 2 277 0
 798 00f2 4CF20003 		movw	r3, #:lower16:1073790976
 799 00f6 C4F20003 		movt	r3, #:upper16:1073790976
 800 00fa 4FF02102 		mov	r2, #33
 801 00fe 83F82820 		strb	r2, [r3, #40]
 278:..//drivers/UART/uart.c **** 				break;
 802              		.loc 2 278 0
 803 0102 2CE0     		b	.L46
 804              	.L41:
 279:..//drivers/UART/uart.c **** 			case 4800 :
 280:..//drivers/UART/uart.c **** 				LPC_UART0->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 805              		.loc 2 280 0
 806 0104 4CF20003 		movw	r3, #:lower16:1073790976
 807 0108 C4F20003 		movt	r3, #:upper16:1073790976
 808 010c 4FF00002 		mov	r2, #0
 809 0110 1A71     		strb	r2, [r3, #4]
 281:..//drivers/UART/uart.c **** 				LPC_UART0->DLL = 214;
 810              		.loc 2 281 0
 811 0112 4CF20003 		movw	r3, #:lower16:1073790976
 812 0116 C4F20003 		movt	r3, #:upper16:1073790976
 813 011a 6FF02902 		mvn	r2, #41
 814 011e 1A70     		strb	r2, [r3, #0]
 282:..//drivers/UART/uart.c **** 				LPC_UART0->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 815              		.loc 2 282 0
 816 0120 4CF20003 		movw	r3, #:lower16:1073790976
 817 0124 C4F20003 		movt	r3, #:upper16:1073790976
 818 0128 4FF02102 		mov	r2, #33
 819 012c 83F82820 		strb	r2, [r3, #40]
 283:..//drivers/UART/uart.c **** 				break;
 820              		.loc 2 283 0
 821 0130 15E0     		b	.L46
 822              	.L40:
 284:..//drivers/UART/uart.c **** 			default :					// 9600 bps
 285:..//drivers/UART/uart.c **** 				LPC_UART0->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 823              		.loc 2 285 0
 824 0132 4CF20003 		movw	r3, #:lower16:1073790976
 825 0136 C4F20003 		movt	r3, #:upper16:1073790976
 826 013a 4FF00002 		mov	r2, #0
 827 013e 1A71     		strb	r2, [r3, #4]
 286:..//drivers/UART/uart.c **** 				LPC_UART0->DLL = 107;
 828              		.loc 2 286 0
 829 0140 4CF20003 		movw	r3, #:lower16:1073790976
 830 0144 C4F20003 		movt	r3, #:upper16:1073790976
 831 0148 4FF06B02 		mov	r2, #107
 832 014c 1A70     		strb	r2, [r3, #0]
 287:..//drivers/UART/uart.c **** 				LPC_UART0->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 833              		.loc 2 287 0
 834 014e 4CF20003 		movw	r3, #:lower16:1073790976
 835 0152 C4F20003 		movt	r3, #:upper16:1073790976
 836 0156 4FF02102 		mov	r2, #33
 837 015a 83F82820 		strb	r2, [r3, #40]
 838              	.L46:
 288:..//drivers/UART/uart.c **** 				break;
 289:..//drivers/UART/uart.c **** 		}
 290:..//drivers/UART/uart.c **** 		
 291:..//drivers/UART/uart.c **** 		//Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
 292:..//drivers/UART/uart.c **** 		//LPC_UART0->DLM = Fdiv / 256;							
 293:..//drivers/UART/uart.c **** 		//LPC_UART0->DLL = Fdiv % 256;
 294:..//drivers/UART/uart.c **** 		LPC_UART0->LCR = 0x03;		/* DLAB = 0 */
 839              		.loc 2 294 0
 840 015e 4CF20003 		movw	r3, #:lower16:1073790976
 841 0162 C4F20003 		movt	r3, #:upper16:1073790976
 842 0166 4FF00302 		mov	r2, #3
 843 016a 1A73     		strb	r2, [r3, #12]
 295:..//drivers/UART/uart.c **** 		LPC_UART0->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
 844              		.loc 2 295 0
 845 016c 4CF20003 		movw	r3, #:lower16:1073790976
 846 0170 C4F20003 		movt	r3, #:upper16:1073790976
 847 0174 4FF00702 		mov	r2, #7
 848 0178 1A72     		strb	r2, [r3, #8]
 296:..//drivers/UART/uart.c **** 		ring_init( &ring_rx0, buff_rx0, UART_0_SIZE );
 849              		.loc 2 296 0
 850 017a 40F20000 		movw	r0, #:lower16:ring_rx0
 851 017e C0F20000 		movt	r0, #:upper16:ring_rx0
 852 0182 40F20001 		movw	r1, #:lower16:buff_rx0
 853 0186 C0F20001 		movt	r1, #:upper16:buff_rx0
 854 018a 4FF08002 		mov	r2, #128
 855 018e 40F20003 		movw	r3, #:lower16:ring_init
 856 0192 C0F20003 		movt	r3, #:upper16:ring_init
 857 0196 9847     		blx	r3
 297:..//drivers/UART/uart.c **** 		
 298:..//drivers/UART/uart.c **** 		NVIC_EnableIRQ(UART0_IRQn);
 858              		.loc 2 298 0
 859 0198 4FF00500 		mov	r0, #5
 860 019c 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 861 01a0 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 862 01a4 9847     		blx	r3
 299:..//drivers/UART/uart.c **** 
 300:..//drivers/UART/uart.c **** 		//LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART1 interrupt */
 301:..//drivers/UART/uart.c **** 		LPC_UART0->IER = IER_RBR | IER_RLS;	/* Enable UART1 interrupt */
 863              		.loc 2 301 0
 864 01a6 4CF20003 		movw	r3, #:lower16:1073790976
 865 01aa C4F20003 		movt	r3, #:upper16:1073790976
 866 01ae 4FF00502 		mov	r2, #5
 867 01b2 5A60     		str	r2, [r3, #4]
 302:..//drivers/UART/uart.c **** 		return 0;
 868              		.loc 2 302 0
 869 01b4 4FF00003 		mov	r3, #0
 870 01b8 B4E1     		b	.L47
 871              	.L39:
 303:..//drivers/UART/uart.c **** 	}
 304:..//drivers/UART/uart.c **** 	else if ( portNum == 1 ){
 872              		.loc 2 304 0
 873 01ba FB68     		ldr	r3, [r7, #12]
 874 01bc 012B     		cmp	r3, #1
 875 01be 40F0D480 		bne	.L48
 305:..//drivers/UART/uart.c **** 		LPC_PINCON->PINSEL0 &= ~0xC0000000;
 876              		.loc 2 305 0
 877 01c2 4CF20003 		movw	r3, #:lower16:1073922048
 878 01c6 C4F20203 		movt	r3, #:upper16:1073922048
 879 01ca 4CF20002 		movw	r2, #:lower16:1073922048
 880 01ce C4F20202 		movt	r2, #:upper16:1073922048
 881 01d2 1268     		ldr	r2, [r2, #0]
 882 01d4 22F04042 		bic	r2, r2, #-1073741824
 883 01d8 1A60     		str	r2, [r3, #0]
 306:..//drivers/UART/uart.c **** 		LPC_PINCON->PINSEL0 |= 0x40000000;	/* Enable TxD1 P0.15 */
 884              		.loc 2 306 0
 885 01da 4CF20003 		movw	r3, #:lower16:1073922048
 886 01de C4F20203 		movt	r3, #:upper16:1073922048
 887 01e2 4CF20002 		movw	r2, #:lower16:1073922048
 888 01e6 C4F20202 		movt	r2, #:upper16:1073922048
 889 01ea 1268     		ldr	r2, [r2, #0]
 890 01ec 42F08042 		orr	r2, r2, #1073741824
 891 01f0 1A60     		str	r2, [r3, #0]
 307:..//drivers/UART/uart.c **** 		LPC_PINCON->PINSEL1 &= ~0x00000003;
 892              		.loc 2 307 0
 893 01f2 4CF20003 		movw	r3, #:lower16:1073922048
 894 01f6 C4F20203 		movt	r3, #:upper16:1073922048
 895 01fa 4CF20002 		movw	r2, #:lower16:1073922048
 896 01fe C4F20202 		movt	r2, #:upper16:1073922048
 897 0202 5268     		ldr	r2, [r2, #4]
 898 0204 22F00302 		bic	r2, r2, #3
 899 0208 5A60     		str	r2, [r3, #4]
 308:..//drivers/UART/uart.c **** 		LPC_PINCON->PINSEL1 |= 0x00000001;	/* Enable RxD1 P0.16 */
 900              		.loc 2 308 0
 901 020a 4CF20003 		movw	r3, #:lower16:1073922048
 902 020e C4F20203 		movt	r3, #:upper16:1073922048
 903 0212 4CF20002 		movw	r2, #:lower16:1073922048
 904 0216 C4F20202 		movt	r2, #:upper16:1073922048
 905 021a 5268     		ldr	r2, [r2, #4]
 906 021c 42F00102 		orr	r2, r2, #1
 907 0220 5A60     		str	r2, [r3, #4]
 309:..//drivers/UART/uart.c **** 		
 310:..//drivers/UART/uart.c **** 		/* By default, the PCLKSELx value is zero, thus, the PCLK for
 311:..//drivers/UART/uart.c **** 		all the peripherals is 1/4 of the SystemCoreClock. */
 312:..//drivers/UART/uart.c **** 		/* Bit 8,9 are for UART1 *//*
 313:..//drivers/UART/uart.c **** 		pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
 314:..//drivers/UART/uart.c **** 		switch ( pclkdiv )
 315:..//drivers/UART/uart.c **** 		{
 316:..//drivers/UART/uart.c **** 		  case 0x00:
 317:..//drivers/UART/uart.c **** 		  default:
 318:..//drivers/UART/uart.c **** 			pclk = SystemCoreClock/4;
 319:..//drivers/UART/uart.c **** 			break;
 320:..//drivers/UART/uart.c **** 		  case 0x01:
 321:..//drivers/UART/uart.c **** 			pclk = SystemCoreClock;
 322:..//drivers/UART/uart.c **** 			break; 
 323:..//drivers/UART/uart.c **** 		  case 0x02:
 324:..//drivers/UART/uart.c **** 			pclk = SystemCoreClock/2;
 325:..//drivers/UART/uart.c **** 			break; 
 326:..//drivers/UART/uart.c **** 		  case 0x03:
 327:..//drivers/UART/uart.c **** 			pclk = SystemCoreClock/8;
 328:..//drivers/UART/uart.c **** 			break;
 329:..//drivers/UART/uart.c **** 		}
 330:..//drivers/UART/uart.c **** 	*/
 331:..//drivers/UART/uart.c **** 		LPC_UART1->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
 908              		.loc 2 331 0
 909 0222 40F20003 		movw	r3, #:lower16:1073807360
 910 0226 C4F20103 		movt	r3, #:upper16:1073807360
 911 022a 6FF07C02 		mvn	r2, #124
 912 022e 1A73     		strb	r2, [r3, #12]
 332:..//drivers/UART/uart.c **** 		
 333:..//drivers/UART/uart.c **** 		switch (baudrate){
 913              		.loc 2 333 0
 914 0230 BB68     		ldr	r3, [r7, #8]
 915 0232 B3F5165F 		cmp	r3, #9600
 916 0236 38D0     		beq	.L51
 917 0238 B3F5165F 		cmp	r3, #9600
 918 023c 03D8     		bhi	.L54
 919 023e B3F5965F 		cmp	r3, #4800
 920 0242 48D0     		beq	.L50
 921 0244 5DE0     		b	.L49
 922              	.L54:
 923 0246 B3F5964F 		cmp	r3, #19200
 924 024a 18D0     		beq	.L52
 925 024c B3F5E13F 		cmp	r3, #115200
 926 0250 57D1     		bne	.L49
 927              	.L53:
 334:..//drivers/UART/uart.c **** 			case 115200 :
 335:..//drivers/UART/uart.c **** 				LPC_UART1->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 928              		.loc 2 335 0
 929 0252 40F20003 		movw	r3, #:lower16:1073807360
 930 0256 C4F20103 		movt	r3, #:upper16:1073807360
 931 025a 4FF00002 		mov	r2, #0
 932 025e 1A71     		strb	r2, [r3, #4]
 336:..//drivers/UART/uart.c **** 				LPC_UART1->DLL = 8;
 933              		.loc 2 336 0
 934 0260 40F20003 		movw	r3, #:lower16:1073807360
 935 0264 C4F20103 		movt	r3, #:upper16:1073807360
 936 0268 4FF00802 		mov	r2, #8
 937 026c 1A70     		strb	r2, [r3, #0]
 337:..//drivers/UART/uart.c **** 				LPC_UART1->FDR = 50;	//DIVADDVAL=1, MULVAL=2
 938              		.loc 2 337 0
 939 026e 40F20003 		movw	r3, #:lower16:1073807360
 940 0272 C4F20103 		movt	r3, #:upper16:1073807360
 941 0276 4FF03202 		mov	r2, #50
 942 027a 9A62     		str	r2, [r3, #40]
 338:..//drivers/UART/uart.c **** 				break;
 943              		.loc 2 338 0
 944 027c 56E0     		b	.L55
 945              	.L52:
 339:..//drivers/UART/uart.c **** 			case 19200 :
 340:..//drivers/UART/uart.c **** 				LPC_UART1->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 946              		.loc 2 340 0
 947 027e 40F20003 		movw	r3, #:lower16:1073807360
 948 0282 C4F20103 		movt	r3, #:upper16:1073807360
 949 0286 4FF00002 		mov	r2, #0
 950 028a 1A71     		strb	r2, [r3, #4]
 341:..//drivers/UART/uart.c **** 				LPC_UART1->DLL = 53;
 951              		.loc 2 341 0
 952 028c 40F20003 		movw	r3, #:lower16:1073807360
 953 0290 C4F20103 		movt	r3, #:upper16:1073807360
 954 0294 4FF03502 		mov	r2, #53
 955 0298 1A70     		strb	r2, [r3, #0]
 342:..//drivers/UART/uart.c **** 				LPC_UART1->FDR = 248;   //DIVADDVAL=1, MULVAL=2
 956              		.loc 2 342 0
 957 029a 40F20003 		movw	r3, #:lower16:1073807360
 958 029e C4F20103 		movt	r3, #:upper16:1073807360
 959 02a2 4FF0F802 		mov	r2, #248
 960 02a6 9A62     		str	r2, [r3, #40]
 343:..//drivers/UART/uart.c **** 				break;
 961              		.loc 2 343 0
 962 02a8 40E0     		b	.L55
 963              	.L51:
 344:..//drivers/UART/uart.c **** 			case 9600 :
 345:..//drivers/UART/uart.c **** 				LPC_UART1->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 964              		.loc 2 345 0
 965 02aa 40F20003 		movw	r3, #:lower16:1073807360
 966 02ae C4F20103 		movt	r3, #:upper16:1073807360
 967 02b2 4FF00002 		mov	r2, #0
 968 02b6 1A71     		strb	r2, [r3, #4]
 346:..//drivers/UART/uart.c **** 				LPC_UART1->DLL = 107;
 969              		.loc 2 346 0
 970 02b8 40F20003 		movw	r3, #:lower16:1073807360
 971 02bc C4F20103 		movt	r3, #:upper16:1073807360
 972 02c0 4FF06B02 		mov	r2, #107
 973 02c4 1A70     		strb	r2, [r3, #0]
 347:..//drivers/UART/uart.c **** 				LPC_UART1->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 974              		.loc 2 347 0
 975 02c6 40F20003 		movw	r3, #:lower16:1073807360
 976 02ca C4F20103 		movt	r3, #:upper16:1073807360
 977 02ce 4FF02102 		mov	r2, #33
 978 02d2 9A62     		str	r2, [r3, #40]
 348:..//drivers/UART/uart.c **** 				break;
 979              		.loc 2 348 0
 980 02d4 2AE0     		b	.L55
 981              	.L50:
 349:..//drivers/UART/uart.c **** 			case 4800 :
 350:..//drivers/UART/uart.c **** 				LPC_UART1->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 982              		.loc 2 350 0
 983 02d6 40F20003 		movw	r3, #:lower16:1073807360
 984 02da C4F20103 		movt	r3, #:upper16:1073807360
 985 02de 4FF00002 		mov	r2, #0
 986 02e2 1A71     		strb	r2, [r3, #4]
 351:..//drivers/UART/uart.c **** 				LPC_UART1->DLL = 214;
 987              		.loc 2 351 0
 988 02e4 40F20003 		movw	r3, #:lower16:1073807360
 989 02e8 C4F20103 		movt	r3, #:upper16:1073807360
 990 02ec 6FF02902 		mvn	r2, #41
 991 02f0 1A70     		strb	r2, [r3, #0]
 352:..//drivers/UART/uart.c **** 				LPC_UART1->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 992              		.loc 2 352 0
 993 02f2 40F20003 		movw	r3, #:lower16:1073807360
 994 02f6 C4F20103 		movt	r3, #:upper16:1073807360
 995 02fa 4FF02102 		mov	r2, #33
 996 02fe 9A62     		str	r2, [r3, #40]
 353:..//drivers/UART/uart.c **** 				break;
 997              		.loc 2 353 0
 998 0300 14E0     		b	.L55
 999              	.L49:
 354:..//drivers/UART/uart.c **** 			default :			// 9600 bps
 355:..//drivers/UART/uart.c **** 				LPC_UART1->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 1000              		.loc 2 355 0
 1001 0302 40F20003 		movw	r3, #:lower16:1073807360
 1002 0306 C4F20103 		movt	r3, #:upper16:1073807360
 1003 030a 4FF00002 		mov	r2, #0
 1004 030e 1A71     		strb	r2, [r3, #4]
 356:..//drivers/UART/uart.c **** 				LPC_UART1->DLL = 107;
 1005              		.loc 2 356 0
 1006 0310 40F20003 		movw	r3, #:lower16:1073807360
 1007 0314 C4F20103 		movt	r3, #:upper16:1073807360
 1008 0318 4FF06B02 		mov	r2, #107
 1009 031c 1A70     		strb	r2, [r3, #0]
 357:..//drivers/UART/uart.c **** 				LPC_UART1->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 1010              		.loc 2 357 0
 1011 031e 40F20003 		movw	r3, #:lower16:1073807360
 1012 0322 C4F20103 		movt	r3, #:upper16:1073807360
 1013 0326 4FF02102 		mov	r2, #33
 1014 032a 9A62     		str	r2, [r3, #40]
 1015              	.L55:
 358:..//drivers/UART/uart.c **** 				break;
 359:..//drivers/UART/uart.c **** 		}
 360:..//drivers/UART/uart.c **** 		
 361:..//drivers/UART/uart.c **** 		//Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
 362:..//drivers/UART/uart.c **** 		//LPC_UART1->DLM = Fdiv / 256;							
 363:..//drivers/UART/uart.c **** 		//LPC_UART1->DLL = Fdiv % 256;
 364:..//drivers/UART/uart.c **** 		LPC_UART1->LCR = 0x03;		/* DLAB = 0 */
 1016              		.loc 2 364 0
 1017 032c 40F20003 		movw	r3, #:lower16:1073807360
 1018 0330 C4F20103 		movt	r3, #:upper16:1073807360
 1019 0334 4FF00302 		mov	r2, #3
 1020 0338 1A73     		strb	r2, [r3, #12]
 365:..//drivers/UART/uart.c **** 		LPC_UART1->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
 1021              		.loc 2 365 0
 1022 033a 40F20003 		movw	r3, #:lower16:1073807360
 1023 033e C4F20103 		movt	r3, #:upper16:1073807360
 1024 0342 4FF00702 		mov	r2, #7
 1025 0346 1A72     		strb	r2, [r3, #8]
 366:..//drivers/UART/uart.c **** 
 367:..//drivers/UART/uart.c **** 		NVIC_EnableIRQ(UART1_IRQn);
 1026              		.loc 2 367 0
 1027 0348 4FF00600 		mov	r0, #6
 1028 034c 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 1029 0350 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 1030 0354 9847     		blx	r3
 368:..//drivers/UART/uart.c **** 
 369:..//drivers/UART/uart.c **** 		//LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART1 interrupt */
 370:..//drivers/UART/uart.c **** 		LPC_UART1->IER = IER_RBR | IER_RLS;	/* Enable UART1 interrupt */
 1031              		.loc 2 370 0
 1032 0356 40F20003 		movw	r3, #:lower16:1073807360
 1033 035a C4F20103 		movt	r3, #:upper16:1073807360
 1034 035e 4FF00502 		mov	r2, #5
 1035 0362 5A60     		str	r2, [r3, #4]
 371:..//drivers/UART/uart.c **** 		return 0;
 1036              		.loc 2 371 0
 1037 0364 4FF00003 		mov	r3, #0
 1038 0368 DCE0     		b	.L47
 1039              	.L48:
 372:..//drivers/UART/uart.c **** 		
 373:..//drivers/UART/uart.c **** 	}
 374:..//drivers/UART/uart.c **** 	else if ( portNum == 2 ){
 1040              		.loc 2 374 0
 1041 036a FB68     		ldr	r3, [r7, #12]
 1042 036c 022B     		cmp	r3, #2
 1043 036e 6ED1     		bne	.L56
 375:..//drivers/UART/uart.c **** 		ENABLE485_CONFIGURE_2; //enable for uart 2 rs485
 376:..//drivers/UART/uart.c **** 		ENABLE485_OFF_2;
 377:..//drivers/UART/uart.c **** 		LPC_SC->PCONP |= (1UL << 24UL );		// Power on for UART2
 1044              		.loc 2 377 0
 1045 0370 4CF20003 		movw	r3, #:lower16:1074774016
 1046 0374 C4F20F03 		movt	r3, #:upper16:1074774016
 1047 0378 4CF20002 		movw	r2, #:lower16:1074774016
 1048 037c C4F20F02 		movt	r2, #:upper16:1074774016
 1049 0380 D2F8C420 		ldr	r2, [r2, #196]
 1050 0384 42F08072 		orr	r2, r2, #16777216
 1051 0388 C3F8C420 		str	r2, [r3, #196]
 378:..//drivers/UART/uart.c **** 		LPC_PINCON->PINSEL0 |= ( 1UL << 20UL )|( 1UL << 22UL );/* RxD2 is P0.11 and TxD2 is P0.10 */
 1052              		.loc 2 378 0
 1053 038c 4CF20003 		movw	r3, #:lower16:1073922048
 1054 0390 C4F20203 		movt	r3, #:upper16:1073922048
 1055 0394 4CF20002 		movw	r2, #:lower16:1073922048
 1056 0398 C4F20202 		movt	r2, #:upper16:1073922048
 1057 039c 1268     		ldr	r2, [r2, #0]
 1058 039e 42F4A002 		orr	r2, r2, #5242880
 1059 03a2 1A60     		str	r2, [r3, #0]
 379:..//drivers/UART/uart.c **** 		//LPC_PINCON->PINSEL0 |= 0x00500000;	/* RxD2 is P0.11 and TxD2 is P0.10 */
 380:..//drivers/UART/uart.c **** 		
 381:..//drivers/UART/uart.c **** 		LPC_UART2->LCR = uartLCR;		
 1060              		.loc 2 381 0
 1061 03a4 48F20003 		movw	r3, #:lower16:1074364416
 1062 03a8 C4F20903 		movt	r3, #:upper16:1074364416
 1063 03ac FA79     		ldrb	r2, [r7, #7]
 1064 03ae 1A73     		strb	r2, [r3, #12]
 382:..//drivers/UART/uart.c **** 		// LPC_UART2->LCR = 0x03;		/* 8 bits, no Parity, 1 Stop bit */
 383:..//drivers/UART/uart.c **** 		uart_set_divisors(LPC_UART2,baudrate);
 1065              		.loc 2 383 0
 1066 03b0 48F20000 		movw	r0, #:lower16:1074364416
 1067 03b4 C4F20900 		movt	r0, #:upper16:1074364416
 1068 03b8 B968     		ldr	r1, [r7, #8]
 1069 03ba 40F20003 		movw	r3, #:lower16:uart_set_divisors
 1070 03be C0F20003 		movt	r3, #:upper16:uart_set_divisors
 1071 03c2 9847     		blx	r3
 384:..//drivers/UART/uart.c **** 		/* By default, the PCLKSELx value is zero, thus, the PCLK for all the peripherals is 1/4 of the S
 385:..//drivers/UART/uart.c **** #if 0
 386:..//drivers/UART/uart.c **** 		switch (baudrate){
 387:..//drivers/UART/uart.c **** 			case 115200 :
 388:..//drivers/UART/uart.c **** 				LPC_UART2->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 389:..//drivers/UART/uart.c **** 				LPC_UART2->DLL = 8;
 390:..//drivers/UART/uart.c **** 				LPC_UART2->FDR = 50;	//DIVADDVAL=1, MULVAL=2
 391:..//drivers/UART/uart.c **** 				break;
 392:..//drivers/UART/uart.c **** 			case 19200 :
 393:..//drivers/UART/uart.c **** 				LPC_UART2->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 394:..//drivers/UART/uart.c **** 				LPC_UART2->DLL = 53;
 395:..//drivers/UART/uart.c **** 				LPC_UART2->FDR = 248;   //DIVADDVAL=1, MULVAL=2
 396:..//drivers/UART/uart.c **** 				break;
 397:..//drivers/UART/uart.c **** 			case 9600 :
 398:..//drivers/UART/uart.c **** 				LPC_UART2->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 399:..//drivers/UART/uart.c **** 				LPC_UART2->DLL = 107;
 400:..//drivers/UART/uart.c **** 				LPC_UART2->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 401:..//drivers/UART/uart.c **** 				break;
 402:..//drivers/UART/uart.c **** 			case 4800 :
 403:..//drivers/UART/uart.c **** 				LPC_UART2->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 404:..//drivers/UART/uart.c **** 				LPC_UART2->DLL = 214;
 405:..//drivers/UART/uart.c **** 				LPC_UART2->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 406:..//drivers/UART/uart.c **** 				break;
 407:..//drivers/UART/uart.c **** 			default :			// 9600 bps
 408:..//drivers/UART/uart.c **** 				LPC_UART2->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 409:..//drivers/UART/uart.c **** 				LPC_UART2->DLL = 107;
 410:..//drivers/UART/uart.c **** 				LPC_UART2->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 411:..//drivers/UART/uart.c **** 				break;
 412:..//drivers/UART/uart.c **** 		}
 413:..//drivers/UART/uart.c **** #endif
 414:..//drivers/UART/uart.c **** 		// LPC_UART2->LCR = 0x03;		/* DLAB = 0 */
 415:..//drivers/UART/uart.c **** 		LPC_UART2->LCR = uartLCR;		
 1072              		.loc 2 415 0
 1073 03c4 48F20003 		movw	r3, #:lower16:1074364416
 1074 03c8 C4F20903 		movt	r3, #:upper16:1074364416
 1075 03cc FA79     		ldrb	r2, [r7, #7]
 1076 03ce 1A73     		strb	r2, [r3, #12]
 416:..//drivers/UART/uart.c **** 		LPC_UART2->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
 1077              		.loc 2 416 0
 1078 03d0 48F20003 		movw	r3, #:lower16:1074364416
 1079 03d4 C4F20903 		movt	r3, #:upper16:1074364416
 1080 03d8 4FF00702 		mov	r2, #7
 1081 03dc 1A72     		strb	r2, [r3, #8]
 417:..//drivers/UART/uart.c **** 		ring_init( &ring_rx2, buff_rx2, UART_2_SIZE );
 1082              		.loc 2 417 0
 1083 03de 40F20000 		movw	r0, #:lower16:ring_rx2
 1084 03e2 C0F20000 		movt	r0, #:upper16:ring_rx2
 1085 03e6 40F20001 		movw	r1, #:lower16:buff_rx2
 1086 03ea C0F20001 		movt	r1, #:upper16:buff_rx2
 1087 03ee 4FF48072 		mov	r2, #256
 1088 03f2 40F20003 		movw	r3, #:lower16:ring_init
 1089 03f6 C0F20003 		movt	r3, #:upper16:ring_init
 1090 03fa 9847     		blx	r3
 418:..//drivers/UART/uart.c **** 		ring_init( &ring_tx2, buff_tx2, UART_2_SIZE );
 1091              		.loc 2 418 0
 1092 03fc 40F20000 		movw	r0, #:lower16:ring_tx2
 1093 0400 C0F20000 		movt	r0, #:upper16:ring_tx2
 1094 0404 40F20001 		movw	r1, #:lower16:buff_tx2
 1095 0408 C0F20001 		movt	r1, #:upper16:buff_tx2
 1096 040c 4FF48072 		mov	r2, #256
 1097 0410 40F20003 		movw	r3, #:lower16:ring_init
 1098 0414 C0F20003 		movt	r3, #:upper16:ring_init
 1099 0418 9847     		blx	r3
 419:..//drivers/UART/uart.c **** 		
 420:..//drivers/UART/uart.c **** 		NVIC_SetPriority(UART2_IRQn, 3); //exchanged with TIMER0
 1100              		.loc 2 420 0
 1101 041a 4FF00700 		mov	r0, #7
 1102 041e 4FF00301 		mov	r1, #3
 1103 0422 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 1104 0426 C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 1105 042a 9847     		blx	r3
 421:..//drivers/UART/uart.c **** 		NVIC_EnableIRQ(UART2_IRQn);
 1106              		.loc 2 421 0
 1107 042c 4FF00700 		mov	r0, #7
 1108 0430 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 1109 0434 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 1110 0438 9847     		blx	r3
 422:..//drivers/UART/uart.c **** 
 423:..//drivers/UART/uart.c **** 		LPC_UART2->IER = IER_RBR | IER_RLS | IER_THRE;	/* Enable UART2 interrupt */
 1111              		.loc 2 423 0
 1112 043a 48F20003 		movw	r3, #:lower16:1074364416
 1113 043e C4F20903 		movt	r3, #:upper16:1074364416
 1114 0442 4FF00702 		mov	r2, #7
 1115 0446 5A60     		str	r2, [r3, #4]
 424:..//drivers/UART/uart.c **** 		return 0;
 1116              		.loc 2 424 0
 1117 0448 4FF00003 		mov	r3, #0
 1118 044c 6AE0     		b	.L47
 1119              	.L56:
 425:..//drivers/UART/uart.c **** 	} 
 426:..//drivers/UART/uart.c **** 	else if ( portNum == 3 ){
 1120              		.loc 2 426 0
 1121 044e FB68     		ldr	r3, [r7, #12]
 1122 0450 032B     		cmp	r3, #3
 1123 0452 65D1     		bne	.L57
 427:..//drivers/UART/uart.c **** 		LPC_SC->PCONP |= (1UL << 25UL );			// Power on for UART3
 1124              		.loc 2 427 0
 1125 0454 4CF20003 		movw	r3, #:lower16:1074774016
 1126 0458 C4F20F03 		movt	r3, #:upper16:1074774016
 1127 045c 4CF20002 		movw	r2, #:lower16:1074774016
 1128 0460 C4F20F02 		movt	r2, #:upper16:1074774016
 1129 0464 D2F8C420 		ldr	r2, [r2, #196]
 1130 0468 42F00072 		orr	r2, r2, #33554432
 1131 046c C3F8C420 		str	r2, [r3, #196]
 428:..//drivers/UART/uart.c **** 		// LPC_PINCON->PINSEL0 |= ( 2UL << 0UL )|( 2UL << 2UL );	/* RxD3 is P0.1 and TxD3 is P0.0 */
 429:..//drivers/UART/uart.c **** 		LPC_PINCON->PINSEL9 |= ( 3UL << 24UL )|( 3UL << 26UL );	/* RxD3 is P4.29 and TxD3 is P4.28 */
 1132              		.loc 2 429 0
 1133 0470 4CF20003 		movw	r3, #:lower16:1073922048
 1134 0474 C4F20203 		movt	r3, #:upper16:1073922048
 1135 0478 4CF20002 		movw	r2, #:lower16:1073922048
 1136 047c C4F20202 		movt	r2, #:upper16:1073922048
 1137 0480 526A     		ldr	r2, [r2, #36]
 1138 0482 42F07062 		orr	r2, r2, #251658240
 1139 0486 5A62     		str	r2, [r3, #36]
 430:..//drivers/UART/uart.c **** 
 431:..//drivers/UART/uart.c **** 		// LPC_UART3->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
 432:..//drivers/UART/uart.c **** 		LPC_UART3->LCR = uartLCR;
 1140              		.loc 2 432 0
 1141 0488 4CF20003 		movw	r3, #:lower16:1074380800
 1142 048c C4F20903 		movt	r3, #:upper16:1074380800
 1143 0490 FA79     		ldrb	r2, [r7, #7]
 1144 0492 1A73     		strb	r2, [r3, #12]
 433:..//drivers/UART/uart.c **** 		uart_set_divisors(LPC_UART3,baudrate);
 1145              		.loc 2 433 0
 1146 0494 4CF20000 		movw	r0, #:lower16:1074380800
 1147 0498 C4F20900 		movt	r0, #:upper16:1074380800
 1148 049c B968     		ldr	r1, [r7, #8]
 1149 049e 40F20003 		movw	r3, #:lower16:uart_set_divisors
 1150 04a2 C0F20003 		movt	r3, #:upper16:uart_set_divisors
 1151 04a6 9847     		blx	r3
 434:..//drivers/UART/uart.c **** 		#if 0
 435:..//drivers/UART/uart.c **** 		/* By default, the PCLKSELx value is zero, thus, the PCLK for all the peripherals is 1/4 of the S
 436:..//drivers/UART/uart.c **** 		switch (baudrate){
 437:..//drivers/UART/uart.c **** 			case 115200 :
 438:..//drivers/UART/uart.c **** 				LPC_UART3->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 439:..//drivers/UART/uart.c **** 				LPC_UART3->DLL = 8;
 440:..//drivers/UART/uart.c **** 				LPC_UART3->FDR = 50;	//DIVADDVAL=1, MULVAL=2
 441:..//drivers/UART/uart.c **** 				break;
 442:..//drivers/UART/uart.c **** 			case 19200 :
 443:..//drivers/UART/uart.c **** 				LPC_UART3->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 444:..//drivers/UART/uart.c **** 				LPC_UART3->DLL = 53;
 445:..//drivers/UART/uart.c **** 				LPC_UART3->FDR = 248;   //DIVADDVAL=1, MULVAL=2
 446:..//drivers/UART/uart.c **** 				break;
 447:..//drivers/UART/uart.c **** 			case 9600 :
 448:..//drivers/UART/uart.c **** 				LPC_UART3->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 449:..//drivers/UART/uart.c **** 				LPC_UART3->DLL = 107;
 450:..//drivers/UART/uart.c **** 				LPC_UART3->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 451:..//drivers/UART/uart.c **** 				break;
 452:..//drivers/UART/uart.c **** 			case 4800 :
 453:..//drivers/UART/uart.c **** 				LPC_UART3->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 454:..//drivers/UART/uart.c **** 				LPC_UART3->DLL = 214;
 455:..//drivers/UART/uart.c **** 				LPC_UART3->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 456:..//drivers/UART/uart.c **** 				break;
 457:..//drivers/UART/uart.c **** 			default :			// 9600 bps
 458:..//drivers/UART/uart.c **** 				LPC_UART3->DLM = 0;		//Fpclk=24.75MHz->DLest=161.13->NOT INTEGER->FRest=1.5->DLest=107->FRest=1
 459:..//drivers/UART/uart.c **** 				LPC_UART3->DLL = 107;
 460:..//drivers/UART/uart.c **** 				LPC_UART3->FDR = 33;	//DIVADDVAL=1, MULVAL=2
 461:..//drivers/UART/uart.c **** 				break;
 462:..//drivers/UART/uart.c **** 		}
 463:..//drivers/UART/uart.c **** 		#endif
 464:..//drivers/UART/uart.c **** 		
 465:..//drivers/UART/uart.c **** 		LPC_UART3->LCR = uartLCR;		
 1152              		.loc 2 465 0
 1153 04a8 4CF20003 		movw	r3, #:lower16:1074380800
 1154 04ac C4F20903 		movt	r3, #:upper16:1074380800
 1155 04b0 FA79     		ldrb	r2, [r7, #7]
 1156 04b2 1A73     		strb	r2, [r3, #12]
 466:..//drivers/UART/uart.c **** 		LPC_UART3->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
 1157              		.loc 2 466 0
 1158 04b4 4CF20003 		movw	r3, #:lower16:1074380800
 1159 04b8 C4F20903 		movt	r3, #:upper16:1074380800
 1160 04bc 4FF00702 		mov	r2, #7
 1161 04c0 1A72     		strb	r2, [r3, #8]
 467:..//drivers/UART/uart.c **** 		ring_init( &ring_rx3, buff_rx3, UART_3_SIZE );
 1162              		.loc 2 467 0
 1163 04c2 40F20000 		movw	r0, #:lower16:ring_rx3
 1164 04c6 C0F20000 		movt	r0, #:upper16:ring_rx3
 1165 04ca 40F20001 		movw	r1, #:lower16:buff_rx3
 1166 04ce C0F20001 		movt	r1, #:upper16:buff_rx3
 1167 04d2 4FF08002 		mov	r2, #128
 1168 04d6 40F20003 		movw	r3, #:lower16:ring_init
 1169 04da C0F20003 		movt	r3, #:upper16:ring_init
 1170 04de 9847     		blx	r3
 468:..//drivers/UART/uart.c **** 		ring_init( &ring_tx3, buff_tx3, UART_3_SIZE );
 1171              		.loc 2 468 0
 1172 04e0 40F20000 		movw	r0, #:lower16:ring_tx3
 1173 04e4 C0F20000 		movt	r0, #:upper16:ring_tx3
 1174 04e8 40F20001 		movw	r1, #:lower16:buff_tx3
 1175 04ec C0F20001 		movt	r1, #:upper16:buff_tx3
 1176 04f0 4FF08002 		mov	r2, #128
 1177 04f4 40F20003 		movw	r3, #:lower16:ring_init
 1178 04f8 C0F20003 		movt	r3, #:upper16:ring_init
 1179 04fc 9847     		blx	r3
 469:..//drivers/UART/uart.c **** 		
 470:..//drivers/UART/uart.c **** 		NVIC_EnableIRQ(UART3_IRQn);
 1180              		.loc 2 470 0
 1181 04fe 4FF00800 		mov	r0, #8
 1182 0502 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 1183 0506 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 1184 050a 9847     		blx	r3
 471:..//drivers/UART/uart.c **** 		
 472:..//drivers/UART/uart.c **** 		LPC_UART3->IER = IER_RBR | IER_RLS | IER_THRE;	/* Enable UART2 interrupt */
 1185              		.loc 2 472 0
 1186 050c 4CF20003 		movw	r3, #:lower16:1074380800
 1187 0510 C4F20903 		movt	r3, #:upper16:1074380800
 1188 0514 4FF00702 		mov	r2, #7
 1189 0518 5A60     		str	r2, [r3, #4]
 473:..//drivers/UART/uart.c **** 		return 0;
 1190              		.loc 2 473 0
 1191 051a 4FF00003 		mov	r3, #0
 1192 051e 01E0     		b	.L47
 1193              	.L57:
 474:..//drivers/UART/uart.c **** 	}
 475:..//drivers/UART/uart.c **** 	return 1;
 1194              		.loc 2 475 0
 1195 0520 4FF00103 		mov	r3, #1
 1196              	.L47:
 476:..//drivers/UART/uart.c **** }
 1197              		.loc 2 476 0
 1198 0524 1846     		mov	r0, r3
 1199 0526 07F11007 		add	r7, r7, #16
 1200 052a BD46     		mov	sp, r7
 1201 052c 80BD     		pop	{r7, pc}
 1202              		.cfi_endproc
 1203              	.LFE32:
 1205 052e 00BF     		.section	.text.UART_Init2,"ax",%progbits
 1206              		.align	2
 1207              		.global	UART_Init2
 1208              		.thumb
 1209              		.thumb_func
 1211              	UART_Init2:
 1212              	.LFB33:
 477:..//drivers/UART/uart.c **** 
 478:..//drivers/UART/uart.c **** /*****************************************************************************
 479:..//drivers/UART/uart.c ****  * UART2 Interface
 480:..//drivers/UART/uart.c **** *****************************************************************************/
 481:..//drivers/UART/uart.c **** // Initialize UART
 482:..//drivers/UART/uart.c **** uint16_t UART_Init2(int baud){
 1213              		.loc 2 482 0
 1214              		.cfi_startproc
 1215              		@ args = 0, pretend = 0, frame = 8
 1216              		@ frame_needed = 1, uses_anonymous_args = 0
 1217 0000 80B5     		push	{r7, lr}
 1218              	.LCFI18:
 1219              		.cfi_def_cfa_offset 8
 1220 0002 82B0     		sub	sp, sp, #8
 1221              	.LCFI19:
 1222              		.cfi_def_cfa_offset 16
 1223 0004 00AF     		add	r7, sp, #0
 1224              		.cfi_offset 14, -4
 1225              		.cfi_offset 7, -8
 1226              	.LCFI20:
 1227              		.cfi_def_cfa_register 7
 1228 0006 7860     		str	r0, [r7, #4]
 483:..//drivers/UART/uart.c **** 	#ifdef MOD_UART2
 484:..//drivers/UART/uart.c **** 	modInit(&modbus2,&ring_rx2,MOD_UART2);
 1229              		.loc 2 484 0
 1230 0008 40F20000 		movw	r0, #:lower16:modbus2
 1231 000c C0F20000 		movt	r0, #:upper16:modbus2
 1232 0010 40F20001 		movw	r1, #:lower16:ring_rx2
 1233 0014 C0F20001 		movt	r1, #:upper16:ring_rx2
 1234 0018 4FF00202 		mov	r2, #2
 1235 001c 40F20003 		movw	r3, #:lower16:modInit
 1236 0020 C0F20003 		movt	r3, #:upper16:modInit
 1237 0024 9847     		blx	r3
 485:..//drivers/UART/uart.c **** 	#endif
 486:..//drivers/UART/uart.c **** 	// return (UARTInit( 2, baud ));
 487:..//drivers/UART/uart.c **** 	// printf("\n baud rate%d", baud);
 488:..//drivers/UART/uart.c **** 	// preset_enable[2] = ceil(((10.0/(float)baud)*1000000.0)/(float)(MAKE_PULSES_TIME+1));
 489:..//drivers/UART/uart.c **** 	// if(preset_enable[2]<1){
 490:..//drivers/UART/uart.c **** 	// 	preset_enable[2] = 1;
 491:..//drivers/UART/uart.c **** 	// }
 492:..//drivers/UART/uart.c **** 	// printf("\n preset_enable %d",preset_enable[2]);
 493:..//drivers/UART/uart.c **** 	return (UARTInit( 2, baud, 0x03 ));
 1238              		.loc 2 493 0
 1239 0026 7B68     		ldr	r3, [r7, #4]
 1240 0028 4FF00200 		mov	r0, #2
 1241 002c 1946     		mov	r1, r3
 1242 002e 4FF00302 		mov	r2, #3
 1243 0032 40F20003 		movw	r3, #:lower16:UARTInit
 1244 0036 C0F20003 		movt	r3, #:upper16:UARTInit
 1245 003a 9847     		blx	r3
 1246 003c 0346     		mov	r3, r0
 494:..//drivers/UART/uart.c **** }
 1247              		.loc 2 494 0
 1248 003e 1846     		mov	r0, r3
 1249 0040 07F10807 		add	r7, r7, #8
 1250 0044 BD46     		mov	sp, r7
 1251 0046 80BD     		pop	{r7, pc}
 1252              		.cfi_endproc
 1253              	.LFE33:
 1255              		.section	.rodata
 1256              		.align	2
 1257              	.LC0:
 1258 0000 0A72696E 		.ascii	"\012ring_full:%d\000"
 1258      675F6675 
 1258      6C6C3A25 
 1258      6400
 1259 000e 0000     		.section	.text.Uart_PutCharBuf2,"ax",%progbits
 1260              		.align	2
 1261              		.global	Uart_PutCharBuf2
 1262              		.thumb
 1263              		.thumb_func
 1265              	Uart_PutCharBuf2:
 1266              	.LFB34:
 495:..//drivers/UART/uart.c **** 
 496:..//drivers/UART/uart.c **** // Output one character
 497:..//drivers/UART/uart.c **** int Uart_PutCharBuf2(uint8_t c) {
 1267              		.loc 2 497 0
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 8
 1270              		@ frame_needed = 1, uses_anonymous_args = 0
 1271 0000 80B5     		push	{r7, lr}
 1272              	.LCFI21:
 1273              		.cfi_def_cfa_offset 8
 1274 0002 82B0     		sub	sp, sp, #8
 1275              	.LCFI22:
 1276              		.cfi_def_cfa_offset 16
 1277 0004 00AF     		add	r7, sp, #0
 1278              		.cfi_offset 14, -4
 1279              		.cfi_offset 7, -8
 1280              	.LCFI23:
 1281              		.cfi_def_cfa_register 7
 1282 0006 0346     		mov	r3, r0
 1283 0008 FB71     		strb	r3, [r7, #7]
 498:..//drivers/UART/uart.c **** 	/* THRE status, contain valid data */
 499:..//drivers/UART/uart.c **** 	
 500:..//drivers/UART/uart.c **** 	// while ( !(( LPC_UART2->LSR ) & LSR_THRE ));	// Polling for write action
 501:..//drivers/UART/uart.c **** 	// LPC_UART2->THR = (uint16_t)c & 0xFF;
 502:..//drivers/UART/uart.c **** 	
 503:..//drivers/UART/uart.c **** 	if(!ring_is_full(&ring_tx2)){
 1284              		.loc 2 503 0
 1285 000a 40F20000 		movw	r0, #:lower16:ring_tx2
 1286 000e C0F20000 		movt	r0, #:upper16:ring_tx2
 1287 0012 40F20003 		movw	r3, #:lower16:ring_is_full
 1288 0016 C0F20003 		movt	r3, #:upper16:ring_is_full
 1289 001a 9847     		blx	r3
 1290 001c 0346     		mov	r3, r0
 1291 001e 002B     		cmp	r3, #0
 1292 0020 0DD1     		bne	.L62
 504:..//drivers/UART/uart.c **** 		ring_putc(&ring_tx2,c); //insert char to tx fifo
 1293              		.loc 2 504 0
 1294 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1295 0024 40F20000 		movw	r0, #:lower16:ring_tx2
 1296 0028 C0F20000 		movt	r0, #:upper16:ring_tx2
 1297 002c 1946     		mov	r1, r3
 1298 002e 40F20003 		movw	r3, #:lower16:ring_putc
 1299 0032 C0F20003 		movt	r3, #:upper16:ring_putc
 1300 0036 9847     		blx	r3
 505:..//drivers/UART/uart.c **** 	}else{
 506:..//drivers/UART/uart.c **** 		printf("\nring_full:%d",c);
 507:..//drivers/UART/uart.c **** 		return 0;
 508:..//drivers/UART/uart.c **** 	}
 509:..//drivers/UART/uart.c **** 	return 1;
 1301              		.loc 2 509 0
 1302 0038 4FF00103 		mov	r3, #1
 1303 003c 0CE0     		b	.L63
 1304              	.L62:
 1305              		.loc 2 506 0
 1306 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1307 0040 40F20000 		movw	r0, #:lower16:.LC0
 1308 0044 C0F20000 		movt	r0, #:upper16:.LC0
 1309 0048 1946     		mov	r1, r3
 1310 004a 40F20003 		movw	r3, #:lower16:printf
 1311 004e C0F20003 		movt	r3, #:upper16:printf
 1312 0052 9847     		blx	r3
 1313              		.loc 2 507 0
 1314 0054 4FF00003 		mov	r3, #0
 1315              	.L63:
 510:..//drivers/UART/uart.c **** }
 1316              		.loc 2 510 0
 1317 0058 1846     		mov	r0, r3
 1318 005a 07F10807 		add	r7, r7, #8
 1319 005e BD46     		mov	sp, r7
 1320 0060 80BD     		pop	{r7, pc}
 1321              		.cfi_endproc
 1322              	.LFE34:
 1324 0062 00BF     		.section	.text.Uart_StartSending2,"ax",%progbits
 1325              		.align	2
 1326              		.global	Uart_StartSending2
 1327              		.thumb
 1328              		.thumb_func
 1330              	Uart_StartSending2:
 1331              	.LFB35:
 511:..//drivers/UART/uart.c **** 
 512:..//drivers/UART/uart.c **** int Uart_StartSending2(void){
 1332              		.loc 2 512 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 1, uses_anonymous_args = 0
 1336 0000 80B5     		push	{r7, lr}
 1337              	.LCFI24:
 1338              		.cfi_def_cfa_offset 8
 1339 0002 00AF     		add	r7, sp, #0
 1340              		.cfi_offset 14, -4
 1341              		.cfi_offset 7, -8
 1342              	.LCFI25:
 1343              		.cfi_def_cfa_register 7
 513:..//drivers/UART/uart.c **** 	if(!ring_is_empty(&ring_tx2)){ // ring is not empty
 1344              		.loc 2 513 0
 1345 0004 40F20000 		movw	r0, #:lower16:ring_tx2
 1346 0008 C0F20000 		movt	r0, #:upper16:ring_tx2
 1347 000c 40F20003 		movw	r3, #:lower16:ring_is_empty
 1348 0010 C0F20003 		movt	r3, #:upper16:ring_is_empty
 1349 0014 9847     		blx	r3
 1350 0016 0346     		mov	r3, r0
 1351 0018 002B     		cmp	r3, #0
 1352 001a 15D1     		bne	.L66
 514:..//drivers/UART/uart.c **** 		ring_getc(&ring_tx2);
 1353              		.loc 2 514 0
 1354 001c 40F20000 		movw	r0, #:lower16:ring_tx2
 1355 0020 C0F20000 		movt	r0, #:upper16:ring_tx2
 1356 0024 40F20003 		movw	r3, #:lower16:ring_getc
 1357 0028 C0F20003 		movt	r3, #:upper16:ring_getc
 1358 002c 9847     		blx	r3
 515:..//drivers/UART/uart.c **** 		LPC_UART2->THR = ring_tx2.dt_got; //write to tx fifo
 1359              		.loc 2 515 0
 1360 002e 48F20003 		movw	r3, #:lower16:1074364416
 1361 0032 C4F20903 		movt	r3, #:upper16:1074364416
 1362 0036 40F20002 		movw	r2, #:lower16:ring_tx2
 1363 003a C0F20002 		movt	r2, #:upper16:ring_tx2
 1364 003e 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 1365 0040 1A70     		strb	r2, [r3, #0]
 516:..//drivers/UART/uart.c **** 		return 1;
 1366              		.loc 2 516 0
 1367 0042 4FF00103 		mov	r3, #1
 1368 0046 01E0     		b	.L67
 1369              	.L66:
 517:..//drivers/UART/uart.c **** 	}
 518:..//drivers/UART/uart.c **** 	return 0; // ring is empty... nothing to send
 1370              		.loc 2 518 0
 1371 0048 4FF00003 		mov	r3, #0
 1372              	.L67:
 519:..//drivers/UART/uart.c **** }
 1373              		.loc 2 519 0
 1374 004c 1846     		mov	r0, r3
 1375 004e 80BD     		pop	{r7, pc}
 1376              		.cfi_endproc
 1377              	.LFE35:
 1379              		.section	.text.Uart_SendCharArray2,"ax",%progbits
 1380              		.align	2
 1381              		.global	Uart_SendCharArray2
 1382              		.thumb
 1383              		.thumb_func
 1385              	Uart_SendCharArray2:
 1386              	.LFB36:
 520:..//drivers/UART/uart.c **** 
 521:..//drivers/UART/uart.c **** int Uart_SendCharArray2(uint8_t* c, int size){
 1387              		.loc 2 521 0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 16
 1390              		@ frame_needed = 1, uses_anonymous_args = 0
 1391 0000 80B5     		push	{r7, lr}
 1392              	.LCFI26:
 1393              		.cfi_def_cfa_offset 8
 1394 0002 84B0     		sub	sp, sp, #16
 1395              	.LCFI27:
 1396              		.cfi_def_cfa_offset 24
 1397 0004 00AF     		add	r7, sp, #0
 1398              		.cfi_offset 14, -4
 1399              		.cfi_offset 7, -8
 1400              	.LCFI28:
 1401              		.cfi_def_cfa_register 7
 1402 0006 7860     		str	r0, [r7, #4]
 1403 0008 3960     		str	r1, [r7, #0]
 1404              	.LBB4:
 522:..//drivers/UART/uart.c **** 
 523:..//drivers/UART/uart.c **** 	// copy everything to ring_tx2
 524:..//drivers/UART/uart.c **** 	for(int i = 0;i<size;i++){
 1405              		.loc 2 524 0
 1406 000a 4FF00003 		mov	r3, #0
 1407 000e FB60     		str	r3, [r7, #12]
 1408 0010 10E0     		b	.L70
 1409              	.L73:
 525:..//drivers/UART/uart.c **** 		if(!Uart_PutCharBuf2(c[i])){
 1410              		.loc 2 525 0
 1411 0012 FA68     		ldr	r2, [r7, #12]
 1412 0014 7B68     		ldr	r3, [r7, #4]
 1413 0016 1344     		add	r3, r2, r3
 1414 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1415 001a 1846     		mov	r0, r3
 1416 001c 40F20003 		movw	r3, #:lower16:Uart_PutCharBuf2
 1417 0020 C0F20003 		movt	r3, #:upper16:Uart_PutCharBuf2
 1418 0024 9847     		blx	r3
 1419 0026 0346     		mov	r3, r0
 1420 0028 002B     		cmp	r3, #0
 1421 002a 08D0     		beq	.L75
 1422              	.L71:
 1423              		.loc 2 524 0
 1424 002c FB68     		ldr	r3, [r7, #12]
 1425 002e 03F10103 		add	r3, r3, #1
 1426 0032 FB60     		str	r3, [r7, #12]
 1427              	.L70:
 1428 0034 FA68     		ldr	r2, [r7, #12]
 1429 0036 3B68     		ldr	r3, [r7, #0]
 1430 0038 9A42     		cmp	r2, r3
 1431 003a EADB     		blt	.L73
 1432 003c 00E0     		b	.L72
 1433              	.L75:
 526:..//drivers/UART/uart.c **** 			break; //ring is full
 1434              		.loc 2 526 0
 1435 003e 00BF     		nop
 1436              	.L72:
 1437              	.LBE4:
 527:..//drivers/UART/uart.c **** 		}
 528:..//drivers/UART/uart.c **** 	}
 529:..//drivers/UART/uart.c **** 	
 530:..//drivers/UART/uart.c **** 	/*
 531:..//drivers/UART/uart.c **** 		Should I reset the TX FIFO????
 532:..//drivers/UART/uart.c **** 		Will lose any ongoing transmission.
 533:..//drivers/UART/uart.c **** 	*/
 534:..//drivers/UART/uart.c **** 	// LPC_UART2->FCR |= (1<<2);
 535:..//drivers/UART/uart.c **** 	
 536:..//drivers/UART/uart.c **** 	// send first char
 537:..//drivers/UART/uart.c **** 	Uart_StartSending2();
 1438              		.loc 2 537 0
 1439 0040 40F20003 		movw	r3, #:lower16:Uart_StartSending2
 1440 0044 C0F20003 		movt	r3, #:upper16:Uart_StartSending2
 1441 0048 9847     		blx	r3
 538:..//drivers/UART/uart.c **** 	return 1;
 1442              		.loc 2 538 0
 1443 004a 4FF00103 		mov	r3, #1
 539:..//drivers/UART/uart.c **** }
 1444              		.loc 2 539 0
 1445 004e 1846     		mov	r0, r3
 1446 0050 07F11007 		add	r7, r7, #16
 1447 0054 BD46     		mov	sp, r7
 1448 0056 80BD     		pop	{r7, pc}
 1449              		.cfi_endproc
 1450              	.LFE36:
 1452              		.section	.text.Uart_PutStrBuf2,"ax",%progbits
 1453              		.align	2
 1454              		.global	Uart_PutStrBuf2
 1455              		.thumb
 1456              		.thumb_func
 1458              	Uart_PutStrBuf2:
 1459              	.LFB37:
 540:..//drivers/UART/uart.c **** 
 541:..//drivers/UART/uart.c **** // Send strings to TX
 542:..//drivers/UART/uart.c **** void Uart_PutStrBuf2(uint8_t *dat){
 1460              		.loc 2 542 0
 1461              		.cfi_startproc
 1462              		@ args = 0, pretend = 0, frame = 16
 1463              		@ frame_needed = 1, uses_anonymous_args = 0
 1464 0000 80B5     		push	{r7, lr}
 1465              	.LCFI29:
 1466              		.cfi_def_cfa_offset 8
 1467 0002 84B0     		sub	sp, sp, #16
 1468              	.LCFI30:
 1469              		.cfi_def_cfa_offset 24
 1470 0004 00AF     		add	r7, sp, #0
 1471              		.cfi_offset 14, -4
 1472              		.cfi_offset 7, -8
 1473              	.LCFI31:
 1474              		.cfi_def_cfa_register 7
 1475 0006 7860     		str	r0, [r7, #4]
 543:..//drivers/UART/uart.c **** 	uint8_t c;
 544:..//drivers/UART/uart.c **** 
 545:..//drivers/UART/uart.c **** 	while ( (c = *dat++) != 0) {
 1476              		.loc 2 545 0
 1477 0008 06E0     		b	.L77
 1478              	.L78:
 546:..//drivers/UART/uart.c **** 		Uart_PutCharBuf2(c);
 1479              		.loc 2 546 0
 1480 000a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1481 000c 1846     		mov	r0, r3
 1482 000e 40F20003 		movw	r3, #:lower16:Uart_PutCharBuf2
 1483 0012 C0F20003 		movt	r3, #:upper16:Uart_PutCharBuf2
 1484 0016 9847     		blx	r3
 1485              	.L77:
 1486              		.loc 2 545 0
 1487 0018 7B68     		ldr	r3, [r7, #4]
 1488 001a 1B78     		ldrb	r3, [r3, #0]
 1489 001c FB73     		strb	r3, [r7, #15]
 1490 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1491 0020 002B     		cmp	r3, #0
 1492 0022 0CBF     		ite	eq
 1493 0024 0023     		moveq	r3, #0
 1494 0026 0123     		movne	r3, #1
 1495 0028 DBB2     		uxtb	r3, r3
 1496 002a 7A68     		ldr	r2, [r7, #4]
 1497 002c 02F10102 		add	r2, r2, #1
 1498 0030 7A60     		str	r2, [r7, #4]
 1499 0032 002B     		cmp	r3, #0
 1500 0034 E9D1     		bne	.L78
 547:..//drivers/UART/uart.c **** 	}
 548:..//drivers/UART/uart.c **** }
 1501              		.loc 2 548 0
 1502 0036 07F11007 		add	r7, r7, #16
 1503 003a BD46     		mov	sp, r7
 1504 003c 80BD     		pop	{r7, pc}
 1505              		.cfi_endproc
 1506              	.LFE37:
 1508 003e 00BF     		.section	.text.Uart_GetC2,"ax",%progbits
 1509              		.align	2
 1510              		.global	Uart_GetC2
 1511              		.thumb
 1512              		.thumb_func
 1514              	Uart_GetC2:
 1515              	.LFB38:
 549:..//drivers/UART/uart.c **** 
 550:..//drivers/UART/uart.c **** // Get one character
 551:..//drivers/UART/uart.c **** uint8_t Uart_GetC2(void){
 1516              		.loc 2 551 0
 1517              		.cfi_startproc
 1518              		@ args = 0, pretend = 0, frame = 0
 1519              		@ frame_needed = 1, uses_anonymous_args = 0
 1520 0000 80B5     		push	{r7, lr}
 1521              	.LCFI32:
 1522              		.cfi_def_cfa_offset 8
 1523 0002 00AF     		add	r7, sp, #0
 1524              		.cfi_offset 14, -4
 1525              		.cfi_offset 7, -8
 1526              	.LCFI33:
 1527              		.cfi_def_cfa_register 7
 552:..//drivers/UART/uart.c **** 	while(ring_getc (&ring_rx2)){
 1528              		.loc 2 552 0
 1529 0004 40F20000 		movw	r0, #:lower16:ring_rx2
 1530 0008 C0F20000 		movt	r0, #:upper16:ring_rx2
 1531 000c 40F20003 		movw	r3, #:lower16:ring_getc
 1532 0010 C0F20003 		movt	r3, #:upper16:ring_getc
 1533 0014 9847     		blx	r3
 1534 0016 0346     		mov	r3, r0
 1535 0018 002B     		cmp	r3, #0
 1536 001a 02D0     		beq	.L81
 553:..//drivers/UART/uart.c **** 		// vTaskDelay(1/portTICK_RATE_MS );		// Wait 1mS
 554:..//drivers/UART/uart.c **** 		return (uint8_t)-1;
 1537              		.loc 2 554 0
 1538 001c 4FF0FF03 		mov	r3, #255
 1539 0020 04E0     		b	.L82
 1540              	.L81:
 555:..//drivers/UART/uart.c **** 	}
 556:..//drivers/UART/uart.c **** 	// printf("\nring rx=%d",ring_rx2.dt_got);
 557:..//drivers/UART/uart.c **** 	return ring_rx2.dt_got;
 1541              		.loc 2 557 0
 1542 0022 40F20003 		movw	r3, #:lower16:ring_rx2
 1543 0026 C0F20003 		movt	r3, #:upper16:ring_rx2
 1544 002a 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1545              	.L82:
 558:..//drivers/UART/uart.c **** }
 1546              		.loc 2 558 0
 1547 002c 1846     		mov	r0, r3
 1548 002e 80BD     		pop	{r7, pc}
 1549              		.cfi_endproc
 1550              	.LFE38:
 1552              		.section	.text.Uart_GetCh2,"ax",%progbits
 1553              		.align	2
 1554              		.global	Uart_GetCh2
 1555              		.thumb
 1556              		.thumb_func
 1558              	Uart_GetCh2:
 1559              	.LFB39:
 559:..//drivers/UART/uart.c **** 
 560:..//drivers/UART/uart.c **** 
 561:..//drivers/UART/uart.c **** int Uart_GetCh2(char *buf){
 1560              		.loc 2 561 0
 1561              		.cfi_startproc
 1562              		@ args = 0, pretend = 0, frame = 8
 1563              		@ frame_needed = 1, uses_anonymous_args = 0
 1564 0000 80B5     		push	{r7, lr}
 1565              	.LCFI34:
 1566              		.cfi_def_cfa_offset 8
 1567 0002 82B0     		sub	sp, sp, #8
 1568              	.LCFI35:
 1569              		.cfi_def_cfa_offset 16
 1570 0004 00AF     		add	r7, sp, #0
 1571              		.cfi_offset 14, -4
 1572              		.cfi_offset 7, -8
 1573              	.LCFI36:
 1574              		.cfi_def_cfa_register 7
 1575 0006 7860     		str	r0, [r7, #4]
 562:..//drivers/UART/uart.c **** 	if(ring_getc (&ring_rx2)){
 1576              		.loc 2 562 0
 1577 0008 40F20000 		movw	r0, #:lower16:ring_rx2
 1578 000c C0F20000 		movt	r0, #:upper16:ring_rx2
 1579 0010 40F20003 		movw	r3, #:lower16:ring_getc
 1580 0014 C0F20003 		movt	r3, #:upper16:ring_getc
 1581 0018 9847     		blx	r3
 1582 001a 0346     		mov	r3, r0
 1583 001c 002B     		cmp	r3, #0
 1584 001e 02D0     		beq	.L85
 563:..//drivers/UART/uart.c **** 		// vTaskDelay(1/portTICK_RATE_MS );		// Wait 1mS
 564:..//drivers/UART/uart.c **** 		return 0;
 1585              		.loc 2 564 0
 1586 0020 4FF00003 		mov	r3, #0
 1587 0024 08E0     		b	.L86
 1588              	.L85:
 565:..//drivers/UART/uart.c **** 	}else{
 566:..//drivers/UART/uart.c **** 		*buf = ring_rx2.dt_got;
 1589              		.loc 2 566 0
 1590 0026 40F20003 		movw	r3, #:lower16:ring_rx2
 1591 002a C0F20003 		movt	r3, #:upper16:ring_rx2
 1592 002e 9A7A     		ldrb	r2, [r3, #10]	@ zero_extendqisi2
 1593 0030 7B68     		ldr	r3, [r7, #4]
 1594 0032 1A70     		strb	r2, [r3, #0]
 567:..//drivers/UART/uart.c **** 		// buf = &ring_rx2.dt_got;
 568:..//drivers/UART/uart.c **** 		return 1;
 1595              		.loc 2 568 0
 1596 0034 4FF00103 		mov	r3, #1
 1597              	.L86:
 569:..//drivers/UART/uart.c **** 	}
 570:..//drivers/UART/uart.c **** 	return 0;
 571:..//drivers/UART/uart.c **** }
 1598              		.loc 2 571 0
 1599 0038 1846     		mov	r0, r3
 1600 003a 07F10807 		add	r7, r7, #8
 1601 003e BD46     		mov	sp, r7
 1602 0040 80BD     		pop	{r7, pc}
 1603              		.cfi_endproc
 1604              	.LFE39:
 1606 0042 00BF     		.section	.text.Uart_ChkRcv2,"ax",%progbits
 1607              		.align	2
 1608              		.global	Uart_ChkRcv2
 1609              		.thumb
 1610              		.thumb_func
 1612              	Uart_ChkRcv2:
 1613              	.LFB40:
 572:..//drivers/UART/uart.c **** 
 573:..//drivers/UART/uart.c **** // Check key input
 574:..//drivers/UART/uart.c **** uint16_t Uart_ChkRcv2(void){
 1614              		.loc 2 574 0
 1615              		.cfi_startproc
 1616              		@ args = 0, pretend = 0, frame = 0
 1617              		@ frame_needed = 1, uses_anonymous_args = 0
 1618 0000 80B5     		push	{r7, lr}
 1619              	.LCFI37:
 1620              		.cfi_def_cfa_offset 8
 1621 0002 00AF     		add	r7, sp, #0
 1622              		.cfi_offset 14, -4
 1623              		.cfi_offset 7, -8
 1624              	.LCFI38:
 1625              		.cfi_def_cfa_register 7
 575:..//drivers/UART/uart.c **** 	return ring_is_empty (&ring_rx2);
 1626              		.loc 2 575 0
 1627 0004 40F20000 		movw	r0, #:lower16:ring_rx2
 1628 0008 C0F20000 		movt	r0, #:upper16:ring_rx2
 1629 000c 40F20003 		movw	r3, #:lower16:ring_is_empty
 1630 0010 C0F20003 		movt	r3, #:upper16:ring_is_empty
 1631 0014 9847     		blx	r3
 1632 0016 0346     		mov	r3, r0
 576:..//drivers/UART/uart.c **** }
 1633              		.loc 2 576 0
 1634 0018 1846     		mov	r0, r3
 1635 001a 80BD     		pop	{r7, pc}
 1636              		.cfi_endproc
 1637              	.LFE40:
 1639              		.section	.text.UART_Init3,"ax",%progbits
 1640              		.align	2
 1641              		.global	UART_Init3
 1642              		.thumb
 1643              		.thumb_func
 1645              	UART_Init3:
 1646              	.LFB41:
 577:..//drivers/UART/uart.c **** 
 578:..//drivers/UART/uart.c **** /*****************************************************************************
 579:..//drivers/UART/uart.c ****  * UART3 Interface
 580:..//drivers/UART/uart.c **** *****************************************************************************/
 581:..//drivers/UART/uart.c **** // Initialize UART
 582:..//drivers/UART/uart.c **** uint16_t UART_Init3( int baud ){
 1647              		.loc 2 582 0
 1648              		.cfi_startproc
 1649              		@ args = 0, pretend = 0, frame = 8
 1650              		@ frame_needed = 1, uses_anonymous_args = 0
 1651 0000 80B5     		push	{r7, lr}
 1652              	.LCFI39:
 1653              		.cfi_def_cfa_offset 8
 1654 0002 82B0     		sub	sp, sp, #8
 1655              	.LCFI40:
 1656              		.cfi_def_cfa_offset 16
 1657 0004 00AF     		add	r7, sp, #0
 1658              		.cfi_offset 14, -4
 1659              		.cfi_offset 7, -8
 1660              	.LCFI41:
 1661              		.cfi_def_cfa_register 7
 1662 0006 7860     		str	r0, [r7, #4]
 583:..//drivers/UART/uart.c **** 	#ifdef MOD_UART3
 584:..//drivers/UART/uart.c **** 	modInit(&modbus3,&ring_rx3,MOD_UART3);
 585:..//drivers/UART/uart.c **** 	#endif
 586:..//drivers/UART/uart.c **** 	// return (UARTInit( 3, 115200 ));
 587:..//drivers/UART/uart.c **** 	return (UARTInit( 3, baud, 0x03 ));
 1663              		.loc 2 587 0
 1664 0008 7B68     		ldr	r3, [r7, #4]
 1665 000a 4FF00300 		mov	r0, #3
 1666 000e 1946     		mov	r1, r3
 1667 0010 4FF00302 		mov	r2, #3
 1668 0014 40F20003 		movw	r3, #:lower16:UARTInit
 1669 0018 C0F20003 		movt	r3, #:upper16:UARTInit
 1670 001c 9847     		blx	r3
 1671 001e 0346     		mov	r3, r0
 588:..//drivers/UART/uart.c **** }
 1672              		.loc 2 588 0
 1673 0020 1846     		mov	r0, r3
 1674 0022 07F10807 		add	r7, r7, #8
 1675 0026 BD46     		mov	sp, r7
 1676 0028 80BD     		pop	{r7, pc}
 1677              		.cfi_endproc
 1678              	.LFE41:
 1680 002a 00BF     		.section	.text.Uart_PutCharBuf3,"ax",%progbits
 1681              		.align	2
 1682              		.global	Uart_PutCharBuf3
 1683              		.thumb
 1684              		.thumb_func
 1686              	Uart_PutCharBuf3:
 1687              	.LFB42:
 589:..//drivers/UART/uart.c **** 
 590:..//drivers/UART/uart.c **** // Output one character
 591:..//drivers/UART/uart.c **** int Uart_PutCharBuf3(uint8_t c) {
 1688              		.loc 2 591 0
 1689              		.cfi_startproc
 1690              		@ args = 0, pretend = 0, frame = 8
 1691              		@ frame_needed = 1, uses_anonymous_args = 0
 1692 0000 80B5     		push	{r7, lr}
 1693              	.LCFI42:
 1694              		.cfi_def_cfa_offset 8
 1695 0002 82B0     		sub	sp, sp, #8
 1696              	.LCFI43:
 1697              		.cfi_def_cfa_offset 16
 1698 0004 00AF     		add	r7, sp, #0
 1699              		.cfi_offset 14, -4
 1700              		.cfi_offset 7, -8
 1701              	.LCFI44:
 1702              		.cfi_def_cfa_register 7
 1703 0006 0346     		mov	r3, r0
 1704 0008 FB71     		strb	r3, [r7, #7]
 592:..//drivers/UART/uart.c **** 	/* THRE status, contain valid data */
 593:..//drivers/UART/uart.c **** 	// while ( !(( LPC_UART3->LSR ) & LSR_THRE ));	// Polling for write action
 594:..//drivers/UART/uart.c **** 	// LPC_UART3->THR = (uint16_t)c & 0xFF;
 595:..//drivers/UART/uart.c **** 	
 596:..//drivers/UART/uart.c **** 	if(!ring_is_full(&ring_tx3)){
 1705              		.loc 2 596 0
 1706 000a 40F20000 		movw	r0, #:lower16:ring_tx3
 1707 000e C0F20000 		movt	r0, #:upper16:ring_tx3
 1708 0012 40F20003 		movw	r3, #:lower16:ring_is_full
 1709 0016 C0F20003 		movt	r3, #:upper16:ring_is_full
 1710 001a 9847     		blx	r3
 1711 001c 0346     		mov	r3, r0
 1712 001e 002B     		cmp	r3, #0
 1713 0020 0DD1     		bne	.L93
 597:..//drivers/UART/uart.c **** 		ring_putc(&ring_tx3,c); //insert char to tx fifo
 1714              		.loc 2 597 0
 1715 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1716 0024 40F20000 		movw	r0, #:lower16:ring_tx3
 1717 0028 C0F20000 		movt	r0, #:upper16:ring_tx3
 1718 002c 1946     		mov	r1, r3
 1719 002e 40F20003 		movw	r3, #:lower16:ring_putc
 1720 0032 C0F20003 		movt	r3, #:upper16:ring_putc
 1721 0036 9847     		blx	r3
 598:..//drivers/UART/uart.c **** 	}else{
 599:..//drivers/UART/uart.c **** 		printf("\nring_full:%d",c);
 600:..//drivers/UART/uart.c **** 		return 0;
 601:..//drivers/UART/uart.c **** 	}
 602:..//drivers/UART/uart.c **** 	return 1;
 1722              		.loc 2 602 0
 1723 0038 4FF00103 		mov	r3, #1
 1724 003c 0CE0     		b	.L94
 1725              	.L93:
 1726              		.loc 2 599 0
 1727 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1728 0040 40F20000 		movw	r0, #:lower16:.LC0
 1729 0044 C0F20000 		movt	r0, #:upper16:.LC0
 1730 0048 1946     		mov	r1, r3
 1731 004a 40F20003 		movw	r3, #:lower16:printf
 1732 004e C0F20003 		movt	r3, #:upper16:printf
 1733 0052 9847     		blx	r3
 1734              		.loc 2 600 0
 1735 0054 4FF00003 		mov	r3, #0
 1736              	.L94:
 603:..//drivers/UART/uart.c **** }
 1737              		.loc 2 603 0
 1738 0058 1846     		mov	r0, r3
 1739 005a 07F10807 		add	r7, r7, #8
 1740 005e BD46     		mov	sp, r7
 1741 0060 80BD     		pop	{r7, pc}
 1742              		.cfi_endproc
 1743              	.LFE42:
 1745 0062 00BF     		.section	.text.Uart_StartSending3,"ax",%progbits
 1746              		.align	2
 1747              		.global	Uart_StartSending3
 1748              		.thumb
 1749              		.thumb_func
 1751              	Uart_StartSending3:
 1752              	.LFB43:
 604:..//drivers/UART/uart.c **** 
 605:..//drivers/UART/uart.c **** int Uart_StartSending3(void){
 1753              		.loc 2 605 0
 1754              		.cfi_startproc
 1755              		@ args = 0, pretend = 0, frame = 0
 1756              		@ frame_needed = 1, uses_anonymous_args = 0
 1757 0000 80B5     		push	{r7, lr}
 1758              	.LCFI45:
 1759              		.cfi_def_cfa_offset 8
 1760 0002 00AF     		add	r7, sp, #0
 1761              		.cfi_offset 14, -4
 1762              		.cfi_offset 7, -8
 1763              	.LCFI46:
 1764              		.cfi_def_cfa_register 7
 606:..//drivers/UART/uart.c **** 	if(!ring_is_empty(&ring_tx3)){ // ring is not empty
 1765              		.loc 2 606 0
 1766 0004 40F20000 		movw	r0, #:lower16:ring_tx3
 1767 0008 C0F20000 		movt	r0, #:upper16:ring_tx3
 1768 000c 40F20003 		movw	r3, #:lower16:ring_is_empty
 1769 0010 C0F20003 		movt	r3, #:upper16:ring_is_empty
 1770 0014 9847     		blx	r3
 1771 0016 0346     		mov	r3, r0
 1772 0018 002B     		cmp	r3, #0
 1773 001a 15D1     		bne	.L97
 607:..//drivers/UART/uart.c **** 		ring_getc(&ring_tx3);
 1774              		.loc 2 607 0
 1775 001c 40F20000 		movw	r0, #:lower16:ring_tx3
 1776 0020 C0F20000 		movt	r0, #:upper16:ring_tx3
 1777 0024 40F20003 		movw	r3, #:lower16:ring_getc
 1778 0028 C0F20003 		movt	r3, #:upper16:ring_getc
 1779 002c 9847     		blx	r3
 608:..//drivers/UART/uart.c **** 		LPC_UART3->THR = ring_tx3.dt_got; //write to tx fifo
 1780              		.loc 2 608 0
 1781 002e 4CF20003 		movw	r3, #:lower16:1074380800
 1782 0032 C4F20903 		movt	r3, #:upper16:1074380800
 1783 0036 40F20002 		movw	r2, #:lower16:ring_tx3
 1784 003a C0F20002 		movt	r2, #:upper16:ring_tx3
 1785 003e 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 1786 0040 1A70     		strb	r2, [r3, #0]
 609:..//drivers/UART/uart.c **** 		return 1;
 1787              		.loc 2 609 0
 1788 0042 4FF00103 		mov	r3, #1
 1789 0046 01E0     		b	.L98
 1790              	.L97:
 610:..//drivers/UART/uart.c **** 	}
 611:..//drivers/UART/uart.c **** 	return 0; // ring is empty... nothing to send
 1791              		.loc 2 611 0
 1792 0048 4FF00003 		mov	r3, #0
 1793              	.L98:
 612:..//drivers/UART/uart.c **** }
 1794              		.loc 2 612 0
 1795 004c 1846     		mov	r0, r3
 1796 004e 80BD     		pop	{r7, pc}
 1797              		.cfi_endproc
 1798              	.LFE43:
 1800              		.section	.text.Uart_SendCharArray3,"ax",%progbits
 1801              		.align	2
 1802              		.global	Uart_SendCharArray3
 1803              		.thumb
 1804              		.thumb_func
 1806              	Uart_SendCharArray3:
 1807              	.LFB44:
 613:..//drivers/UART/uart.c **** 
 614:..//drivers/UART/uart.c **** int Uart_SendCharArray3(uint8_t* c, int size){
 1808              		.loc 2 614 0
 1809              		.cfi_startproc
 1810              		@ args = 0, pretend = 0, frame = 16
 1811              		@ frame_needed = 1, uses_anonymous_args = 0
 1812 0000 80B5     		push	{r7, lr}
 1813              	.LCFI47:
 1814              		.cfi_def_cfa_offset 8
 1815 0002 84B0     		sub	sp, sp, #16
 1816              	.LCFI48:
 1817              		.cfi_def_cfa_offset 24
 1818 0004 00AF     		add	r7, sp, #0
 1819              		.cfi_offset 14, -4
 1820              		.cfi_offset 7, -8
 1821              	.LCFI49:
 1822              		.cfi_def_cfa_register 7
 1823 0006 7860     		str	r0, [r7, #4]
 1824 0008 3960     		str	r1, [r7, #0]
 1825              	.LBB5:
 615:..//drivers/UART/uart.c **** 
 616:..//drivers/UART/uart.c **** 	// copy everything to ring_tx2
 617:..//drivers/UART/uart.c **** 	for(int i = 0;i<size;i++){
 1826              		.loc 2 617 0
 1827 000a 4FF00003 		mov	r3, #0
 1828 000e FB60     		str	r3, [r7, #12]
 1829 0010 10E0     		b	.L101
 1830              	.L104:
 618:..//drivers/UART/uart.c **** 		if(!Uart_PutCharBuf3(c[i])){
 1831              		.loc 2 618 0
 1832 0012 FA68     		ldr	r2, [r7, #12]
 1833 0014 7B68     		ldr	r3, [r7, #4]
 1834 0016 1344     		add	r3, r2, r3
 1835 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1836 001a 1846     		mov	r0, r3
 1837 001c 40F20003 		movw	r3, #:lower16:Uart_PutCharBuf3
 1838 0020 C0F20003 		movt	r3, #:upper16:Uart_PutCharBuf3
 1839 0024 9847     		blx	r3
 1840 0026 0346     		mov	r3, r0
 1841 0028 002B     		cmp	r3, #0
 1842 002a 08D0     		beq	.L106
 1843              	.L102:
 1844              		.loc 2 617 0
 1845 002c FB68     		ldr	r3, [r7, #12]
 1846 002e 03F10103 		add	r3, r3, #1
 1847 0032 FB60     		str	r3, [r7, #12]
 1848              	.L101:
 1849 0034 FA68     		ldr	r2, [r7, #12]
 1850 0036 3B68     		ldr	r3, [r7, #0]
 1851 0038 9A42     		cmp	r2, r3
 1852 003a EADB     		blt	.L104
 1853 003c 00E0     		b	.L103
 1854              	.L106:
 619:..//drivers/UART/uart.c **** 			break; //ring is full
 1855              		.loc 2 619 0
 1856 003e 00BF     		nop
 1857              	.L103:
 1858              	.LBE5:
 620:..//drivers/UART/uart.c **** 		}
 621:..//drivers/UART/uart.c **** 	}
 622:..//drivers/UART/uart.c **** 	// send first char
 623:..//drivers/UART/uart.c **** 	Uart_StartSending3();
 1859              		.loc 2 623 0
 1860 0040 40F20003 		movw	r3, #:lower16:Uart_StartSending3
 1861 0044 C0F20003 		movt	r3, #:upper16:Uart_StartSending3
 1862 0048 9847     		blx	r3
 624:..//drivers/UART/uart.c **** 	return 1;
 1863              		.loc 2 624 0
 1864 004a 4FF00103 		mov	r3, #1
 625:..//drivers/UART/uart.c **** }
 1865              		.loc 2 625 0
 1866 004e 1846     		mov	r0, r3
 1867 0050 07F11007 		add	r7, r7, #16
 1868 0054 BD46     		mov	sp, r7
 1869 0056 80BD     		pop	{r7, pc}
 1870              		.cfi_endproc
 1871              	.LFE44:
 1873              		.section	.text.Uart_PutStrBuf3,"ax",%progbits
 1874              		.align	2
 1875              		.global	Uart_PutStrBuf3
 1876              		.thumb
 1877              		.thumb_func
 1879              	Uart_PutStrBuf3:
 1880              	.LFB45:
 626:..//drivers/UART/uart.c **** 
 627:..//drivers/UART/uart.c **** // Send strings to TX
 628:..//drivers/UART/uart.c **** void Uart_PutStrBuf3(uint8_t *dat){
 1881              		.loc 2 628 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 16
 1884              		@ frame_needed = 1, uses_anonymous_args = 0
 1885 0000 80B5     		push	{r7, lr}
 1886              	.LCFI50:
 1887              		.cfi_def_cfa_offset 8
 1888 0002 84B0     		sub	sp, sp, #16
 1889              	.LCFI51:
 1890              		.cfi_def_cfa_offset 24
 1891 0004 00AF     		add	r7, sp, #0
 1892              		.cfi_offset 14, -4
 1893              		.cfi_offset 7, -8
 1894              	.LCFI52:
 1895              		.cfi_def_cfa_register 7
 1896 0006 7860     		str	r0, [r7, #4]
 629:..//drivers/UART/uart.c **** 	uint8_t c;
 630:..//drivers/UART/uart.c **** 
 631:..//drivers/UART/uart.c **** 	while ( (c = *dat++) != 0) {
 1897              		.loc 2 631 0
 1898 0008 06E0     		b	.L108
 1899              	.L109:
 632:..//drivers/UART/uart.c **** 		Uart_PutCharBuf3(c);
 1900              		.loc 2 632 0
 1901 000a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1902 000c 1846     		mov	r0, r3
 1903 000e 40F20003 		movw	r3, #:lower16:Uart_PutCharBuf3
 1904 0012 C0F20003 		movt	r3, #:upper16:Uart_PutCharBuf3
 1905 0016 9847     		blx	r3
 1906              	.L108:
 1907              		.loc 2 631 0
 1908 0018 7B68     		ldr	r3, [r7, #4]
 1909 001a 1B78     		ldrb	r3, [r3, #0]
 1910 001c FB73     		strb	r3, [r7, #15]
 1911 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1912 0020 002B     		cmp	r3, #0
 1913 0022 0CBF     		ite	eq
 1914 0024 0023     		moveq	r3, #0
 1915 0026 0123     		movne	r3, #1
 1916 0028 DBB2     		uxtb	r3, r3
 1917 002a 7A68     		ldr	r2, [r7, #4]
 1918 002c 02F10102 		add	r2, r2, #1
 1919 0030 7A60     		str	r2, [r7, #4]
 1920 0032 002B     		cmp	r3, #0
 1921 0034 E9D1     		bne	.L109
 633:..//drivers/UART/uart.c **** 	}
 634:..//drivers/UART/uart.c **** }
 1922              		.loc 2 634 0
 1923 0036 07F11007 		add	r7, r7, #16
 1924 003a BD46     		mov	sp, r7
 1925 003c 80BD     		pop	{r7, pc}
 1926              		.cfi_endproc
 1927              	.LFE45:
 1929 003e 00BF     		.section	.text.Uart_GetC3,"ax",%progbits
 1930              		.align	2
 1931              		.global	Uart_GetC3
 1932              		.thumb
 1933              		.thumb_func
 1935              	Uart_GetC3:
 1936              	.LFB46:
 635:..//drivers/UART/uart.c **** // Get one character
 636:..//drivers/UART/uart.c **** uint8_t Uart_GetC3(){
 1937              		.loc 2 636 0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 0
 1940              		@ frame_needed = 1, uses_anonymous_args = 0
 1941 0000 80B5     		push	{r7, lr}
 1942              	.LCFI53:
 1943              		.cfi_def_cfa_offset 8
 1944 0002 00AF     		add	r7, sp, #0
 1945              		.cfi_offset 14, -4
 1946              		.cfi_offset 7, -8
 1947              	.LCFI54:
 1948              		.cfi_def_cfa_register 7
 637:..//drivers/UART/uart.c **** 	while(ring_getc (&ring_rx3)){
 1949              		.loc 2 637 0
 1950 0004 40F20000 		movw	r0, #:lower16:ring_rx3
 1951 0008 C0F20000 		movt	r0, #:upper16:ring_rx3
 1952 000c 40F20003 		movw	r3, #:lower16:ring_getc
 1953 0010 C0F20003 		movt	r3, #:upper16:ring_getc
 1954 0014 9847     		blx	r3
 1955 0016 0346     		mov	r3, r0
 1956 0018 002B     		cmp	r3, #0
 1957 001a 02D0     		beq	.L112
 638:..//drivers/UART/uart.c **** 		// vTaskDelay(1/portTICK_RATE_MS );		// Wait 1mS
 639:..//drivers/UART/uart.c **** 		return (uint8_t)-1;
 1958              		.loc 2 639 0
 1959 001c 4FF0FF03 		mov	r3, #255
 1960 0020 04E0     		b	.L113
 1961              	.L112:
 640:..//drivers/UART/uart.c **** 	}
 641:..//drivers/UART/uart.c **** 	return ring_rx3.dt_got;
 1962              		.loc 2 641 0
 1963 0022 40F20003 		movw	r3, #:lower16:ring_rx3
 1964 0026 C0F20003 		movt	r3, #:upper16:ring_rx3
 1965 002a 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1966              	.L113:
 642:..//drivers/UART/uart.c **** }
 1967              		.loc 2 642 0
 1968 002c 1846     		mov	r0, r3
 1969 002e 80BD     		pop	{r7, pc}
 1970              		.cfi_endproc
 1971              	.LFE46:
 1973              		.section	.text.Uart_ChkRcv3,"ax",%progbits
 1974              		.align	2
 1975              		.global	Uart_ChkRcv3
 1976              		.thumb
 1977              		.thumb_func
 1979              	Uart_ChkRcv3:
 1980              	.LFB47:
 643:..//drivers/UART/uart.c **** 
 644:..//drivers/UART/uart.c **** // Check key input
 645:..//drivers/UART/uart.c **** uint16_t Uart_ChkRcv3(void){
 1981              		.loc 2 645 0
 1982              		.cfi_startproc
 1983              		@ args = 0, pretend = 0, frame = 0
 1984              		@ frame_needed = 1, uses_anonymous_args = 0
 1985 0000 80B5     		push	{r7, lr}
 1986              	.LCFI55:
 1987              		.cfi_def_cfa_offset 8
 1988 0002 00AF     		add	r7, sp, #0
 1989              		.cfi_offset 14, -4
 1990              		.cfi_offset 7, -8
 1991              	.LCFI56:
 1992              		.cfi_def_cfa_register 7
 646:..//drivers/UART/uart.c **** 	return ring_is_empty (&ring_rx3);
 1993              		.loc 2 646 0
 1994 0004 40F20000 		movw	r0, #:lower16:ring_rx3
 1995 0008 C0F20000 		movt	r0, #:upper16:ring_rx3
 1996 000c 40F20003 		movw	r3, #:lower16:ring_is_empty
 1997 0010 C0F20003 		movt	r3, #:upper16:ring_is_empty
 1998 0014 9847     		blx	r3
 1999 0016 0346     		mov	r3, r0
 647:..//drivers/UART/uart.c **** }
 2000              		.loc 2 647 0
 2001 0018 1846     		mov	r0, r3
 2002 001a 80BD     		pop	{r7, pc}
 2003              		.cfi_endproc
 2004              	.LFE47:
 2006              		.section	.text.UART_Init0,"ax",%progbits
 2007              		.align	2
 2008              		.global	UART_Init0
 2009              		.thumb
 2010              		.thumb_func
 2012              	UART_Init0:
 2013              	.LFB48:
 648:..//drivers/UART/uart.c **** 
 649:..//drivers/UART/uart.c **** /*****************************************************************************
 650:..//drivers/UART/uart.c ****  * UART0 Interface
 651:..//drivers/UART/uart.c **** *****************************************************************************/
 652:..//drivers/UART/uart.c **** // Initialize UART
 653:..//drivers/UART/uart.c **** uint16_t UART_Init0( void ){
 2014              		.loc 2 653 0
 2015              		.cfi_startproc
 2016              		@ args = 0, pretend = 0, frame = 0
 2017              		@ frame_needed = 1, uses_anonymous_args = 0
 2018 0000 80B5     		push	{r7, lr}
 2019              	.LCFI57:
 2020              		.cfi_def_cfa_offset 8
 2021 0002 00AF     		add	r7, sp, #0
 2022              		.cfi_offset 14, -4
 2023              		.cfi_offset 7, -8
 2024              	.LCFI58:
 2025              		.cfi_def_cfa_register 7
 654:..//drivers/UART/uart.c **** 	#ifdef MOD_UART0
 655:..//drivers/UART/uart.c **** 	modInit(&modbus0,&ring_rx0,MOD_UART0);
 656:..//drivers/UART/uart.c **** 	#endif
 657:..//drivers/UART/uart.c **** 	// return (UARTInit( 0, 115200 ));
 658:..//drivers/UART/uart.c **** 	return (UARTInit( 0, 115200, 0 ));
 2026              		.loc 2 658 0
 2027 0004 4FF00000 		mov	r0, #0
 2028 0008 4FF4E131 		mov	r1, #115200
 2029 000c 4FF00002 		mov	r2, #0
 2030 0010 40F20003 		movw	r3, #:lower16:UARTInit
 2031 0014 C0F20003 		movt	r3, #:upper16:UARTInit
 2032 0018 9847     		blx	r3
 2033 001a 0346     		mov	r3, r0
 659:..//drivers/UART/uart.c **** }
 2034              		.loc 2 659 0
 2035 001c 1846     		mov	r0, r3
 2036 001e 80BD     		pop	{r7, pc}
 2037              		.cfi_endproc
 2038              	.LFE48:
 2040              		.section	.text.Uart_PutCharBuf0,"ax",%progbits
 2041              		.align	2
 2042              		.global	Uart_PutCharBuf0
 2043              		.thumb
 2044              		.thumb_func
 2046              	Uart_PutCharBuf0:
 2047              	.LFB49:
 660:..//drivers/UART/uart.c **** 
 661:..//drivers/UART/uart.c **** // Output one character
 662:..//drivers/UART/uart.c **** void Uart_PutCharBuf0(uint8_t c) {
 2048              		.loc 2 662 0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 8
 2051              		@ frame_needed = 1, uses_anonymous_args = 0
 2052              		@ link register save eliminated.
 2053 0000 80B4     		push	{r7}
 2054              	.LCFI59:
 2055              		.cfi_def_cfa_offset 4
 2056 0002 83B0     		sub	sp, sp, #12
 2057              	.LCFI60:
 2058              		.cfi_def_cfa_offset 16
 2059 0004 00AF     		add	r7, sp, #0
 2060              		.cfi_offset 7, -4
 2061              	.LCFI61:
 2062              		.cfi_def_cfa_register 7
 2063 0006 0346     		mov	r3, r0
 2064 0008 FB71     		strb	r3, [r7, #7]
 2065              	.L120:
 663:..//drivers/UART/uart.c **** 	/* THRE status, contain valid data */
 664:..//drivers/UART/uart.c **** 	while ( !(( LPC_UART0->LSR ) & LSR_THRE ));	// Polling for write action
 2066              		.loc 2 664 0
 2067 000a 4CF20003 		movw	r3, #:lower16:1073790976
 2068 000e C4F20003 		movt	r3, #:upper16:1073790976
 2069 0012 1B7D     		ldrb	r3, [r3, #20]
 2070 0014 DBB2     		uxtb	r3, r3
 2071 0016 03F02003 		and	r3, r3, #32
 2072 001a 002B     		cmp	r3, #0
 2073 001c F5D0     		beq	.L120
 665:..//drivers/UART/uart.c **** 	LPC_UART0->THR = (uint16_t)c & 0xFF;
 2074              		.loc 2 665 0
 2075 001e 4CF20003 		movw	r3, #:lower16:1073790976
 2076 0022 C4F20003 		movt	r3, #:upper16:1073790976
 2077 0026 FA79     		ldrb	r2, [r7, #7]
 2078 0028 1A70     		strb	r2, [r3, #0]
 666:..//drivers/UART/uart.c **** }
 2079              		.loc 2 666 0
 2080 002a 07F10C07 		add	r7, r7, #12
 2081 002e BD46     		mov	sp, r7
 2082 0030 80BC     		pop	{r7}
 2083 0032 7047     		bx	lr
 2084              		.cfi_endproc
 2085              	.LFE49:
 2087              		.section	.text.Uart_PutStrBuf0,"ax",%progbits
 2088              		.align	2
 2089              		.global	Uart_PutStrBuf0
 2090              		.thumb
 2091              		.thumb_func
 2093              	Uart_PutStrBuf0:
 2094              	.LFB50:
 667:..//drivers/UART/uart.c **** 
 668:..//drivers/UART/uart.c **** // Send strings to TX
 669:..//drivers/UART/uart.c **** void Uart_PutStrBuf0(uint8_t *dat){
 2095              		.loc 2 669 0
 2096              		.cfi_startproc
 2097              		@ args = 0, pretend = 0, frame = 16
 2098              		@ frame_needed = 1, uses_anonymous_args = 0
 2099 0000 80B5     		push	{r7, lr}
 2100              	.LCFI62:
 2101              		.cfi_def_cfa_offset 8
 2102 0002 84B0     		sub	sp, sp, #16
 2103              	.LCFI63:
 2104              		.cfi_def_cfa_offset 24
 2105 0004 00AF     		add	r7, sp, #0
 2106              		.cfi_offset 14, -4
 2107              		.cfi_offset 7, -8
 2108              	.LCFI64:
 2109              		.cfi_def_cfa_register 7
 2110 0006 7860     		str	r0, [r7, #4]
 670:..//drivers/UART/uart.c **** 	uint8_t c;
 671:..//drivers/UART/uart.c **** 
 672:..//drivers/UART/uart.c **** 	while ( (c = *dat++) != 0) {
 2111              		.loc 2 672 0
 2112 0008 06E0     		b	.L123
 2113              	.L124:
 673:..//drivers/UART/uart.c **** 		Uart_PutCharBuf0(c);
 2114              		.loc 2 673 0
 2115 000a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2116 000c 1846     		mov	r0, r3
 2117 000e 40F20003 		movw	r3, #:lower16:Uart_PutCharBuf0
 2118 0012 C0F20003 		movt	r3, #:upper16:Uart_PutCharBuf0
 2119 0016 9847     		blx	r3
 2120              	.L123:
 2121              		.loc 2 672 0
 2122 0018 7B68     		ldr	r3, [r7, #4]
 2123 001a 1B78     		ldrb	r3, [r3, #0]
 2124 001c FB73     		strb	r3, [r7, #15]
 2125 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2126 0020 002B     		cmp	r3, #0
 2127 0022 0CBF     		ite	eq
 2128 0024 0023     		moveq	r3, #0
 2129 0026 0123     		movne	r3, #1
 2130 0028 DBB2     		uxtb	r3, r3
 2131 002a 7A68     		ldr	r2, [r7, #4]
 2132 002c 02F10102 		add	r2, r2, #1
 2133 0030 7A60     		str	r2, [r7, #4]
 2134 0032 002B     		cmp	r3, #0
 2135 0034 E9D1     		bne	.L124
 674:..//drivers/UART/uart.c **** 	}
 675:..//drivers/UART/uart.c **** }
 2136              		.loc 2 675 0
 2137 0036 07F11007 		add	r7, r7, #16
 2138 003a BD46     		mov	sp, r7
 2139 003c 80BD     		pop	{r7, pc}
 2140              		.cfi_endproc
 2141              	.LFE50:
 2143 003e 00BF     		.section	.text.Uart_ChkRcv0,"ax",%progbits
 2144              		.align	2
 2145              		.global	Uart_ChkRcv0
 2146              		.thumb
 2147              		.thumb_func
 2149              	Uart_ChkRcv0:
 2150              	.LFB51:
 676:..//drivers/UART/uart.c **** 
 677:..//drivers/UART/uart.c **** // Check key input
 678:..//drivers/UART/uart.c **** uint16_t Uart_ChkRcv0(void){
 2151              		.loc 2 678 0
 2152              		.cfi_startproc
 2153              		@ args = 0, pretend = 0, frame = 0
 2154              		@ frame_needed = 1, uses_anonymous_args = 0
 2155 0000 80B5     		push	{r7, lr}
 2156              	.LCFI65:
 2157              		.cfi_def_cfa_offset 8
 2158 0002 00AF     		add	r7, sp, #0
 2159              		.cfi_offset 14, -4
 2160              		.cfi_offset 7, -8
 2161              	.LCFI66:
 2162              		.cfi_def_cfa_register 7
 679:..//drivers/UART/uart.c **** 	return ring_is_empty (&ring_rx0);
 2163              		.loc 2 679 0
 2164 0004 40F20000 		movw	r0, #:lower16:ring_rx0
 2165 0008 C0F20000 		movt	r0, #:upper16:ring_rx0
 2166 000c 40F20003 		movw	r3, #:lower16:ring_is_empty
 2167 0010 C0F20003 		movt	r3, #:upper16:ring_is_empty
 2168 0014 9847     		blx	r3
 2169 0016 0346     		mov	r3, r0
 680:..//drivers/UART/uart.c **** }
 2170              		.loc 2 680 0
 2171 0018 1846     		mov	r0, r3
 2172 001a 80BD     		pop	{r7, pc}
 2173              		.cfi_endproc
 2174              	.LFE51:
 2176              		.section	.text.Uart_GetC0,"ax",%progbits
 2177              		.align	2
 2178              		.global	Uart_GetC0
 2179              		.thumb
 2180              		.thumb_func
 2182              	Uart_GetC0:
 2183              	.LFB52:
 681:..//drivers/UART/uart.c **** 
 682:..//drivers/UART/uart.c **** // Get one character
 683:..//drivers/UART/uart.c **** uint8_t Uart_GetC0(){
 2184              		.loc 2 683 0
 2185              		.cfi_startproc
 2186              		@ args = 0, pretend = 0, frame = 0
 2187              		@ frame_needed = 1, uses_anonymous_args = 0
 2188 0000 80B5     		push	{r7, lr}
 2189              	.LCFI67:
 2190              		.cfi_def_cfa_offset 8
 2191 0002 00AF     		add	r7, sp, #0
 2192              		.cfi_offset 14, -4
 2193              		.cfi_offset 7, -8
 2194              	.LCFI68:
 2195              		.cfi_def_cfa_register 7
 684:..//drivers/UART/uart.c **** 	while(ring_getc (&ring_rx0)){
 2196              		.loc 2 684 0
 2197 0004 40F20000 		movw	r0, #:lower16:ring_rx0
 2198 0008 C0F20000 		movt	r0, #:upper16:ring_rx0
 2199 000c 40F20003 		movw	r3, #:lower16:ring_getc
 2200 0010 C0F20003 		movt	r3, #:upper16:ring_getc
 2201 0014 9847     		blx	r3
 2202 0016 0346     		mov	r3, r0
 2203 0018 002B     		cmp	r3, #0
 2204 001a 02D0     		beq	.L129
 685:..//drivers/UART/uart.c **** 		// vTaskDelay(1/portTICK_RATE_MS );		// Wait 1mS
 686:..//drivers/UART/uart.c **** 		return (uint8_t)-1;
 2205              		.loc 2 686 0
 2206 001c 4FF0FF03 		mov	r3, #255
 2207 0020 04E0     		b	.L130
 2208              	.L129:
 687:..//drivers/UART/uart.c **** 	}
 688:..//drivers/UART/uart.c **** 	return ring_rx0.dt_got;
 2209              		.loc 2 688 0
 2210 0022 40F20003 		movw	r3, #:lower16:ring_rx0
 2211 0026 C0F20003 		movt	r3, #:upper16:ring_rx0
 2212 002a 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 2213              	.L130:
 689:..//drivers/UART/uart.c **** }
 2214              		.loc 2 689 0
 2215 002c 1846     		mov	r0, r3
 2216 002e 80BD     		pop	{r7, pc}
 2217              		.cfi_endproc
 2218              	.LFE52:
 2220              		.section	.text.Uart_GetCh0,"ax",%progbits
 2221              		.align	2
 2222              		.global	Uart_GetCh0
 2223              		.thumb
 2224              		.thumb_func
 2226              	Uart_GetCh0:
 2227              	.LFB53:
 690:..//drivers/UART/uart.c **** 
 691:..//drivers/UART/uart.c **** int Uart_GetCh0(char *buf){
 2228              		.loc 2 691 0
 2229              		.cfi_startproc
 2230              		@ args = 0, pretend = 0, frame = 8
 2231              		@ frame_needed = 1, uses_anonymous_args = 0
 2232 0000 80B5     		push	{r7, lr}
 2233              	.LCFI69:
 2234              		.cfi_def_cfa_offset 8
 2235 0002 82B0     		sub	sp, sp, #8
 2236              	.LCFI70:
 2237              		.cfi_def_cfa_offset 16
 2238 0004 00AF     		add	r7, sp, #0
 2239              		.cfi_offset 14, -4
 2240              		.cfi_offset 7, -8
 2241              	.LCFI71:
 2242              		.cfi_def_cfa_register 7
 2243 0006 7860     		str	r0, [r7, #4]
 692:..//drivers/UART/uart.c **** 	if(ring_getc (&ring_rx0)){
 2244              		.loc 2 692 0
 2245 0008 40F20000 		movw	r0, #:lower16:ring_rx0
 2246 000c C0F20000 		movt	r0, #:upper16:ring_rx0
 2247 0010 40F20003 		movw	r3, #:lower16:ring_getc
 2248 0014 C0F20003 		movt	r3, #:upper16:ring_getc
 2249 0018 9847     		blx	r3
 2250 001a 0346     		mov	r3, r0
 2251 001c 002B     		cmp	r3, #0
 2252 001e 02D0     		beq	.L133
 693:..//drivers/UART/uart.c **** 		// vTaskDelay(1/portTICK_RATE_MS );		// Wait 1mS
 694:..//drivers/UART/uart.c **** 		return 0;
 2253              		.loc 2 694 0
 2254 0020 4FF00003 		mov	r3, #0
 2255 0024 08E0     		b	.L134
 2256              	.L133:
 695:..//drivers/UART/uart.c **** 	}else{
 696:..//drivers/UART/uart.c **** 		*buf = ring_rx0.dt_got;
 2257              		.loc 2 696 0
 2258 0026 40F20003 		movw	r3, #:lower16:ring_rx0
 2259 002a C0F20003 		movt	r3, #:upper16:ring_rx0
 2260 002e 9A7A     		ldrb	r2, [r3, #10]	@ zero_extendqisi2
 2261 0030 7B68     		ldr	r3, [r7, #4]
 2262 0032 1A70     		strb	r2, [r3, #0]
 697:..//drivers/UART/uart.c **** 		// buf = &ring_rx0.dt_got;
 698:..//drivers/UART/uart.c **** 		return 1;
 2263              		.loc 2 698 0
 2264 0034 4FF00103 		mov	r3, #1
 2265              	.L134:
 699:..//drivers/UART/uart.c **** 	}
 700:..//drivers/UART/uart.c **** 	return 0;
 701:..//drivers/UART/uart.c **** }
 2266              		.loc 2 701 0
 2267 0038 1846     		mov	r0, r3
 2268 003a 07F10807 		add	r7, r7, #8
 2269 003e BD46     		mov	sp, r7
 2270 0040 80BD     		pop	{r7, pc}
 2271              		.cfi_endproc
 2272              	.LFE53:
 2274 0042 00BF     		.section	.text.uart2TxFlush,"ax",%progbits
 2275              		.align	2
 2276              		.global	uart2TxFlush
 2277              		.thumb
 2278              		.thumb_func
 2280              	uart2TxFlush:
 2281              	.LFB54:
 702:..//drivers/UART/uart.c **** 
 703:..//drivers/UART/uart.c **** /******************************************************************************
 704:..//drivers/UART/uart.c ****  *
 705:..//drivers/UART/uart.c ****  * Function Name: uart2TxFlush()
 706:..//drivers/UART/uart.c ****  *
 707:..//drivers/UART/uart.c ****  * Description:  
 708:..//drivers/UART/uart.c ****  *    This function removes all characters from the UART transmit queue
 709:..//drivers/UART/uart.c ****  *    (without transmitting them).
 710:..//drivers/UART/uart.c ****  *
 711:..//drivers/UART/uart.c ****  * Calling Sequence: 
 712:..//drivers/UART/uart.c ****  *    void
 713:..//drivers/UART/uart.c ****  *
 714:..//drivers/UART/uart.c ****  * Returns:
 715:..//drivers/UART/uart.c ****  *    void
 716:..//drivers/UART/uart.c ****  *
 717:..//drivers/UART/uart.c ****  *****************************************************************************/
 718:..//drivers/UART/uart.c **** void uart2TxFlush(void)
 719:..//drivers/UART/uart.c **** {
 2282              		.loc 2 719 0
 2283              		.cfi_startproc
 2284              		@ args = 0, pretend = 0, frame = 0
 2285              		@ frame_needed = 1, uses_anonymous_args = 0
 2286 0000 80B5     		push	{r7, lr}
 2287              	.LCFI72:
 2288              		.cfi_def_cfa_offset 8
 2289 0002 00AF     		add	r7, sp, #0
 2290              		.cfi_offset 14, -4
 2291              		.cfi_offset 7, -8
 2292              	.LCFI73:
 2293              		.cfi_def_cfa_register 7
 720:..//drivers/UART/uart.c **** #if 0//def UART1_TX_INT_MODE
 721:..//drivers/UART/uart.c ****   unsigned cpsr;
 722:..//drivers/UART/uart.c **** 
 723:..//drivers/UART/uart.c ****   U2FCR |= UFCR_TX_FIFO_RESET;          // clear the TX fifo
 724:..//drivers/UART/uart.c **** 
 725:..//drivers/UART/uart.c ****   // "Empty" the transmit buffer.
 726:..//drivers/UART/uart.c ****   cpsr = disableIRQ();                  // disable global interrupts
 727:..//drivers/UART/uart.c ****   U2IER &= ~UIER_ETBEI;                 // disable TX interrupts
 728:..//drivers/UART/uart.c ****   restoreIRQ(cpsr);                     // restore global interrupts
 729:..//drivers/UART/uart.c ****   uart2_tx_insert_idx = uart2_tx_extract_idx = 0;
 730:..//drivers/UART/uart.c **** #else
 731:..//drivers/UART/uart.c **** 	ring_clear(&ring_rx2);
 2294              		.loc 2 731 0
 2295 0004 40F20000 		movw	r0, #:lower16:ring_rx2
 2296 0008 C0F20000 		movt	r0, #:upper16:ring_rx2
 2297 000c 40F20003 		movw	r3, #:lower16:ring_clear
 2298 0010 C0F20003 		movt	r3, #:upper16:ring_clear
 2299 0014 9847     		blx	r3
 732:..//drivers/UART/uart.c **** 	LPC_UART2->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
 2300              		.loc 2 732 0
 2301 0016 48F20003 		movw	r3, #:lower16:1074364416
 2302 001a C4F20903 		movt	r3, #:upper16:1074364416
 2303 001e 4FF00702 		mov	r2, #7
 2304 0022 1A72     		strb	r2, [r3, #8]
 733:..//drivers/UART/uart.c **** #endif
 734:..//drivers/UART/uart.c **** }
 2305              		.loc 2 734 0
 2306 0024 80BD     		pop	{r7, pc}
 2307              		.cfi_endproc
 2308              	.LFE54:
 2310 0026 00BF     		.section	.text.uart2TxRxEnable,"ax",%progbits
 2311              		.align	2
 2312              		.global	uart2TxRxEnable
 2313              		.thumb
 2314              		.thumb_func
 2316              	uart2TxRxEnable:
 2317              	.LFB55:
 735:..//drivers/UART/uart.c **** 
 736:..//drivers/UART/uart.c **** int uart2TxRxEnable(void)
 737:..//drivers/UART/uart.c **** {
 2318              		.loc 2 737 0
 2319              		.cfi_startproc
 2320              		@ args = 0, pretend = 0, frame = 0
 2321              		@ frame_needed = 1, uses_anonymous_args = 0
 2322              		@ link register save eliminated.
 2323 0000 80B4     		push	{r7}
 2324              	.LCFI74:
 2325              		.cfi_def_cfa_offset 4
 2326 0002 00AF     		add	r7, sp, #0
 2327              		.cfi_offset 7, -4
 2328              	.LCFI75:
 2329              		.cfi_def_cfa_register 7
 738:..//drivers/UART/uart.c **** 	LPC_UART2->FCR = 0x01;		/* Enable TX and RX FIFO. */
 2330              		.loc 2 738 0
 2331 0004 48F20003 		movw	r3, #:lower16:1074364416
 2332 0008 C4F20903 		movt	r3, #:upper16:1074364416
 2333 000c 4FF00102 		mov	r2, #1
 2334 0010 1A72     		strb	r2, [r3, #8]
 739:..//drivers/UART/uart.c **** 	return 1;
 2335              		.loc 2 739 0
 2336 0012 4FF00103 		mov	r3, #1
 740:..//drivers/UART/uart.c **** }
 2337              		.loc 2 740 0
 2338 0016 1846     		mov	r0, r3
 2339 0018 BD46     		mov	sp, r7
 2340 001a 80BC     		pop	{r7}
 2341 001c 7047     		bx	lr
 2342              		.cfi_endproc
 2343              	.LFE55:
 2345 001e 00BF     		.section	.text.uart3TxFlush,"ax",%progbits
 2346              		.align	2
 2347              		.global	uart3TxFlush
 2348              		.thumb
 2349              		.thumb_func
 2351              	uart3TxFlush:
 2352              	.LFB56:
 741:..//drivers/UART/uart.c **** 
 742:..//drivers/UART/uart.c **** void uart3TxFlush(void)
 743:..//drivers/UART/uart.c **** {
 2353              		.loc 2 743 0
 2354              		.cfi_startproc
 2355              		@ args = 0, pretend = 0, frame = 0
 2356              		@ frame_needed = 1, uses_anonymous_args = 0
 2357 0000 80B5     		push	{r7, lr}
 2358              	.LCFI76:
 2359              		.cfi_def_cfa_offset 8
 2360 0002 00AF     		add	r7, sp, #0
 2361              		.cfi_offset 14, -4
 2362              		.cfi_offset 7, -8
 2363              	.LCFI77:
 2364              		.cfi_def_cfa_register 7
 744:..//drivers/UART/uart.c **** #if 0//def UART1_TX_INT_MODE
 745:..//drivers/UART/uart.c **** 
 746:..//drivers/UART/uart.c **** #else
 747:..//drivers/UART/uart.c **** 	ring_clear(&ring_rx3);
 2365              		.loc 2 747 0
 2366 0004 40F20000 		movw	r0, #:lower16:ring_rx3
 2367 0008 C0F20000 		movt	r0, #:upper16:ring_rx3
 2368 000c 40F20003 		movw	r3, #:lower16:ring_clear
 2369 0010 C0F20003 		movt	r3, #:upper16:ring_clear
 2370 0014 9847     		blx	r3
 748:..//drivers/UART/uart.c **** 	LPC_UART3->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
 2371              		.loc 2 748 0
 2372 0016 4CF20003 		movw	r3, #:lower16:1074380800
 2373 001a C4F20903 		movt	r3, #:upper16:1074380800
 2374 001e 4FF00702 		mov	r2, #7
 2375 0022 1A72     		strb	r2, [r3, #8]
 749:..//drivers/UART/uart.c **** #endif
 750:..//drivers/UART/uart.c **** }
 2376              		.loc 2 750 0
 2377 0024 80BD     		pop	{r7, pc}
 2378              		.cfi_endproc
 2379              	.LFE56:
 2381 0026 00BF     		.section	.text.uart3TxRxEnable,"ax",%progbits
 2382              		.align	2
 2383              		.global	uart3TxRxEnable
 2384              		.thumb
 2385              		.thumb_func
 2387              	uart3TxRxEnable:
 2388              	.LFB57:
 751:..//drivers/UART/uart.c **** 
 752:..//drivers/UART/uart.c **** int uart3TxRxEnable(void)
 753:..//drivers/UART/uart.c **** {
 2389              		.loc 2 753 0
 2390              		.cfi_startproc
 2391              		@ args = 0, pretend = 0, frame = 0
 2392              		@ frame_needed = 1, uses_anonymous_args = 0
 2393              		@ link register save eliminated.
 2394 0000 80B4     		push	{r7}
 2395              	.LCFI78:
 2396              		.cfi_def_cfa_offset 4
 2397 0002 00AF     		add	r7, sp, #0
 2398              		.cfi_offset 7, -4
 2399              	.LCFI79:
 2400              		.cfi_def_cfa_register 7
 754:..//drivers/UART/uart.c **** 	LPC_UART3->FCR = 0x01;		/* Enable TX and RX FIFO. */
 2401              		.loc 2 754 0
 2402 0004 4CF20003 		movw	r3, #:lower16:1074380800
 2403 0008 C4F20903 		movt	r3, #:upper16:1074380800
 2404 000c 4FF00102 		mov	r2, #1
 2405 0010 1A72     		strb	r2, [r3, #8]
 755:..//drivers/UART/uart.c **** 	return 1;
 2406              		.loc 2 755 0
 2407 0012 4FF00103 		mov	r3, #1
 756:..//drivers/UART/uart.c **** }
 2408              		.loc 2 756 0
 2409 0016 1846     		mov	r0, r3
 2410 0018 BD46     		mov	sp, r7
 2411 001a 80BC     		pop	{r7}
 2412 001c 7047     		bx	lr
 2413              		.cfi_endproc
 2414              	.LFE57:
 2416 001e 00BF     		.text
 2417              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:24     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:28     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:67     .text.NVIC_SetPriority:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:71     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:133    .bss.uart_enable_accumulator:00000000 uart_enable_accumulator
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:130    .bss.uart_enable_accumulator:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:140    .bss.preset_enable:00000000 preset_enable
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:137    .bss.preset_enable:00000000 $d
                            *COM*:00000004 UART2Status
                            *COM*:00000004 UART3Status
                            *COM*:00000004 UART0Status
                            *COM*:0000000c ring_rx0
                            *COM*:0000000c ring_rx2
                            *COM*:0000000c ring_tx2
                            *COM*:0000000c ring_rx3
                            *COM*:0000000c ring_tx3
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:155    .Ram1:00000000 buff_rx0
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:152    .Ram1:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:161    .Ram1:00000080 buff_rx2
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:167    .Ram1:00000180 buff_tx2
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:173    .Ram1:00000280 buff_rx3
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:179    .Ram1:00000300 buff_tx3
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:185    .Ram1:00000380 buff_rxusb
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:191    .Ram1:00000480 buff_rxu
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:197    .Ram1:00000500 buff_txu
                            *COM*:000000b4 modbus2
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:201    .text.UART0_IRQHandler:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:206    .text.UART0_IRQHandler:00000000 UART0_IRQHandler
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:329    .text.UART2_IRQHandler:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:334    .text.UART2_IRQHandler:00000000 UART2_IRQHandler
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:514    .text.UART3_IRQHandler:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:519    .text.UART3_IRQHandler:00000000 UART3_IRQHandler
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:685    .text.UARTInit:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:690    .text.UARTInit:00000000 UARTInit
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1206   .text.UART_Init2:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1211   .text.UART_Init2:00000000 UART_Init2
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1256   .rodata:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1257   .rodata:00000000 .LC0
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1260   .text.Uart_PutCharBuf2:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1265   .text.Uart_PutCharBuf2:00000000 Uart_PutCharBuf2
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1325   .text.Uart_StartSending2:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1330   .text.Uart_StartSending2:00000000 Uart_StartSending2
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1380   .text.Uart_SendCharArray2:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1385   .text.Uart_SendCharArray2:00000000 Uart_SendCharArray2
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1453   .text.Uart_PutStrBuf2:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1458   .text.Uart_PutStrBuf2:00000000 Uart_PutStrBuf2
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1509   .text.Uart_GetC2:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1514   .text.Uart_GetC2:00000000 Uart_GetC2
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1553   .text.Uart_GetCh2:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1558   .text.Uart_GetCh2:00000000 Uart_GetCh2
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1607   .text.Uart_ChkRcv2:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1612   .text.Uart_ChkRcv2:00000000 Uart_ChkRcv2
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1640   .text.UART_Init3:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1645   .text.UART_Init3:00000000 UART_Init3
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1681   .text.Uart_PutCharBuf3:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1686   .text.Uart_PutCharBuf3:00000000 Uart_PutCharBuf3
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1746   .text.Uart_StartSending3:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1751   .text.Uart_StartSending3:00000000 Uart_StartSending3
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1801   .text.Uart_SendCharArray3:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1806   .text.Uart_SendCharArray3:00000000 Uart_SendCharArray3
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1874   .text.Uart_PutStrBuf3:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1879   .text.Uart_PutStrBuf3:00000000 Uart_PutStrBuf3
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1930   .text.Uart_GetC3:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1935   .text.Uart_GetC3:00000000 Uart_GetC3
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1974   .text.Uart_ChkRcv3:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:1979   .text.Uart_ChkRcv3:00000000 Uart_ChkRcv3
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2007   .text.UART_Init0:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2012   .text.UART_Init0:00000000 UART_Init0
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2041   .text.Uart_PutCharBuf0:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2046   .text.Uart_PutCharBuf0:00000000 Uart_PutCharBuf0
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2088   .text.Uart_PutStrBuf0:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2093   .text.Uart_PutStrBuf0:00000000 Uart_PutStrBuf0
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2144   .text.Uart_ChkRcv0:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2149   .text.Uart_ChkRcv0:00000000 Uart_ChkRcv0
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2177   .text.Uart_GetC0:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2182   .text.Uart_GetC0:00000000 Uart_GetC0
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2221   .text.Uart_GetCh0:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2226   .text.Uart_GetCh0:00000000 Uart_GetCh0
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2275   .text.uart2TxFlush:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2280   .text.uart2TxFlush:00000000 uart2TxFlush
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2311   .text.uart2TxRxEnable:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2316   .text.uart2TxRxEnable:00000000 uart2TxRxEnable
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2346   .text.uart3TxFlush:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2351   .text.uart3TxFlush:00000000 uart3TxFlush
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2382   .text.uart3TxRxEnable:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8G7bOB.s:2387   .text.uart3TxRxEnable:00000000 uart3TxRxEnable
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ring_putc
checkModbusData
ring_is_empty
ring_getc
ring_init
uart_set_divisors
modInit
ring_is_full
printf
ring_clear
