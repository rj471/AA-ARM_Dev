   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"interrupts.c"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.section	.text.TIMER3_IRQHandler,"ax",%progbits
  24              		.align	2
  25              		.global	TIMER3_IRQHandler
  26              		.thumb
  27              		.thumb_func
  29              	TIMER3_IRQHandler:
  30              	.LFB29:
  31              		.file 1 "..//PHY/interrupts.c"
   1:..//PHY/interrupts.c **** #include <stdlib.h>
   2:..//PHY/interrupts.c **** #include "interrupts.h"
   3:..//PHY/interrupts.c **** #include "timer.h"
   4:..//PHY/interrupts.c **** #include "input_output.h"
   5:..//PHY/interrupts.c **** #include "uart.h"
   6:..//PHY/interrupts.c **** #include "multi-steppers.h"
   7:..//PHY/interrupts.c **** 
   8:..//PHY/interrupts.c **** void TIMER_1MS_ISR(void){	//this invoking on 1mSEC
  32              		.loc 1 8 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 0
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 80B5     		push	{r7, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39 0002 00AF     		add	r7, sp, #0
  40              		.cfi_offset 14, -4
  41              		.cfi_offset 7, -8
  42              	.LCFI1:
  43              		.cfi_def_cfa_register 7
   9:..//PHY/interrupts.c **** 
  10:..//PHY/interrupts.c **** 	delay_timer_32++;
  44              		.loc 1 10 0
  45 0004 40F20003 		movw	r3, #:lower16:delay_timer_32
  46 0008 C0F20003 		movt	r3, #:upper16:delay_timer_32
  47 000c 1B68     		ldr	r3, [r3, #0]
  48 000e 03F10102 		add	r2, r3, #1
  49 0012 40F20003 		movw	r3, #:lower16:delay_timer_32
  50 0016 C0F20003 		movt	r3, #:upper16:delay_timer_32
  51 001a 1A60     		str	r2, [r3, #0]
  11:..//PHY/interrupts.c **** 	io_update();
  52              		.loc 1 11 0
  53 001c 40F20003 		movw	r3, #:lower16:io_update
  54 0020 C0F20003 		movt	r3, #:upper16:io_update
  55 0024 9847     		blx	r3
  12:..//PHY/interrupts.c **** 	update_sm_operation_every_1ms();
  56              		.loc 1 12 0
  57 0026 40F20003 		movw	r3, #:lower16:update_sm_operation_every_1ms
  58 002a C0F20003 		movt	r3, #:upper16:update_sm_operation_every_1ms
  59 002e 9847     		blx	r3
  13:..//PHY/interrupts.c **** 	Move_Motor();
  60              		.loc 1 13 0
  61 0030 40F20003 		movw	r3, #:lower16:Move_Motor
  62 0034 C0F20003 		movt	r3, #:upper16:Move_Motor
  63 0038 9847     		blx	r3
  14:..//PHY/interrupts.c **** 
  15:..//PHY/interrupts.c **** 	TIM_ClearIntPending(LPC_TIM3, TIM_MR0_INT);
  64              		.loc 1 15 0
  65 003a 44F20000 		movw	r0, #:lower16:1074348032
  66 003e C4F20900 		movt	r0, #:upper16:1074348032
  67 0042 4FF00001 		mov	r1, #0
  68 0046 40F20003 		movw	r3, #:lower16:TIM_ClearIntPending
  69 004a C0F20003 		movt	r3, #:upper16:TIM_ClearIntPending
  70 004e 9847     		blx	r3
  16:..//PHY/interrupts.c **** 	
  17:..//PHY/interrupts.c **** }
  71              		.loc 1 17 0
  72 0050 80BD     		pop	{r7, pc}
  73              		.cfi_endproc
  74              	.LFE29:
  76 0052 00BF     		.section	.text.TIMER1_IRQHandler,"ax",%progbits
  77              		.align	2
  78              		.global	TIMER1_IRQHandler
  79              		.thumb
  80              		.thumb_func
  82              	TIMER1_IRQHandler:
  83              	.LFB30:
  18:..//PHY/interrupts.c **** 
  19:..//PHY/interrupts.c **** void Make_Pulses_ISR(void){
  84              		.loc 1 19 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88 0000 80B5     		push	{r7, lr}
  89              	.LCFI2:
  90              		.cfi_def_cfa_offset 8
  91 0002 00AF     		add	r7, sp, #0
  92              		.cfi_offset 14, -4
  93              		.cfi_offset 7, -8
  94              	.LCFI3:
  95              		.cfi_def_cfa_register 7
  20:..//PHY/interrupts.c **** 
  21:..//PHY/interrupts.c **** 	Make_Pulses();
  96              		.loc 1 21 0
  97 0004 40F20003 		movw	r3, #:lower16:Make_Pulses
  98 0008 C0F20003 		movt	r3, #:upper16:Make_Pulses
  99 000c 9847     		blx	r3
  22:..//PHY/interrupts.c **** 	TIM_ClearIntPending(LPC_TIM1, TIM_MR0_INT);
 100              		.loc 1 22 0
 101 000e 48F20000 		movw	r0, #:lower16:1073774592
 102 0012 C4F20000 		movt	r0, #:upper16:1073774592
 103 0016 4FF00001 		mov	r1, #0
 104 001a 40F20003 		movw	r3, #:lower16:TIM_ClearIntPending
 105 001e C0F20003 		movt	r3, #:upper16:TIM_ClearIntPending
 106 0022 9847     		blx	r3
  23:..//PHY/interrupts.c **** }
 107              		.loc 1 23 0
 108 0024 80BD     		pop	{r7, pc}
 109              		.cfi_endproc
 110              	.LFE30:
 112 0026 00BF     		.section	.text.TIMER2_IRQHandler,"ax",%progbits
 113              		.align	2
 114              		.global	TIMER2_IRQHandler
 115              		.thumb
 116              		.thumb_func
 118              	TIMER2_IRQHandler:
 119              	.LFB31:
  24:..//PHY/interrupts.c **** 
  25:..//PHY/interrupts.c **** void Pulse_Clear_ISR(void){ ////this invoking on 5uSEC
 120              		.loc 1 25 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124 0000 80B5     		push	{r7, lr}
 125              	.LCFI4:
 126              		.cfi_def_cfa_offset 8
 127 0002 00AF     		add	r7, sp, #0
 128              		.cfi_offset 14, -4
 129              		.cfi_offset 7, -8
 130              	.LCFI5:
 131              		.cfi_def_cfa_register 7
  26:..//PHY/interrupts.c **** 
  27:..//PHY/interrupts.c **** 	Pulse_Clear();
 132              		.loc 1 27 0
 133 0004 40F20003 		movw	r3, #:lower16:Pulse_Clear
 134 0008 C0F20003 		movt	r3, #:upper16:Pulse_Clear
 135 000c 9847     		blx	r3
  28:..//PHY/interrupts.c **** 	TIM_ClearIntPending(LPC_TIM1, TIM_MR0_INT);	
 136              		.loc 1 28 0
 137 000e 48F20000 		movw	r0, #:lower16:1073774592
 138 0012 C4F20000 		movt	r0, #:upper16:1073774592
 139 0016 4FF00001 		mov	r1, #0
 140 001a 40F20003 		movw	r3, #:lower16:TIM_ClearIntPending
 141 001e C0F20003 		movt	r3, #:upper16:TIM_ClearIntPending
 142 0022 9847     		blx	r3
  29:..//PHY/interrupts.c **** }
 143              		.loc 1 29 0
 144 0024 80BD     		pop	{r7, pc}
 145              		.cfi_endproc
 146              	.LFE31:
 148 0026 00BF     		.section	.text.TIMER0_IRQHandler,"ax",%progbits
 149              		.align	2
 150              		.global	TIMER0_IRQHandler
 151              		.thumb
 152              		.thumb_func
 154              	TIMER0_IRQHandler:
 155              	.LFB32:
  30:..//PHY/interrupts.c **** 
  31:..//PHY/interrupts.c **** void Modbus_Timeout_ISR(void){
 156              		.loc 1 31 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI6:
 162              		.cfi_def_cfa_offset 8
 163 0002 00AF     		add	r7, sp, #0
 164              		.cfi_offset 14, -4
 165              		.cfi_offset 7, -8
 166              	.LCFI7:
 167              		.cfi_def_cfa_register 7
  32:..//PHY/interrupts.c **** 	
  33:..//PHY/interrupts.c **** #ifdef MOD_UART2	
  34:..//PHY/interrupts.c **** 
  35:..//PHY/interrupts.c **** 	if( (Uart_ChkRcv2() == 0) && ((&modbus2)->modbus_data_complete == 0) ) { // some data available on
 168              		.loc 1 35 0
 169 0004 40F20003 		movw	r3, #:lower16:Uart_ChkRcv2
 170 0008 C0F20003 		movt	r3, #:upper16:Uart_ChkRcv2
 171 000c 9847     		blx	r3
 172 000e 0346     		mov	r3, r0
 173 0010 002B     		cmp	r3, #0
 174 0012 4FD1     		bne	.L8
 175 0014 40F20003 		movw	r3, #:lower16:modbus2
 176 0018 C0F20003 		movt	r3, #:upper16:modbus2
 177 001c 1B68     		ldr	r3, [r3, #0]
 178 001e 002B     		cmp	r3, #0
 179 0020 48D1     		bne	.L8
  36:..//PHY/interrupts.c **** 		(&modbus2)->modbusTimerCount++;
 180              		.loc 1 36 0
 181 0022 40F20003 		movw	r3, #:lower16:modbus2
 182 0026 C0F20003 		movt	r3, #:upper16:modbus2
 183 002a 5B68     		ldr	r3, [r3, #4]
 184 002c 03F10102 		add	r2, r3, #1
 185 0030 40F20003 		movw	r3, #:lower16:modbus2
 186 0034 C0F20003 		movt	r3, #:upper16:modbus2
 187 0038 5A60     		str	r2, [r3, #4]
  37:..//PHY/interrupts.c **** 		if( ( ( ((&modbus2)->modbusTimerCount)*(MODBUS_TIMER_TIME+1) ) ) > ((&modbus2)->modbus_timeout) )
 188              		.loc 1 37 0
 189 003a 40F20003 		movw	r3, #:lower16:modbus2
 190 003e C0F20003 		movt	r3, #:upper16:modbus2
 191 0042 5B68     		ldr	r3, [r3, #4]
 192 0044 4FF03202 		mov	r2, #50
 193 0048 02FB03F2 		mul	r2, r2, r3
 194 004c 40F20003 		movw	r3, #:lower16:modbus2
 195 0050 C0F20003 		movt	r3, #:upper16:modbus2
 196 0054 1B69     		ldr	r3, [r3, #16]
 197 0056 9A42     		cmp	r2, r3
 198 0058 2CD9     		bls	.L8
  38:..//PHY/interrupts.c **** 			(&modbus2)->ring_slaveID = Uart_GetC2(); // store slaveId here
 199              		.loc 1 38 0
 200 005a 40F20003 		movw	r3, #:lower16:Uart_GetC2
 201 005e C0F20003 		movt	r3, #:upper16:Uart_GetC2
 202 0062 9847     		blx	r3
 203 0064 0346     		mov	r3, r0
 204 0066 1A46     		mov	r2, r3
 205 0068 40F20003 		movw	r3, #:lower16:modbus2
 206 006c C0F20003 		movt	r3, #:upper16:modbus2
 207 0070 5A75     		strb	r2, [r3, #21]
  39:..//PHY/interrupts.c **** 			if((&modbus2)->ring_slaveID != (&modbus2)->slaveID){ //not my data...  clear ring
 208              		.loc 1 39 0
 209 0072 40F20003 		movw	r3, #:lower16:modbus2
 210 0076 C0F20003 		movt	r3, #:upper16:modbus2
 211 007a 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 212 007c 1A46     		mov	r2, r3
 213 007e 40F20003 		movw	r3, #:lower16:modbus2
 214 0082 C0F20003 		movt	r3, #:upper16:modbus2
 215 0086 D3F8A430 		ldr	r3, [r3, #164]
 216 008a 9A42     		cmp	r2, r3
 217 008c 0BD0     		beq	.L9
  40:..//PHY/interrupts.c **** 				ring_clear((&modbus2)->ring_address);
 218              		.loc 1 40 0
 219 008e 40F20003 		movw	r3, #:lower16:modbus2
 220 0092 C0F20003 		movt	r3, #:upper16:modbus2
 221 0096 9B68     		ldr	r3, [r3, #8]
 222 0098 1846     		mov	r0, r3
 223 009a 40F20003 		movw	r3, #:lower16:ring_clear
 224 009e C0F20003 		movt	r3, #:upper16:ring_clear
 225 00a2 9847     		blx	r3
 226 00a4 06E0     		b	.L8
 227              	.L9:
  41:..//PHY/interrupts.c **** 			}else{ //my data
  42:..//PHY/interrupts.c **** 				(&modbus2)->modbus_data_complete = 1;
 228              		.loc 1 42 0
 229 00a6 40F20003 		movw	r3, #:lower16:modbus2
 230 00aa C0F20003 		movt	r3, #:upper16:modbus2
 231 00ae 4FF00102 		mov	r2, #1
 232 00b2 1A60     		str	r2, [r3, #0]
 233              	.L8:
  43:..//PHY/interrupts.c **** 			}
  44:..//PHY/interrupts.c **** 		}
  45:..//PHY/interrupts.c **** 	}
  46:..//PHY/interrupts.c **** 	
  47:..//PHY/interrupts.c **** #endif
  48:..//PHY/interrupts.c **** 
  49:..//PHY/interrupts.c **** #ifdef MOD_USB
  50:..//PHY/interrupts.c **** 
  51:..//PHY/interrupts.c **** 	if( (VCOM_ChkRcv() == 0) && ((&modbusUSB)->modbus_data_complete == 0) ) { // some data available o
 234              		.loc 1 51 0
 235 00b4 40F20003 		movw	r3, #:lower16:VCOM_ChkRcv
 236 00b8 C0F20003 		movt	r3, #:upper16:VCOM_ChkRcv
 237 00bc 9847     		blx	r3
 238 00be 0346     		mov	r3, r0
 239 00c0 002B     		cmp	r3, #0
 240 00c2 4FD1     		bne	.L10
 241 00c4 40F20003 		movw	r3, #:lower16:modbusUSB
 242 00c8 C0F20003 		movt	r3, #:upper16:modbusUSB
 243 00cc 1B68     		ldr	r3, [r3, #0]
 244 00ce 002B     		cmp	r3, #0
 245 00d0 48D1     		bne	.L10
  52:..//PHY/interrupts.c **** 		(&modbusUSB)->modbusTimerCount++;
 246              		.loc 1 52 0
 247 00d2 40F20003 		movw	r3, #:lower16:modbusUSB
 248 00d6 C0F20003 		movt	r3, #:upper16:modbusUSB
 249 00da 5B68     		ldr	r3, [r3, #4]
 250 00dc 03F10102 		add	r2, r3, #1
 251 00e0 40F20003 		movw	r3, #:lower16:modbusUSB
 252 00e4 C0F20003 		movt	r3, #:upper16:modbusUSB
 253 00e8 5A60     		str	r2, [r3, #4]
  53:..//PHY/interrupts.c **** 		if( ( ( ((&modbusUSB)->modbusTimerCount)*(MODBUS_TIMER_TIME+1) ) ) > ((&modbusUSB)->modbus_timeou
 254              		.loc 1 53 0
 255 00ea 40F20003 		movw	r3, #:lower16:modbusUSB
 256 00ee C0F20003 		movt	r3, #:upper16:modbusUSB
 257 00f2 5B68     		ldr	r3, [r3, #4]
 258 00f4 4FF03202 		mov	r2, #50
 259 00f8 02FB03F2 		mul	r2, r2, r3
 260 00fc 40F20003 		movw	r3, #:lower16:modbusUSB
 261 0100 C0F20003 		movt	r3, #:upper16:modbusUSB
 262 0104 1B69     		ldr	r3, [r3, #16]
 263 0106 9A42     		cmp	r2, r3
 264 0108 2CD9     		bls	.L10
  54:..//PHY/interrupts.c **** 			(&modbusUSB)->ring_slaveID = VCOM_GetCh(); //store slaveId here
 265              		.loc 1 54 0
 266 010a 40F20003 		movw	r3, #:lower16:VCOM_GetCh
 267 010e C0F20003 		movt	r3, #:upper16:VCOM_GetCh
 268 0112 9847     		blx	r3
 269 0114 0346     		mov	r3, r0
 270 0116 DAB2     		uxtb	r2, r3
 271 0118 40F20003 		movw	r3, #:lower16:modbusUSB
 272 011c C0F20003 		movt	r3, #:upper16:modbusUSB
 273 0120 5A75     		strb	r2, [r3, #21]
  55:..//PHY/interrupts.c **** 			if((&modbusUSB)->ring_slaveID != (&modbusUSB)->slaveID){ //not my data...  clear ring
 274              		.loc 1 55 0
 275 0122 40F20003 		movw	r3, #:lower16:modbusUSB
 276 0126 C0F20003 		movt	r3, #:upper16:modbusUSB
 277 012a 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 278 012c 1A46     		mov	r2, r3
 279 012e 40F20003 		movw	r3, #:lower16:modbusUSB
 280 0132 C0F20003 		movt	r3, #:upper16:modbusUSB
 281 0136 D3F8A430 		ldr	r3, [r3, #164]
 282 013a 9A42     		cmp	r2, r3
 283 013c 0BD0     		beq	.L11
  56:..//PHY/interrupts.c **** 				ring_clear((&modbusUSB)->ring_address);
 284              		.loc 1 56 0
 285 013e 40F20003 		movw	r3, #:lower16:modbusUSB
 286 0142 C0F20003 		movt	r3, #:upper16:modbusUSB
 287 0146 9B68     		ldr	r3, [r3, #8]
 288 0148 1846     		mov	r0, r3
 289 014a 40F20003 		movw	r3, #:lower16:ring_clear
 290 014e C0F20003 		movt	r3, #:upper16:ring_clear
 291 0152 9847     		blx	r3
 292 0154 06E0     		b	.L10
 293              	.L11:
  57:..//PHY/interrupts.c **** 				
  58:..//PHY/interrupts.c **** 			}else{ //my data
  59:..//PHY/interrupts.c **** 				(&modbusUSB)->modbus_data_complete = 1;
 294              		.loc 1 59 0
 295 0156 40F20003 		movw	r3, #:lower16:modbusUSB
 296 015a C0F20003 		movt	r3, #:upper16:modbusUSB
 297 015e 4FF00102 		mov	r2, #1
 298 0162 1A60     		str	r2, [r3, #0]
 299              	.L10:
  60:..//PHY/interrupts.c **** 			}
  61:..//PHY/interrupts.c **** 		}
  62:..//PHY/interrupts.c **** 	}
  63:..//PHY/interrupts.c **** 	
  64:..//PHY/interrupts.c **** #endif
  65:..//PHY/interrupts.c **** 
  66:..//PHY/interrupts.c **** 	TIM_ClearIntPending(LPC_TIM0, TIM_MR0_INT);
 300              		.loc 1 66 0
 301 0164 44F20000 		movw	r0, #:lower16:1073758208
 302 0168 C4F20000 		movt	r0, #:upper16:1073758208
 303 016c 4FF00001 		mov	r1, #0
 304 0170 40F20003 		movw	r3, #:lower16:TIM_ClearIntPending
 305 0174 C0F20003 		movt	r3, #:upper16:TIM_ClearIntPending
 306 0178 9847     		blx	r3
  67:..//PHY/interrupts.c **** }
 307              		.loc 1 67 0
 308 017a 80BD     		pop	{r7, pc}
 309              		.cfi_endproc
 310              	.LFE32:
 312              		.section	.text.init_timers,"ax",%progbits
 313              		.align	2
 314              		.global	init_timers
 315              		.thumb
 316              		.thumb_func
 318              	init_timers:
 319              	.LFB33:
  68:..//PHY/interrupts.c **** 
  69:..//PHY/interrupts.c **** /* both the timers of the LPC2148 are used */
  70:..//PHY/interrupts.c **** /* initialise each of them with their appropriate ISR */
  71:..//PHY/interrupts.c **** /* and with their appropriate match compare values here*/
  72:..//PHY/interrupts.c **** int init_timers(void)
  73:..//PHY/interrupts.c **** {
 320              		.loc 1 73 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 1, uses_anonymous_args = 0
 324 0000 80B5     		push	{r7, lr}
 325              	.LCFI8:
 326              		.cfi_def_cfa_offset 8
 327 0002 00AF     		add	r7, sp, #0
 328              		.cfi_offset 14, -4
 329              		.cfi_offset 7, -8
 330              	.LCFI9:
 331              		.cfi_def_cfa_register 7
  74:..//PHY/interrupts.c **** 	// This runs every 1MS
  75:..//PHY/interrupts.c **** 	init_timer0_freq(MODBUS_TIMER_TIME);
 332              		.loc 1 75 0
 333 0004 4FF03100 		mov	r0, #49
 334 0008 40F20003 		movw	r3, #:lower16:init_timer0_freq
 335 000c C0F20003 		movt	r3, #:upper16:init_timer0_freq
 336 0010 9847     		blx	r3
  76:..//PHY/interrupts.c **** 
  77:..//PHY/interrupts.c **** 	// we want the timer1 to run at 50Khz
  78:..//PHY/interrupts.c **** 	init_timer1_freq(MAKE_PULSES_TIME);
 337              		.loc 1 78 0
 338 0012 4FF03100 		mov	r0, #49
 339 0016 40F20003 		movw	r3, #:lower16:init_timer1_freq
 340 001a C0F20003 		movt	r3, #:upper16:init_timer1_freq
 341 001e 9847     		blx	r3
  79:..//PHY/interrupts.c **** 
  80:..//PHY/interrupts.c **** 
  81:..//PHY/interrupts.c **** 	init_timer2_freq(PULSE_CLEAR_TIME);
 342              		.loc 1 81 0
 343 0020 4FF00100 		mov	r0, #1
 344 0024 40F20003 		movw	r3, #:lower16:init_timer2_freq
 345 0028 C0F20003 		movt	r3, #:upper16:init_timer2_freq
 346 002c 9847     		blx	r3
  82:..//PHY/interrupts.c **** 
  83:..//PHY/interrupts.c **** 	init_timer3_freq(ONE_MS_TIMER_TIME);
 347              		.loc 1 83 0
 348 002e 40F2E730 		movw	r0, #999
 349 0032 40F20003 		movw	r3, #:lower16:init_timer3_freq
 350 0036 C0F20003 		movt	r3, #:upper16:init_timer3_freq
 351 003a 9847     		blx	r3
  84:..//PHY/interrupts.c **** 	
  85:..//PHY/interrupts.c **** 	// This runs every 1MS
  86:..//PHY/interrupts.c **** 	return 1;
 352              		.loc 1 86 0
 353 003c 4FF00103 		mov	r3, #1
  87:..//PHY/interrupts.c **** }
 354              		.loc 1 87 0
 355 0040 1846     		mov	r0, r3
 356 0042 80BD     		pop	{r7, pc}
 357              		.cfi_endproc
 358              	.LFE33:
 360              		.section	.text.start_timers,"ax",%progbits
 361              		.align	2
 362              		.global	start_timers
 363              		.thumb
 364              		.thumb_func
 366              	start_timers:
 367              	.LFB34:
  88:..//PHY/interrupts.c **** 
  89:..//PHY/interrupts.c **** 
  90:..//PHY/interrupts.c **** void start_timers(void){
 368              		.loc 1 90 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 1, uses_anonymous_args = 0
 372 0000 80B5     		push	{r7, lr}
 373              	.LCFI10:
 374              		.cfi_def_cfa_offset 8
 375 0002 00AF     		add	r7, sp, #0
 376              		.cfi_offset 14, -4
 377              		.cfi_offset 7, -8
 378              	.LCFI11:
 379              		.cfi_def_cfa_register 7
  91:..//PHY/interrupts.c ****     enable_timer(LPC_TIM0);
 380              		.loc 1 91 0
 381 0004 44F20000 		movw	r0, #:lower16:1073758208
 382 0008 C4F20000 		movt	r0, #:upper16:1073758208
 383 000c 40F20003 		movw	r3, #:lower16:enable_timer
 384 0010 C0F20003 		movt	r3, #:upper16:enable_timer
 385 0014 9847     		blx	r3
  92:..//PHY/interrupts.c ****     enable_timer(LPC_TIM1);
 386              		.loc 1 92 0
 387 0016 48F20000 		movw	r0, #:lower16:1073774592
 388 001a C4F20000 		movt	r0, #:upper16:1073774592
 389 001e 40F20003 		movw	r3, #:lower16:enable_timer
 390 0022 C0F20003 		movt	r3, #:upper16:enable_timer
 391 0026 9847     		blx	r3
  93:..//PHY/interrupts.c ****     enable_timer(LPC_TIM2);
 392              		.loc 1 93 0
 393 0028 40F20000 		movw	r0, #:lower16:1074331648
 394 002c C4F20900 		movt	r0, #:upper16:1074331648
 395 0030 40F20003 		movw	r3, #:lower16:enable_timer
 396 0034 C0F20003 		movt	r3, #:upper16:enable_timer
 397 0038 9847     		blx	r3
  94:..//PHY/interrupts.c ****     enable_timer(LPC_TIM3);
 398              		.loc 1 94 0
 399 003a 44F20000 		movw	r0, #:lower16:1074348032
 400 003e C4F20900 		movt	r0, #:upper16:1074348032
 401 0042 40F20003 		movw	r3, #:lower16:enable_timer
 402 0046 C0F20003 		movt	r3, #:upper16:enable_timer
 403 004a 9847     		blx	r3
  95:..//PHY/interrupts.c **** }
 404              		.loc 1 95 0
 405 004c 80BD     		pop	{r7, pc}
 406              		.cfi_endproc
 407              	.LFE34:
 409 004e 00BF     		.text
 410              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 interrupts.c
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:24     .text.TIMER3_IRQHandler:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:29     .text.TIMER3_IRQHandler:00000000 TIMER3_IRQHandler
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:77     .text.TIMER1_IRQHandler:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:82     .text.TIMER1_IRQHandler:00000000 TIMER1_IRQHandler
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:113    .text.TIMER2_IRQHandler:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:118    .text.TIMER2_IRQHandler:00000000 TIMER2_IRQHandler
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:149    .text.TIMER0_IRQHandler:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:154    .text.TIMER0_IRQHandler:00000000 TIMER0_IRQHandler
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:313    .text.init_timers:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:318    .text.init_timers:00000000 init_timers
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:361    .text.start_timers:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccNZ0Kle.s:366    .text.start_timers:00000000 start_timers
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
delay_timer_32
io_update
update_sm_operation_every_1ms
Move_Motor
TIM_ClearIntPending
Make_Pulses
Pulse_Clear
Uart_ChkRcv2
modbus2
Uart_GetC2
ring_clear
VCOM_ChkRcv
modbusUSB
VCOM_GetCh
init_timer0_freq
init_timer1_freq
init_timer2_freq
init_timer3_freq
enable_timer
