   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"multi-steppers.c"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.comm	periodns,4,4
  24              		.comm	periodfp,4,4
  25              		.comm	freqscale,4,4
  26              		.comm	accelscale,4,4
  27              		.comm	dtns,4,4
  28              		.comm	dt,4,4
  29              		.comm	recip_dt,4,4
  30              		.comm	g_stepgen,208,8
  31              		.comm	Profiler,112,4
  32              		.global	trig_update_freq
  33              		.section	.bss.trig_update_freq,"aw",%nobits
  34              		.align	2
  37              	trig_update_freq:
  38 0000 00000000 		.space	4
  39              		.global	modbus_data_complete
  40              		.section	.bss.modbus_data_complete,"aw",%nobits
  41              		.align	2
  44              	modbus_data_complete:
  45 0000 00000000 		.space	4
  46              		.global	ring_slaveID
  47              		.section	.bss.ring_slaveID,"aw",%nobits
  50              	ring_slaveID:
  51 0000 00       		.space	1
  52              		.global	PULSE_PORT_NUM
  53              		.section	.bss.PULSE_PORT_NUM,"aw",%nobits
  54              		.align	2
  57              	PULSE_PORT_NUM:
  58 0000 00000000 		.space	16
  58      00000000 
  58      00000000 
  58      00000000 
  59              		.global	PULSE_PORT_SET_NUM
  60              		.section	.data.PULSE_PORT_SET_NUM,"aw",%progbits
  61              		.align	2
  64              	PULSE_PORT_SET_NUM:
  65 0000 18C00920 		.word	537509912
  66 0004 18C00920 		.word	537509912
  67 0008 18C00920 		.word	537509912
  68 000c 18C00920 		.word	537509912
  69              		.global	PULSE_PORT_CLEAR_NUM
  70              		.section	.data.PULSE_PORT_CLEAR_NUM,"aw",%progbits
  71              		.align	2
  74              	PULSE_PORT_CLEAR_NUM:
  75 0000 1CC00920 		.word	537509916
  76 0004 1CC00920 		.word	537509916
  77 0008 1CC00920 		.word	537509916
  78 000c 1CC00920 		.word	537509916
  79              		.global	PULSE_PORT_DIR_NUM
  80              		.section	.data.PULSE_PORT_DIR_NUM,"aw",%progbits
  81              		.align	2
  84              	PULSE_PORT_DIR_NUM:
  85 0000 00C00920 		.word	537509888
  86 0004 00C00920 		.word	537509888
  87 0008 00C00920 		.word	537509888
  88 000c 00C00920 		.word	537509888
  89              		.global	PULSE_PIN_OFFSET_NUM
  90              		.section	.data.PULSE_PIN_OFFSET_NUM,"aw",%progbits
  91              		.align	2
  94              	PULSE_PIN_OFFSET_NUM:
  95 0000 13000000 		.word	19
  96 0004 15000000 		.word	21
  97 0008 17000000 		.word	23
  98 000c 19000000 		.word	25
  99              		.global	DIR_PORT_NUM
 100              		.section	.bss.DIR_PORT_NUM,"aw",%nobits
 101              		.align	2
 104              	DIR_PORT_NUM:
 105 0000 00000000 		.space	16
 105      00000000 
 105      00000000 
 105      00000000 
 106              		.global	DIR_PORT_SET_NUM
 107              		.section	.data.DIR_PORT_SET_NUM,"aw",%progbits
 108              		.align	2
 111              	DIR_PORT_SET_NUM:
 112 0000 18C00920 		.word	537509912
 113 0004 18C00920 		.word	537509912
 114 0008 18C00920 		.word	537509912
 115 000c 18C00920 		.word	537509912
 116              		.global	DIR_PORT_CLEAR_NUM
 117              		.section	.data.DIR_PORT_CLEAR_NUM,"aw",%progbits
 118              		.align	2
 121              	DIR_PORT_CLEAR_NUM:
 122 0000 1CC00920 		.word	537509916
 123 0004 1CC00920 		.word	537509916
 124 0008 1CC00920 		.word	537509916
 125 000c 1CC00920 		.word	537509916
 126              		.global	DIR_PORT_DIR_NUM
 127              		.section	.data.DIR_PORT_DIR_NUM,"aw",%progbits
 128              		.align	2
 131              	DIR_PORT_DIR_NUM:
 132 0000 00C00920 		.word	537509888
 133 0004 00C00920 		.word	537509888
 134 0008 00C00920 		.word	537509888
 135 000c 00C00920 		.word	537509888
 136              		.global	DIR_PIN_OFFSET_NUM
 137              		.section	.data.DIR_PIN_OFFSET_NUM,"aw",%progbits
 138              		.align	2
 141              	DIR_PIN_OFFSET_NUM:
 142 0000 14000000 		.word	20
 143 0004 16000000 		.word	22
 144 0008 18000000 		.word	24
 145 000c 1A000000 		.word	26
 146              		.section	.text.Move_Motor,"ax",%progbits
 147              		.align	2
 148              		.global	Move_Motor
 149              		.thumb
 150              		.thumb_func
 152              	Move_Motor:
 153              	.LFB29:
 154              		.file 1 "..//utils/multi-steppers/multi-steppers.c"
   1:..//utils/multi-steppers/multi-steppers.c **** #include <stdlib.h>
   2:..//utils/multi-steppers/multi-steppers.c **** #include "multi-steppers.h"
   3:..//utils/multi-steppers/multi-steppers.c **** #include "timer.h"
   4:..//utils/multi-steppers/multi-steppers.c **** #include "input_output.h"
   5:..//utils/multi-steppers/multi-steppers.c **** #include "uart.h"
   6:..//utils/multi-steppers/multi-steppers.c **** 
   7:..//utils/multi-steppers/multi-steppers.c **** //variables
   8:..//utils/multi-steppers/multi-steppers.c **** int32_t periodns;// = 1e9/MAKE_PULSES_FREQ;  // time in ns for freq of execution of makepulses
   9:..//utils/multi-steppers/multi-steppers.c **** float periodfp;// = 1/MAKE_PULSES_FREQ;		// time in s
  10:..//utils/multi-steppers/multi-steppers.c **** float freqscale;// = (1L <<PICKOFF) *periodfp;
  11:..//utils/multi-steppers/multi-steppers.c **** float accelscale;// = freqscale * periodfp;
  12:..//utils/multi-steppers/multi-steppers.c **** int32_t dtns;// = 1e9/FREQ_UPDATE_FREQ;								// period of update_freq in ns
  13:..//utils/multi-steppers/multi-steppers.c **** float dt;// = 1/UPDATE_FREQ_FREQ;									// update freq period in secs.
  14:..//utils/multi-steppers/multi-steppers.c **** float recip_dt;// = UPDATE_FREQ_FREQ;								// reciprocal of dt period
  15:..//utils/multi-steppers/multi-steppers.c **** 
  16:..//utils/multi-steppers/multi-steppers.c **** 
  17:..//utils/multi-steppers/multi-steppers.c **** stepper_struct g_stepgen[NUM_AXES];
  18:..//utils/multi-steppers/multi-steppers.c **** profiler_t Profiler[NUM_AXES];
  19:..//utils/multi-steppers/multi-steppers.c **** 
  20:..//utils/multi-steppers/multi-steppers.c **** static uint32_t ulceil(uint32_t value, uint32_t increment);
  21:..//utils/multi-steppers/multi-steppers.c **** int trig_update_freq = 0;
  22:..//utils/multi-steppers/multi-steppers.c **** 
  23:..//utils/multi-steppers/multi-steppers.c **** int modbus_data_complete = 0;
  24:..//utils/multi-steppers/multi-steppers.c **** char ring_slaveID = 0;
  25:..//utils/multi-steppers/multi-steppers.c **** 
  26:..//utils/multi-steppers/multi-steppers.c **** // int update_spi_state_machine_every_1ms();
  27:..//utils/multi-steppers/multi-steppers.c **** int update_next_motor_position_every_1ms();
  28:..//utils/multi-steppers/multi-steppers.c **** // int update_sm_operation_every_1ms();
  29:..//utils/multi-steppers/multi-steppers.c **** 
  30:..//utils/multi-steppers/multi-steppers.c **** #ifdef MULTI_STEPPERS_DIFFERENT_PORTS
  31:..//utils/multi-steppers/multi-steppers.c **** int PULSE_PORT_NUM[4] = {
  32:..//utils/multi-steppers/multi-steppers.c **** 						PULSE_PORT1,
  33:..//utils/multi-steppers/multi-steppers.c **** 						PULSE_PORT2,
  34:..//utils/multi-steppers/multi-steppers.c **** 						PULSE_PORT3,
  35:..//utils/multi-steppers/multi-steppers.c **** 						PULSE_PORT4,					
  36:..//utils/multi-steppers/multi-steppers.c **** 					};
  37:..//utils/multi-steppers/multi-steppers.c **** 
  38:..//utils/multi-steppers/multi-steppers.c **** volatile uint32_t *PULSE_PORT_SET_NUM[4] = {
  39:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_SET1,
  40:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_SET2,
  41:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_SET3,
  42:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_SET4,
  43:..//utils/multi-steppers/multi-steppers.c **** 							};
  44:..//utils/multi-steppers/multi-steppers.c **** 							
  45:..//utils/multi-steppers/multi-steppers.c **** volatile uint32_t *PULSE_PORT_CLEAR_NUM[4]={
  46:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_CLEAR1,	
  47:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_CLEAR2,	
  48:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_CLEAR3,	
  49:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_CLEAR4,	
  50:..//utils/multi-steppers/multi-steppers.c **** 							};
  51:..//utils/multi-steppers/multi-steppers.c **** 
  52:..//utils/multi-steppers/multi-steppers.c **** volatile uint32_t *PULSE_PORT_DIR_NUM[4]={
  53:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_DIR1,
  54:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_DIR2,
  55:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_DIR3,
  56:..//utils/multi-steppers/multi-steppers.c **** 							&PULSE_PORT_DIR4,
  57:..//utils/multi-steppers/multi-steppers.c **** 							};
  58:..//utils/multi-steppers/multi-steppers.c **** 
  59:..//utils/multi-steppers/multi-steppers.c **** int PULSE_PIN_OFFSET_NUM[4]={	
  60:..//utils/multi-steppers/multi-steppers.c **** 							PULSE_PIN_OFFSET1,
  61:..//utils/multi-steppers/multi-steppers.c **** 							PULSE_PIN_OFFSET2,
  62:..//utils/multi-steppers/multi-steppers.c **** 							PULSE_PIN_OFFSET3,
  63:..//utils/multi-steppers/multi-steppers.c **** 							PULSE_PIN_OFFSET4,
  64:..//utils/multi-steppers/multi-steppers.c **** 							};							
  65:..//utils/multi-steppers/multi-steppers.c **** 					
  66:..//utils/multi-steppers/multi-steppers.c **** int DIR_PORT_NUM[4] = {
  67:..//utils/multi-steppers/multi-steppers.c **** 					DIR_PORT1,
  68:..//utils/multi-steppers/multi-steppers.c **** 					DIR_PORT2,
  69:..//utils/multi-steppers/multi-steppers.c **** 					DIR_PORT3,
  70:..//utils/multi-steppers/multi-steppers.c **** 					DIR_PORT4,
  71:..//utils/multi-steppers/multi-steppers.c **** 				};
  72:..//utils/multi-steppers/multi-steppers.c **** 
  73:..//utils/multi-steppers/multi-steppers.c **** volatile uint32_t *DIR_PORT_SET_NUM[4]={
  74:..//utils/multi-steppers/multi-steppers.c **** 						&DIR_PORT_SET1,
  75:..//utils/multi-steppers/multi-steppers.c **** 						&DIR_PORT_SET2,
  76:..//utils/multi-steppers/multi-steppers.c **** 						&DIR_PORT_SET3,
  77:..//utils/multi-steppers/multi-steppers.c **** 						&DIR_PORT_SET4,
  78:..//utils/multi-steppers/multi-steppers.c **** 						};
  79:..//utils/multi-steppers/multi-steppers.c **** 
  80:..//utils/multi-steppers/multi-steppers.c **** volatile uint32_t *DIR_PORT_CLEAR_NUM[4]={
  81:..//utils/multi-steppers/multi-steppers.c **** 							&DIR_PORT_CLEAR1,
  82:..//utils/multi-steppers/multi-steppers.c **** 							&DIR_PORT_CLEAR2,
  83:..//utils/multi-steppers/multi-steppers.c **** 							&DIR_PORT_CLEAR3,
  84:..//utils/multi-steppers/multi-steppers.c **** 							&DIR_PORT_CLEAR4,
  85:..//utils/multi-steppers/multi-steppers.c **** 							};
  86:..//utils/multi-steppers/multi-steppers.c **** 
  87:..//utils/multi-steppers/multi-steppers.c **** volatile uint32_t *DIR_PORT_DIR_NUM[4]={
  88:..//utils/multi-steppers/multi-steppers.c **** 						&DIR_PORT_DIR1,
  89:..//utils/multi-steppers/multi-steppers.c **** 						&DIR_PORT_DIR2,
  90:..//utils/multi-steppers/multi-steppers.c **** 						&DIR_PORT_DIR3,
  91:..//utils/multi-steppers/multi-steppers.c **** 						&DIR_PORT_DIR4,
  92:..//utils/multi-steppers/multi-steppers.c **** 						};
  93:..//utils/multi-steppers/multi-steppers.c **** 
  94:..//utils/multi-steppers/multi-steppers.c **** int DIR_PIN_OFFSET_NUM[4]={
  95:..//utils/multi-steppers/multi-steppers.c **** 						DIR_PIN_OFFSET1,
  96:..//utils/multi-steppers/multi-steppers.c **** 						DIR_PIN_OFFSET2,
  97:..//utils/multi-steppers/multi-steppers.c **** 						DIR_PIN_OFFSET3,
  98:..//utils/multi-steppers/multi-steppers.c **** 						DIR_PIN_OFFSET4,
  99:..//utils/multi-steppers/multi-steppers.c **** 						};
 100:..//utils/multi-steppers/multi-steppers.c **** #else
 101:..//utils/multi-steppers/multi-steppers.c **** static uint32_t CLEAR_ALL_MOTOR_PULSE_OUTPUTS =0;
 102:..//utils/multi-steppers/multi-steppers.c **** static uint32_t fio_pulse_reg_set;
 103:..//utils/multi-steppers/multi-steppers.c **** static uint32_t fio_pulse_reg_clr;
 104:..//utils/multi-steppers/multi-steppers.c **** static uint32_t fio_dir_reg_set;
 105:..//utils/multi-steppers/multi-steppers.c **** static uint32_t fio_dir_reg_clr;	
 106:..//utils/multi-steppers/multi-steppers.c **** 
 107:..//utils/multi-steppers/multi-steppers.c **** static uint32_t make_pulses_GPIO_Set (uint32_t *reg, GPIOpin_t *p);
 108:..//utils/multi-steppers/multi-steppers.c **** static uint32_t make_pulses_GPIO_Clear (uint32_t *reg, GPIOpin_t *p);					
 109:..//utils/multi-steppers/multi-steppers.c **** #endif
 110:..//utils/multi-steppers/multi-steppers.c **** 
 111:..//utils/multi-steppers/multi-steppers.c **** void Move_Motor(void){	//this invoking on 1mSEC
 155              		.loc 1 111 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 80B5     		push	{r7, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 8
 162 0002 00AF     		add	r7, sp, #0
 163              		.cfi_offset 14, -4
 164              		.cfi_offset 7, -8
 165              	.LCFI1:
 166              		.cfi_def_cfa_register 7
 112:..//utils/multi-steppers/multi-steppers.c **** 	
 113:..//utils/multi-steppers/multi-steppers.c **** 	#if NUM_AXES > 0
 114:..//utils/multi-steppers/multi-steppers.c **** 		stepper_move_motor(MOTOR0);
 167              		.loc 1 114 0
 168 0004 4FF00000 		mov	r0, #0
 169 0008 40F20003 		movw	r3, #:lower16:stepper_move_motor
 170 000c C0F20003 		movt	r3, #:upper16:stepper_move_motor
 171 0010 9847     		blx	r3
 115:..//utils/multi-steppers/multi-steppers.c **** 	#if NUM_AXES > 1
 116:..//utils/multi-steppers/multi-steppers.c **** 		stepper_move_motor(MOTOR1);
 172              		.loc 1 116 0
 173 0012 4FF00100 		mov	r0, #1
 174 0016 40F20003 		movw	r3, #:lower16:stepper_move_motor
 175 001a C0F20003 		movt	r3, #:upper16:stepper_move_motor
 176 001e 9847     		blx	r3
 117:..//utils/multi-steppers/multi-steppers.c **** 	#if NUM_AXES > 2
 118:..//utils/multi-steppers/multi-steppers.c **** 		stepper_move_motor(MOTOR2);
 119:..//utils/multi-steppers/multi-steppers.c **** 	#if NUM_AXES > 3
 120:..//utils/multi-steppers/multi-steppers.c **** 		stepper_move_motor(MOTOR3);
 121:..//utils/multi-steppers/multi-steppers.c **** 	#endif
 122:..//utils/multi-steppers/multi-steppers.c **** 	#endif
 123:..//utils/multi-steppers/multi-steppers.c **** 	#endif
 124:..//utils/multi-steppers/multi-steppers.c **** 	#endif
 125:..//utils/multi-steppers/multi-steppers.c **** 	stepper_update_freq();	
 177              		.loc 1 125 0
 178 0020 40F20003 		movw	r3, #:lower16:stepper_update_freq
 179 0024 C0F20003 		movt	r3, #:upper16:stepper_update_freq
 180 0028 9847     		blx	r3
 126:..//utils/multi-steppers/multi-steppers.c **** }
 181              		.loc 1 126 0
 182 002a 80BD     		pop	{r7, pc}
 183              		.cfi_endproc
 184              	.LFE29:
 186              		.section	.text.Make_Pulses,"ax",%progbits
 187              		.align	2
 188              		.global	Make_Pulses
 189              		.thumb
 190              		.thumb_func
 192              	Make_Pulses:
 193              	.LFB30:
 127:..//utils/multi-steppers/multi-steppers.c **** 
 128:..//utils/multi-steppers/multi-steppers.c **** void Make_Pulses(void){ //this invoking on 50uSEC
 194              		.loc 1 128 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 1, uses_anonymous_args = 0
 198 0000 80B5     		push	{r7, lr}
 199              	.LCFI2:
 200              		.cfi_def_cfa_offset 8
 201 0002 00AF     		add	r7, sp, #0
 202              		.cfi_offset 14, -4
 203              		.cfi_offset 7, -8
 204              	.LCFI3:
 205              		.cfi_def_cfa_register 7
 129:..//utils/multi-steppers/multi-steppers.c **** 	
 130:..//utils/multi-steppers/multi-steppers.c **** 	stepper_make_pulses();
 206              		.loc 1 130 0
 207 0004 40F20003 		movw	r3, #:lower16:stepper_make_pulses
 208 0008 C0F20003 		movt	r3, #:upper16:stepper_make_pulses
 209 000c 9847     		blx	r3
 131:..//utils/multi-steppers/multi-steppers.c **** 
 132:..//utils/multi-steppers/multi-steppers.c **** 	MULTI_STEPPER_PULSE_CLEAR_TIMER;
 210              		.loc 1 132 0
 211 000e 48F20000 		movw	r0, #:lower16:1073774592
 212 0012 C4F20000 		movt	r0, #:upper16:1073774592
 213 0016 40F20003 		movw	r3, #:lower16:enable_timer
 214 001a C0F20003 		movt	r3, #:upper16:enable_timer
 215 001e 9847     		blx	r3
 133:..//utils/multi-steppers/multi-steppers.c **** 	
 134:..//utils/multi-steppers/multi-steppers.c **** 	// TIM_ClearIntPending(LPC_TIM1, TIM_MR0_INT);
 135:..//utils/multi-steppers/multi-steppers.c **** }
 216              		.loc 1 135 0
 217 0020 80BD     		pop	{r7, pc}
 218              		.cfi_endproc
 219              	.LFE30:
 221 0022 00BF     		.section	.text.Pulse_Clear,"ax",%progbits
 222              		.align	2
 223              		.global	Pulse_Clear
 224              		.thumb
 225              		.thumb_func
 227              	Pulse_Clear:
 228              	.LFB31:
 136:..//utils/multi-steppers/multi-steppers.c **** 
 137:..//utils/multi-steppers/multi-steppers.c **** void Pulse_Clear(void){ ////this invoking on 5uSEC
 229              		.loc 1 137 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234 0000 80B4     		push	{r7}
 235              	.LCFI4:
 236              		.cfi_def_cfa_offset 4
 237 0002 00AF     		add	r7, sp, #0
 238              		.cfi_offset 7, -4
 239              	.LCFI5:
 240              		.cfi_def_cfa_register 7
 138:..//utils/multi-steppers/multi-steppers.c **** #ifdef MULTI_STEPPERS_DIFFERENT_PORTS	
 139:..//utils/multi-steppers/multi-steppers.c **** 	#if NUM_AXES > 0		
 140:..//utils/multi-steppers/multi-steppers.c **** 		PULSE_PORT_CLEAR1 = PULSE_PIN_SHIFT1;
 241              		.loc 1 140 0
 242 0004 4CF20003 		movw	r3, #:lower16:537509888
 243 0008 C2F20903 		movt	r3, #:upper16:537509888
 244 000c 4FF40022 		mov	r2, #524288
 245 0010 DA61     		str	r2, [r3, #28]
 141:..//utils/multi-steppers/multi-steppers.c **** 	#if NUM_AXES > 1		
 142:..//utils/multi-steppers/multi-steppers.c **** 		PULSE_PORT_CLEAR2 = PULSE_PIN_SHIFT2;
 246              		.loc 1 142 0
 247 0012 4CF20003 		movw	r3, #:lower16:537509888
 248 0016 C2F20903 		movt	r3, #:upper16:537509888
 249 001a 4FF40012 		mov	r2, #2097152
 250 001e DA61     		str	r2, [r3, #28]
 143:..//utils/multi-steppers/multi-steppers.c **** 	#if NUM_AXES > 2		
 144:..//utils/multi-steppers/multi-steppers.c **** 		PULSE_PORT_CLEAR3 = PULSE_PIN_SHIFT3;
 145:..//utils/multi-steppers/multi-steppers.c **** 	#if NUM_AXES > 3		
 146:..//utils/multi-steppers/multi-steppers.c **** 		PULSE_PORT_CLEAR4 = PULSE_PIN_SHIFT4;
 147:..//utils/multi-steppers/multi-steppers.c **** 	#endif
 148:..//utils/multi-steppers/multi-steppers.c **** 	#endif
 149:..//utils/multi-steppers/multi-steppers.c **** 	#endif
 150:..//utils/multi-steppers/multi-steppers.c **** 	#endif
 151:..//utils/multi-steppers/multi-steppers.c **** #else
 152:..//utils/multi-steppers/multi-steppers.c **** 	PULSE_PORT_CLEAR = CLEAR_ALL_MOTOR_PULSE_OUTPUTS;
 153:..//utils/multi-steppers/multi-steppers.c **** #endif
 154:..//utils/multi-steppers/multi-steppers.c **** 	
 155:..//utils/multi-steppers/multi-steppers.c **** }
 251              		.loc 1 155 0
 252 0020 BD46     		mov	sp, r7
 253 0022 80BC     		pop	{r7}
 254 0024 7047     		bx	lr
 255              		.cfi_endproc
 256              	.LFE31:
 258 0026 00BF     		.section	.text.stepper_make_pulses,"ax",%progbits
 259              		.align	2
 260              		.global	stepper_make_pulses
 261              		.thumb
 262              		.thumb_func
 264              	stepper_make_pulses:
 265              	.LFB32:
 156:..//utils/multi-steppers/multi-steppers.c **** 
 157:..//utils/multi-steppers/multi-steppers.c **** // void TIMER3_IRQHandler(void){
 158:..//utils/multi-steppers/multi-steppers.c **** // 	ring_slaveID = Uart_GetC2(); //store slaveId here
 159:..//utils/multi-steppers/multi-steppers.c **** // 	if(ring_slaveID != (&modbus2)->slaveID){ //not my data...  clear ring
 160:..//utils/multi-steppers/multi-steppers.c **** // 		ring_clear((&modbus2)->ring_address);
 161:..//utils/multi-steppers/multi-steppers.c **** // 	}else{ //my data
 162:..//utils/multi-steppers/multi-steppers.c **** // 		modbus_data_complete = 1;
 163:..//utils/multi-steppers/multi-steppers.c **** // 	}
 164:..//utils/multi-steppers/multi-steppers.c **** // 	TIM_ClearIntPending(LPC_TIM3, TIM_MR0_INT);
 165:..//utils/multi-steppers/multi-steppers.c **** // }
 166:..//utils/multi-steppers/multi-steppers.c **** 
 167:..//utils/multi-steppers/multi-steppers.c **** #ifdef MULTI_STEPPERS_DIFFERENT_PORTS	
 168:..//utils/multi-steppers/multi-steppers.c **** 	#if 0
 169:..//utils/multi-steppers/multi-steppers.c **** 	static uint32_t make_pulses_GPIO_Set_Port (uint32_t * reg, GPIOpin_t *p){
 170:..//utils/multi-steppers/multi-steppers.c **** 		*reg |= (1<< p->pin_num);
 171:..//utils/multi-steppers/multi-steppers.c **** 	}
 172:..//utils/multi-steppers/multi-steppers.c **** 	static uint32_t make_pulses_GPIO_Clear_Port (uint32_t * reg, GPIOpin_t *p){
 173:..//utils/multi-steppers/multi-steppers.c **** 		*reg |= (1<< p->pin_num);
 174:..//utils/multi-steppers/multi-steppers.c **** 	}
 175:..//utils/multi-steppers/multi-steppers.c **** 	#endif
 176:..//utils/multi-steppers/multi-steppers.c **** #else	
 177:..//utils/multi-steppers/multi-steppers.c **** 	static uint32_t make_pulses_GPIO_Set (uint32_t * reg, GPIOpin_t *p){
 178:..//utils/multi-steppers/multi-steppers.c **** 		*reg |= (1<< p->pin_num);
 179:..//utils/multi-steppers/multi-steppers.c **** 		return *reg;
 180:..//utils/multi-steppers/multi-steppers.c **** 	}
 181:..//utils/multi-steppers/multi-steppers.c **** 
 182:..//utils/multi-steppers/multi-steppers.c **** 	static uint32_t make_pulses_GPIO_Clear (uint32_t* reg, GPIOpin_t *p){
 183:..//utils/multi-steppers/multi-steppers.c **** 		// FIO0SET |= (1<<4);
 184:..//utils/multi-steppers/multi-steppers.c **** 		*reg |= (1<< p->pin_num);
 185:..//utils/multi-steppers/multi-steppers.c **** 		return *reg;
 186:..//utils/multi-steppers/multi-steppers.c **** 	}
 187:..//utils/multi-steppers/multi-steppers.c **** #endif
 188:..//utils/multi-steppers/multi-steppers.c **** 
 189:..//utils/multi-steppers/multi-steppers.c **** /*** This func has no float or divide operations
 190:..//utils/multi-steppers/multi-steppers.c **** 
 191:..//utils/multi-steppers/multi-steppers.c **** ***/
 192:..//utils/multi-steppers/multi-steppers.c **** int stepper_make_pulses(void)
 193:..//utils/multi-steppers/multi-steppers.c **** {
 266              		.loc 1 193 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 24
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 271 0000 B0B4     		push	{r4, r5, r7}
 272              	.LCFI6:
 273              		.cfi_def_cfa_offset 12
 274 0002 87B0     		sub	sp, sp, #28
 275              	.LCFI7:
 276              		.cfi_def_cfa_offset 40
 277 0004 00AF     		add	r7, sp, #0
 278              		.cfi_offset 7, -4
 279              		.cfi_offset 5, -8
 280              		.cfi_offset 4, -12
 281              	.LCFI8:
 282              		.cfi_def_cfa_register 7
 194:..//utils/multi-steppers/multi-steppers.c **** 	int i;
 195:..//utils/multi-steppers/multi-steppers.c **** 	stepper_struct *stepgen;
 196:..//utils/multi-steppers/multi-steppers.c **** 	// this needs to be done elsewhere... and just used here..
 197:..//utils/multi-steppers/multi-steppers.c **** 	//uint32_t periodns = (1e9/MAKE_PULSES_FREQ);	
 198:..//utils/multi-steppers/multi-steppers.c **** 	
 199:..//utils/multi-steppers/multi-steppers.c **** 	int32_t old_addval, target_addval, new_addval, step_now;
 200:..//utils/multi-steppers/multi-steppers.c **** #ifdef MULTI_STEPPERS_DIFFERENT_PORTS
 201:..//utils/multi-steppers/multi-steppers.c **** #else
 202:..//utils/multi-steppers/multi-steppers.c **** 	fio_pulse_reg_set = 0;	
 203:..//utils/multi-steppers/multi-steppers.c **** 	fio_pulse_reg_clr = 0;	
 204:..//utils/multi-steppers/multi-steppers.c **** 	fio_dir_reg_set = 0;
 205:..//utils/multi-steppers/multi-steppers.c **** 	fio_dir_reg_clr = 0;	
 206:..//utils/multi-steppers/multi-steppers.c **** #endif
 207:..//utils/multi-steppers/multi-steppers.c **** 	
 208:..//utils/multi-steppers/multi-steppers.c **** 	for (i = 0; i < NUM_AXES; i++){	// for each axes...
 283              		.loc 1 208 0
 284 0006 4FF00001 		mov	r1, #0
 285 000a 3960     		str	r1, [r7, #0]
 286 000c 99E0     		b	.L8
 287              	.L13:
 209:..//utils/multi-steppers/multi-steppers.c **** 		stepgen = &g_stepgen[i];
 288              		.loc 1 209 0
 289 000e 3968     		ldr	r1, [r7, #0]
 290 0010 4FF06800 		mov	r0, #104
 291 0014 00FB01F0 		mul	r0, r0, r1
 292 0018 40F20001 		movw	r1, #:lower16:g_stepgen
 293 001c C0F20001 		movt	r1, #:upper16:g_stepgen
 294 0020 0144     		add	r1, r0, r1
 295 0022 7960     		str	r1, [r7, #4]
 210:..//utils/multi-steppers/multi-steppers.c **** 
 211:..//utils/multi-steppers/multi-steppers.c **** 		old_addval = stepgen->addval;
 296              		.loc 1 211 0
 297 0024 7968     		ldr	r1, [r7, #4]
 298 0026 4968     		ldr	r1, [r1, #4]
 299 0028 B960     		str	r1, [r7, #8]
 212:..//utils/multi-steppers/multi-steppers.c **** 		target_addval = stepgen->target_addval;
 300              		.loc 1 212 0
 301 002a 7968     		ldr	r1, [r7, #4]
 302 002c 496A     		ldr	r1, [r1, #36]
 303 002e F960     		str	r1, [r7, #12]
 213:..//utils/multi-steppers/multi-steppers.c **** 		
 214:..//utils/multi-steppers/multi-steppers.c **** 		// assume that new value can be reached in 1 period and no rate limiting is required
 215:..//utils/multi-steppers/multi-steppers.c **** 		new_addval = target_addval;
 304              		.loc 1 215 0
 305 0030 F968     		ldr	r1, [r7, #12]
 306 0032 3961     		str	r1, [r7, #16]
 216:..//utils/multi-steppers/multi-steppers.c **** 
 217:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->addval = new_addval;
 307              		.loc 1 217 0
 308 0034 7968     		ldr	r1, [r7, #4]
 309 0036 3869     		ldr	r0, [r7, #16]
 310 0038 4860     		str	r0, [r1, #4]
 218:..//utils/multi-steppers/multi-steppers.c **** 		// check for direction reversal..
 219:..//utils/multi-steppers/multi-steppers.c **** 
 220:..//utils/multi-steppers/multi-steppers.c **** 		// save lower half of accum...
 221:..//utils/multi-steppers/multi-steppers.c **** 		step_now = stepgen->accum;
 311              		.loc 1 221 0
 312 003a 7968     		ldr	r1, [r7, #4]
 313 003c D1E90201 		ldrd	r0, [r1, #8]
 314 0040 0146     		mov	r1, r0
 315 0042 7961     		str	r1, [r7, #20]
 222:..//utils/multi-steppers/multi-steppers.c **** 		// update the accumulator...
 223:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->accum += stepgen->addval;
 316              		.loc 1 223 0
 317 0044 7968     		ldr	r1, [r7, #4]
 318 0046 D1E90245 		ldrd	r4, [r1, #8]
 319 004a 7968     		ldr	r1, [r7, #4]
 320 004c 4968     		ldr	r1, [r1, #4]
 321 004e 0846     		mov	r0, r1
 322 0050 4FEAE071 		asr	r1, r0, #31
 323 0054 0019     		adds	r0, r0, r4
 324 0056 41EB0501 		adc	r1, r1, r5
 325 005a D7F804C0 		ldr	ip, [r7, #4]
 326 005e CCE90201 		strd	r0, [ip, #8]
 224:..//utils/multi-steppers/multi-steppers.c **** 		// test for changes (only in lower half)...
 225:..//utils/multi-steppers/multi-steppers.c **** 		step_now ^= stepgen->accum;
 327              		.loc 1 225 0
 328 0062 7968     		ldr	r1, [r7, #4]
 329 0064 D1E90201 		ldrd	r0, [r1, #8]
 330 0068 0146     		mov	r1, r0
 331 006a 7869     		ldr	r0, [r7, #20]
 332 006c 80EA0101 		eor	r1, r0, r1
 333 0070 7961     		str	r1, [r7, #20]
 226:..//utils/multi-steppers/multi-steppers.c **** 		// we only care about the pickoff bit...
 227:..//utils/multi-steppers/multi-steppers.c **** 		step_now &= LONG_PICKOFF;
 334              		.loc 1 227 0
 335 0072 7969     		ldr	r1, [r7, #20]
 336 0074 01F08051 		and	r1, r1, #268435456
 337 0078 7961     		str	r1, [r7, #20]
 228:..//utils/multi-steppers/multi-steppers.c **** 		// sprintf(str,"\nstep_nw %x",step_now);
 229:..//utils/multi-steppers/multi-steppers.c **** 		// print_string(str);
 230:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->rawcount = stepgen->accum >> PICKOFF;
 338              		.loc 1 230 0
 339 007a 7968     		ldr	r1, [r7, #4]
 340 007c D1E90201 		ldrd	r0, [r1, #8]
 341 0080 4FEA011C 		lsl	ip, r1, #4
 342 0084 4FEA1072 		lsr	r2, r0, #28
 343 0088 4CEA0202 		orr	r2, ip, r2
 344 008c 4FEA2173 		asr	r3, r1, #28
 345 0090 1046     		mov	r0, r2
 346 0092 7968     		ldr	r1, [r7, #4]
 347 0094 0861     		str	r0, [r1, #16]
 231:..//utils/multi-steppers/multi-steppers.c **** 		
 232:..//utils/multi-steppers/multi-steppers.c **** 		// donot change direction if addval = 0;
 233:..//utils/multi-steppers/multi-steppers.c **** 		
 234:..//utils/multi-steppers/multi-steppers.c **** 		if (stepgen->addval >0) {
 348              		.loc 1 234 0
 349 0096 7968     		ldr	r1, [r7, #4]
 350 0098 4968     		ldr	r1, [r1, #4]
 351 009a 0029     		cmp	r1, #0
 352 009c 04DD     		ble	.L9
 235:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->curr_dir = 1;
 353              		.loc 1 235 0
 354 009e 7968     		ldr	r1, [r7, #4]
 355 00a0 4FF00100 		mov	r0, #1
 356 00a4 4861     		str	r0, [r1, #20]
 357 00a6 07E0     		b	.L10
 358              	.L9:
 236:..//utils/multi-steppers/multi-steppers.c **** 		} else if (stepgen->addval <0){
 359              		.loc 1 236 0
 360 00a8 7968     		ldr	r1, [r7, #4]
 361 00aa 4968     		ldr	r1, [r1, #4]
 362 00ac 0029     		cmp	r1, #0
 363 00ae 03DA     		bge	.L10
 237:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->curr_dir = -1;
 364              		.loc 1 237 0
 365 00b0 7968     		ldr	r1, [r7, #4]
 366 00b2 4FF0FF30 		mov	r0, #-1
 367 00b6 4861     		str	r0, [r1, #20]
 368              	.L10:
 238:..//utils/multi-steppers/multi-steppers.c **** 		}
 239:..//utils/multi-steppers/multi-steppers.c **** 				
 240:..//utils/multi-steppers/multi-steppers.c **** #ifdef MULTI_STEPPERS_DIFFERENT_PORTS
 241:..//utils/multi-steppers/multi-steppers.c **** 		if(step_now){			
 369              		.loc 1 241 0
 370 00b8 7969     		ldr	r1, [r7, #20]
 371 00ba 0029     		cmp	r1, #0
 372 00bc 3DD0     		beq	.L11
 242:..//utils/multi-steppers/multi-steppers.c **** 			*PULSE_PORT_SET_NUM[i] = 1<<stepgen->pin_pulse.pin_num;
 373              		.loc 1 242 0
 374 00be 3868     		ldr	r0, [r7, #0]
 375 00c0 40F20001 		movw	r1, #:lower16:PULSE_PORT_SET_NUM
 376 00c4 C0F20001 		movt	r1, #:upper16:PULSE_PORT_SET_NUM
 377 00c8 51F82010 		ldr	r1, [r1, r0, lsl #2]
 378 00cc 7868     		ldr	r0, [r7, #4]
 379 00ce 90F83500 		ldrb	r0, [r0, #53]	@ zero_extendqisi2
 380 00d2 4FF0010C 		mov	ip, #1
 381 00d6 0CFA00F0 		lsl	r0, ip, r0
 382 00da 0860     		str	r0, [r1, #0]
 243:..//utils/multi-steppers/multi-steppers.c **** 			if (stepgen->curr_dir < 0){
 383              		.loc 1 243 0
 384 00dc 7968     		ldr	r1, [r7, #4]
 385 00de 4969     		ldr	r1, [r1, #20]
 386 00e0 0029     		cmp	r1, #0
 387 00e2 15DA     		bge	.L12
 244:..//utils/multi-steppers/multi-steppers.c **** 				*DIR_PORT_SET_NUM[i] = 1<<stepgen->pin_dir.pin_num;
 388              		.loc 1 244 0
 389 00e4 3868     		ldr	r0, [r7, #0]
 390 00e6 40F20001 		movw	r1, #:lower16:DIR_PORT_SET_NUM
 391 00ea C0F20001 		movt	r1, #:upper16:DIR_PORT_SET_NUM
 392 00ee 51F82010 		ldr	r1, [r1, r0, lsl #2]
 393 00f2 7868     		ldr	r0, [r7, #4]
 394 00f4 90F83800 		ldrb	r0, [r0, #56]	@ zero_extendqisi2
 395 00f8 4FF0010C 		mov	ip, #1
 396 00fc 0CFA00F0 		lsl	r0, ip, r0
 397 0100 0860     		str	r0, [r1, #0]
 245:..//utils/multi-steppers/multi-steppers.c **** 				stepgen->raw_pos -= 1;
 398              		.loc 1 245 0
 399 0102 7968     		ldr	r1, [r7, #4]
 400 0104 8969     		ldr	r1, [r1, #24]
 401 0106 01F1FF30 		add	r0, r1, #-1
 402 010a 7968     		ldr	r1, [r7, #4]
 403 010c 8861     		str	r0, [r1, #24]
 404 010e 14E0     		b	.L11
 405              	.L12:
 246:..//utils/multi-steppers/multi-steppers.c **** 			}else{
 247:..//utils/multi-steppers/multi-steppers.c **** 				*DIR_PORT_CLEAR_NUM[i] = 1<<stepgen->pin_dir.pin_num;				
 406              		.loc 1 247 0
 407 0110 3868     		ldr	r0, [r7, #0]
 408 0112 40F20001 		movw	r1, #:lower16:DIR_PORT_CLEAR_NUM
 409 0116 C0F20001 		movt	r1, #:upper16:DIR_PORT_CLEAR_NUM
 410 011a 51F82010 		ldr	r1, [r1, r0, lsl #2]
 411 011e 7868     		ldr	r0, [r7, #4]
 412 0120 90F83800 		ldrb	r0, [r0, #56]	@ zero_extendqisi2
 413 0124 4FF0010C 		mov	ip, #1
 414 0128 0CFA00F0 		lsl	r0, ip, r0
 415 012c 0860     		str	r0, [r1, #0]
 248:..//utils/multi-steppers/multi-steppers.c **** 				stepgen->raw_pos += 1;
 416              		.loc 1 248 0
 417 012e 7968     		ldr	r1, [r7, #4]
 418 0130 8969     		ldr	r1, [r1, #24]
 419 0132 01F10100 		add	r0, r1, #1
 420 0136 7968     		ldr	r1, [r7, #4]
 421 0138 8861     		str	r0, [r1, #24]
 422              	.L11:
 423              		.loc 1 208 0
 424 013a 3968     		ldr	r1, [r7, #0]
 425 013c 01F10101 		add	r1, r1, #1
 426 0140 3960     		str	r1, [r7, #0]
 427              	.L8:
 428 0142 3968     		ldr	r1, [r7, #0]
 429 0144 0129     		cmp	r1, #1
 430 0146 7FF762AF 		ble	.L13
 249:..//utils/multi-steppers/multi-steppers.c **** 			}	
 250:..//utils/multi-steppers/multi-steppers.c **** 			// stepgen->raw_pos += stepgen->curr_dir;
 251:..//utils/multi-steppers/multi-steppers.c **** 		}
 252:..//utils/multi-steppers/multi-steppers.c **** #else
 253:..//utils/multi-steppers/multi-steppers.c **** 		if (step_now){
 254:..//utils/multi-steppers/multi-steppers.c **** 			make_pulses_GPIO_Set(&fio_pulse_reg_set, &(stepgen->pin_pulse));
 255:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->raw_pos += stepgen->curr_dir;
 256:..//utils/multi-steppers/multi-steppers.c **** 		}else {
 257:..//utils/multi-steppers/multi-steppers.c **** 			make_pulses_GPIO_Clear(&fio_pulse_reg_clr,&(stepgen->pin_pulse));
 258:..//utils/multi-steppers/multi-steppers.c **** 		}
 259:..//utils/multi-steppers/multi-steppers.c **** 		
 260:..//utils/multi-steppers/multi-steppers.c **** 		if (stepgen->curr_dir < 0){
 261:..//utils/multi-steppers/multi-steppers.c **** 			make_pulses_GPIO_Set(&fio_dir_reg_set,&stepgen->pin_dir);
 262:..//utils/multi-steppers/multi-steppers.c **** 		} else {
 263:..//utils/multi-steppers/multi-steppers.c **** 			make_pulses_GPIO_Clear(&fio_dir_reg_clr,&stepgen->pin_dir);
 264:..//utils/multi-steppers/multi-steppers.c **** 		}
 265:..//utils/multi-steppers/multi-steppers.c **** #endif	
 266:..//utils/multi-steppers/multi-steppers.c **** 	}// for i
 267:..//utils/multi-steppers/multi-steppers.c **** 
 268:..//utils/multi-steppers/multi-steppers.c **** 	
 269:..//utils/multi-steppers/multi-steppers.c **** #ifdef MULTI_STEPPERS_DIFFERENT_PORTS
 270:..//utils/multi-steppers/multi-steppers.c **** 	//// Nothing to be done here
 271:..//utils/multi-steppers/multi-steppers.c **** #else
 272:..//utils/multi-steppers/multi-steppers.c **** 	PULSE_PORT_SET = fio_pulse_reg_set;
 273:..//utils/multi-steppers/multi-steppers.c **** 	PULSE_PORT_CLEAR = fio_pulse_reg_clr;
 274:..//utils/multi-steppers/multi-steppers.c **** 	
 275:..//utils/multi-steppers/multi-steppers.c **** 	DIR_PORT_SET = fio_dir_reg_set;
 276:..//utils/multi-steppers/multi-steppers.c **** 	DIR_PORT_CLEAR = fio_dir_reg_clr;
 277:..//utils/multi-steppers/multi-steppers.c **** #endif	
 278:..//utils/multi-steppers/multi-steppers.c **** 	
 279:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 431              		.loc 1 279 0
 432 014a 4FF00103 		mov	r3, #1
 280:..//utils/multi-steppers/multi-steppers.c **** }
 433              		.loc 1 280 0
 434 014e 1846     		mov	r0, r3
 435 0150 07F11C07 		add	r7, r7, #28
 436 0154 BD46     		mov	sp, r7
 437 0156 B0BC     		pop	{r4, r5, r7}
 438 0158 7047     		bx	lr
 439              		.cfi_endproc
 440              	.LFE32:
 442              		.global	__aeabi_fsub
 443              		.global	__aeabi_fmul
 444              		.global	__aeabi_l2d
 445              		.global	__aeabi_dmul
 446              		.global	__aeabi_d2f
 447              		.global	__aeabi_fcmpgt
 448              		.global	__aeabi_fdiv
 449              		.global	__aeabi_fadd
 450              		.global	__aeabi_f2d
 451              		.global	__aeabi_dadd
 452              		.global	__aeabi_fcmplt
 453              		.global	__aeabi_dcmplt
 454              		.global	__aeabi_f2iz
 455 015a 00BF     		.section	.text.stepper_update_freq,"ax",%progbits
 456              		.align	2
 457              		.global	stepper_update_freq
 458              		.thumb
 459              		.thumb_func
 461              	stepper_update_freq:
 462              	.LFB33:
 281:..//utils/multi-steppers/multi-steppers.c **** 
 282:..//utils/multi-steppers/multi-steppers.c **** 
 283:..//utils/multi-steppers/multi-steppers.c **** int stepper_update_freq(void)
 284:..//utils/multi-steppers/multi-steppers.c **** {
 463              		.loc 1 284 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 88
 466              		@ frame_needed = 1, uses_anonymous_args = 0
 467 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 468              	.LCFI9:
 469              		.cfi_def_cfa_offset 36
 470 0004 97B0     		sub	sp, sp, #92
 471              	.LCFI10:
 472              		.cfi_def_cfa_offset 128
 473 0006 00AF     		add	r7, sp, #0
 474              		.cfi_offset 14, -4
 475              		.cfi_offset 11, -8
 476              		.cfi_offset 10, -12
 477              		.cfi_offset 9, -16
 478              		.cfi_offset 8, -20
 479              		.cfi_offset 7, -24
 480              		.cfi_offset 6, -28
 481              		.cfi_offset 5, -32
 482              		.cfi_offset 4, -36
 483              	.LCFI11:
 484              		.cfi_def_cfa_register 7
 285:..//utils/multi-steppers/multi-steppers.c **** 	int i;
 286:..//utils/multi-steppers/multi-steppers.c **** 	int64_t accum_a, accum_b;
 287:..//utils/multi-steppers/multi-steppers.c **** 	float pos_cmd;
 288:..//utils/multi-steppers/multi-steppers.c **** 	float vel_cmd;
 289:..//utils/multi-steppers/multi-steppers.c **** 	float curr_pos;
 290:..//utils/multi-steppers/multi-steppers.c **** 	float curr_vel;
 291:..//utils/multi-steppers/multi-steppers.c **** 	float match_ac;
 292:..//utils/multi-steppers/multi-steppers.c **** 	float match_time;
 293:..//utils/multi-steppers/multi-steppers.c **** 	float avg_v;
 294:..//utils/multi-steppers/multi-steppers.c **** 	float est_out;
 295:..//utils/multi-steppers/multi-steppers.c **** 	float est_cmd;
 296:..//utils/multi-steppers/multi-steppers.c **** 	float est_err;
 297:..//utils/multi-steppers/multi-steppers.c **** 	float new_vel;
 298:..//utils/multi-steppers/multi-steppers.c **** 	float dv;
 299:..//utils/multi-steppers/multi-steppers.c **** 	float dp;
 300:..//utils/multi-steppers/multi-steppers.c **** 	
 301:..//utils/multi-steppers/multi-steppers.c **** 	stepper_struct *stepgen;
 302:..//utils/multi-steppers/multi-steppers.c **** 	for (i = 0; i< NUM_AXES; i++){
 485              		.loc 1 302 0
 486 0008 4FF00003 		mov	r3, #0
 487 000c FB60     		str	r3, [r7, #12]
 488 000e 61E3     		b	.L16
 489              	.L49:
 303:..//utils/multi-steppers/multi-steppers.c **** 		stepgen = &g_stepgen[i];
 490              		.loc 1 303 0
 491 0010 FB68     		ldr	r3, [r7, #12]
 492 0012 4FF06802 		mov	r2, #104
 493 0016 02FB03F2 		mul	r2, r2, r3
 494 001a 40F20003 		movw	r3, #:lower16:g_stepgen
 495 001e C0F20003 		movt	r3, #:upper16:g_stepgen
 496 0022 1344     		add	r3, r2, r3
 497 0024 7B65     		str	r3, [r7, #84]
 304:..//utils/multi-steppers/multi-steppers.c **** 		if (!stepgen->enable){
 498              		.loc 1 304 0
 499 0026 7B6D     		ldr	r3, [r7, #84]
 500 0028 1B6A     		ldr	r3, [r3, #32]
 501 002a 002B     		cmp	r3, #0
 502 002c 0CD1     		bne	.L17
 305:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->freq = 0;
 503              		.loc 1 305 0
 504 002e 7B6D     		ldr	r3, [r7, #84]
 505 0030 DFF8CC26 		ldr	r2, .L52+16	@ float
 506 0034 5A65     		str	r2, [r3, #84]	@ float
 306:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->addval = 0;
 507              		.loc 1 306 0
 508 0036 7B6D     		ldr	r3, [r7, #84]
 509 0038 4FF00002 		mov	r2, #0
 510 003c 5A60     		str	r2, [r3, #4]
 307:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->target_addval = 0;
 511              		.loc 1 307 0
 512 003e 7B6D     		ldr	r3, [r7, #84]
 513 0040 4FF00002 		mov	r2, #0
 514 0044 5A62     		str	r2, [r3, #36]
 308:..//utils/multi-steppers/multi-steppers.c **** 			continue; // go to the next stepgen processor..
 515              		.loc 1 308 0
 516 0046 41E3     		b	.L18
 517              	.L17:
 309:..//utils/multi-steppers/multi-steppers.c **** 		}
 310:..//utils/multi-steppers/multi-steppers.c **** 		   
 311:..//utils/multi-steppers/multi-steppers.c **** 		/* calculate position command in counts */
 312:..//utils/multi-steppers/multi-steppers.c **** 		//pos_cmd = stepgen->pos_cmd * stepgen->pos_scale;
 313:..//utils/multi-steppers/multi-steppers.c **** 		pos_cmd = stepgen->pos_cmd;
 518              		.loc 1 313 0
 519 0048 7B6D     		ldr	r3, [r7, #84]
 520 004a DB6D     		ldr	r3, [r3, #92]	@ float
 521 004c 3B62     		str	r3, [r7, #32]	@ float
 314:..//utils/multi-steppers/multi-steppers.c **** 		/* calculate velocity command in counts/sec */
 315:..//utils/multi-steppers/multi-steppers.c **** 		vel_cmd = (pos_cmd - stepgen->old_pos_cmd) * recip_dt;
 522              		.loc 1 315 0
 523 004e 7B6D     		ldr	r3, [r7, #84]
 524 0050 1A6E     		ldr	r2, [r3, #96]	@ float
 525 0052 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 526 0056 C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 527 005a 386A     		ldr	r0, [r7, #32]	@ float
 528 005c 1146     		mov	r1, r2
 529 005e 9847     		blx	r3
 530 0060 0346     		mov	r3, r0
 531 0062 1946     		mov	r1, r3
 532 0064 40F20003 		movw	r3, #:lower16:recip_dt
 533 0068 C0F20003 		movt	r3, #:upper16:recip_dt
 534 006c 1A68     		ldr	r2, [r3, #0]	@ float
 535 006e 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 536 0072 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 537 0076 0846     		mov	r0, r1
 538 0078 1146     		mov	r1, r2
 539 007a 9847     		blx	r3
 540 007c 0346     		mov	r3, r0
 541 007e 7B62     		str	r3, [r7, #36]	@ float
 316:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->old_pos_cmd = pos_cmd;
 542              		.loc 1 316 0
 543 0080 7B6D     		ldr	r3, [r7, #84]
 544 0082 3A6A     		ldr	r2, [r7, #32]	@ float
 545 0084 1A66     		str	r2, [r3, #96]	@ float
 546              	.L19:
 317:..//utils/multi-steppers/multi-steppers.c **** 		/* 'accum' is a long long, and its remotely possible that
 318:..//utils/multi-steppers/multi-steppers.c **** 		   make_pulses could change it half-way through a read.
 319:..//utils/multi-steppers/multi-steppers.c **** 		   So we have a crude atomic read routine */
 320:..//utils/multi-steppers/multi-steppers.c **** 		do {
 321:..//utils/multi-steppers/multi-steppers.c **** 			accum_a = stepgen->accum;
 547              		.loc 1 321 0
 548 0086 7B6D     		ldr	r3, [r7, #84]
 549 0088 D3E90223 		ldrd	r2, [r3, #8]
 550 008c C7E90423 		strd	r2, [r7, #16]
 322:..//utils/multi-steppers/multi-steppers.c **** 			accum_b = stepgen->accum;
 551              		.loc 1 322 0
 552 0090 7B6D     		ldr	r3, [r7, #84]
 553 0092 D3E90223 		ldrd	r2, [r3, #8]
 554 0096 C7E90623 		strd	r2, [r7, #24]
 323:..//utils/multi-steppers/multi-steppers.c **** 		} while ( accum_a != accum_b );
 555              		.loc 1 323 0
 556 009a D7E90401 		ldrd	r0, [r7, #16]
 557 009e D7E90623 		ldrd	r2, [r7, #24]
 558 00a2 82EA0002 		eor	r2, r2, r0
 559 00a6 83EA0103 		eor	r3, r3, r1
 560 00aa 52EA0301 		orrs	r1, r2, r3
 561 00ae EAD1     		bne	.L19
 324:..//utils/multi-steppers/multi-steppers.c **** 		
 325:..//utils/multi-steppers/multi-steppers.c **** 		/* convert from fixed point to float, after subtracting
 326:..//utils/multi-steppers/multi-steppers.c **** 		   the one-half step offset */
 327:..//utils/multi-steppers/multi-steppers.c **** 		curr_pos = ((accum_a-MINUS_PICKOFF) * DIVIDE_PICKOFF);
 562              		.loc 1 327 0
 563 00b0 D7E90401 		ldrd	r0, [r7, #16]
 564 00b4 4FF07842 		mov	r2, #-134217728
 565 00b8 4FF0FF33 		mov	r3, #-1
 566 00bc 8018     		adds	r0, r0, r2
 567 00be 41EB0301 		adc	r1, r1, r3
 568 00c2 40F20003 		movw	r3, #:lower16:__aeabi_l2d
 569 00c6 C0F20003 		movt	r3, #:upper16:__aeabi_l2d
 570 00ca 9847     		blx	r3
 571 00cc 0246     		mov	r2, r0
 572 00ce 0B46     		mov	r3, r1
 573 00d0 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 574 00d4 C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 575 00d8 1046     		mov	r0, r2
 576 00da 1946     		mov	r1, r3
 577 00dc 4FF00002 		mov	r2, #0
 578 00e0 4FF07853 		mov	r3, #1040187392
 579 00e4 03F54013 		add	r3, r3, #3145728
 580 00e8 E047     		blx	ip
 581 00ea 0246     		mov	r2, r0
 582 00ec 0B46     		mov	r3, r1
 583 00ee 1046     		mov	r0, r2
 584 00f0 1946     		mov	r1, r3
 585 00f2 40F20003 		movw	r3, #:lower16:__aeabi_d2f
 586 00f6 C0F20003 		movt	r3, #:upper16:__aeabi_d2f
 587 00fa 9847     		blx	r3
 588 00fc 0346     		mov	r3, r0
 589 00fe BB62     		str	r3, [r7, #40]	@ float
 328:..//utils/multi-steppers/multi-steppers.c **** 		/* get velocity in counts/sec */
 329:..//utils/multi-steppers/multi-steppers.c **** 		curr_vel = stepgen->freq;
 590              		.loc 1 329 0
 591 0100 7B6D     		ldr	r3, [r7, #84]
 592 0102 5B6D     		ldr	r3, [r3, #84]	@ float
 593 0104 FB62     		str	r3, [r7, #44]	@ float
 330:..//utils/multi-steppers/multi-steppers.c **** 		
 331:..//utils/multi-steppers/multi-steppers.c **** 		/* At this point we have good values for pos_cmd, curr_pos,
 332:..//utils/multi-steppers/multi-steppers.c **** 			   vel_cmd, curr_vel, max_freq and max_ac, all in counts,
 333:..//utils/multi-steppers/multi-steppers.c **** 			   counts/sec, or counts/sec^2.  Now we just have to do
 334:..//utils/multi-steppers/multi-steppers.c **** 			   something useful with them. */
 335:..//utils/multi-steppers/multi-steppers.c **** 		/* determine which way we need to ramp to match velocity */
 336:..//utils/multi-steppers/multi-steppers.c **** 		if (vel_cmd > curr_vel) {
 594              		.loc 1 336 0
 595 0106 4FF00003 		mov	r3, #0
 596 010a 1E46     		mov	r6, r3
 597 010c 40F20003 		movw	r3, #:lower16:__aeabi_fcmpgt
 598 0110 C0F20003 		movt	r3, #:upper16:__aeabi_fcmpgt
 599 0114 786A     		ldr	r0, [r7, #36]	@ float
 600 0116 F96A     		ldr	r1, [r7, #44]	@ float
 601 0118 9847     		blx	r3
 602 011a 0346     		mov	r3, r0
 603 011c 002B     		cmp	r3, #0
 604 011e 02D0     		beq	.L20
 605              	.L21:
 606 0120 4FF00103 		mov	r3, #1
 607 0124 1E46     		mov	r6, r3
 608              	.L20:
 609 0126 F3B2     		uxtb	r3, r6
 610 0128 002B     		cmp	r3, #0
 611 012a 03D0     		beq	.L22
 337:..//utils/multi-steppers/multi-steppers.c **** 			match_ac = stepgen->max_ac;
 612              		.loc 1 337 0
 613 012c 7B6D     		ldr	r3, [r7, #84]
 614 012e 1B6C     		ldr	r3, [r3, #64]	@ float
 615 0130 3B63     		str	r3, [r7, #48]	@ float
 616 0132 04E0     		b	.L23
 617              	.L22:
 338:..//utils/multi-steppers/multi-steppers.c **** 		} else {
 339:..//utils/multi-steppers/multi-steppers.c **** 			match_ac = -stepgen->max_ac;
 618              		.loc 1 339 0
 619 0134 7B6D     		ldr	r3, [r7, #84]
 620 0136 1B6C     		ldr	r3, [r3, #64]	@ float
 621 0138 83F00043 		eor	r3, r3, #-2147483648
 622 013c 3B63     		str	r3, [r7, #48]	@ float
 623              	.L23:
 340:..//utils/multi-steppers/multi-steppers.c **** 		}
 341:..//utils/multi-steppers/multi-steppers.c **** 		
 342:..//utils/multi-steppers/multi-steppers.c **** 		/* determine how long the match would take */
 343:..//utils/multi-steppers/multi-steppers.c **** 		match_time = (vel_cmd - curr_vel) / match_ac;
 624              		.loc 1 343 0
 625 013e 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 626 0142 C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 627 0146 786A     		ldr	r0, [r7, #36]	@ float
 628 0148 F96A     		ldr	r1, [r7, #44]	@ float
 629 014a 9847     		blx	r3
 630 014c 0346     		mov	r3, r0
 631 014e 1A46     		mov	r2, r3
 632 0150 40F20003 		movw	r3, #:lower16:__aeabi_fdiv
 633 0154 C0F20003 		movt	r3, #:upper16:__aeabi_fdiv
 634 0158 1046     		mov	r0, r2
 635 015a 396B     		ldr	r1, [r7, #48]	@ float
 636 015c 9847     		blx	r3
 637 015e 0346     		mov	r3, r0
 638 0160 7B63     		str	r3, [r7, #52]	@ float
 344:..//utils/multi-steppers/multi-steppers.c **** 		/* calc output position at the end of the match */
 345:..//utils/multi-steppers/multi-steppers.c **** 		avg_v = (vel_cmd + curr_vel) * 0.5;
 639              		.loc 1 345 0
 640 0162 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 641 0166 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 642 016a 786A     		ldr	r0, [r7, #36]	@ float
 643 016c F96A     		ldr	r1, [r7, #44]	@ float
 644 016e 9847     		blx	r3
 645 0170 0346     		mov	r3, r0
 646 0172 1A46     		mov	r2, r3
 647 0174 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 648 0178 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 649 017c 1046     		mov	r0, r2
 650 017e DFF88415 		ldr	r1, .L52+20	@ float
 651 0182 9847     		blx	r3
 652 0184 0346     		mov	r3, r0
 653 0186 BB63     		str	r3, [r7, #56]	@ float
 346:..//utils/multi-steppers/multi-steppers.c **** 		est_out = curr_pos + avg_v * match_time;
 654              		.loc 1 346 0
 655 0188 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 656 018c C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 657 0190 B86B     		ldr	r0, [r7, #56]	@ float
 658 0192 796B     		ldr	r1, [r7, #52]	@ float
 659 0194 9847     		blx	r3
 660 0196 0346     		mov	r3, r0
 661 0198 1A46     		mov	r2, r3
 662 019a 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 663 019e C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 664 01a2 1046     		mov	r0, r2
 665 01a4 B96A     		ldr	r1, [r7, #40]	@ float
 666 01a6 9847     		blx	r3
 667 01a8 0346     		mov	r3, r0
 668 01aa FB63     		str	r3, [r7, #60]	@ float
 347:..//utils/multi-steppers/multi-steppers.c **** 		/* calculate the expected command position at that time */
 348:..//utils/multi-steppers/multi-steppers.c **** 		est_cmd = pos_cmd + vel_cmd * (match_time - 1.5 * dt);
 669              		.loc 1 348 0
 670 01ac 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 671 01b0 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 672 01b4 386A     		ldr	r0, [r7, #32]	@ float
 673 01b6 9847     		blx	r3
 674 01b8 8046     		mov	r8, r0
 675 01ba 8946     		mov	r9, r1
 676 01bc 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 677 01c0 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 678 01c4 786A     		ldr	r0, [r7, #36]	@ float
 679 01c6 9847     		blx	r3
 680 01c8 8246     		mov	sl, r0
 681 01ca 8B46     		mov	fp, r1
 682 01cc 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 683 01d0 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 684 01d4 786B     		ldr	r0, [r7, #52]	@ float
 685 01d6 9847     		blx	r3
 686 01d8 C7E90001 		strd	r0, [r7]
 687 01dc 40F20003 		movw	r3, #:lower16:dt
 688 01e0 C0F20003 		movt	r3, #:upper16:dt
 689 01e4 1A68     		ldr	r2, [r3, #0]	@ float
 690 01e6 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 691 01ea C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 692 01ee 1046     		mov	r0, r2
 693 01f0 9847     		blx	r3
 694 01f2 0246     		mov	r2, r0
 695 01f4 0B46     		mov	r3, r1
 696 01f6 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 697 01fa C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 698 01fe 1046     		mov	r0, r2
 699 0200 1946     		mov	r1, r3
 700 0202 4FF00002 		mov	r2, #0
 701 0206 4FF03F43 		mov	r3, #-1090519040
 702 020a 03F57803 		add	r3, r3, #16252928
 703 020e E047     		blx	ip
 704 0210 0246     		mov	r2, r0
 705 0212 0B46     		mov	r3, r1
 706 0214 40F2000C 		movw	ip, #:lower16:__aeabi_dadd
 707 0218 C0F2000C 		movt	ip, #:upper16:__aeabi_dadd
 708 021c D7E90001 		ldrd	r0, [r7]
 709 0220 E047     		blx	ip
 710 0222 0246     		mov	r2, r0
 711 0224 0B46     		mov	r3, r1
 712 0226 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 713 022a C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 714 022e 5046     		mov	r0, sl
 715 0230 5946     		mov	r1, fp
 716 0232 E047     		blx	ip
 717 0234 0246     		mov	r2, r0
 718 0236 0B46     		mov	r3, r1
 719 0238 40F2000C 		movw	ip, #:lower16:__aeabi_dadd
 720 023c C0F2000C 		movt	ip, #:upper16:__aeabi_dadd
 721 0240 4046     		mov	r0, r8
 722 0242 4946     		mov	r1, r9
 723 0244 E047     		blx	ip
 724 0246 0246     		mov	r2, r0
 725 0248 0B46     		mov	r3, r1
 726 024a 1046     		mov	r0, r2
 727 024c 1946     		mov	r1, r3
 728 024e 40F20003 		movw	r3, #:lower16:__aeabi_d2f
 729 0252 C0F20003 		movt	r3, #:upper16:__aeabi_d2f
 730 0256 9847     		blx	r3
 731 0258 0346     		mov	r3, r0
 732 025a 3B64     		str	r3, [r7, #64]	@ float
 349:..//utils/multi-steppers/multi-steppers.c **** 		/* calculate error at that time */
 350:..//utils/multi-steppers/multi-steppers.c **** 		est_err = est_out - est_cmd;
 733              		.loc 1 350 0
 734 025c 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 735 0260 C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 736 0264 F86B     		ldr	r0, [r7, #60]	@ float
 737 0266 396C     		ldr	r1, [r7, #64]	@ float
 738 0268 9847     		blx	r3
 739 026a 0346     		mov	r3, r0
 740 026c 7B64     		str	r3, [r7, #68]	@ float
 351:..//utils/multi-steppers/multi-steppers.c **** 		if (match_time < dt) {
 741              		.loc 1 351 0
 742 026e 40F20003 		movw	r3, #:lower16:dt
 743 0272 C0F20003 		movt	r3, #:upper16:dt
 744 0276 1A68     		ldr	r2, [r3, #0]	@ float
 745 0278 4FF00003 		mov	r3, #0
 746 027c 1E46     		mov	r6, r3
 747 027e 40F20003 		movw	r3, #:lower16:__aeabi_fcmplt
 748 0282 C0F20003 		movt	r3, #:upper16:__aeabi_fcmplt
 749 0286 786B     		ldr	r0, [r7, #52]	@ float
 750 0288 1146     		mov	r1, r2
 751 028a 9847     		blx	r3
 752 028c 0346     		mov	r3, r0
 753 028e 002B     		cmp	r3, #0
 754 0290 02D0     		beq	.L24
 755              	.L25:
 756 0292 4FF00103 		mov	r3, #1
 757 0296 1E46     		mov	r6, r3
 758              	.L24:
 759 0298 F3B2     		uxtb	r3, r6
 760 029a 002B     		cmp	r3, #0
 761 029c 00F0FB80 		beq	.L26
 352:..//utils/multi-steppers/multi-steppers.c **** 			/* we can match velocity in one period */
 353:..//utils/multi-steppers/multi-steppers.c **** 			if (fabs(est_err) < 0.0001) {
 762              		.loc 1 353 0
 763 02a0 7B6C     		ldr	r3, [r7, #68]
 764 02a2 23F00042 		bic	r2, r3, #-2147483648
 765 02a6 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 766 02aa C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 767 02ae 1046     		mov	r0, r2
 768 02b0 9847     		blx	r3
 769 02b2 0246     		mov	r2, r0
 770 02b4 0B46     		mov	r3, r1
 771 02b6 4FF00001 		mov	r1, #0
 772 02ba 0E46     		mov	r6, r1
 773 02bc 40F2000C 		movw	ip, #:lower16:__aeabi_dcmplt
 774 02c0 C0F2000C 		movt	ip, #:upper16:__aeabi_dcmplt
 775 02c4 1046     		mov	r0, r2
 776 02c6 1946     		mov	r1, r3
 777 02c8 0FF22443 		adr	r3, .L52
 778 02cc D3E90023 		ldrd	r2, [r3]
 779 02d0 E047     		blx	ip
 780 02d2 0346     		mov	r3, r0
 781 02d4 002B     		cmp	r3, #0
 782 02d6 02D0     		beq	.L27
 783              	.L28:
 784 02d8 4FF00103 		mov	r3, #1
 785 02dc 1E46     		mov	r6, r3
 786              	.L27:
 787 02de F3B2     		uxtb	r3, r6
 788 02e0 002B     		cmp	r3, #0
 789 02e2 02D0     		beq	.L29
 354:..//utils/multi-steppers/multi-steppers.c **** 				/* after match the position error will be acceptable */
 355:..//utils/multi-steppers/multi-steppers.c **** 				/* so we just do the velocity match */
 356:..//utils/multi-steppers/multi-steppers.c **** 				new_vel = vel_cmd;
 790              		.loc 1 356 0
 791 02e4 7B6A     		ldr	r3, [r7, #36]	@ float
 792 02e6 BB64     		str	r3, [r7, #72]	@ float
 357:..//utils/multi-steppers/multi-steppers.c **** 			} else {
 358:..//utils/multi-steppers/multi-steppers.c **** 				/* try to correct position error */
 359:..//utils/multi-steppers/multi-steppers.c **** 				new_vel = vel_cmd - 0.5 * est_err * recip_dt;
 360:..//utils/multi-steppers/multi-steppers.c **** 				/* apply accel limits */
 361:..//utils/multi-steppers/multi-steppers.c **** 				if (new_vel > (curr_vel + stepgen->max_ac * dt)) {
 362:..//utils/multi-steppers/multi-steppers.c **** 					new_vel = curr_vel + stepgen->max_ac * dt;
 363:..//utils/multi-steppers/multi-steppers.c **** 				} else if (new_vel < (curr_vel - stepgen->max_ac * dt)) {
 364:..//utils/multi-steppers/multi-steppers.c **** 					new_vel = curr_vel - stepgen->max_ac * dt;
 793              		.loc 1 364 0
 794 02e8 74E1     		b	.L36
 795              	.L29:
 796              		.loc 1 359 0
 797 02ea 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 798 02ee C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 799 02f2 786A     		ldr	r0, [r7, #36]	@ float
 800 02f4 9847     		blx	r3
 801 02f6 8046     		mov	r8, r0
 802 02f8 8946     		mov	r9, r1
 803 02fa 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 804 02fe C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 805 0302 786C     		ldr	r0, [r7, #68]	@ float
 806 0304 9847     		blx	r3
 807 0306 0246     		mov	r2, r0
 808 0308 0B46     		mov	r3, r1
 809 030a 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 810 030e C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 811 0312 1046     		mov	r0, r2
 812 0314 1946     		mov	r1, r3
 813 0316 4FF00002 		mov	r2, #0
 814 031a 4FF03F43 		mov	r3, #-1090519040
 815 031e 03F56003 		add	r3, r3, #14680064
 816 0322 E047     		blx	ip
 817 0324 0246     		mov	r2, r0
 818 0326 0B46     		mov	r3, r1
 819 0328 9246     		mov	sl, r2
 820 032a 9B46     		mov	fp, r3
 821 032c 40F20003 		movw	r3, #:lower16:recip_dt
 822 0330 C0F20003 		movt	r3, #:upper16:recip_dt
 823 0334 1A68     		ldr	r2, [r3, #0]	@ float
 824 0336 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 825 033a C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 826 033e 1046     		mov	r0, r2
 827 0340 9847     		blx	r3
 828 0342 0246     		mov	r2, r0
 829 0344 0B46     		mov	r3, r1
 830 0346 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 831 034a C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 832 034e 5046     		mov	r0, sl
 833 0350 5946     		mov	r1, fp
 834 0352 E047     		blx	ip
 835 0354 0246     		mov	r2, r0
 836 0356 0B46     		mov	r3, r1
 837 0358 40F2000C 		movw	ip, #:lower16:__aeabi_dadd
 838 035c C0F2000C 		movt	ip, #:upper16:__aeabi_dadd
 839 0360 4046     		mov	r0, r8
 840 0362 4946     		mov	r1, r9
 841 0364 E047     		blx	ip
 842 0366 0246     		mov	r2, r0
 843 0368 0B46     		mov	r3, r1
 844 036a 1046     		mov	r0, r2
 845 036c 1946     		mov	r1, r3
 846 036e 40F20003 		movw	r3, #:lower16:__aeabi_d2f
 847 0372 C0F20003 		movt	r3, #:upper16:__aeabi_d2f
 848 0376 9847     		blx	r3
 849 0378 0346     		mov	r3, r0
 850 037a BB64     		str	r3, [r7, #72]	@ float
 851              		.loc 1 361 0
 852 037c 7B6D     		ldr	r3, [r7, #84]
 853 037e 196C     		ldr	r1, [r3, #64]	@ float
 854 0380 40F20003 		movw	r3, #:lower16:dt
 855 0384 C0F20003 		movt	r3, #:upper16:dt
 856 0388 1A68     		ldr	r2, [r3, #0]	@ float
 857 038a 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 858 038e C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 859 0392 0846     		mov	r0, r1
 860 0394 1146     		mov	r1, r2
 861 0396 9847     		blx	r3
 862 0398 0346     		mov	r3, r0
 863 039a 1A46     		mov	r2, r3
 864 039c 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 865 03a0 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 866 03a4 1046     		mov	r0, r2
 867 03a6 F96A     		ldr	r1, [r7, #44]	@ float
 868 03a8 9847     		blx	r3
 869 03aa 0346     		mov	r3, r0
 870 03ac 1A46     		mov	r2, r3
 871 03ae 4FF00003 		mov	r3, #0
 872 03b2 1E46     		mov	r6, r3
 873 03b4 40F20003 		movw	r3, #:lower16:__aeabi_fcmplt
 874 03b8 C0F20003 		movt	r3, #:upper16:__aeabi_fcmplt
 875 03bc 1046     		mov	r0, r2
 876 03be B96C     		ldr	r1, [r7, #72]	@ float
 877 03c0 9847     		blx	r3
 878 03c2 0346     		mov	r3, r0
 879 03c4 002B     		cmp	r3, #0
 880 03c6 02D0     		beq	.L31
 881              	.L32:
 882 03c8 4FF00103 		mov	r3, #1
 883 03cc 1E46     		mov	r6, r3
 884              	.L31:
 885 03ce F3B2     		uxtb	r3, r6
 886 03d0 002B     		cmp	r3, #0
 887 03d2 19D0     		beq	.L33
 888              		.loc 1 362 0
 889 03d4 7B6D     		ldr	r3, [r7, #84]
 890 03d6 196C     		ldr	r1, [r3, #64]	@ float
 891 03d8 40F20003 		movw	r3, #:lower16:dt
 892 03dc C0F20003 		movt	r3, #:upper16:dt
 893 03e0 1A68     		ldr	r2, [r3, #0]	@ float
 894 03e2 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 895 03e6 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 896 03ea 0846     		mov	r0, r1
 897 03ec 1146     		mov	r1, r2
 898 03ee 9847     		blx	r3
 899 03f0 0346     		mov	r3, r0
 900 03f2 1A46     		mov	r2, r3
 901 03f4 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 902 03f8 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 903 03fc 1046     		mov	r0, r2
 904 03fe F96A     		ldr	r1, [r7, #44]	@ float
 905 0400 9847     		blx	r3
 906 0402 0346     		mov	r3, r0
 907 0404 BB64     		str	r3, [r7, #72]	@ float
 908              		.loc 1 364 0
 909 0406 E5E0     		b	.L36
 910              	.L33:
 911              		.loc 1 363 0
 912 0408 7B6D     		ldr	r3, [r7, #84]
 913 040a 196C     		ldr	r1, [r3, #64]	@ float
 914 040c 40F20003 		movw	r3, #:lower16:dt
 915 0410 C0F20003 		movt	r3, #:upper16:dt
 916 0414 1A68     		ldr	r2, [r3, #0]	@ float
 917 0416 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 918 041a C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 919 041e 0846     		mov	r0, r1
 920 0420 1146     		mov	r1, r2
 921 0422 9847     		blx	r3
 922 0424 0346     		mov	r3, r0
 923 0426 1A46     		mov	r2, r3
 924 0428 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 925 042c C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 926 0430 F86A     		ldr	r0, [r7, #44]	@ float
 927 0432 1146     		mov	r1, r2
 928 0434 9847     		blx	r3
 929 0436 0346     		mov	r3, r0
 930 0438 1A46     		mov	r2, r3
 931 043a 4FF00003 		mov	r3, #0
 932 043e 1E46     		mov	r6, r3
 933 0440 40F20003 		movw	r3, #:lower16:__aeabi_fcmpgt
 934 0444 C0F20003 		movt	r3, #:upper16:__aeabi_fcmpgt
 935 0448 1046     		mov	r0, r2
 936 044a B96C     		ldr	r1, [r7, #72]	@ float
 937 044c 9847     		blx	r3
 938 044e 0346     		mov	r3, r0
 939 0450 002B     		cmp	r3, #0
 940 0452 02D0     		beq	.L34
 941              	.L35:
 942 0454 4FF00103 		mov	r3, #1
 943 0458 1E46     		mov	r6, r3
 944              	.L34:
 945 045a F3B2     		uxtb	r3, r6
 946 045c 002B     		cmp	r3, #0
 947 045e 00F0B880 		beq	.L51
 948              		.loc 1 364 0
 949 0462 7B6D     		ldr	r3, [r7, #84]
 950 0464 196C     		ldr	r1, [r3, #64]	@ float
 951 0466 40F20003 		movw	r3, #:lower16:dt
 952 046a C0F20003 		movt	r3, #:upper16:dt
 953 046e 1A68     		ldr	r2, [r3, #0]	@ float
 954 0470 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 955 0474 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 956 0478 0846     		mov	r0, r1
 957 047a 1146     		mov	r1, r2
 958 047c 9847     		blx	r3
 959 047e 0346     		mov	r3, r0
 960 0480 1A46     		mov	r2, r3
 961 0482 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 962 0486 C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 963 048a F86A     		ldr	r0, [r7, #44]	@ float
 964 048c 1146     		mov	r1, r2
 965 048e 9847     		blx	r3
 966 0490 0346     		mov	r3, r0
 967 0492 BB64     		str	r3, [r7, #72]	@ float
 968 0494 9EE0     		b	.L36
 969              	.L26:
 365:..//utils/multi-steppers/multi-steppers.c **** 				}
 366:..//utils/multi-steppers/multi-steppers.c **** 			}
 367:..//utils/multi-steppers/multi-steppers.c **** 		} else {
 368:..//utils/multi-steppers/multi-steppers.c **** 			/* calculate change in final position if we ramp in the
 369:..//utils/multi-steppers/multi-steppers.c **** 			   opposite direction for one period */
 370:..//utils/multi-steppers/multi-steppers.c **** 			dv = -2.0 * match_ac * dt;
 970              		.loc 1 370 0
 971 0496 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 972 049a C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 973 049e 386B     		ldr	r0, [r7, #48]	@ float
 974 04a0 9847     		blx	r3
 975 04a2 0246     		mov	r2, r0
 976 04a4 0B46     		mov	r3, r1
 977 04a6 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 978 04aa C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 979 04ae 1046     		mov	r0, r2
 980 04b0 1946     		mov	r1, r3
 981 04b2 4FF00002 		mov	r2, #0
 982 04b6 4FF04043 		mov	r3, #-1073741824
 983 04ba E047     		blx	ip
 984 04bc 0246     		mov	r2, r0
 985 04be 0B46     		mov	r3, r1
 986 04c0 9046     		mov	r8, r2
 987 04c2 9946     		mov	r9, r3
 988 04c4 40F20003 		movw	r3, #:lower16:dt
 989 04c8 C0F20003 		movt	r3, #:upper16:dt
 990 04cc 1A68     		ldr	r2, [r3, #0]	@ float
 991 04ce 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 992 04d2 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 993 04d6 1046     		mov	r0, r2
 994 04d8 9847     		blx	r3
 995 04da 0246     		mov	r2, r0
 996 04dc 0B46     		mov	r3, r1
 997 04de 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 998 04e2 C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 999 04e6 4046     		mov	r0, r8
 1000 04e8 4946     		mov	r1, r9
 1001 04ea E047     		blx	ip
 1002 04ec 0246     		mov	r2, r0
 1003 04ee 0B46     		mov	r3, r1
 1004 04f0 1046     		mov	r0, r2
 1005 04f2 1946     		mov	r1, r3
 1006 04f4 40F20003 		movw	r3, #:lower16:__aeabi_d2f
 1007 04f8 C0F20003 		movt	r3, #:upper16:__aeabi_d2f
 1008 04fc 9847     		blx	r3
 1009 04fe 0346     		mov	r3, r0
 1010 0500 FB64     		str	r3, [r7, #76]	@ float
 371:..//utils/multi-steppers/multi-steppers.c **** 			dp = dv * match_time;
 1011              		.loc 1 371 0
 1012 0502 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 1013 0506 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 1014 050a F86C     		ldr	r0, [r7, #76]	@ float
 1015 050c 796B     		ldr	r1, [r7, #52]	@ float
 1016 050e 9847     		blx	r3
 1017 0510 0346     		mov	r3, r0
 1018 0512 3B65     		str	r3, [r7, #80]	@ float
 372:..//utils/multi-steppers/multi-steppers.c **** 			/* decide which way to ramp */
 373:..//utils/multi-steppers/multi-steppers.c **** 			if (fabs(est_err + dp * 2.0) < fabs(est_err)) {
 1019              		.loc 1 373 0
 1020 0514 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 1021 0518 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 1022 051c 786C     		ldr	r0, [r7, #68]	@ float
 1023 051e 9847     		blx	r3
 1024 0520 8046     		mov	r8, r0
 1025 0522 8946     		mov	r9, r1
 1026 0524 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 1027 0528 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 1028 052c 386D     		ldr	r0, [r7, #80]	@ float
 1029 052e 9847     		blx	r3
 1030 0530 0246     		mov	r2, r0
 1031 0532 0B46     		mov	r3, r1
 1032 0534 40F2000C 		movw	ip, #:lower16:__aeabi_dadd
 1033 0538 C0F2000C 		movt	ip, #:upper16:__aeabi_dadd
 1034 053c 1046     		mov	r0, r2
 1035 053e 1946     		mov	r1, r3
 1036 0540 E047     		blx	ip
 1037 0542 0246     		mov	r2, r0
 1038 0544 0B46     		mov	r3, r1
 1039 0546 40F2000C 		movw	ip, #:lower16:__aeabi_dadd
 1040 054a C0F2000C 		movt	ip, #:upper16:__aeabi_dadd
 1041 054e 4046     		mov	r0, r8
 1042 0550 4946     		mov	r1, r9
 1043 0552 E047     		blx	ip
 1044 0554 0246     		mov	r2, r0
 1045 0556 0B46     		mov	r3, r1
 1046 0558 1446     		mov	r4, r2
 1047 055a 23F00045 		bic	r5, r3, #-2147483648
 1048 055e 7B6C     		ldr	r3, [r7, #68]
 1049 0560 23F00042 		bic	r2, r3, #-2147483648
 1050 0564 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 1051 0568 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 1052 056c 1046     		mov	r0, r2
 1053 056e 9847     		blx	r3
 1054 0570 0246     		mov	r2, r0
 1055 0572 0B46     		mov	r3, r1
 1056 0574 4FF00001 		mov	r1, #0
 1057 0578 0E46     		mov	r6, r1
 1058 057a 40F2000C 		movw	ip, #:lower16:__aeabi_dcmplt
 1059 057e C0F2000C 		movt	ip, #:upper16:__aeabi_dcmplt
 1060 0582 2046     		mov	r0, r4
 1061 0584 2946     		mov	r1, r5
 1062 0586 E047     		blx	ip
 1063 0588 0346     		mov	r3, r0
 1064 058a 002B     		cmp	r3, #0
 1065 058c 02D0     		beq	.L37
 1066              	.L38:
 1067 058e 4FF00103 		mov	r3, #1
 1068 0592 1E46     		mov	r6, r3
 1069              	.L37:
 1070 0594 F3B2     		uxtb	r3, r6
 1071 0596 002B     		cmp	r3, #0
 1072 0598 03D0     		beq	.L39
 374:..//utils/multi-steppers/multi-steppers.c **** 				match_ac = -match_ac;
 1073              		.loc 1 374 0
 1074 059a 3B6B     		ldr	r3, [r7, #48]
 1075 059c 83F00043 		eor	r3, r3, #-2147483648
 1076 05a0 3B63     		str	r3, [r7, #48]	@ float
 1077              	.L39:
 375:..//utils/multi-steppers/multi-steppers.c **** 			}
 376:..//utils/multi-steppers/multi-steppers.c **** 			/* and do it */
 377:..//utils/multi-steppers/multi-steppers.c **** 			new_vel = curr_vel + match_ac * dt;
 1078              		.loc 1 377 0
 1079 05a2 40F20003 		movw	r3, #:lower16:dt
 1080 05a6 C0F20003 		movt	r3, #:upper16:dt
 1081 05aa 1A68     		ldr	r2, [r3, #0]	@ float
 1082 05ac 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 1083 05b0 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 1084 05b4 1046     		mov	r0, r2
 1085 05b6 396B     		ldr	r1, [r7, #48]	@ float
 1086 05b8 9847     		blx	r3
 1087 05ba 0346     		mov	r3, r0
 1088 05bc 1A46     		mov	r2, r3
 1089 05be 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 1090 05c2 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 1091 05c6 1046     		mov	r0, r2
 1092 05c8 F96A     		ldr	r1, [r7, #44]	@ float
 1093 05ca 9847     		blx	r3
 1094 05cc 0346     		mov	r3, r0
 1095 05ce BB64     		str	r3, [r7, #72]	@ float
 1096 05d0 00E0     		b	.L36
 1097              	.L51:
 1098              		.loc 1 364 0
 1099 05d2 00BF     		nop
 1100              	.L36:
 378:..//utils/multi-steppers/multi-steppers.c **** 		}
 379:..//utils/multi-steppers/multi-steppers.c **** 		/* apply frequency limit */
 380:..//utils/multi-steppers/multi-steppers.c **** 		if (new_vel > stepgen->max_freq) {
 1101              		.loc 1 380 0
 1102 05d4 7B6D     		ldr	r3, [r7, #84]
 1103 05d6 DA6B     		ldr	r2, [r3, #60]	@ float
 1104 05d8 4FF00003 		mov	r3, #0
 1105 05dc 1E46     		mov	r6, r3
 1106 05de 40F20003 		movw	r3, #:lower16:__aeabi_fcmplt
 1107 05e2 C0F20003 		movt	r3, #:upper16:__aeabi_fcmplt
 1108 05e6 1046     		mov	r0, r2
 1109 05e8 B96C     		ldr	r1, [r7, #72]	@ float
 1110 05ea 9847     		blx	r3
 1111 05ec 0346     		mov	r3, r0
 1112 05ee 002B     		cmp	r3, #0
 1113 05f0 02D0     		beq	.L40
 1114              	.L41:
 1115 05f2 4FF00103 		mov	r3, #1
 1116 05f6 1E46     		mov	r6, r3
 1117              	.L40:
 1118 05f8 F3B2     		uxtb	r3, r6
 1119 05fa 002B     		cmp	r3, #0
 1120 05fc 03D0     		beq	.L42
 381:..//utils/multi-steppers/multi-steppers.c **** 			new_vel = stepgen->max_freq;
 1121              		.loc 1 381 0
 1122 05fe 7B6D     		ldr	r3, [r7, #84]
 1123 0600 DB6B     		ldr	r3, [r3, #60]	@ float
 1124 0602 BB64     		str	r3, [r7, #72]	@ float
 1125 0604 1BE0     		b	.L43
 1126              	.L42:
 382:..//utils/multi-steppers/multi-steppers.c **** 		} else if (new_vel < (-stepgen->max_freq)) {
 1127              		.loc 1 382 0
 1128 0606 7B6D     		ldr	r3, [r7, #84]
 1129 0608 DB6B     		ldr	r3, [r3, #60]	@ float
 1130 060a 83F00042 		eor	r2, r3, #-2147483648
 1131 060e 4FF00003 		mov	r3, #0
 1132 0612 1E46     		mov	r6, r3
 1133 0614 40F20003 		movw	r3, #:lower16:__aeabi_fcmpgt
 1134 0618 C0F20003 		movt	r3, #:upper16:__aeabi_fcmpgt
 1135 061c 1046     		mov	r0, r2
 1136 061e B96C     		ldr	r1, [r7, #72]	@ float
 1137 0620 9847     		blx	r3
 1138 0622 0346     		mov	r3, r0
 1139 0624 002B     		cmp	r3, #0
 1140 0626 02D0     		beq	.L44
 1141              	.L45:
 1142 0628 4FF00103 		mov	r3, #1
 1143 062c 1E46     		mov	r6, r3
 1144              	.L44:
 1145 062e F3B2     		uxtb	r3, r6
 1146 0630 002B     		cmp	r3, #0
 1147 0632 04D0     		beq	.L43
 383:..//utils/multi-steppers/multi-steppers.c **** 			new_vel = (-stepgen->max_freq);
 1148              		.loc 1 383 0
 1149 0634 7B6D     		ldr	r3, [r7, #84]
 1150 0636 DB6B     		ldr	r3, [r3, #60]	@ float
 1151 0638 83F00043 		eor	r3, r3, #-2147483648
 1152 063c BB64     		str	r3, [r7, #72]	@ float
 1153              	.L43:
 384:..//utils/multi-steppers/multi-steppers.c **** 		}
 385:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->freq = new_vel;
 1154              		.loc 1 385 0
 1155 063e 7B6D     		ldr	r3, [r7, #84]
 1156 0640 BA6C     		ldr	r2, [r7, #72]	@ float
 1157 0642 5A65     		str	r2, [r3, #84]	@ float
 386:..//utils/multi-steppers/multi-steppers.c **** 		/* calculate new addval */
 387:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->target_addval = stepgen->freq * freqscale;		
 1158              		.loc 1 387 0
 1159 0644 7B6D     		ldr	r3, [r7, #84]
 1160 0646 596D     		ldr	r1, [r3, #84]	@ float
 1161 0648 40F20003 		movw	r3, #:lower16:freqscale
 1162 064c C0F20003 		movt	r3, #:upper16:freqscale
 1163 0650 1A68     		ldr	r2, [r3, #0]	@ float
 1164 0652 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 1165 0656 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 1166 065a 0846     		mov	r0, r1
 1167 065c 1146     		mov	r1, r2
 1168 065e 9847     		blx	r3
 1169 0660 0346     		mov	r3, r0
 1170 0662 1A46     		mov	r2, r3
 1171 0664 40F20003 		movw	r3, #:lower16:__aeabi_f2iz
 1172 0668 C0F20003 		movt	r3, #:upper16:__aeabi_f2iz
 1173 066c 1046     		mov	r0, r2
 1174 066e 9847     		blx	r3
 1175 0670 0246     		mov	r2, r0
 1176 0672 7B6D     		ldr	r3, [r7, #84]
 1177 0674 5A62     		str	r2, [r3, #36]
 388:..//utils/multi-steppers/multi-steppers.c **** 		if (fabs(stepgen->freq) < 0.001){
 1178              		.loc 1 388 0
 1179 0676 7B6D     		ldr	r3, [r7, #84]
 1180 0678 5B6D     		ldr	r3, [r3, #84]	@ float
 1181 067a 23F00042 		bic	r2, r3, #-2147483648
 1182 067e 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 1183 0682 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 1184 0686 1046     		mov	r0, r2
 1185 0688 9847     		blx	r3
 1186 068a 0246     		mov	r2, r0
 1187 068c 0B46     		mov	r3, r1
 1188 068e 4FF00001 		mov	r1, #0
 1189 0692 0E46     		mov	r6, r1
 1190 0694 40F2000C 		movw	ip, #:lower16:__aeabi_dcmplt
 1191 0698 C0F2000C 		movt	ip, #:upper16:__aeabi_dcmplt
 1192 069c 1046     		mov	r0, r2
 1193 069e 1946     		mov	r1, r3
 1194 06a0 15A3     		adr	r3, .L52+8
 1195 06a2 D3E90023 		ldrd	r2, [r3]
 1196 06a6 E047     		blx	ip
 1197 06a8 0346     		mov	r3, r0
 1198 06aa 002B     		cmp	r3, #0
 1199 06ac 02D0     		beq	.L46
 1200              	.L47:
 1201 06ae 4FF00103 		mov	r3, #1
 1202 06b2 1E46     		mov	r6, r3
 1203              	.L46:
 1204 06b4 F3B2     		uxtb	r3, r6
 1205 06b6 002B     		cmp	r3, #0
 1206 06b8 04D0     		beq	.L48
 389:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->state = 0;			
 1207              		.loc 1 389 0
 1208 06ba 7B6D     		ldr	r3, [r7, #84]
 1209 06bc 4FF00002 		mov	r2, #0
 1210 06c0 1A77     		strb	r2, [r3, #28]
 1211 06c2 03E0     		b	.L18
 1212              	.L48:
 390:..//utils/multi-steppers/multi-steppers.c **** 			//motor stopped
 391:..//utils/multi-steppers/multi-steppers.c **** 		}
 392:..//utils/multi-steppers/multi-steppers.c **** 		else{
 393:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->state = 1;
 1213              		.loc 1 393 0
 1214 06c4 7B6D     		ldr	r3, [r7, #84]
 1215 06c6 4FF00102 		mov	r2, #1
 1216 06ca 1A77     		strb	r2, [r3, #28]
 1217              	.L18:
 1218              		.loc 1 302 0
 1219 06cc FB68     		ldr	r3, [r7, #12]
 1220 06ce 03F10103 		add	r3, r3, #1
 1221 06d2 FB60     		str	r3, [r7, #12]
 1222              	.L16:
 1223 06d4 FB68     		ldr	r3, [r7, #12]
 1224 06d6 012B     		cmp	r3, #1
 1225 06d8 7FF79AAC 		ble	.L49
 394:..//utils/multi-steppers/multi-steppers.c **** 			//motor started..
 395:..//utils/multi-steppers/multi-steppers.c **** 		}
 396:..//utils/multi-steppers/multi-steppers.c **** 		/* calculate new deltalim */
 397:..//utils/multi-steppers/multi-steppers.c **** 		// stepgen->deltalim = stepgen->max_ac * accelscale;	
 398:..//utils/multi-steppers/multi-steppers.c **** 	} // for each stepgen
 399:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 1226              		.loc 1 399 0
 1227 06dc 4FF00103 		mov	r3, #1
 400:..//utils/multi-steppers/multi-steppers.c **** }
 1228              		.loc 1 400 0
 1229 06e0 1846     		mov	r0, r3
 1230 06e2 07F15C07 		add	r7, r7, #92
 1231 06e6 BD46     		mov	sp, r7
 1232 06e8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1233              	.L53:
 1234 06ec AFF30080 		.align	3
 1235              	.L52:
 1236 06f0 2D431CEB 		.word	-350469331
 1237 06f4 E2361A3F 		.word	1058682594
 1238 06f8 FCA9F1D2 		.word	-755914244
 1239 06fc 4D62503F 		.word	1062232653
 1240 0700 00000000 		.word	0
 1241 0704 0000003F 		.word	1056964608
 1242              		.cfi_endproc
 1243              	.LFE33:
 1245              		.section	.text.stepper_stop_distance,"ax",%progbits
 1246              		.align	2
 1247              		.global	stepper_stop_distance
 1248              		.thumb
 1249              		.thumb_func
 1251              	stepper_stop_distance:
 1252              	.LFB34:
 401:..//utils/multi-steppers/multi-steppers.c **** 
 402:..//utils/multi-steppers/multi-steppers.c **** SINGLE stepper_stop_distance(int axis){
 1253              		.loc 1 402 0
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 16
 1256              		@ frame_needed = 1, uses_anonymous_args = 0
 1257 0000 80B5     		push	{r7, lr}
 1258              	.LCFI12:
 1259              		.cfi_def_cfa_offset 8
 1260 0002 84B0     		sub	sp, sp, #16
 1261              	.LCFI13:
 1262              		.cfi_def_cfa_offset 24
 1263 0004 00AF     		add	r7, sp, #0
 1264              		.cfi_offset 14, -4
 1265              		.cfi_offset 7, -8
 1266              	.LCFI14:
 1267              		.cfi_def_cfa_register 7
 1268 0006 7860     		str	r0, [r7, #4]
 403:..//utils/multi-steppers/multi-steppers.c **** 	profiler_t *p = &Profiler[axis];
 1269              		.loc 1 403 0
 1270 0008 7A68     		ldr	r2, [r7, #4]
 1271 000a 1346     		mov	r3, r2
 1272 000c 4FEAC303 		lsl	r3, r3, #3
 1273 0010 C2EB0303 		rsb	r3, r2, r3
 1274 0014 4FEAC303 		lsl	r3, r3, #3
 1275 0018 1A46     		mov	r2, r3
 1276 001a 40F20003 		movw	r3, #:lower16:Profiler
 1277 001e C0F20003 		movt	r3, #:upper16:Profiler
 1278 0022 1344     		add	r3, r2, r3
 1279 0024 BB60     		str	r3, [r7, #8]
 404:..//utils/multi-steppers/multi-steppers.c **** 	// SINGLE d_stop = p->v_next * fabsf(p->v_next) * p->ainv2; // delta stop...stop offset	
 405:..//utils/multi-steppers/multi-steppers.c **** 	SINGLE d_stop = p->v_next * fabsf(p->v_next) * p->dinv2; // delta stop...stop offset	
 1280              		.loc 1 405 0
 1281 0026 BB68     		ldr	r3, [r7, #8]
 1282 0028 5969     		ldr	r1, [r3, #20]	@ float
 1283 002a BB68     		ldr	r3, [r7, #8]
 1284 002c 5B69     		ldr	r3, [r3, #20]	@ float
 1285 002e 23F00042 		bic	r2, r3, #-2147483648
 1286 0032 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 1287 0036 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 1288 003a 0846     		mov	r0, r1
 1289 003c 1146     		mov	r1, r2
 1290 003e 9847     		blx	r3
 1291 0040 0346     		mov	r3, r0
 1292 0042 1946     		mov	r1, r3
 1293 0044 BB68     		ldr	r3, [r7, #8]
 1294 0046 5A6B     		ldr	r2, [r3, #52]	@ float
 1295 0048 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 1296 004c C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 1297 0050 0846     		mov	r0, r1
 1298 0052 1146     		mov	r1, r2
 1299 0054 9847     		blx	r3
 1300 0056 0346     		mov	r3, r0
 1301 0058 FB60     		str	r3, [r7, #12]	@ float
 406:..//utils/multi-steppers/multi-steppers.c **** 	return d_stop;
 1302              		.loc 1 406 0
 1303 005a FB68     		ldr	r3, [r7, #12]	@ float
 407:..//utils/multi-steppers/multi-steppers.c **** }
 1304              		.loc 1 407 0
 1305 005c 1846     		mov	r0, r3
 1306 005e 07F11007 		add	r7, r7, #16
 1307 0062 BD46     		mov	sp, r7
 1308 0064 80BD     		pop	{r7, pc}
 1309              		.cfi_endproc
 1310              	.LFE34:
 1312              		.global	__aeabi_i2f
 1313              		.global	__aeabi_fcmpeq
 1314              		.global	__aeabi_ddiv
 1315 0066 00BF     		.section	.text.stepper_next_position,"ax",%progbits
 1316              		.align	2
 1317              		.global	stepper_next_position
 1318              		.thumb
 1319              		.thumb_func
 1321              	stepper_next_position:
 1322              	.LFB35:
 408:..//utils/multi-steppers/multi-steppers.c **** 
 409:..//utils/multi-steppers/multi-steppers.c **** int32_t stepper_next_position(profiler_t *p)
 410:..//utils/multi-steppers/multi-steppers.c **** {
 1323              		.loc 1 410 0
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 32
 1326              		@ frame_needed = 1, uses_anonymous_args = 0
 1327 0000 B0B5     		push	{r4, r5, r7, lr}
 1328              	.LCFI15:
 1329              		.cfi_def_cfa_offset 16
 1330 0002 88B0     		sub	sp, sp, #32
 1331              	.LCFI16:
 1332              		.cfi_def_cfa_offset 48
 1333 0004 00AF     		add	r7, sp, #0
 1334              		.cfi_offset 14, -4
 1335              		.cfi_offset 7, -8
 1336              		.cfi_offset 5, -12
 1337              		.cfi_offset 4, -16
 1338              	.LCFI17:
 1339              		.cfi_def_cfa_register 7
 1340 0006 7860     		str	r0, [r7, #4]
 411:..//utils/multi-steppers/multi-steppers.c **** 	SINGLE a, a_hard;
 412:..//utils/multi-steppers/multi-steppers.c **** 	
 413:..//utils/multi-steppers/multi-steppers.c **** 	//ainv2 = 0.5/p->a_max;	// move outside if amax known
 414:..//utils/multi-steppers/multi-steppers.c **** 	p->x_final=(int32_t)(p->jointpos + p->offset);
 1341              		.loc 1 414 0
 1342 0008 7B68     		ldr	r3, [r7, #4]
 1343 000a D969     		ldr	r1, [r3, #28]	@ float
 1344 000c 7B68     		ldr	r3, [r7, #4]
 1345 000e 1A6A     		ldr	r2, [r3, #32]	@ float
 1346 0010 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 1347 0014 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 1348 0018 0846     		mov	r0, r1
 1349 001a 1146     		mov	r1, r2
 1350 001c 9847     		blx	r3
 1351 001e 0346     		mov	r3, r0
 1352 0020 1A46     		mov	r2, r3
 1353 0022 40F20003 		movw	r3, #:lower16:__aeabi_f2iz
 1354 0026 C0F20003 		movt	r3, #:upper16:__aeabi_f2iz
 1355 002a 1046     		mov	r0, r2
 1356 002c 9847     		blx	r3
 1357 002e 0246     		mov	r2, r0
 1358 0030 7B68     		ldr	r3, [r7, #4]
 1359 0032 1A60     		str	r2, [r3, #0]
 415:..//utils/multi-steppers/multi-steppers.c **** 	// SINGLE d_stop = p->v_next * fabsf(p->v_next) * p->ainv2; // delta stop...stop offset
 416:..//utils/multi-steppers/multi-steppers.c **** 	SINGLE d_stop = p->v_next * fabsf(p->v_next) * p->dinv2; // delta stop...stop offset
 1360              		.loc 1 416 0
 1361 0034 7B68     		ldr	r3, [r7, #4]
 1362 0036 5969     		ldr	r1, [r3, #20]	@ float
 1363 0038 7B68     		ldr	r3, [r7, #4]
 1364 003a 5B69     		ldr	r3, [r3, #20]	@ float
 1365 003c 23F00042 		bic	r2, r3, #-2147483648
 1366 0040 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 1367 0044 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 1368 0048 0846     		mov	r0, r1
 1369 004a 1146     		mov	r1, r2
 1370 004c 9847     		blx	r3
 1371 004e 0346     		mov	r3, r0
 1372 0050 1946     		mov	r1, r3
 1373 0052 7B68     		ldr	r3, [r7, #4]
 1374 0054 5A6B     		ldr	r2, [r3, #52]	@ float
 1375 0056 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 1376 005a C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 1377 005e 0846     		mov	r0, r1
 1378 0060 1146     		mov	r1, r2
 1379 0062 9847     		blx	r3
 1380 0064 0346     		mov	r3, r0
 1381 0066 7B61     		str	r3, [r7, #20]	@ float
 417:..//utils/multi-steppers/multi-steppers.c **** 	int32_t int_d_stop = (int32_t) d_stop;
 1382              		.loc 1 417 0
 1383 0068 40F20003 		movw	r3, #:lower16:__aeabi_f2iz
 1384 006c C0F20003 		movt	r3, #:upper16:__aeabi_f2iz
 1385 0070 7869     		ldr	r0, [r7, #20]	@ float
 1386 0072 9847     		blx	r3
 1387 0074 0346     		mov	r3, r0
 1388 0076 BB61     		str	r3, [r7, #24]
 418:..//utils/multi-steppers/multi-steppers.c **** 	int32_t x_err = p->x_final - p->x_curr;
 1389              		.loc 1 418 0
 1390 0078 7B68     		ldr	r3, [r7, #4]
 1391 007a 1A68     		ldr	r2, [r3, #0]
 1392 007c 7B68     		ldr	r3, [r7, #4]
 1393 007e DB68     		ldr	r3, [r3, #12]
 1394 0080 C3EB0203 		rsb	r3, r3, r2
 1395 0084 FB61     		str	r3, [r7, #28]
 419:..//utils/multi-steppers/multi-steppers.c **** 	
 420:..//utils/multi-steppers/multi-steppers.c **** 	// Stop now...
 421:..//utils/multi-steppers/multi-steppers.c **** 	if (labs(p->x_curr - p->x_final) <= p->eps_x) {
 1396              		.loc 1 421 0
 1397 0086 7B68     		ldr	r3, [r7, #4]
 1398 0088 DA68     		ldr	r2, [r3, #12]
 1399 008a 7B68     		ldr	r3, [r7, #4]
 1400 008c 1B68     		ldr	r3, [r3, #0]
 1401 008e C3EB0203 		rsb	r3, r3, r2
 1402 0092 83EAE372 		eor	r2, r3, r3, asr #31
 1403 0096 A2EBE372 		sub	r2, r2, r3, asr #31
 1404 009a 7B68     		ldr	r3, [r7, #4]
 1405 009c 9B6A     		ldr	r3, [r3, #40]
 1406 009e 9A42     		cmp	r2, r3
 1407 00a0 21DC     		bgt	.L57
 422:..//utils/multi-steppers/multi-steppers.c **** 	/* 	printf("\tSTOP\t\t"); */
 423:..//utils/multi-steppers/multi-steppers.c **** 		//print_dbg("\n\rSTOP");
 424:..//utils/multi-steppers/multi-steppers.c **** 		p->x_next = (float) p->x_final;
 1408              		.loc 1 424 0
 1409 00a2 7B68     		ldr	r3, [r7, #4]
 1410 00a4 1A68     		ldr	r2, [r3, #0]
 1411 00a6 40F20003 		movw	r3, #:lower16:__aeabi_i2f
 1412 00aa C0F20003 		movt	r3, #:upper16:__aeabi_i2f
 1413 00ae 1046     		mov	r0, r2
 1414 00b0 9847     		blx	r3
 1415 00b2 0246     		mov	r2, r0
 1416 00b4 7B68     		ldr	r3, [r7, #4]
 1417 00b6 1A61     		str	r2, [r3, #16]	@ float
 425:..//utils/multi-steppers/multi-steppers.c **** 		p->v_next = 0.0;
 1418              		.loc 1 425 0
 1419 00b8 7B68     		ldr	r3, [r7, #4]
 1420 00ba DFF85424 		ldr	r2, .L97	@ float
 1421 00be 5A61     		str	r2, [r3, #20]	@ float
 426:..//utils/multi-steppers/multi-steppers.c **** 		//mode_trace	= MP_STOP;
 427:..//utils/multi-steppers/multi-steppers.c **** 		p->x_curr = (int32_t) p->x_next;
 1422              		.loc 1 427 0
 1423 00c0 7B68     		ldr	r3, [r7, #4]
 1424 00c2 1A69     		ldr	r2, [r3, #16]	@ float
 1425 00c4 40F20003 		movw	r3, #:lower16:__aeabi_f2iz
 1426 00c8 C0F20003 		movt	r3, #:upper16:__aeabi_f2iz
 1427 00cc 1046     		mov	r0, r2
 1428 00ce 9847     		blx	r3
 1429 00d0 0246     		mov	r2, r0
 1430 00d2 7B68     		ldr	r3, [r7, #4]
 1431 00d4 DA60     		str	r2, [r3, #12]
 428:..//utils/multi-steppers/multi-steppers.c **** 		p->state = MOTOR_STOP;
 1432              		.loc 1 428 0
 1433 00d6 7B68     		ldr	r3, [r7, #4]
 1434 00d8 4FF00002 		mov	r2, #0
 1435 00dc 83F82420 		strb	r2, [r3, #36]
 429:..//utils/multi-steppers/multi-steppers.c **** 		return p->x_curr;
 1436              		.loc 1 429 0
 1437 00e0 7B68     		ldr	r3, [r7, #4]
 1438 00e2 DB68     		ldr	r3, [r3, #12]
 1439 00e4 0EE2     		b	.L58
 1440              	.L57:
 430:..//utils/multi-steppers/multi-steppers.c **** 	}
 431:..//utils/multi-steppers/multi-steppers.c **** 	
 432:..//utils/multi-steppers/multi-steppers.c **** 	// ramp-down/projected overshoot
 433:..//utils/multi-steppers/multi-steppers.c **** 	if (labs((p->x_final - p->x_curr) - int_d_stop) <= p->eps_x) { // prevent overshoot
 1441              		.loc 1 433 0
 1442 00e6 7B68     		ldr	r3, [r7, #4]
 1443 00e8 1A68     		ldr	r2, [r3, #0]
 1444 00ea 7B68     		ldr	r3, [r7, #4]
 1445 00ec DB68     		ldr	r3, [r3, #12]
 1446 00ee C3EB0202 		rsb	r2, r3, r2
 1447 00f2 BB69     		ldr	r3, [r7, #24]
 1448 00f4 C3EB0203 		rsb	r3, r3, r2
 1449 00f8 83EAE372 		eor	r2, r3, r3, asr #31
 1450 00fc A2EBE372 		sub	r2, r2, r3, asr #31
 1451 0100 7B68     		ldr	r3, [r7, #4]
 1452 0102 9B6A     		ldr	r3, [r3, #40]
 1453 0104 9A42     		cmp	r2, r3
 1454 0106 5FDC     		bgt	.L59
 434:..//utils/multi-steppers/multi-steppers.c **** 		//if (approx((p->x_final-x_curr), d_stop)) {				
 435:..//utils/multi-steppers/multi-steppers.c **** 		//p->v_next = p->v_next - sign(p->v_next)*p->a_max*T;
 436:..//utils/multi-steppers/multi-steppers.c **** 		// p->v_next = p->v_next - sign(p->v_next)*p->a_max;
 437:..//utils/multi-steppers/multi-steppers.c **** 		p->v_next = p->v_next - sign(p->v_next)*p->d_max;
 1455              		.loc 1 437 0
 1456 0108 7B68     		ldr	r3, [r7, #4]
 1457 010a 5D69     		ldr	r5, [r3, #20]	@ float
 1458 010c 7B68     		ldr	r3, [r7, #4]
 1459 010e 5A69     		ldr	r2, [r3, #20]	@ float
 1460 0110 40F20003 		movw	r3, #:lower16:__aeabi_fcmpeq
 1461 0114 C0F20003 		movt	r3, #:upper16:__aeabi_fcmpeq
 1462 0118 1046     		mov	r0, r2
 1463 011a FD49     		ldr	r1, .L97	@ float
 1464 011c 9847     		blx	r3
 1465 011e 0346     		mov	r3, r0
 1466 0120 002B     		cmp	r3, #0
 1467 0122 01D0     		beq	.L95
 1468              	.L93:
 1469 0124 FA4A     		ldr	r2, .L97	@ float
 1470 0126 18E0     		b	.L62
 1471              	.L95:
 1472 0128 7B68     		ldr	r3, [r7, #4]
 1473 012a 5A69     		ldr	r2, [r3, #20]	@ float
 1474 012c 4FF00003 		mov	r3, #0
 1475 0130 1C46     		mov	r4, r3
 1476 0132 40F20003 		movw	r3, #:lower16:__aeabi_fcmpgt
 1477 0136 C0F20003 		movt	r3, #:upper16:__aeabi_fcmpgt
 1478 013a 1046     		mov	r0, r2
 1479 013c F449     		ldr	r1, .L97	@ float
 1480 013e 9847     		blx	r3
 1481 0140 0346     		mov	r3, r0
 1482 0142 002B     		cmp	r3, #0
 1483 0144 02D0     		beq	.L63
 1484              	.L64:
 1485 0146 4FF00103 		mov	r3, #1
 1486 014a 1C46     		mov	r4, r3
 1487              	.L63:
 1488 014c E3B2     		uxtb	r3, r4
 1489 014e 002B     		cmp	r3, #0
 1490 0150 01D0     		beq	.L65
 1491 0152 F04B     		ldr	r3, .L97+4	@ float
 1492 0154 00E0     		b	.L66
 1493              	.L65:
 1494 0156 F04B     		ldr	r3, .L97+8	@ float
 1495              	.L66:
 1496 0158 1A46     		mov	r2, r3
 1497              	.L62:
 1498 015a 7B68     		ldr	r3, [r7, #4]
 1499 015c 196B     		ldr	r1, [r3, #48]	@ float
 1500 015e 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 1501 0162 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 1502 0166 1046     		mov	r0, r2
 1503 0168 9847     		blx	r3
 1504 016a 0346     		mov	r3, r0
 1505 016c 1A46     		mov	r2, r3
 1506 016e 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 1507 0172 C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 1508 0176 2846     		mov	r0, r5
 1509 0178 1146     		mov	r1, r2
 1510 017a 9847     		blx	r3
 1511 017c 0346     		mov	r3, r0
 1512 017e 1A46     		mov	r2, r3
 1513 0180 7B68     		ldr	r3, [r7, #4]
 1514 0182 5A61     		str	r2, [r3, #20]	@ float
 438:..//utils/multi-steppers/multi-steppers.c **** 		//p->x_next = p->x_next	+ (p->v_next*T);			// pos_diff is for typecasting
 439:..//utils/multi-steppers/multi-steppers.c **** 		p->x_next = p->x_next	+ (p->v_next);			// pos_diff is for typecasting
 1515              		.loc 1 439 0
 1516 0184 7B68     		ldr	r3, [r7, #4]
 1517 0186 1969     		ldr	r1, [r3, #16]	@ float
 1518 0188 7B68     		ldr	r3, [r7, #4]
 1519 018a 5A69     		ldr	r2, [r3, #20]	@ float
 1520 018c 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 1521 0190 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 1522 0194 0846     		mov	r0, r1
 1523 0196 1146     		mov	r1, r2
 1524 0198 9847     		blx	r3
 1525 019a 0346     		mov	r3, r0
 1526 019c 1A46     		mov	r2, r3
 1527 019e 7B68     		ldr	r3, [r7, #4]
 1528 01a0 1A61     		str	r2, [r3, #16]	@ float
 440:..//utils/multi-steppers/multi-steppers.c **** 		p->x_curr = (int32_t) p->x_next;
 1529              		.loc 1 440 0
 1530 01a2 7B68     		ldr	r3, [r7, #4]
 1531 01a4 1A69     		ldr	r2, [r3, #16]	@ float
 1532 01a6 40F20003 		movw	r3, #:lower16:__aeabi_f2iz
 1533 01aa C0F20003 		movt	r3, #:upper16:__aeabi_f2iz
 1534 01ae 1046     		mov	r0, r2
 1535 01b0 9847     		blx	r3
 1536 01b2 0246     		mov	r2, r0
 1537 01b4 7B68     		ldr	r3, [r7, #4]
 1538 01b6 DA60     		str	r2, [r3, #12]
 441:..//utils/multi-steppers/multi-steppers.c **** 		p->state = MOTOR_RAMPDOWN;
 1539              		.loc 1 441 0
 1540 01b8 7B68     		ldr	r3, [r7, #4]
 1541 01ba 4FF00202 		mov	r2, #2
 1542 01be 83F82420 		strb	r2, [r3, #36]
 442:..//utils/multi-steppers/multi-steppers.c **** 		return p->x_curr;
 1543              		.loc 1 442 0
 1544 01c2 7B68     		ldr	r3, [r7, #4]
 1545 01c4 DB68     		ldr	r3, [r3, #12]
 1546 01c6 9DE1     		b	.L58
 1547              	.L59:
 443:..//utils/multi-steppers/multi-steppers.c **** 
 444:..//utils/multi-steppers/multi-steppers.c **** 	}
 445:..//utils/multi-steppers/multi-steppers.c **** 	
 446:..//utils/multi-steppers/multi-steppers.c **** 	if (((int_d_stop - p->eps_x > x_err) && (x_err > 0))
 1548              		.loc 1 446 0
 1549 01c8 7B68     		ldr	r3, [r7, #4]
 1550 01ca 9B6A     		ldr	r3, [r3, #40]
 1551 01cc BA69     		ldr	r2, [r7, #24]
 1552 01ce C3EB0202 		rsb	r2, r3, r2
 1553 01d2 FB69     		ldr	r3, [r7, #28]
 1554 01d4 9A42     		cmp	r2, r3
 1555 01d6 02DD     		ble	.L67
 1556 01d8 FB69     		ldr	r3, [r7, #28]
 1557 01da 002B     		cmp	r3, #0
 1558 01dc 0ADC     		bgt	.L68
 1559              	.L67:
 447:..//utils/multi-steppers/multi-steppers.c **** 					|| ((int_d_stop + p->eps_x < x_err) && (x_err < 0))){	// detect overshoot and take action
 1560              		.loc 1 447 0
 1561 01de 7B68     		ldr	r3, [r7, #4]
 1562 01e0 9A6A     		ldr	r2, [r3, #40]
 1563 01e2 BB69     		ldr	r3, [r7, #24]
 1564 01e4 1A44     		add	r2, r2, r3
 1565              		.loc 1 446 0
 1566 01e6 FB69     		ldr	r3, [r7, #28]
 1567 01e8 9A42     		cmp	r2, r3
 1568 01ea 80F28380 		bge	.L69
 1569 01ee FB69     		ldr	r3, [r7, #28]
 1570 01f0 002B     		cmp	r3, #0
 1571 01f2 7FDA     		bge	.L69
 1572              	.L68:
 448:..//utils/multi-steppers/multi-steppers.c **** 		a_hard = 0.5*p->v_next*p->v_next/(SINGLE)x_err;
 1573              		.loc 1 448 0
 1574 01f4 7B68     		ldr	r3, [r7, #4]
 1575 01f6 5A69     		ldr	r2, [r3, #20]	@ float
 1576 01f8 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 1577 01fc C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 1578 0200 1046     		mov	r0, r2
 1579 0202 9847     		blx	r3
 1580 0204 0246     		mov	r2, r0
 1581 0206 0B46     		mov	r3, r1
 1582 0208 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 1583 020c C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 1584 0210 1046     		mov	r0, r2
 1585 0212 1946     		mov	r1, r3
 1586 0214 4FF00002 		mov	r2, #0
 1587 0218 4FF07E53 		mov	r3, #1065353216
 1588 021c 03F5C003 		add	r3, r3, #6291456
 1589 0220 E047     		blx	ip
 1590 0222 0246     		mov	r2, r0
 1591 0224 0B46     		mov	r3, r1
 1592 0226 1446     		mov	r4, r2
 1593 0228 1D46     		mov	r5, r3
 1594 022a 7B68     		ldr	r3, [r7, #4]
 1595 022c 5A69     		ldr	r2, [r3, #20]	@ float
 1596 022e 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 1597 0232 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 1598 0236 1046     		mov	r0, r2
 1599 0238 9847     		blx	r3
 1600 023a 0246     		mov	r2, r0
 1601 023c 0B46     		mov	r3, r1
 1602 023e 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 1603 0242 C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 1604 0246 2046     		mov	r0, r4
 1605 0248 2946     		mov	r1, r5
 1606 024a E047     		blx	ip
 1607 024c 0246     		mov	r2, r0
 1608 024e 0B46     		mov	r3, r1
 1609 0250 1446     		mov	r4, r2
 1610 0252 1D46     		mov	r5, r3
 1611 0254 40F20003 		movw	r3, #:lower16:__aeabi_i2f
 1612 0258 C0F20003 		movt	r3, #:upper16:__aeabi_i2f
 1613 025c F869     		ldr	r0, [r7, #28]
 1614 025e 9847     		blx	r3
 1615 0260 0246     		mov	r2, r0
 1616 0262 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 1617 0266 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 1618 026a 1046     		mov	r0, r2
 1619 026c 9847     		blx	r3
 1620 026e 0246     		mov	r2, r0
 1621 0270 0B46     		mov	r3, r1
 1622 0272 40F2000C 		movw	ip, #:lower16:__aeabi_ddiv
 1623 0276 C0F2000C 		movt	ip, #:upper16:__aeabi_ddiv
 1624 027a 2046     		mov	r0, r4
 1625 027c 2946     		mov	r1, r5
 1626 027e E047     		blx	ip
 1627 0280 0246     		mov	r2, r0
 1628 0282 0B46     		mov	r3, r1
 1629 0284 1046     		mov	r0, r2
 1630 0286 1946     		mov	r1, r3
 1631 0288 40F20003 		movw	r3, #:lower16:__aeabi_d2f
 1632 028c C0F20003 		movt	r3, #:upper16:__aeabi_d2f
 1633 0290 9847     		blx	r3
 1634 0292 0346     		mov	r3, r0
 1635 0294 3B61     		str	r3, [r7, #16]	@ float
 449:..//utils/multi-steppers/multi-steppers.c **** 		p->v_next = p->v_next - a_hard*T;
 1636              		.loc 1 449 0
 1637 0296 7B68     		ldr	r3, [r7, #4]
 1638 0298 5A69     		ldr	r2, [r3, #20]	@ float
 1639 029a 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 1640 029e C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 1641 02a2 1046     		mov	r0, r2
 1642 02a4 3969     		ldr	r1, [r7, #16]	@ float
 1643 02a6 9847     		blx	r3
 1644 02a8 0346     		mov	r3, r0
 1645 02aa 1A46     		mov	r2, r3
 1646 02ac 7B68     		ldr	r3, [r7, #4]
 1647 02ae 5A61     		str	r2, [r3, #20]	@ float
 450:..//utils/multi-steppers/multi-steppers.c **** 		p->x_next = (SINGLE) p->x_next + (p->v_next*T);			// pos_diff is for typecasting
 1648              		.loc 1 450 0
 1649 02b0 7B68     		ldr	r3, [r7, #4]
 1650 02b2 1969     		ldr	r1, [r3, #16]	@ float
 1651 02b4 7B68     		ldr	r3, [r7, #4]
 1652 02b6 5A69     		ldr	r2, [r3, #20]	@ float
 1653 02b8 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 1654 02bc C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 1655 02c0 0846     		mov	r0, r1
 1656 02c2 1146     		mov	r1, r2
 1657 02c4 9847     		blx	r3
 1658 02c6 0346     		mov	r3, r0
 1659 02c8 1A46     		mov	r2, r3
 1660 02ca 7B68     		ldr	r3, [r7, #4]
 1661 02cc 1A61     		str	r2, [r3, #16]	@ float
 451:..//utils/multi-steppers/multi-steppers.c **** 		p->x_curr = (int32_t) p->x_next;
 1662              		.loc 1 451 0
 1663 02ce 7B68     		ldr	r3, [r7, #4]
 1664 02d0 1A69     		ldr	r2, [r3, #16]	@ float
 1665 02d2 40F20003 		movw	r3, #:lower16:__aeabi_f2iz
 1666 02d6 C0F20003 		movt	r3, #:upper16:__aeabi_f2iz
 1667 02da 1046     		mov	r0, r2
 1668 02dc 9847     		blx	r3
 1669 02de 0246     		mov	r2, r0
 1670 02e0 7B68     		ldr	r3, [r7, #4]
 1671 02e2 DA60     		str	r2, [r3, #12]
 452:..//utils/multi-steppers/multi-steppers.c **** 		p->state = MOTOR_RAMPDOWN;
 1672              		.loc 1 452 0
 1673 02e4 7B68     		ldr	r3, [r7, #4]
 1674 02e6 4FF00202 		mov	r2, #2
 1675 02ea 83F82420 		strb	r2, [r3, #36]
 453:..//utils/multi-steppers/multi-steppers.c **** 	
 454:..//utils/multi-steppers/multi-steppers.c **** 		return p->x_curr;
 1676              		.loc 1 454 0
 1677 02ee 7B68     		ldr	r3, [r7, #4]
 1678 02f0 DB68     		ldr	r3, [r3, #12]
 1679 02f2 07E1     		b	.L58
 1680              	.L69:
 455:..//utils/multi-steppers/multi-steppers.c **** 	}
 456:..//utils/multi-steppers/multi-steppers.c **** 
 457:..//utils/multi-steppers/multi-steppers.c **** 	// overshoot
 458:..//utils/multi-steppers/multi-steppers.c **** 	// if (((x_err > 0) && (p->v_next + p->a_max*T < 0))
 459:..//utils/multi-steppers/multi-steppers.c **** 	if (((x_err > 0) && (p->v_next + p->d_max < 0))
 1681              		.loc 1 459 0
 1682 02f4 FB69     		ldr	r3, [r7, #28]
 1683 02f6 002B     		cmp	r3, #0
 1684 02f8 1FDD     		ble	.L70
 1685 02fa 7B68     		ldr	r3, [r7, #4]
 1686 02fc 5969     		ldr	r1, [r3, #20]	@ float
 1687 02fe 7B68     		ldr	r3, [r7, #4]
 1688 0300 1A6B     		ldr	r2, [r3, #48]	@ float
 1689 0302 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 1690 0306 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 1691 030a 0846     		mov	r0, r1
 1692 030c 1146     		mov	r1, r2
 1693 030e 9847     		blx	r3
 1694 0310 0346     		mov	r3, r0
 1695 0312 1A46     		mov	r2, r3
 1696 0314 4FF00003 		mov	r3, #0
 1697 0318 1C46     		mov	r4, r3
 1698 031a 40F20003 		movw	r3, #:lower16:__aeabi_fcmplt
 1699 031e C0F20003 		movt	r3, #:upper16:__aeabi_fcmplt
 1700 0322 1046     		mov	r0, r2
 1701 0324 7A49     		ldr	r1, .L97	@ float
 1702 0326 9847     		blx	r3
 1703 0328 0346     		mov	r3, r0
 1704 032a 002B     		cmp	r3, #0
 1705 032c 02D0     		beq	.L71
 1706              	.L72:
 1707 032e 4FF00103 		mov	r3, #1
 1708 0332 1C46     		mov	r4, r3
 1709              	.L71:
 1710 0334 E3B2     		uxtb	r3, r4
 1711 0336 002B     		cmp	r3, #0
 1712 0338 22D1     		bne	.L73
 1713              	.L70:
 1714 033a FB69     		ldr	r3, [r7, #28]
 1715 033c 002B     		cmp	r3, #0
 1716 033e 35DA     		bge	.L74
 460:..//utils/multi-steppers/multi-steppers.c **** 			// || ((x_err < 0) && (p->v_next - p->a_max*T > 0))){
 461:..//utils/multi-steppers/multi-steppers.c **** 			|| ((x_err < 0) && (p->v_next - p->d_max > 0))){
 1717              		.loc 1 461 0
 1718 0340 7B68     		ldr	r3, [r7, #4]
 1719 0342 5969     		ldr	r1, [r3, #20]	@ float
 1720 0344 7B68     		ldr	r3, [r7, #4]
 1721 0346 1A6B     		ldr	r2, [r3, #48]	@ float
 1722 0348 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 1723 034c C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 1724 0350 0846     		mov	r0, r1
 1725 0352 1146     		mov	r1, r2
 1726 0354 9847     		blx	r3
 1727 0356 0346     		mov	r3, r0
 1728 0358 1A46     		mov	r2, r3
 1729 035a 4FF00003 		mov	r3, #0
 1730 035e 1C46     		mov	r4, r3
 1731 0360 40F20003 		movw	r3, #:lower16:__aeabi_fcmpgt
 1732 0364 C0F20003 		movt	r3, #:upper16:__aeabi_fcmpgt
 1733 0368 1046     		mov	r0, r2
 1734 036a 6949     		ldr	r1, .L97	@ float
 1735 036c 9847     		blx	r3
 1736 036e 0346     		mov	r3, r0
 1737 0370 002B     		cmp	r3, #0
 1738 0372 02D0     		beq	.L75
 1739              	.L76:
 1740 0374 4FF00103 		mov	r3, #1
 1741 0378 1C46     		mov	r4, r3
 1742              	.L75:
 1743 037a E3B2     		uxtb	r3, r4
 1744              		.loc 1 459 0
 1745 037c 002B     		cmp	r3, #0
 1746 037e 15D0     		beq	.L74
 1747              	.L73:
 462:..//utils/multi-steppers/multi-steppers.c **** 				//mode_trace = MP_OVERSHOOT;
 463:..//utils/multi-steppers/multi-steppers.c **** 			//	printf("OHS \t\t");
 464:..//utils/multi-steppers/multi-steppers.c **** 			//	print_dbg("\n\rOHS");
 465:..//utils/multi-steppers/multi-steppers.c **** 		p->v_next = 0.0;
 1748              		.loc 1 465 0
 1749 0380 7B68     		ldr	r3, [r7, #4]
 1750 0382 634A     		ldr	r2, .L97	@ float
 1751 0384 5A61     		str	r2, [r3, #20]	@ float
 466:..//utils/multi-steppers/multi-steppers.c **** 		p->x_next = (SINGLE)p->x_curr;
 1752              		.loc 1 466 0
 1753 0386 7B68     		ldr	r3, [r7, #4]
 1754 0388 DA68     		ldr	r2, [r3, #12]
 1755 038a 40F20003 		movw	r3, #:lower16:__aeabi_i2f
 1756 038e C0F20003 		movt	r3, #:upper16:__aeabi_i2f
 1757 0392 1046     		mov	r0, r2
 1758 0394 9847     		blx	r3
 1759 0396 0246     		mov	r2, r0
 1760 0398 7B68     		ldr	r3, [r7, #4]
 1761 039a 1A61     		str	r2, [r3, #16]	@ float
 467:..//utils/multi-steppers/multi-steppers.c **** 		p->state = MOTOR_OVERSHOOT;
 1762              		.loc 1 467 0
 1763 039c 7B68     		ldr	r3, [r7, #4]
 1764 039e 4FF00302 		mov	r2, #3
 1765 03a2 83F82420 		strb	r2, [r3, #36]
 468:..//utils/multi-steppers/multi-steppers.c **** 		return p->x_curr;
 1766              		.loc 1 468 0
 1767 03a6 7B68     		ldr	r3, [r7, #4]
 1768 03a8 DB68     		ldr	r3, [r3, #12]
 1769 03aa ABE0     		b	.L58
 1770              	.L74:
 469:..//utils/multi-steppers/multi-steppers.c **** 	}
 470:..//utils/multi-steppers/multi-steppers.c **** 	
 471:..//utils/multi-steppers/multi-steppers.c **** 	// ramp-up & coasting
 472:..//utils/multi-steppers/multi-steppers.c **** 	a = (SINGLE)sign(x_err);
 1771              		.loc 1 472 0
 1772 03ac FB69     		ldr	r3, [r7, #28]
 1773 03ae 002B     		cmp	r3, #0
 1774 03b0 06D0     		beq	.L77
 1775 03b2 FB69     		ldr	r3, [r7, #28]
 1776 03b4 002B     		cmp	r3, #0
 1777 03b6 01DD     		ble	.L78
 1778 03b8 564B     		ldr	r3, .L97+4	@ float
 1779 03ba 00E0     		b	.L79
 1780              	.L78:
 1781 03bc 564B     		ldr	r3, .L97+8	@ float
 1782              	.L79:
 1783 03be 00E0     		b	.L80
 1784              	.L77:
 1785 03c0 534B     		ldr	r3, .L97	@ float
 1786              	.L80:
 1787 03c2 FB60     		str	r3, [r7, #12]	@ float
 473:..//utils/multi-steppers/multi-steppers.c **** 	a*= p->a_max;
 1788              		.loc 1 473 0
 1789 03c4 7B68     		ldr	r3, [r7, #4]
 1790 03c6 9A68     		ldr	r2, [r3, #8]	@ float
 1791 03c8 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 1792 03cc C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 1793 03d0 F868     		ldr	r0, [r7, #12]	@ float
 1794 03d2 1146     		mov	r1, r2
 1795 03d4 9847     		blx	r3
 1796 03d6 0346     		mov	r3, r0
 1797 03d8 FB60     		str	r3, [r7, #12]	@ float
 474:..//utils/multi-steppers/multi-steppers.c **** 	//v_next = sign(v_curr + a*T) * min(fabsf(v_curr + a*T), p->v_max);
 475:..//utils/multi-steppers/multi-steppers.c **** 	p->v_next = (SINGLE) sign(p->v_next + a) * min(fabsf(p->v_next + a), p->v_max);
 1798              		.loc 1 475 0
 1799 03da 7B68     		ldr	r3, [r7, #4]
 1800 03dc 5A69     		ldr	r2, [r3, #20]	@ float
 1801 03de 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 1802 03e2 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 1803 03e6 1046     		mov	r0, r2
 1804 03e8 F968     		ldr	r1, [r7, #12]	@ float
 1805 03ea 9847     		blx	r3
 1806 03ec 0346     		mov	r3, r0
 1807 03ee 1A46     		mov	r2, r3
 1808 03f0 40F20003 		movw	r3, #:lower16:__aeabi_fcmpeq
 1809 03f4 C0F20003 		movt	r3, #:upper16:__aeabi_fcmpeq
 1810 03f8 1046     		mov	r0, r2
 1811 03fa 4549     		ldr	r1, .L97	@ float
 1812 03fc 9847     		blx	r3
 1813 03fe 0346     		mov	r3, r0
 1814 0400 002B     		cmp	r3, #0
 1815 0402 01D0     		beq	.L96
 1816              	.L94:
 1817 0404 424C     		ldr	r4, .L97	@ float
 1818 0406 21E0     		b	.L83
 1819              	.L96:
 1820 0408 7B68     		ldr	r3, [r7, #4]
 1821 040a 5A69     		ldr	r2, [r3, #20]	@ float
 1822 040c 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 1823 0410 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 1824 0414 1046     		mov	r0, r2
 1825 0416 F968     		ldr	r1, [r7, #12]	@ float
 1826 0418 9847     		blx	r3
 1827 041a 0346     		mov	r3, r0
 1828 041c 1A46     		mov	r2, r3
 1829 041e 4FF00003 		mov	r3, #0
 1830 0422 1C46     		mov	r4, r3
 1831 0424 40F20003 		movw	r3, #:lower16:__aeabi_fcmpgt
 1832 0428 C0F20003 		movt	r3, #:upper16:__aeabi_fcmpgt
 1833 042c 1046     		mov	r0, r2
 1834 042e 3849     		ldr	r1, .L97	@ float
 1835 0430 9847     		blx	r3
 1836 0432 0346     		mov	r3, r0
 1837 0434 002B     		cmp	r3, #0
 1838 0436 02D0     		beq	.L84
 1839              	.L85:
 1840 0438 4FF00103 		mov	r3, #1
 1841 043c 1C46     		mov	r4, r3
 1842              	.L84:
 1843 043e E3B2     		uxtb	r3, r4
 1844 0440 002B     		cmp	r3, #0
 1845 0442 01D0     		beq	.L86
 1846 0444 334B     		ldr	r3, .L97+4	@ float
 1847 0446 00E0     		b	.L87
 1848              	.L86:
 1849 0448 334B     		ldr	r3, .L97+8	@ float
 1850              	.L87:
 1851 044a 1C46     		mov	r4, r3
 1852              	.L83:
 1853 044c 7B68     		ldr	r3, [r7, #4]
 1854 044e 5A69     		ldr	r2, [r3, #20]	@ float
 1855 0450 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 1856 0454 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 1857 0458 1046     		mov	r0, r2
 1858 045a F968     		ldr	r1, [r7, #12]	@ float
 1859 045c 9847     		blx	r3
 1860 045e 0346     		mov	r3, r0
 1861 0460 23F00041 		bic	r1, r3, #-2147483648
 1862 0464 7B68     		ldr	r3, [r7, #4]
 1863 0466 5A68     		ldr	r2, [r3, #4]	@ float
 1864 0468 4FF00003 		mov	r3, #0
 1865 046c 1D46     		mov	r5, r3
 1866 046e 40F20003 		movw	r3, #:lower16:__aeabi_fcmplt
 1867 0472 C0F20003 		movt	r3, #:upper16:__aeabi_fcmplt
 1868 0476 0846     		mov	r0, r1
 1869 0478 1146     		mov	r1, r2
 1870 047a 9847     		blx	r3
 1871 047c 0346     		mov	r3, r0
 1872 047e 002B     		cmp	r3, #0
 1873 0480 02D0     		beq	.L88
 1874              	.L89:
 1875 0482 4FF00103 		mov	r3, #1
 1876 0486 1D46     		mov	r5, r3
 1877              	.L88:
 1878 0488 EBB2     		uxtb	r3, r5
 1879 048a 002B     		cmp	r3, #0
 1880 048c 0CD0     		beq	.L90
 1881 048e 7B68     		ldr	r3, [r7, #4]
 1882 0490 5A69     		ldr	r2, [r3, #20]	@ float
 1883 0492 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 1884 0496 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 1885 049a 1046     		mov	r0, r2
 1886 049c F968     		ldr	r1, [r7, #12]	@ float
 1887 049e 9847     		blx	r3
 1888 04a0 0346     		mov	r3, r0
 1889 04a2 23F00042 		bic	r2, r3, #-2147483648
 1890 04a6 01E0     		b	.L91
 1891              	.L90:
 1892 04a8 7B68     		ldr	r3, [r7, #4]
 1893 04aa 5A68     		ldr	r2, [r3, #4]	@ float
 1894              	.L91:
 1895 04ac 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 1896 04b0 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 1897 04b4 2046     		mov	r0, r4
 1898 04b6 1146     		mov	r1, r2
 1899 04b8 9847     		blx	r3
 1900 04ba 0346     		mov	r3, r0
 1901 04bc 1A46     		mov	r2, r3
 1902 04be 7B68     		ldr	r3, [r7, #4]
 1903 04c0 5A61     		str	r2, [r3, #20]	@ float
 476:..//utils/multi-steppers/multi-steppers.c **** 	//x_next = x_curr + (pos_diff)(v_next*T);
 477:..//utils/multi-steppers/multi-steppers.c **** 	p->x_next = p->x_next + (p->v_next);
 1904              		.loc 1 477 0
 1905 04c2 7B68     		ldr	r3, [r7, #4]
 1906 04c4 1969     		ldr	r1, [r3, #16]	@ float
 1907 04c6 7B68     		ldr	r3, [r7, #4]
 1908 04c8 5A69     		ldr	r2, [r3, #20]	@ float
 1909 04ca 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 1910 04ce C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 1911 04d2 0846     		mov	r0, r1
 1912 04d4 1146     		mov	r1, r2
 1913 04d6 9847     		blx	r3
 1914 04d8 0346     		mov	r3, r0
 1915 04da 1A46     		mov	r2, r3
 1916 04dc 7B68     		ldr	r3, [r7, #4]
 1917 04de 1A61     		str	r2, [r3, #16]	@ float
 478:..//utils/multi-steppers/multi-steppers.c **** 	p->x_curr = (int32_t) p->x_next;
 1918              		.loc 1 478 0
 1919 04e0 7B68     		ldr	r3, [r7, #4]
 1920 04e2 1A69     		ldr	r2, [r3, #16]	@ float
 1921 04e4 40F20003 		movw	r3, #:lower16:__aeabi_f2iz
 1922 04e8 C0F20003 		movt	r3, #:upper16:__aeabi_f2iz
 1923 04ec 1046     		mov	r0, r2
 1924 04ee 9847     		blx	r3
 1925 04f0 0246     		mov	r2, r0
 1926 04f2 7B68     		ldr	r3, [r7, #4]
 1927 04f4 DA60     		str	r2, [r3, #12]
 479:..//utils/multi-steppers/multi-steppers.c **** 	p->state = MOTOR_RAMPCOAST;
 1928              		.loc 1 479 0
 1929 04f6 7B68     		ldr	r3, [r7, #4]
 1930 04f8 4FF00102 		mov	r2, #1
 1931 04fc 83F82420 		strb	r2, [r3, #36]
 480:..//utils/multi-steppers/multi-steppers.c **** 	return p->x_curr;
 1932              		.loc 1 480 0
 1933 0500 7B68     		ldr	r3, [r7, #4]
 1934 0502 DB68     		ldr	r3, [r3, #12]
 1935              	.L58:
 481:..//utils/multi-steppers/multi-steppers.c **** }
 1936              		.loc 1 481 0
 1937 0504 1846     		mov	r0, r3
 1938 0506 07F12007 		add	r7, r7, #32
 1939 050a BD46     		mov	sp, r7
 1940 050c B0BD     		pop	{r4, r5, r7, pc}
 1941              	.L98:
 1942 050e 00BF     		.align	2
 1943              	.L97:
 1944 0510 00000000 		.word	0
 1945 0514 0000803F 		.word	1065353216
 1946 0518 000080BF 		.word	-1082130432
 1947              		.cfi_endproc
 1948              	.LFE35:
 1950              		.global	__aeabi_i2d
 1951              		.global	__aeabi_fcmple
 1952              		.global	__aeabi_dcmpgt
 1953              		.section	.text.stepper_init_pulse_generator_single_axis,"ax",%progbits
 1954              		.align	2
 1955              		.global	stepper_init_pulse_generator_single_axis
 1956              		.thumb
 1957              		.thumb_func
 1959              	stepper_init_pulse_generator_single_axis:
 1960              	.LFB36:
 482:..//utils/multi-steppers/multi-steppers.c **** 
 483:..//utils/multi-steppers/multi-steppers.c **** int stepper_init_pulse_generator_single_axis(int i){
 1961              		.loc 1 483 0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 24
 1964              		@ frame_needed = 1, uses_anonymous_args = 0
 1965 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1966              	.LCFI18:
 1967              		.cfi_def_cfa_offset 20
 1968 0002 87B0     		sub	sp, sp, #28
 1969              	.LCFI19:
 1970              		.cfi_def_cfa_offset 48
 1971 0004 00AF     		add	r7, sp, #0
 1972              		.cfi_offset 14, -4
 1973              		.cfi_offset 7, -8
 1974              		.cfi_offset 6, -12
 1975              		.cfi_offset 5, -16
 1976              		.cfi_offset 4, -20
 1977              	.LCFI20:
 1978              		.cfi_def_cfa_register 7
 1979 0006 7860     		str	r0, [r7, #4]
 484:..//utils/multi-steppers/multi-steppers.c **** 
 485:..//utils/multi-steppers/multi-steppers.c **** 	stepper_struct *stepgen = &g_stepgen[i];
 1980              		.loc 1 485 0
 1981 0008 7B68     		ldr	r3, [r7, #4]
 1982 000a 4FF06802 		mov	r2, #104
 1983 000e 02FB03F2 		mul	r2, r2, r3
 1984 0012 40F20003 		movw	r3, #:lower16:g_stepgen
 1985 0016 C0F20003 		movt	r3, #:upper16:g_stepgen
 1986 001a 1344     		add	r3, r2, r3
 1987 001c FB60     		str	r3, [r7, #12]
 486:..//utils/multi-steppers/multi-steppers.c **** 	float desired_freq;
 487:..//utils/multi-steppers/multi-steppers.c **** 	
 488:..//utils/multi-steppers/multi-steppers.c **** 	int32_t min_step_period;
 489:..//utils/multi-steppers/multi-steppers.c **** 
 490:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->enable = 1;
 1988              		.loc 1 490 0
 1989 001e FB68     		ldr	r3, [r7, #12]
 1990 0020 4FF00102 		mov	r2, #1
 1991 0024 1A62     		str	r2, [r3, #32]
 491:..//utils/multi-steppers/multi-steppers.c **** 
 492:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->pos_scale = 1.0;
 1992              		.loc 1 492 0
 1993 0026 FB68     		ldr	r3, [r7, #12]
 1994 0028 FB4A     		ldr	r2, .L115+8	@ float
 1995 002a 5A64     		str	r2, [r3, #68]	@ float
 493:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->scale_recip = DIVIDE_PICKOFF / stepgen->pos_scale;
 1996              		.loc 1 493 0
 1997 002c FB68     		ldr	r3, [r7, #12]
 1998 002e 5A6C     		ldr	r2, [r3, #68]	@ float
 1999 0030 40F20003 		movw	r3, #:lower16:__aeabi_fdiv
 2000 0034 C0F20003 		movt	r3, #:upper16:__aeabi_fdiv
 2001 0038 F848     		ldr	r0, .L115+12	@ float
 2002 003a 1146     		mov	r1, r2
 2003 003c 9847     		blx	r3
 2004 003e 0346     		mov	r3, r0
 2005 0040 1A46     		mov	r2, r3
 2006 0042 FB68     		ldr	r3, [r7, #12]
 2007 0044 9A64     		str	r2, [r3, #72]	@ float
 494:..//utils/multi-steppers/multi-steppers.c **** 	// make the step_len = 1 period...
 495:..//utils/multi-steppers/multi-steppers.c **** 
 496:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->step_len = 1;
 2008              		.loc 1 496 0
 2009 0046 FB68     		ldr	r3, [r7, #12]
 2010 0048 4FF00102 		mov	r2, #1
 2011 004c DA62     		str	r2, [r3, #44]
 497:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->step_len = ulceil(stepgen->step_len, periodns); 
 2012              		.loc 1 497 0
 2013 004e FB68     		ldr	r3, [r7, #12]
 2014 0050 DA6A     		ldr	r2, [r3, #44]
 2015 0052 40F20003 		movw	r3, #:lower16:periodns
 2016 0056 C0F20003 		movt	r3, #:upper16:periodns
 2017 005a 1B68     		ldr	r3, [r3, #0]
 2018 005c 1046     		mov	r0, r2
 2019 005e 1946     		mov	r1, r3
 2020 0060 40F20003 		movw	r3, #:lower16:ulceil
 2021 0064 C0F20003 		movt	r3, #:upper16:ulceil
 2022 0068 9847     		blx	r3
 2023 006a 0246     		mov	r2, r0
 2024 006c FB68     		ldr	r3, [r7, #12]
 2025 006e DA62     		str	r2, [r3, #44]
 498:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->step_space = 1;
 2026              		.loc 1 498 0
 2027 0070 FB68     		ldr	r3, [r7, #12]
 2028 0072 4FF00102 		mov	r2, #1
 2029 0076 1A63     		str	r2, [r3, #48]
 499:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->step_space = ulceil(stepgen->step_space, periodns);
 2030              		.loc 1 499 0
 2031 0078 FB68     		ldr	r3, [r7, #12]
 2032 007a 1A6B     		ldr	r2, [r3, #48]
 2033 007c 40F20003 		movw	r3, #:lower16:periodns
 2034 0080 C0F20003 		movt	r3, #:upper16:periodns
 2035 0084 1B68     		ldr	r3, [r3, #0]
 2036 0086 1046     		mov	r0, r2
 2037 0088 1946     		mov	r1, r3
 2038 008a 40F20003 		movw	r3, #:lower16:ulceil
 2039 008e C0F20003 		movt	r3, #:upper16:ulceil
 2040 0092 9847     		blx	r3
 2041 0094 0246     		mov	r2, r0
 2042 0096 FB68     		ldr	r3, [r7, #12]
 2043 0098 1A63     		str	r2, [r3, #48]
 500:..//utils/multi-steppers/multi-steppers.c **** 
 501:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->maxvel = -1.0;
 2044              		.loc 1 501 0
 2045 009a FB68     		ldr	r3, [r7, #12]
 2046 009c E04A     		ldr	r2, .L115+16	@ float
 2047 009e DA64     		str	r2, [r3, #76]	@ float
 502:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->maxaccel = -1.0;
 2048              		.loc 1 502 0
 2049 00a0 FB68     		ldr	r3, [r7, #12]
 2050 00a2 DF4A     		ldr	r2, .L115+16	@ float
 2051 00a4 1A65     		str	r2, [r3, #80]	@ float
 503:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->freq = 0.0;
 2052              		.loc 1 503 0
 2053 00a6 FB68     		ldr	r3, [r7, #12]
 2054 00a8 DE4A     		ldr	r2, .L115+20	@ float
 2055 00aa 5A65     		str	r2, [r3, #84]	@ float
 504:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->pos_cmd = 0.0;
 2056              		.loc 1 504 0
 2057 00ac FB68     		ldr	r3, [r7, #12]
 2058 00ae DD4A     		ldr	r2, .L115+20	@ float
 2059 00b0 DA65     		str	r2, [r3, #92]	@ float
 505:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->old_pos_cmd = 0.0;
 2060              		.loc 1 505 0
 2061 00b2 FB68     		ldr	r3, [r7, #12]
 2062 00b4 DB4A     		ldr	r2, .L115+20	@ float
 2063 00b6 1A66     		str	r2, [r3, #96]	@ float
 506:..//utils/multi-steppers/multi-steppers.c **** 	
 507:..//utils/multi-steppers/multi-steppers.c **** #ifdef MULTI_STEPPERS_DIFFERENT_PORTS
 508:..//utils/multi-steppers/multi-steppers.c **** 		// stepgen->myport = &PULSE_PORT_SET1;
 509:..//utils/multi-steppers/multi-steppers.c **** 		// stepgen->mypin = 1<<PULSE_PIN_OFFSET1;
 510:..//utils/multi-steppers/multi-steppers.c **** 		
 511:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_pulse.port_num = PULSE_PORT_NUM[i];
 2064              		.loc 1 511 0
 2065 00b8 7A68     		ldr	r2, [r7, #4]
 2066 00ba 40F20003 		movw	r3, #:lower16:PULSE_PORT_NUM
 2067 00be C0F20003 		movt	r3, #:upper16:PULSE_PORT_NUM
 2068 00c2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2069 00c6 DAB2     		uxtb	r2, r3
 2070 00c8 FB68     		ldr	r3, [r7, #12]
 2071 00ca 83F83420 		strb	r2, [r3, #52]
 512:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_pulse.pin_num = PULSE_PIN_OFFSET_NUM[i];
 2072              		.loc 1 512 0
 2073 00ce 7A68     		ldr	r2, [r7, #4]
 2074 00d0 40F20003 		movw	r3, #:lower16:PULSE_PIN_OFFSET_NUM
 2075 00d4 C0F20003 		movt	r3, #:upper16:PULSE_PIN_OFFSET_NUM
 2076 00d8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2077 00dc DAB2     		uxtb	r2, r3
 2078 00de FB68     		ldr	r3, [r7, #12]
 2079 00e0 83F83520 		strb	r2, [r3, #53]
 513:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_pulse.io = 0;
 2080              		.loc 1 513 0
 2081 00e4 FB68     		ldr	r3, [r7, #12]
 2082 00e6 4FF00002 		mov	r2, #0
 2083 00ea 83F83620 		strb	r2, [r3, #54]
 514:..//utils/multi-steppers/multi-steppers.c **** 		
 515:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_dir.port_num = DIR_PORT_NUM[i];
 2084              		.loc 1 515 0
 2085 00ee 7A68     		ldr	r2, [r7, #4]
 2086 00f0 40F20003 		movw	r3, #:lower16:DIR_PORT_NUM
 2087 00f4 C0F20003 		movt	r3, #:upper16:DIR_PORT_NUM
 2088 00f8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2089 00fc DAB2     		uxtb	r2, r3
 2090 00fe FB68     		ldr	r3, [r7, #12]
 2091 0100 83F83720 		strb	r2, [r3, #55]
 516:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_dir.pin_num = DIR_PIN_OFFSET_NUM[i];
 2092              		.loc 1 516 0
 2093 0104 7A68     		ldr	r2, [r7, #4]
 2094 0106 40F20003 		movw	r3, #:lower16:DIR_PIN_OFFSET_NUM
 2095 010a C0F20003 		movt	r3, #:upper16:DIR_PIN_OFFSET_NUM
 2096 010e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2097 0112 DAB2     		uxtb	r2, r3
 2098 0114 FB68     		ldr	r3, [r7, #12]
 2099 0116 83F83820 		strb	r2, [r3, #56]
 517:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_dir.io = 0;
 2100              		.loc 1 517 0
 2101 011a FB68     		ldr	r3, [r7, #12]
 2102 011c 4FF00002 		mov	r2, #0
 2103 0120 83F83920 		strb	r2, [r3, #57]
 518:..//utils/multi-steppers/multi-steppers.c **** #else		
 519:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_pulse.port_num = PULSE_PORT;
 520:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_pulse.pin_num = i+PULSE_PIN_OFFSET;
 521:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_pulse.io = 0;
 522:..//utils/multi-steppers/multi-steppers.c **** 		
 523:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_dir.port_num = DIR_PORT;
 524:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_dir.pin_num = i+DIR_PIN_OFFSET;
 525:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->pin_dir.io = 0;
 526:..//utils/multi-steppers/multi-steppers.c **** #endif
 527:..//utils/multi-steppers/multi-steppers.c **** 
 528:..//utils/multi-steppers/multi-steppers.c **** #ifdef MULTI_STEPPERS_DIFFERENT_PORTS
 529:..//utils/multi-steppers/multi-steppers.c **** 		*DIR_PORT_DIR_NUM[i] |= 1<<stepgen->pin_dir.pin_num;
 2104              		.loc 1 529 0
 2105 0124 7A68     		ldr	r2, [r7, #4]
 2106 0126 40F20003 		movw	r3, #:lower16:DIR_PORT_DIR_NUM
 2107 012a C0F20003 		movt	r3, #:upper16:DIR_PORT_DIR_NUM
 2108 012e 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2109 0132 7968     		ldr	r1, [r7, #4]
 2110 0134 40F20003 		movw	r3, #:lower16:DIR_PORT_DIR_NUM
 2111 0138 C0F20003 		movt	r3, #:upper16:DIR_PORT_DIR_NUM
 2112 013c 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2113 0140 1968     		ldr	r1, [r3, #0]
 2114 0142 FB68     		ldr	r3, [r7, #12]
 2115 0144 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2116 0148 4FF00100 		mov	r0, #1
 2117 014c 00FA03F3 		lsl	r3, r0, r3
 2118 0150 41EA0303 		orr	r3, r1, r3
 2119 0154 1360     		str	r3, [r2, #0]
 530:..//utils/multi-steppers/multi-steppers.c **** 		*PULSE_PORT_DIR_NUM[i] |= 1<<stepgen->pin_pulse.pin_num;
 2120              		.loc 1 530 0
 2121 0156 7A68     		ldr	r2, [r7, #4]
 2122 0158 40F20003 		movw	r3, #:lower16:PULSE_PORT_DIR_NUM
 2123 015c C0F20003 		movt	r3, #:upper16:PULSE_PORT_DIR_NUM
 2124 0160 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2125 0164 7968     		ldr	r1, [r7, #4]
 2126 0166 40F20003 		movw	r3, #:lower16:PULSE_PORT_DIR_NUM
 2127 016a C0F20003 		movt	r3, #:upper16:PULSE_PORT_DIR_NUM
 2128 016e 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2129 0172 1968     		ldr	r1, [r3, #0]
 2130 0174 FB68     		ldr	r3, [r7, #12]
 2131 0176 93F83530 		ldrb	r3, [r3, #53]	@ zero_extendqisi2
 2132 017a 4FF00100 		mov	r0, #1
 2133 017e 00FA03F3 		lsl	r3, r0, r3
 2134 0182 41EA0303 		orr	r3, r1, r3
 2135 0186 1360     		str	r3, [r2, #0]
 531:..//utils/multi-steppers/multi-steppers.c **** #else
 532:..//utils/multi-steppers/multi-steppers.c **** 		DIR_PORT_DIR |= 1<<stepgen->pin_dir.pin_num;
 533:..//utils/multi-steppers/multi-steppers.c **** 		PULSE_PORT_DIR |= 1<<stepgen->pin_pulse.pin_num;
 534:..//utils/multi-steppers/multi-steppers.c **** #endif			
 535:..//utils/multi-steppers/multi-steppers.c **** 	/*put all the pulse pins in a register variable*/
 536:..//utils/multi-steppers/multi-steppers.c **** 	/*so that they all are cleared at the same time*/
 537:..//utils/multi-steppers/multi-steppers.c **** #ifdef MULTI_STEPPERS_DIFFERENT_PORTS
 538:..//utils/multi-steppers/multi-steppers.c **** #else
 539:..//utils/multi-steppers/multi-steppers.c **** 	CLEAR_ALL_MOTOR_PULSE_OUTPUTS |= (1<<stepgen->pin_pulse.pin_num);
 540:..//utils/multi-steppers/multi-steppers.c **** #endif
 541:..//utils/multi-steppers/multi-steppers.c **** 	
 542:..//utils/multi-steppers/multi-steppers.c **** 	/* calculate frequency limit */
 543:..//utils/multi-steppers/multi-steppers.c **** 	min_step_period = stepgen->step_len;// + stepgen->step_space;
 2136              		.loc 1 543 0
 2137 0188 FB68     		ldr	r3, [r7, #12]
 2138 018a DB6A     		ldr	r3, [r3, #44]
 2139 018c 7B61     		str	r3, [r7, #20]
 544:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->max_freq = 1.0 / (min_step_period * 0.000000001);
 2140              		.loc 1 544 0
 2141 018e 40F20003 		movw	r3, #:lower16:__aeabi_i2d
 2142 0192 C0F20003 		movt	r3, #:upper16:__aeabi_i2d
 2143 0196 7869     		ldr	r0, [r7, #20]
 2144 0198 9847     		blx	r3
 2145 019a 0246     		mov	r2, r0
 2146 019c 0B46     		mov	r3, r1
 2147 019e 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 2148 01a2 C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 2149 01a6 1046     		mov	r0, r2
 2150 01a8 1946     		mov	r1, r3
 2151 01aa 99A3     		adr	r3, .L115
 2152 01ac D3E90023 		ldrd	r2, [r3]
 2153 01b0 E047     		blx	ip
 2154 01b2 0246     		mov	r2, r0
 2155 01b4 0B46     		mov	r3, r1
 2156 01b6 40F2000C 		movw	ip, #:lower16:__aeabi_ddiv
 2157 01ba C0F2000C 		movt	ip, #:upper16:__aeabi_ddiv
 2158 01be 4FF00000 		mov	r0, #0
 2159 01c2 4FF07E51 		mov	r1, #1065353216
 2160 01c6 01F5E001 		add	r1, r1, #7340032
 2161 01ca E047     		blx	ip
 2162 01cc 0246     		mov	r2, r0
 2163 01ce 0B46     		mov	r3, r1
 2164 01d0 1046     		mov	r0, r2
 2165 01d2 1946     		mov	r1, r3
 2166 01d4 40F20003 		movw	r3, #:lower16:__aeabi_d2f
 2167 01d8 C0F20003 		movt	r3, #:upper16:__aeabi_d2f
 2168 01dc 9847     		blx	r3
 2169 01de 0246     		mov	r2, r0
 2170 01e0 FB68     		ldr	r3, [r7, #12]
 2171 01e2 DA63     		str	r2, [r3, #60]	@ float
 545:..//utils/multi-steppers/multi-steppers.c **** 	
 546:..//utils/multi-steppers/multi-steppers.c **** 	// print_string("\nmax_freq");
 547:..//utils/multi-steppers/multi-steppers.c **** 	// print_ulong((long) (stepgen->max_freq *1000.0));
 548:..//utils/multi-steppers/multi-steppers.c **** 	// printf("\nmax_freq: %f",max_freq);
 549:..//utils/multi-steppers/multi-steppers.c **** 
 550:..//utils/multi-steppers/multi-steppers.c **** 	/* maybe these should happen in init...*/
 551:..//utils/multi-steppers/multi-steppers.c **** 	if (stepgen->maxvel <= 0.0) {
 2172              		.loc 1 551 0
 2173 01e4 FB68     		ldr	r3, [r7, #12]
 2174 01e6 DA6C     		ldr	r2, [r3, #76]	@ float
 2175 01e8 4FF00003 		mov	r3, #0
 2176 01ec 1C46     		mov	r4, r3
 2177 01ee 40F20003 		movw	r3, #:lower16:__aeabi_fcmple
 2178 01f2 C0F20003 		movt	r3, #:upper16:__aeabi_fcmple
 2179 01f6 1046     		mov	r0, r2
 2180 01f8 8A49     		ldr	r1, .L115+20	@ float
 2181 01fa 9847     		blx	r3
 2182 01fc 0346     		mov	r3, r0
 2183 01fe 002B     		cmp	r3, #0
 2184 0200 02D0     		beq	.L100
 2185              	.L101:
 2186 0202 4FF00103 		mov	r3, #1
 2187 0206 1C46     		mov	r4, r3
 2188              	.L100:
 2189 0208 E3B2     		uxtb	r3, r4
 2190 020a 002B     		cmp	r3, #0
 2191 020c 03D0     		beq	.L102
 552:..//utils/multi-steppers/multi-steppers.c **** 		/* set to zero if negative */
 553:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->maxvel = 0.0;
 2192              		.loc 1 553 0
 2193 020e FB68     		ldr	r3, [r7, #12]
 2194 0210 844A     		ldr	r2, .L115+20	@ float
 2195 0212 DA64     		str	r2, [r3, #76]	@ float
 2196 0214 46E0     		b	.L103
 2197              	.L102:
 554:..//utils/multi-steppers/multi-steppers.c **** 	} else {
 555:..//utils/multi-steppers/multi-steppers.c **** 		/* parameter is non-zero, compare to max_freq */
 556:..//utils/multi-steppers/multi-steppers.c **** 		desired_freq = stepgen->maxvel * fabs(stepgen->pos_scale);
 2198              		.loc 1 556 0
 2199 0216 FB68     		ldr	r3, [r7, #12]
 2200 0218 D96C     		ldr	r1, [r3, #76]	@ float
 2201 021a FB68     		ldr	r3, [r7, #12]
 2202 021c 5B6C     		ldr	r3, [r3, #68]	@ float
 2203 021e 23F00042 		bic	r2, r3, #-2147483648
 2204 0222 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 2205 0226 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 2206 022a 0846     		mov	r0, r1
 2207 022c 1146     		mov	r1, r2
 2208 022e 9847     		blx	r3
 2209 0230 0346     		mov	r3, r0
 2210 0232 3B61     		str	r3, [r7, #16]	@ float
 557:..//utils/multi-steppers/multi-steppers.c **** 		if (desired_freq > stepgen->max_freq) {
 2211              		.loc 1 557 0
 2212 0234 FB68     		ldr	r3, [r7, #12]
 2213 0236 DA6B     		ldr	r2, [r3, #60]	@ float
 2214 0238 4FF00003 		mov	r3, #0
 2215 023c 1C46     		mov	r4, r3
 2216 023e 40F20003 		movw	r3, #:lower16:__aeabi_fcmplt
 2217 0242 C0F20003 		movt	r3, #:upper16:__aeabi_fcmplt
 2218 0246 1046     		mov	r0, r2
 2219 0248 3969     		ldr	r1, [r7, #16]	@ float
 2220 024a 9847     		blx	r3
 2221 024c 0346     		mov	r3, r0
 2222 024e 002B     		cmp	r3, #0
 2223 0250 02D0     		beq	.L104
 2224              	.L105:
 2225 0252 4FF00103 		mov	r3, #1
 2226 0256 1C46     		mov	r4, r3
 2227              	.L104:
 2228 0258 E3B2     		uxtb	r3, r4
 2229 025a 002B     		cmp	r3, #0
 2230 025c 11D0     		beq	.L106
 558:..//utils/multi-steppers/multi-steppers.c **** 			/* parameter is too high, complain about it */
 559:..//utils/multi-steppers/multi-steppers.c **** 			
 560:..//utils/multi-steppers/multi-steppers.c **** 			// printf("STEPGEN: Channel %d: The requested maximum velocity of %d steps/sec is too high.\n",
 561:..//utils/multi-steppers/multi-steppers.c **** 				// i, (int)desired_freq);
 562:..//utils/multi-steppers/multi-steppers.c **** 			// printf("STEPGEN: The maximum possible frequency is %d steps/second\n",
 563:..//utils/multi-steppers/multi-steppers.c **** 				// (int)stepgen->max_freq);
 564:..//utils/multi-steppers/multi-steppers.c **** 			/* parameter is too high, limit it */
 565:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->maxvel = stepgen->max_freq / fabs(stepgen->pos_scale);
 2231              		.loc 1 565 0
 2232 025e FB68     		ldr	r3, [r7, #12]
 2233 0260 D96B     		ldr	r1, [r3, #60]	@ float
 2234 0262 FB68     		ldr	r3, [r7, #12]
 2235 0264 5B6C     		ldr	r3, [r3, #68]	@ float
 2236 0266 23F00042 		bic	r2, r3, #-2147483648
 2237 026a 40F20003 		movw	r3, #:lower16:__aeabi_fdiv
 2238 026e C0F20003 		movt	r3, #:upper16:__aeabi_fdiv
 2239 0272 0846     		mov	r0, r1
 2240 0274 1146     		mov	r1, r2
 2241 0276 9847     		blx	r3
 2242 0278 0346     		mov	r3, r0
 2243 027a 1A46     		mov	r2, r3
 2244 027c FB68     		ldr	r3, [r7, #12]
 2245 027e DA64     		str	r2, [r3, #76]	@ float
 2246 0280 10E0     		b	.L103
 2247              	.L106:
 566:..//utils/multi-steppers/multi-steppers.c **** 		} else {
 567:..//utils/multi-steppers/multi-steppers.c **** 			/* lower max_freq to match parameter */
 568:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->max_freq = stepgen->maxvel * fabs(stepgen->pos_scale);
 2248              		.loc 1 568 0
 2249 0282 FB68     		ldr	r3, [r7, #12]
 2250 0284 D96C     		ldr	r1, [r3, #76]	@ float
 2251 0286 FB68     		ldr	r3, [r7, #12]
 2252 0288 5B6C     		ldr	r3, [r3, #68]	@ float
 2253 028a 23F00042 		bic	r2, r3, #-2147483648
 2254 028e 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 2255 0292 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 2256 0296 0846     		mov	r0, r1
 2257 0298 1146     		mov	r1, r2
 2258 029a 9847     		blx	r3
 2259 029c 0346     		mov	r3, r0
 2260 029e 1A46     		mov	r2, r3
 2261 02a0 FB68     		ldr	r3, [r7, #12]
 2262 02a2 DA63     		str	r2, [r3, #60]	@ float
 2263              	.L103:
 569:..//utils/multi-steppers/multi-steppers.c **** 		}
 570:..//utils/multi-steppers/multi-steppers.c **** 	}
 571:..//utils/multi-steppers/multi-steppers.c **** 
 572:..//utils/multi-steppers/multi-steppers.c **** 	/* set internal accel limit to its absolute max, which is
 573:..//utils/multi-steppers/multi-steppers.c **** 	   zero to full speed in one thread period */
 574:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->max_ac = stepgen->max_freq * recip_dt;
 2264              		.loc 1 574 0
 2265 02a4 FB68     		ldr	r3, [r7, #12]
 2266 02a6 D96B     		ldr	r1, [r3, #60]	@ float
 2267 02a8 40F20003 		movw	r3, #:lower16:recip_dt
 2268 02ac C0F20003 		movt	r3, #:upper16:recip_dt
 2269 02b0 1A68     		ldr	r2, [r3, #0]	@ float
 2270 02b2 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 2271 02b6 C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 2272 02ba 0846     		mov	r0, r1
 2273 02bc 1146     		mov	r1, r2
 2274 02be 9847     		blx	r3
 2275 02c0 0346     		mov	r3, r0
 2276 02c2 1A46     		mov	r2, r3
 2277 02c4 FB68     		ldr	r3, [r7, #12]
 2278 02c6 1A64     		str	r2, [r3, #64]	@ float
 575:..//utils/multi-steppers/multi-steppers.c **** 	//printf("\nmax_ac: %f",max_ac);
 576:..//utils/multi-steppers/multi-steppers.c **** 
 577:..//utils/multi-steppers/multi-steppers.c **** 	/* check for user specified accel limit parameter */
 578:..//utils/multi-steppers/multi-steppers.c **** 	if (stepgen->maxaccel <= 0.0) {
 2279              		.loc 1 578 0
 2280 02c8 FB68     		ldr	r3, [r7, #12]
 2281 02ca 1A6D     		ldr	r2, [r3, #80]	@ float
 2282 02cc 4FF00003 		mov	r3, #0
 2283 02d0 1C46     		mov	r4, r3
 2284 02d2 40F20003 		movw	r3, #:lower16:__aeabi_fcmple
 2285 02d6 C0F20003 		movt	r3, #:upper16:__aeabi_fcmple
 2286 02da 1046     		mov	r0, r2
 2287 02dc 5149     		ldr	r1, .L115+20	@ float
 2288 02de 9847     		blx	r3
 2289 02e0 0346     		mov	r3, r0
 2290 02e2 002B     		cmp	r3, #0
 2291 02e4 02D0     		beq	.L107
 2292              	.L108:
 2293 02e6 4FF00103 		mov	r3, #1
 2294 02ea 1C46     		mov	r4, r3
 2295              	.L107:
 2296 02ec E3B2     		uxtb	r3, r4
 2297 02ee 002B     		cmp	r3, #0
 2298 02f0 03D0     		beq	.L109
 579:..//utils/multi-steppers/multi-steppers.c **** 		/* set to zero if negative */
 580:..//utils/multi-steppers/multi-steppers.c **** 		stepgen->maxaccel = 0.0;
 2299              		.loc 1 580 0
 2300 02f2 FB68     		ldr	r3, [r7, #12]
 2301 02f4 4B4A     		ldr	r2, .L115+20	@ float
 2302 02f6 1A65     		str	r2, [r3, #80]	@ float
 2303 02f8 60E0     		b	.L110
 2304              	.L109:
 581:..//utils/multi-steppers/multi-steppers.c **** 	} else {
 582:..//utils/multi-steppers/multi-steppers.c **** 		/* parameter is non-zero, compare to max_ac */
 583:..//utils/multi-steppers/multi-steppers.c **** 		if ((stepgen->maxaccel * fabs(stepgen->pos_scale)) > stepgen->max_ac) {
 2305              		.loc 1 583 0
 2306 02fa FB68     		ldr	r3, [r7, #12]
 2307 02fc 1A6D     		ldr	r2, [r3, #80]	@ float
 2308 02fe 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 2309 0302 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 2310 0306 1046     		mov	r0, r2
 2311 0308 9847     		blx	r3
 2312 030a 0446     		mov	r4, r0
 2313 030c 0D46     		mov	r5, r1
 2314 030e FB68     		ldr	r3, [r7, #12]
 2315 0310 5B6C     		ldr	r3, [r3, #68]	@ float
 2316 0312 23F00042 		bic	r2, r3, #-2147483648
 2317 0316 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 2318 031a C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 2319 031e 1046     		mov	r0, r2
 2320 0320 9847     		blx	r3
 2321 0322 0246     		mov	r2, r0
 2322 0324 0B46     		mov	r3, r1
 2323 0326 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 2324 032a C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 2325 032e 2046     		mov	r0, r4
 2326 0330 2946     		mov	r1, r5
 2327 0332 E047     		blx	ip
 2328 0334 0246     		mov	r2, r0
 2329 0336 0B46     		mov	r3, r1
 2330 0338 1446     		mov	r4, r2
 2331 033a 1D46     		mov	r5, r3
 2332 033c FB68     		ldr	r3, [r7, #12]
 2333 033e 1A6C     		ldr	r2, [r3, #64]	@ float
 2334 0340 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 2335 0344 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 2336 0348 1046     		mov	r0, r2
 2337 034a 9847     		blx	r3
 2338 034c 0246     		mov	r2, r0
 2339 034e 0B46     		mov	r3, r1
 2340 0350 4FF00001 		mov	r1, #0
 2341 0354 0E46     		mov	r6, r1
 2342 0356 40F2000C 		movw	ip, #:lower16:__aeabi_dcmpgt
 2343 035a C0F2000C 		movt	ip, #:upper16:__aeabi_dcmpgt
 2344 035e 2046     		mov	r0, r4
 2345 0360 2946     		mov	r1, r5
 2346 0362 E047     		blx	ip
 2347 0364 0346     		mov	r3, r0
 2348 0366 002B     		cmp	r3, #0
 2349 0368 02D0     		beq	.L111
 2350              	.L112:
 2351 036a 4FF00103 		mov	r3, #1
 2352 036e 1E46     		mov	r6, r3
 2353              	.L111:
 2354 0370 F3B2     		uxtb	r3, r6
 2355 0372 002B     		cmp	r3, #0
 2356 0374 11D0     		beq	.L113
 584:..//utils/multi-steppers/multi-steppers.c **** 			/* parameter is too high, lower it */
 585:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->maxaccel = stepgen->max_ac / fabs(stepgen->pos_scale);
 2357              		.loc 1 585 0
 2358 0376 FB68     		ldr	r3, [r7, #12]
 2359 0378 196C     		ldr	r1, [r3, #64]	@ float
 2360 037a FB68     		ldr	r3, [r7, #12]
 2361 037c 5B6C     		ldr	r3, [r3, #68]	@ float
 2362 037e 23F00042 		bic	r2, r3, #-2147483648
 2363 0382 40F20003 		movw	r3, #:lower16:__aeabi_fdiv
 2364 0386 C0F20003 		movt	r3, #:upper16:__aeabi_fdiv
 2365 038a 0846     		mov	r0, r1
 2366 038c 1146     		mov	r1, r2
 2367 038e 9847     		blx	r3
 2368 0390 0346     		mov	r3, r0
 2369 0392 1A46     		mov	r2, r3
 2370 0394 FB68     		ldr	r3, [r7, #12]
 2371 0396 1A65     		str	r2, [r3, #80]	@ float
 2372 0398 10E0     		b	.L110
 2373              	.L113:
 586:..//utils/multi-steppers/multi-steppers.c **** 		} else {
 587:..//utils/multi-steppers/multi-steppers.c **** 			/* lower limit to match parameter */
 588:..//utils/multi-steppers/multi-steppers.c **** 			stepgen->max_ac = stepgen->maxaccel * fabs(stepgen->pos_scale);
 2374              		.loc 1 588 0
 2375 039a FB68     		ldr	r3, [r7, #12]
 2376 039c 196D     		ldr	r1, [r3, #80]	@ float
 2377 039e FB68     		ldr	r3, [r7, #12]
 2378 03a0 5B6C     		ldr	r3, [r3, #68]	@ float
 2379 03a2 23F00042 		bic	r2, r3, #-2147483648
 2380 03a6 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 2381 03aa C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 2382 03ae 0846     		mov	r0, r1
 2383 03b0 1146     		mov	r1, r2
 2384 03b2 9847     		blx	r3
 2385 03b4 0346     		mov	r3, r0
 2386 03b6 1A46     		mov	r2, r3
 2387 03b8 FB68     		ldr	r3, [r7, #12]
 2388 03ba 1A64     		str	r2, [r3, #64]	@ float
 2389              	.L110:
 589:..//utils/multi-steppers/multi-steppers.c **** 		}
 590:..//utils/multi-steppers/multi-steppers.c **** 	}	/* at this point, all scaling, limits, and other parameter
 591:..//utils/multi-steppers/multi-steppers.c **** 	   changes have been handled - time for the main control */
 592:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->raw_pos = 0;
 2390              		.loc 1 592 0
 2391 03bc FB68     		ldr	r3, [r7, #12]
 2392 03be 4FF00002 		mov	r2, #0
 2393 03c2 9A61     		str	r2, [r3, #24]
 593:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->timer1 = 0;
 2394              		.loc 1 593 0
 2395 03c4 FB68     		ldr	r3, [r7, #12]
 2396 03c6 4FF00002 		mov	r2, #0
 2397 03ca 1A60     		str	r2, [r3, #0]
 594:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->addval = 0;
 2398              		.loc 1 594 0
 2399 03cc FB68     		ldr	r3, [r7, #12]
 2400 03ce 4FF00002 		mov	r2, #0
 2401 03d2 5A60     		str	r2, [r3, #4]
 595:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->accum = 0;
 2402              		.loc 1 595 0
 2403 03d4 F968     		ldr	r1, [r7, #12]
 2404 03d6 4FF00002 		mov	r2, #0
 2405 03da 4FF00003 		mov	r3, #0
 2406 03de C1E90223 		strd	r2, [r1, #8]
 596:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->rawcount = 0;
 2407              		.loc 1 596 0
 2408 03e2 FB68     		ldr	r3, [r7, #12]
 2409 03e4 4FF00002 		mov	r2, #0
 2410 03e8 1A61     		str	r2, [r3, #16]
 597:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->curr_dir = 0;
 2411              		.loc 1 597 0
 2412 03ea FB68     		ldr	r3, [r7, #12]
 2413 03ec 4FF00002 		mov	r2, #0
 2414 03f0 5A61     		str	r2, [r3, #20]
 598:..//utils/multi-steppers/multi-steppers.c **** 	
 599:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->target_addval = 0;
 2415              		.loc 1 599 0
 2416 03f2 FB68     		ldr	r3, [r7, #12]
 2417 03f4 4FF00002 		mov	r2, #0
 2418 03f8 5A62     		str	r2, [r3, #36]
 600:..//utils/multi-steppers/multi-steppers.c **** 	stepgen->deltalim = 0;
 2419              		.loc 1 600 0
 2420 03fa FB68     		ldr	r3, [r7, #12]
 2421 03fc 4FF00002 		mov	r2, #0
 2422 0400 9A62     		str	r2, [r3, #40]
 601:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 2423              		.loc 1 601 0
 2424 0402 4FF00103 		mov	r3, #1
 602:..//utils/multi-steppers/multi-steppers.c **** 
 603:..//utils/multi-steppers/multi-steppers.c **** }
 2425              		.loc 1 603 0
 2426 0406 1846     		mov	r0, r3
 2427 0408 07F11C07 		add	r7, r7, #28
 2428 040c BD46     		mov	sp, r7
 2429 040e F0BD     		pop	{r4, r5, r6, r7, pc}
 2430              	.L116:
 2431              		.align	3
 2432              	.L115:
 2433 0410 95D626E8 		.word	-400107883
 2434 0414 0B2E113E 		.word	1041313291
 2435 0418 0000803F 		.word	1065353216
 2436 041c 00008031 		.word	830472192
 2437 0420 000080BF 		.word	-1082130432
 2438 0424 00000000 		.word	0
 2439              		.cfi_endproc
 2440              	.LFE36:
 2442              		.section	.text.stepper_init_pulse_generator,"ax",%progbits
 2443              		.align	2
 2444              		.global	stepper_init_pulse_generator
 2445              		.thumb
 2446              		.thumb_func
 2448              	stepper_init_pulse_generator:
 2449              	.LFB37:
 604:..//utils/multi-steppers/multi-steppers.c **** 
 605:..//utils/multi-steppers/multi-steppers.c **** int stepper_init_pulse_generator(void)
 606:..//utils/multi-steppers/multi-steppers.c **** {
 2450              		.loc 1 606 0
 2451              		.cfi_startproc
 2452              		@ args = 0, pretend = 0, frame = 8
 2453              		@ frame_needed = 1, uses_anonymous_args = 0
 2454 0000 80B5     		push	{r7, lr}
 2455              	.LCFI21:
 2456              		.cfi_def_cfa_offset 8
 2457 0002 82B0     		sub	sp, sp, #8
 2458              	.LCFI22:
 2459              		.cfi_def_cfa_offset 16
 2460 0004 00AF     		add	r7, sp, #0
 2461              		.cfi_offset 14, -4
 2462              		.cfi_offset 7, -8
 2463              	.LCFI23:
 2464              		.cfi_def_cfa_register 7
 607:..//utils/multi-steppers/multi-steppers.c **** 	int i;
 608:..//utils/multi-steppers/multi-steppers.c **** 	// stepper_struct *stepgen;	
 609:..//utils/multi-steppers/multi-steppers.c **** #ifdef MULTI_STEPPERS_DIFFERENT_PORTS	
 610:..//utils/multi-steppers/multi-steppers.c **** 	
 611:..//utils/multi-steppers/multi-steppers.c **** #else	
 612:..//utils/multi-steppers/multi-steppers.c **** 	CLEAR_ALL_MOTOR_PULSE_OUTPUTS = 0;
 613:..//utils/multi-steppers/multi-steppers.c **** #endif	
 614:..//utils/multi-steppers/multi-steppers.c **** 	periodns = 1e9/MAKE_PULSES_FREQ;  // time in ns for freq of execution of makepulses
 2465              		.loc 1 614 0
 2466 0006 40F20003 		movw	r3, #:lower16:periodns
 2467 000a C0F20003 		movt	r3, #:upper16:periodns
 2468 000e 4CF25032 		movw	r2, #50000
 2469 0012 1A60     		str	r2, [r3, #0]
 615:..//utils/multi-steppers/multi-steppers.c **** 	periodfp = periodns * 0.000000001;
 2470              		.loc 1 615 0
 2471 0014 40F20003 		movw	r3, #:lower16:periodns
 2472 0018 C0F20003 		movt	r3, #:upper16:periodns
 2473 001c 1A68     		ldr	r2, [r3, #0]
 2474 001e 40F20003 		movw	r3, #:lower16:__aeabi_i2d
 2475 0022 C0F20003 		movt	r3, #:upper16:__aeabi_i2d
 2476 0026 1046     		mov	r0, r2
 2477 0028 9847     		blx	r3
 2478 002a 0246     		mov	r2, r0
 2479 002c 0B46     		mov	r3, r1
 2480 002e 40F2000C 		movw	ip, #:lower16:__aeabi_dmul
 2481 0032 C0F2000C 		movt	ip, #:upper16:__aeabi_dmul
 2482 0036 1046     		mov	r0, r2
 2483 0038 1946     		mov	r1, r3
 2484 003a 3DA3     		adr	r3, .L121
 2485 003c D3E90023 		ldrd	r2, [r3]
 2486 0040 E047     		blx	ip
 2487 0042 0246     		mov	r2, r0
 2488 0044 0B46     		mov	r3, r1
 2489 0046 1046     		mov	r0, r2
 2490 0048 1946     		mov	r1, r3
 2491 004a 40F20003 		movw	r3, #:lower16:__aeabi_d2f
 2492 004e C0F20003 		movt	r3, #:upper16:__aeabi_d2f
 2493 0052 9847     		blx	r3
 2494 0054 0246     		mov	r2, r0
 2495 0056 40F20003 		movw	r3, #:lower16:periodfp
 2496 005a C0F20003 		movt	r3, #:upper16:periodfp
 2497 005e 1A60     		str	r2, [r3, #0]	@ float
 616:..//utils/multi-steppers/multi-steppers.c **** 	freqscale = LONG_PICKOFF * periodfp;
 2498              		.loc 1 616 0
 2499 0060 40F20003 		movw	r3, #:lower16:periodfp
 2500 0064 C0F20003 		movt	r3, #:upper16:periodfp
 2501 0068 1A68     		ldr	r2, [r3, #0]	@ float
 2502 006a 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 2503 006e C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 2504 0072 1046     		mov	r0, r2
 2505 0074 3049     		ldr	r1, .L121+8	@ float
 2506 0076 9847     		blx	r3
 2507 0078 0346     		mov	r3, r0
 2508 007a 1A46     		mov	r2, r3
 2509 007c 40F20003 		movw	r3, #:lower16:freqscale
 2510 0080 C0F20003 		movt	r3, #:upper16:freqscale
 2511 0084 1A60     		str	r2, [r3, #0]	@ float
 617:..//utils/multi-steppers/multi-steppers.c **** 	accelscale = freqscale * periodfp;
 2512              		.loc 1 617 0
 2513 0086 40F20003 		movw	r3, #:lower16:freqscale
 2514 008a C0F20003 		movt	r3, #:upper16:freqscale
 2515 008e 1968     		ldr	r1, [r3, #0]	@ float
 2516 0090 40F20003 		movw	r3, #:lower16:periodfp
 2517 0094 C0F20003 		movt	r3, #:upper16:periodfp
 2518 0098 1A68     		ldr	r2, [r3, #0]	@ float
 2519 009a 40F20003 		movw	r3, #:lower16:__aeabi_fmul
 2520 009e C0F20003 		movt	r3, #:upper16:__aeabi_fmul
 2521 00a2 0846     		mov	r0, r1
 2522 00a4 1146     		mov	r1, r2
 2523 00a6 9847     		blx	r3
 2524 00a8 0346     		mov	r3, r0
 2525 00aa 1A46     		mov	r2, r3
 2526 00ac 40F20003 		movw	r3, #:lower16:accelscale
 2527 00b0 C0F20003 		movt	r3, #:upper16:accelscale
 2528 00b4 1A60     		str	r2, [r3, #0]	@ float
 618:..//utils/multi-steppers/multi-steppers.c **** 	
 619:..//utils/multi-steppers/multi-steppers.c **** 	dtns = 1e9/FREQ_UPDATE_FREQ;								// period of update_freq in ns
 2529              		.loc 1 619 0
 2530 00b6 40F20003 		movw	r3, #:lower16:dtns
 2531 00ba C0F20003 		movt	r3, #:upper16:dtns
 2532 00be 44F24022 		movw	r2, #:lower16:1000000
 2533 00c2 C0F20F02 		movt	r2, #:upper16:1000000
 2534 00c6 1A60     		str	r2, [r3, #0]
 620:..//utils/multi-steppers/multi-steppers.c **** 	dt = 1.0/FREQ_UPDATE_FREQ;
 2535              		.loc 1 620 0
 2536 00c8 40F20003 		movw	r3, #:lower16:dt
 2537 00cc C0F20003 		movt	r3, #:upper16:dt
 2538 00d0 1A4A     		ldr	r2, .L121+12	@ float
 2539 00d2 1A60     		str	r2, [r3, #0]	@ float
 621:..//utils/multi-steppers/multi-steppers.c **** 	recip_dt = 1.0 / dt;
 2540              		.loc 1 621 0
 2541 00d4 40F20003 		movw	r3, #:lower16:dt
 2542 00d8 C0F20003 		movt	r3, #:upper16:dt
 2543 00dc 1A68     		ldr	r2, [r3, #0]	@ float
 2544 00de 40F20003 		movw	r3, #:lower16:__aeabi_fdiv
 2545 00e2 C0F20003 		movt	r3, #:upper16:__aeabi_fdiv
 2546 00e6 1648     		ldr	r0, .L121+16	@ float
 2547 00e8 1146     		mov	r1, r2
 2548 00ea 9847     		blx	r3
 2549 00ec 0346     		mov	r3, r0
 2550 00ee 1A46     		mov	r2, r3
 2551 00f0 40F20003 		movw	r3, #:lower16:recip_dt
 2552 00f4 C0F20003 		movt	r3, #:upper16:recip_dt
 2553 00f8 1A60     		str	r2, [r3, #0]	@ float
 622:..//utils/multi-steppers/multi-steppers.c **** 	
 623:..//utils/multi-steppers/multi-steppers.c **** 	for (i = 0; i<NUM_AXES; i++){
 2554              		.loc 1 623 0
 2555 00fa 4FF00003 		mov	r3, #0
 2556 00fe 7B60     		str	r3, [r7, #4]
 2557 0100 09E0     		b	.L118
 2558              	.L119:
 624:..//utils/multi-steppers/multi-steppers.c **** 		// stepgen = &g_stepgen[i];
 625:..//utils/multi-steppers/multi-steppers.c **** 		stepper_init_pulse_generator_single_axis(i);
 2559              		.loc 1 625 0
 2560 0102 7868     		ldr	r0, [r7, #4]
 2561 0104 40F20003 		movw	r3, #:lower16:stepper_init_pulse_generator_single_axis
 2562 0108 C0F20003 		movt	r3, #:upper16:stepper_init_pulse_generator_single_axis
 2563 010c 9847     		blx	r3
 2564              		.loc 1 623 0
 2565 010e 7B68     		ldr	r3, [r7, #4]
 2566 0110 03F10103 		add	r3, r3, #1
 2567 0114 7B60     		str	r3, [r7, #4]
 2568              	.L118:
 2569 0116 7B68     		ldr	r3, [r7, #4]
 2570 0118 012B     		cmp	r3, #1
 2571 011a F2DD     		ble	.L119
 626:..//utils/multi-steppers/multi-steppers.c **** 	}	
 627:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 2572              		.loc 1 627 0
 2573 011c 4FF00103 		mov	r3, #1
 628:..//utils/multi-steppers/multi-steppers.c **** }
 2574              		.loc 1 628 0
 2575 0120 1846     		mov	r0, r3
 2576 0122 07F10807 		add	r7, r7, #8
 2577 0126 BD46     		mov	sp, r7
 2578 0128 80BD     		pop	{r7, pc}
 2579              	.L122:
 2580 012a 00BFAFF3 		.align	3
 2580      0080
 2581              	.L121:
 2582 0130 95D626E8 		.word	-400107883
 2583 0134 0B2E113E 		.word	1041313291
 2584 0138 0000804D 		.word	1300234240
 2585 013c 6F12833A 		.word	981668463
 2586 0140 0000803F 		.word	1065353216
 2587              		.cfi_endproc
 2588              	.LFE37:
 2590 0144 AFF30080 		.section	.text.stepper_init_profiler,"ax",%progbits
 2591              		.align	2
 2592              		.global	stepper_init_profiler
 2593              		.thumb
 2594              		.thumb_func
 2596              	stepper_init_profiler:
 2597              	.LFB38:
 629:..//utils/multi-steppers/multi-steppers.c **** 
 630:..//utils/multi-steppers/multi-steppers.c **** /* used to init a profiler for one axis*/
 631:..//utils/multi-steppers/multi-steppers.c **** int stepper_init_profiler(profiler_t *p)
 632:..//utils/multi-steppers/multi-steppers.c **** {
 2598              		.loc 1 632 0
 2599              		.cfi_startproc
 2600              		@ args = 0, pretend = 0, frame = 8
 2601              		@ frame_needed = 1, uses_anonymous_args = 0
 2602 0000 80B5     		push	{r7, lr}
 2603              	.LCFI24:
 2604              		.cfi_def_cfa_offset 8
 2605 0002 82B0     		sub	sp, sp, #8
 2606              	.LCFI25:
 2607              		.cfi_def_cfa_offset 16
 2608 0004 00AF     		add	r7, sp, #0
 2609              		.cfi_offset 14, -4
 2610              		.cfi_offset 7, -8
 2611              	.LCFI26:
 2612              		.cfi_def_cfa_register 7
 2613 0006 7860     		str	r0, [r7, #4]
 633:..//utils/multi-steppers/multi-steppers.c **** 	// print_string("ProfilerInit\n");
 634:..//utils/multi-steppers/multi-steppers.c **** 	p->x_final = 0;
 2614              		.loc 1 634 0
 2615 0008 7B68     		ldr	r3, [r7, #4]
 2616 000a 4FF00002 		mov	r2, #0
 2617 000e 1A60     		str	r2, [r3, #0]
 635:..//utils/multi-steppers/multi-steppers.c **** 	p->a_max = 1.0;
 2618              		.loc 1 635 0
 2619 0010 7B68     		ldr	r3, [r7, #4]
 2620 0012 184A     		ldr	r2, .L125	@ float
 2621 0014 9A60     		str	r2, [r3, #8]	@ float
 636:..//utils/multi-steppers/multi-steppers.c **** 	p->v_max = 20.0; // pulses/msec... = 20,000 pulses/sec
 2622              		.loc 1 636 0
 2623 0016 7B68     		ldr	r3, [r7, #4]
 2624 0018 174A     		ldr	r2, .L125+4	@ float
 2625 001a 5A60     		str	r2, [r3, #4]	@ float
 637:..//utils/multi-steppers/multi-steppers.c **** 	p->x_curr = 0;
 2626              		.loc 1 637 0
 2627 001c 7B68     		ldr	r3, [r7, #4]
 2628 001e 4FF00002 		mov	r2, #0
 2629 0022 DA60     		str	r2, [r3, #12]
 638:..//utils/multi-steppers/multi-steppers.c **** 	p->x_next = 0.0;
 2630              		.loc 1 638 0
 2631 0024 7B68     		ldr	r3, [r7, #4]
 2632 0026 154A     		ldr	r2, .L125+8	@ float
 2633 0028 1A61     		str	r2, [r3, #16]	@ float
 639:..//utils/multi-steppers/multi-steppers.c **** 	p->v_next = 0.0;
 2634              		.loc 1 639 0
 2635 002a 7B68     		ldr	r3, [r7, #4]
 2636 002c 134A     		ldr	r2, .L125+8	@ float
 2637 002e 5A61     		str	r2, [r3, #20]	@ float
 640:..//utils/multi-steppers/multi-steppers.c **** 	p->eps_x = 2;
 2638              		.loc 1 640 0
 2639 0030 7B68     		ldr	r3, [r7, #4]
 2640 0032 4FF00202 		mov	r2, #2
 2641 0036 9A62     		str	r2, [r3, #40]
 641:..//utils/multi-steppers/multi-steppers.c **** 	// p->ainv2 = 0.5/p->a_max;
 642:..//utils/multi-steppers/multi-steppers.c **** 	p->dinv2 = 0.5/p->d_max;
 2642              		.loc 1 642 0
 2643 0038 7B68     		ldr	r3, [r7, #4]
 2644 003a 1A6B     		ldr	r2, [r3, #48]	@ float
 2645 003c 40F20003 		movw	r3, #:lower16:__aeabi_fdiv
 2646 0040 C0F20003 		movt	r3, #:upper16:__aeabi_fdiv
 2647 0044 0E48     		ldr	r0, .L125+12	@ float
 2648 0046 1146     		mov	r1, r2
 2649 0048 9847     		blx	r3
 2650 004a 0346     		mov	r3, r0
 2651 004c 1A46     		mov	r2, r3
 2652 004e 7B68     		ldr	r3, [r7, #4]
 2653 0050 5A63     		str	r2, [r3, #52]	@ float
 643:..//utils/multi-steppers/multi-steppers.c **** 	p->mp_mode = MPM_HARD_STOP;
 2654              		.loc 1 643 0
 2655 0052 7B68     		ldr	r3, [r7, #4]
 2656 0054 4FF00002 		mov	r2, #0
 2657 0058 DA62     		str	r2, [r3, #44]
 644:..//utils/multi-steppers/multi-steppers.c **** 	p->state = MOTOR_STOP;
 2658              		.loc 1 644 0
 2659 005a 7B68     		ldr	r3, [r7, #4]
 2660 005c 4FF00002 		mov	r2, #0
 2661 0060 83F82420 		strb	r2, [r3, #36]
 645:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 2662              		.loc 1 645 0
 2663 0064 4FF00103 		mov	r3, #1
 646:..//utils/multi-steppers/multi-steppers.c **** }
 2664              		.loc 1 646 0
 2665 0068 1846     		mov	r0, r3
 2666 006a 07F10807 		add	r7, r7, #8
 2667 006e BD46     		mov	sp, r7
 2668 0070 80BD     		pop	{r7, pc}
 2669              	.L126:
 2670 0072 00BF     		.align	2
 2671              	.L125:
 2672 0074 0000803F 		.word	1065353216
 2673 0078 0000A041 		.word	1101004800
 2674 007c 00000000 		.word	0
 2675 0080 0000003F 		.word	1056964608
 2676              		.cfi_endproc
 2677              	.LFE38:
 2679              		.section	.text.stepper_init_all_profilers,"ax",%progbits
 2680              		.align	2
 2681              		.global	stepper_init_all_profilers
 2682              		.thumb
 2683              		.thumb_func
 2685              	stepper_init_all_profilers:
 2686              	.LFB39:
 647:..//utils/multi-steppers/multi-steppers.c **** 
 648:..//utils/multi-steppers/multi-steppers.c **** 
 649:..//utils/multi-steppers/multi-steppers.c **** /* initialises the profilers for all the axes*/
 650:..//utils/multi-steppers/multi-steppers.c **** int stepper_init_all_profilers(void)
 651:..//utils/multi-steppers/multi-steppers.c **** {
 2687              		.loc 1 651 0
 2688              		.cfi_startproc
 2689              		@ args = 0, pretend = 0, frame = 8
 2690              		@ frame_needed = 1, uses_anonymous_args = 0
 2691 0000 80B5     		push	{r7, lr}
 2692              	.LCFI27:
 2693              		.cfi_def_cfa_offset 8
 2694 0002 82B0     		sub	sp, sp, #8
 2695              	.LCFI28:
 2696              		.cfi_def_cfa_offset 16
 2697 0004 00AF     		add	r7, sp, #0
 2698              		.cfi_offset 14, -4
 2699              		.cfi_offset 7, -8
 2700              	.LCFI29:
 2701              		.cfi_def_cfa_register 7
 652:..//utils/multi-steppers/multi-steppers.c **** 	int i;
 653:..//utils/multi-steppers/multi-steppers.c **** 	for (i = 0 ; i < NUM_AXES ; i++ )
 2702              		.loc 1 653 0
 2703 0006 4FF00003 		mov	r3, #0
 2704 000a 7B60     		str	r3, [r7, #4]
 2705 000c 17E0     		b	.L128
 2706              	.L129:
 654:..//utils/multi-steppers/multi-steppers.c **** 	{
 655:..//utils/multi-steppers/multi-steppers.c **** 		stepper_init_profiler(&Profiler[i]);
 2707              		.loc 1 655 0
 2708 000e 7A68     		ldr	r2, [r7, #4]
 2709 0010 1346     		mov	r3, r2
 2710 0012 4FEAC303 		lsl	r3, r3, #3
 2711 0016 C2EB0303 		rsb	r3, r2, r3
 2712 001a 4FEAC303 		lsl	r3, r3, #3
 2713 001e 1A46     		mov	r2, r3
 2714 0020 40F20003 		movw	r3, #:lower16:Profiler
 2715 0024 C0F20003 		movt	r3, #:upper16:Profiler
 2716 0028 1344     		add	r3, r2, r3
 2717 002a 1846     		mov	r0, r3
 2718 002c 40F20003 		movw	r3, #:lower16:stepper_init_profiler
 2719 0030 C0F20003 		movt	r3, #:upper16:stepper_init_profiler
 2720 0034 9847     		blx	r3
 2721              		.loc 1 653 0
 2722 0036 7B68     		ldr	r3, [r7, #4]
 2723 0038 03F10103 		add	r3, r3, #1
 2724 003c 7B60     		str	r3, [r7, #4]
 2725              	.L128:
 2726 003e 7B68     		ldr	r3, [r7, #4]
 2727 0040 012B     		cmp	r3, #1
 2728 0042 E4DD     		ble	.L129
 656:..//utils/multi-steppers/multi-steppers.c **** 	}
 657:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 2729              		.loc 1 657 0
 2730 0044 4FF00103 		mov	r3, #1
 658:..//utils/multi-steppers/multi-steppers.c **** }
 2731              		.loc 1 658 0
 2732 0048 1846     		mov	r0, r3
 2733 004a 07F10807 		add	r7, r7, #8
 2734 004e BD46     		mov	sp, r7
 2735 0050 80BD     		pop	{r7, pc}
 2736              		.cfi_endproc
 2737              	.LFE39:
 2739 0052 00BF     		.section	.text.stepper_init_timers,"ax",%progbits
 2740              		.align	2
 2741              		.global	stepper_init_timers
 2742              		.thumb
 2743              		.thumb_func
 2745              	stepper_init_timers:
 2746              	.LFB40:
 659:..//utils/multi-steppers/multi-steppers.c **** 
 660:..//utils/multi-steppers/multi-steppers.c **** /* both the timers of the LPC2148 are used */
 661:..//utils/multi-steppers/multi-steppers.c **** /* initialise each of them with their appropriate ISR */
 662:..//utils/multi-steppers/multi-steppers.c **** /* and with their appropriate match compare values here*/
 663:..//utils/multi-steppers/multi-steppers.c **** int stepper_init_timers(void)
 664:..//utils/multi-steppers/multi-steppers.c **** {	
 2747              		.loc 1 664 0
 2748              		.cfi_startproc
 2749              		@ args = 0, pretend = 0, frame = 0
 2750              		@ frame_needed = 1, uses_anonymous_args = 0
 2751 0000 80B5     		push	{r7, lr}
 2752              	.LCFI30:
 2753              		.cfi_def_cfa_offset 8
 2754 0002 00AF     		add	r7, sp, #0
 2755              		.cfi_offset 14, -4
 2756              		.cfi_offset 7, -8
 2757              	.LCFI31:
 2758              		.cfi_def_cfa_register 7
 665:..//utils/multi-steppers/multi-steppers.c **** 	// we want the timer0 to run at 50Khz
 666:..//utils/multi-steppers/multi-steppers.c **** 	init_timer0_freq(MAKE_PULSES_TIME);
 2759              		.loc 1 666 0
 2760 0004 4FF03100 		mov	r0, #49
 2761 0008 40F20003 		movw	r3, #:lower16:init_timer0_freq
 2762 000c C0F20003 		movt	r3, #:upper16:init_timer0_freq
 2763 0010 9847     		blx	r3
 667:..//utils/multi-steppers/multi-steppers.c **** 		
 668:..//utils/multi-steppers/multi-steppers.c **** 	// we want to run timer1 at 200Khz
 669:..//utils/multi-steppers/multi-steppers.c **** 	init_timer1_freq(PULSE_CLEAR_TIME);	
 2764              		.loc 1 669 0
 2765 0012 4FF00100 		mov	r0, #1
 2766 0016 40F20003 		movw	r3, #:lower16:init_timer1_freq
 2767 001a C0F20003 		movt	r3, #:upper16:init_timer1_freq
 2768 001e 9847     		blx	r3
 670:..//utils/multi-steppers/multi-steppers.c **** 	
 671:..//utils/multi-steppers/multi-steppers.c **** 	// we want to run PWM timer at 1Khz
 672:..//utils/multi-steppers/multi-steppers.c **** 	init_timer2_freq(FREQ_UPDATE_TIME);
 2769              		.loc 1 672 0
 2770 0020 40F2E730 		movw	r0, #999
 2771 0024 40F20003 		movw	r3, #:lower16:init_timer2_freq
 2772 0028 C0F20003 		movt	r3, #:upper16:init_timer2_freq
 2773 002c 9847     		blx	r3
 673:..//utils/multi-steppers/multi-steppers.c **** 	
 674:..//utils/multi-steppers/multi-steppers.c **** 	// set timer for modbus... done in modbus configure function
 675:..//utils/multi-steppers/multi-steppers.c **** 	// init_timer3_freq(MODBUS_TIMEOUT_3_5);
 676:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 2774              		.loc 1 676 0
 2775 002e 4FF00103 		mov	r3, #1
 677:..//utils/multi-steppers/multi-steppers.c **** }
 2776              		.loc 1 677 0
 2777 0032 1846     		mov	r0, r3
 2778 0034 80BD     		pop	{r7, pc}
 2779              		.cfi_endproc
 2780              	.LFE40:
 2782 0036 00BF     		.section	.text.stepper_init,"ax",%progbits
 2783              		.align	2
 2784              		.global	stepper_init
 2785              		.thumb
 2786              		.thumb_func
 2788              	stepper_init:
 2789              	.LFB41:
 678:..//utils/multi-steppers/multi-steppers.c **** 
 679:..//utils/multi-steppers/multi-steppers.c **** /* stepper init initialises all the necesssary timers,pulse generators,profilers,etc*/
 680:..//utils/multi-steppers/multi-steppers.c **** int stepper_init(void){
 2790              		.loc 1 680 0
 2791              		.cfi_startproc
 2792              		@ args = 0, pretend = 0, frame = 0
 2793              		@ frame_needed = 1, uses_anonymous_args = 0
 2794 0000 80B5     		push	{r7, lr}
 2795              	.LCFI32:
 2796              		.cfi_def_cfa_offset 8
 2797 0002 00AF     		add	r7, sp, #0
 2798              		.cfi_offset 14, -4
 2799              		.cfi_offset 7, -8
 2800              	.LCFI33:
 2801              		.cfi_def_cfa_register 7
 681:..//utils/multi-steppers/multi-steppers.c **** 	// stepper_init_timers();
 682:..//utils/multi-steppers/multi-steppers.c **** 	stepper_init_pulse_generator();
 2802              		.loc 1 682 0
 2803 0004 40F20003 		movw	r3, #:lower16:stepper_init_pulse_generator
 2804 0008 C0F20003 		movt	r3, #:upper16:stepper_init_pulse_generator
 2805 000c 9847     		blx	r3
 683:..//utils/multi-steppers/multi-steppers.c **** 	stepper_init_all_profilers();
 2806              		.loc 1 683 0
 2807 000e 40F20003 		movw	r3, #:lower16:stepper_init_all_profilers
 2808 0012 C0F20003 		movt	r3, #:upper16:stepper_init_all_profilers
 2809 0016 9847     		blx	r3
 684:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 2810              		.loc 1 684 0
 2811 0018 4FF00103 		mov	r3, #1
 685:..//utils/multi-steppers/multi-steppers.c **** }
 2812              		.loc 1 685 0
 2813 001c 1846     		mov	r0, r3
 2814 001e 80BD     		pop	{r7, pc}
 2815              		.cfi_endproc
 2816              	.LFE41:
 2818              		.section	.text.print_profiler_data,"ax",%progbits
 2819              		.align	2
 2820              		.global	print_profiler_data
 2821              		.thumb
 2822              		.thumb_func
 2824              	print_profiler_data:
 2825              	.LFB42:
 686:..//utils/multi-steppers/multi-steppers.c **** #if 0
 687:..//utils/multi-steppers/multi-steppers.c **** int stepper_set_curr_pos_as_zero(int axis){
 688:..//utils/multi-steppers/multi-steppers.c **** 	disableIRQ();
 689:..//utils/multi-steppers/multi-steppers.c **** 	disable_timer(0);
 690:..//utils/multi-steppers/multi-steppers.c **** 	disable_timer(1);
 691:..//utils/multi-steppers/multi-steppers.c **** 	float orig_vel = stepper_get_max_vel(axis);
 692:..//utils/multi-steppers/multi-steppers.c **** 	float orig_acc = stepper_get_max_acc(axis);
 693:..//utils/multi-steppers/multi-steppers.c **** 	
 694:..//utils/multi-steppers/multi-steppers.c **** 	stepper_init_pulse_generator_single_axis(axis);
 695:..//utils/multi-steppers/multi-steppers.c **** 	stepper_init_profiler(&Profiler[axis]);
 696:..//utils/multi-steppers/multi-steppers.c **** 	stepper_set_new_profile(axis,orig_vel,orig_acc);
 697:..//utils/multi-steppers/multi-steppers.c **** 	stepper_update_freq();
 698:..//utils/multi-steppers/multi-steppers.c **** 
 699:..//utils/multi-steppers/multi-steppers.c **** 	enableIRQ();
 700:..//utils/multi-steppers/multi-steppers.c **** 	enable_timer(0);
 701:..//utils/multi-steppers/multi-steppers.c **** 	
 702:..//utils/multi-steppers/multi-steppers.c **** 	
 703:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 704:..//utils/multi-steppers/multi-steppers.c **** }
 705:..//utils/multi-steppers/multi-steppers.c **** #endif
 706:..//utils/multi-steppers/multi-steppers.c **** int print_profiler_data(profiler_t *p){
 2826              		.loc 1 706 0
 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 8
 2829              		@ frame_needed = 1, uses_anonymous_args = 0
 2830              		@ link register save eliminated.
 2831 0000 80B4     		push	{r7}
 2832              	.LCFI34:
 2833              		.cfi_def_cfa_offset 4
 2834 0002 83B0     		sub	sp, sp, #12
 2835              	.LCFI35:
 2836              		.cfi_def_cfa_offset 16
 2837 0004 00AF     		add	r7, sp, #0
 2838              		.cfi_offset 7, -4
 2839              	.LCFI36:
 2840              		.cfi_def_cfa_register 7
 2841 0006 7860     		str	r0, [r7, #4]
 707:..//utils/multi-steppers/multi-steppers.c **** 	// print_string("\nProfiler Data:\nX_final:");
 708:..//utils/multi-steppers/multi-steppers.c **** 	// print_ulong(p->x_final);
 709:..//utils/multi-steppers/multi-steppers.c **** 	// print_string("\nX_cur:");
 710:..//utils/multi-steppers/multi-steppers.c **** 	// print_ulong(p->x_curr);
 711:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 2842              		.loc 1 711 0
 2843 0008 4FF00103 		mov	r3, #1
 712:..//utils/multi-steppers/multi-steppers.c **** }
 2844              		.loc 1 712 0
 2845 000c 1846     		mov	r0, r3
 2846 000e 07F10C07 		add	r7, r7, #12
 2847 0012 BD46     		mov	sp, r7
 2848 0014 80BC     		pop	{r7}
 2849 0016 7047     		bx	lr
 2850              		.cfi_endproc
 2851              	.LFE42:
 2853              		.section	.text.stepper_move_motor,"ax",%progbits
 2854              		.align	2
 2855              		.global	stepper_move_motor
 2856              		.thumb
 2857              		.thumb_func
 2859              	stepper_move_motor:
 2860              	.LFB43:
 713:..//utils/multi-steppers/multi-steppers.c **** 
 714:..//utils/multi-steppers/multi-steppers.c **** /* this function is used to move motor to the next position given by  stepper_next_position */
 715:..//utils/multi-steppers/multi-steppers.c **** int stepper_move_motor(int motor_num){
 2861              		.loc 1 715 0
 2862              		.cfi_startproc
 2863              		@ args = 0, pretend = 0, frame = 8
 2864              		@ frame_needed = 1, uses_anonymous_args = 0
 2865 0000 90B5     		push	{r4, r7, lr}
 2866              	.LCFI37:
 2867              		.cfi_def_cfa_offset 12
 2868 0002 83B0     		sub	sp, sp, #12
 2869              	.LCFI38:
 2870              		.cfi_def_cfa_offset 24
 2871 0004 00AF     		add	r7, sp, #0
 2872              		.cfi_offset 14, -4
 2873              		.cfi_offset 7, -8
 2874              		.cfi_offset 4, -12
 2875              	.LCFI39:
 2876              		.cfi_def_cfa_register 7
 2877 0006 7860     		str	r0, [r7, #4]
 716:..//utils/multi-steppers/multi-steppers.c **** 	g_stepgen[motor_num].pos_cmd = stepper_next_position(&Profiler[motor_num]);
 2878              		.loc 1 716 0
 2879 0008 7C68     		ldr	r4, [r7, #4]
 2880 000a 7A68     		ldr	r2, [r7, #4]
 2881 000c 1346     		mov	r3, r2
 2882 000e 4FEAC303 		lsl	r3, r3, #3
 2883 0012 C2EB0303 		rsb	r3, r2, r3
 2884 0016 4FEAC303 		lsl	r3, r3, #3
 2885 001a 1A46     		mov	r2, r3
 2886 001c 40F20003 		movw	r3, #:lower16:Profiler
 2887 0020 C0F20003 		movt	r3, #:upper16:Profiler
 2888 0024 1344     		add	r3, r2, r3
 2889 0026 1846     		mov	r0, r3
 2890 0028 40F20003 		movw	r3, #:lower16:stepper_next_position
 2891 002c C0F20003 		movt	r3, #:upper16:stepper_next_position
 2892 0030 9847     		blx	r3
 2893 0032 0246     		mov	r2, r0
 2894 0034 40F20003 		movw	r3, #:lower16:__aeabi_i2f
 2895 0038 C0F20003 		movt	r3, #:upper16:__aeabi_i2f
 2896 003c 1046     		mov	r0, r2
 2897 003e 9847     		blx	r3
 2898 0040 0246     		mov	r2, r0
 2899 0042 40F20003 		movw	r3, #:lower16:g_stepgen
 2900 0046 C0F20003 		movt	r3, #:upper16:g_stepgen
 2901 004a 4FF06801 		mov	r1, #104
 2902 004e 01FB04F1 		mul	r1, r1, r4
 2903 0052 0B44     		add	r3, r1, r3
 2904 0054 03F15803 		add	r3, r3, #88
 2905 0058 5A60     		str	r2, [r3, #4]	@ float
 717:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 2906              		.loc 1 717 0
 2907 005a 4FF00103 		mov	r3, #1
 718:..//utils/multi-steppers/multi-steppers.c **** }
 2908              		.loc 1 718 0
 2909 005e 1846     		mov	r0, r3
 2910 0060 07F10C07 		add	r7, r7, #12
 2911 0064 BD46     		mov	sp, r7
 2912 0066 90BD     		pop	{r4, r7, pc}
 2913              		.cfi_endproc
 2914              	.LFE43:
 2916              		.section	.text.stepper_stop_motor,"ax",%progbits
 2917              		.align	2
 2918              		.global	stepper_stop_motor
 2919              		.thumb
 2920              		.thumb_func
 2922              	stepper_stop_motor:
 2923              	.LFB44:
 719:..//utils/multi-steppers/multi-steppers.c **** 
 720:..//utils/multi-steppers/multi-steppers.c **** /*this function is used to stop all motors
 721:..//utils/multi-steppers/multi-steppers.c **** * The Next position for the particular motor is calculated..
 722:..//utils/multi-steppers/multi-steppers.c **** */
 723:..//utils/multi-steppers/multi-steppers.c **** int stepper_stop_motor(int motor_num){
 2924              		.loc 1 723 0
 2925              		.cfi_startproc
 2926              		@ args = 0, pretend = 0, frame = 16
 2927              		@ frame_needed = 1, uses_anonymous_args = 0
 2928 0000 80B5     		push	{r7, lr}
 2929              	.LCFI40:
 2930              		.cfi_def_cfa_offset 8
 2931 0002 84B0     		sub	sp, sp, #16
 2932              	.LCFI41:
 2933              		.cfi_def_cfa_offset 24
 2934 0004 00AF     		add	r7, sp, #0
 2935              		.cfi_offset 14, -4
 2936              		.cfi_offset 7, -8
 2937              	.LCFI42:
 2938              		.cfi_def_cfa_register 7
 2939 0006 7860     		str	r0, [r7, #4]
 724:..//utils/multi-steppers/multi-steppers.c **** 	SINGLE stop=0.0;
 2940              		.loc 1 724 0
 2941 0008 174B     		ldr	r3, .L141	@ float
 2942 000a FB60     		str	r3, [r7, #12]	@ float
 725:..//utils/multi-steppers/multi-steppers.c **** 	stop = stepper_stop_distance(motor_num);
 2943              		.loc 1 725 0
 2944 000c 7868     		ldr	r0, [r7, #4]
 2945 000e 40F20003 		movw	r3, #:lower16:stepper_stop_distance
 2946 0012 C0F20003 		movt	r3, #:upper16:stepper_stop_distance
 2947 0016 9847     		blx	r3
 2948 0018 0346     		mov	r3, r0
 2949 001a FB60     		str	r3, [r7, #12]	@ float
 726:..//utils/multi-steppers/multi-steppers.c **** 	stop += (SINGLE)stepper_get_cur_pos(motor_num);
 2950              		.loc 1 726 0
 2951 001c 7868     		ldr	r0, [r7, #4]
 2952 001e 40F20003 		movw	r3, #:lower16:stepper_get_cur_pos
 2953 0022 C0F20003 		movt	r3, #:upper16:stepper_get_cur_pos
 2954 0026 9847     		blx	r3
 2955 0028 0246     		mov	r2, r0
 2956 002a 40F20003 		movw	r3, #:lower16:__aeabi_i2f
 2957 002e C0F20003 		movt	r3, #:upper16:__aeabi_i2f
 2958 0032 1046     		mov	r0, r2
 2959 0034 9847     		blx	r3
 2960 0036 0246     		mov	r2, r0
 2961 0038 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 2962 003c C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 2963 0040 F868     		ldr	r0, [r7, #12]	@ float
 2964 0042 1146     		mov	r1, r2
 2965 0044 9847     		blx	r3
 2966 0046 0346     		mov	r3, r0
 2967 0048 FB60     		str	r3, [r7, #12]	@ float
 727:..//utils/multi-steppers/multi-steppers.c **** 	stepper_set_final_pos(motor_num,stop);	
 2968              		.loc 1 727 0
 2969 004a 7868     		ldr	r0, [r7, #4]
 2970 004c F968     		ldr	r1, [r7, #12]	@ float
 2971 004e 40F20003 		movw	r3, #:lower16:stepper_set_final_pos
 2972 0052 C0F20003 		movt	r3, #:upper16:stepper_set_final_pos
 2973 0056 9847     		blx	r3
 728:..//utils/multi-steppers/multi-steppers.c **** 	// printf("StopDist: %d\n",stop);
 729:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 2974              		.loc 1 729 0
 2975 0058 4FF00103 		mov	r3, #1
 730:..//utils/multi-steppers/multi-steppers.c **** }
 2976              		.loc 1 730 0
 2977 005c 1846     		mov	r0, r3
 2978 005e 07F11007 		add	r7, r7, #16
 2979 0062 BD46     		mov	sp, r7
 2980 0064 80BD     		pop	{r7, pc}
 2981              	.L142:
 2982 0066 00BF     		.align	2
 2983              	.L141:
 2984 0068 00000000 		.word	0
 2985              		.cfi_endproc
 2986              	.LFE44:
 2988              		.section	.text.stepper_stop_synchro_motor,"ax",%progbits
 2989              		.align	2
 2990              		.global	stepper_stop_synchro_motor
 2991              		.thumb
 2992              		.thumb_func
 2994              	stepper_stop_synchro_motor:
 2995              	.LFB45:
 731:..//utils/multi-steppers/multi-steppers.c **** 
 732:..//utils/multi-steppers/multi-steppers.c **** int stepper_stop_synchro_motor(int motor_num){
 2996              		.loc 1 732 0
 2997              		.cfi_startproc
 2998              		@ args = 0, pretend = 0, frame = 16
 2999              		@ frame_needed = 1, uses_anonymous_args = 0
 3000 0000 B0B5     		push	{r4, r5, r7, lr}
 3001              	.LCFI43:
 3002              		.cfi_def_cfa_offset 16
 3003 0002 84B0     		sub	sp, sp, #16
 3004              	.LCFI44:
 3005              		.cfi_def_cfa_offset 32
 3006 0004 00AF     		add	r7, sp, #0
 3007              		.cfi_offset 14, -4
 3008              		.cfi_offset 7, -8
 3009              		.cfi_offset 5, -12
 3010              		.cfi_offset 4, -16
 3011              	.LCFI45:
 3012              		.cfi_def_cfa_register 7
 3013 0006 7860     		str	r0, [r7, #4]
 733:..//utils/multi-steppers/multi-steppers.c **** 	SINGLE stop=0;
 3014              		.loc 1 733 0
 3015 0008 454B     		ldr	r3, .L145+8	@ float
 3016 000a BB60     		str	r3, [r7, #8]	@ float
 734:..//utils/multi-steppers/multi-steppers.c **** 	SINGLE div_val=0;
 3017              		.loc 1 734 0
 3018 000c 444B     		ldr	r3, .L145+8	@ float
 3019 000e FB60     		str	r3, [r7, #12]	@ float
 735:..//utils/multi-steppers/multi-steppers.c **** 	stop=stepper_stop_distance(motor_num);
 3020              		.loc 1 735 0
 3021 0010 7868     		ldr	r0, [r7, #4]
 3022 0012 40F20003 		movw	r3, #:lower16:stepper_stop_distance
 3023 0016 C0F20003 		movt	r3, #:upper16:stepper_stop_distance
 3024 001a 9847     		blx	r3
 3025 001c 0346     		mov	r3, r0
 3026 001e BB60     		str	r3, [r7, #8]	@ float
 736:..//utils/multi-steppers/multi-steppers.c **** 	stop+=(SINGLE)Profiler[motor_num].x_curr - Profiler[motor_num].offset;
 3027              		.loc 1 736 0
 3028 0020 7968     		ldr	r1, [r7, #4]
 3029 0022 40F20002 		movw	r2, #:lower16:Profiler
 3030 0026 C0F20002 		movt	r2, #:upper16:Profiler
 3031 002a 0B46     		mov	r3, r1
 3032 002c 4FEAC303 		lsl	r3, r3, #3
 3033 0030 C1EB0303 		rsb	r3, r1, r3
 3034 0034 03F10103 		add	r3, r3, #1
 3035 0038 4FEAC303 		lsl	r3, r3, #3
 3036 003c 1344     		add	r3, r3, r2
 3037 003e 5A68     		ldr	r2, [r3, #4]
 3038 0040 40F20003 		movw	r3, #:lower16:__aeabi_i2f
 3039 0044 C0F20003 		movt	r3, #:upper16:__aeabi_i2f
 3040 0048 1046     		mov	r0, r2
 3041 004a 9847     		blx	r3
 3042 004c 7968     		ldr	r1, [r7, #4]
 3043 004e 40F20002 		movw	r2, #:lower16:Profiler
 3044 0052 C0F20002 		movt	r2, #:upper16:Profiler
 3045 0056 0B46     		mov	r3, r1
 3046 0058 4FEAC303 		lsl	r3, r3, #3
 3047 005c C1EB0303 		rsb	r3, r1, r3
 3048 0060 4FEAC303 		lsl	r3, r3, #3
 3049 0064 1344     		add	r3, r3, r2
 3050 0066 03F12003 		add	r3, r3, #32
 3051 006a 1A68     		ldr	r2, [r3, #0]	@ float
 3052 006c 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 3053 0070 C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 3054 0074 1146     		mov	r1, r2
 3055 0076 9847     		blx	r3
 3056 0078 0346     		mov	r3, r0
 3057 007a 1A46     		mov	r2, r3
 3058 007c 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 3059 0080 C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 3060 0084 B868     		ldr	r0, [r7, #8]	@ float
 3061 0086 1146     		mov	r1, r2
 3062 0088 9847     		blx	r3
 3063 008a 0346     		mov	r3, r0
 3064 008c BB60     		str	r3, [r7, #8]	@ float
 737:..//utils/multi-steppers/multi-steppers.c **** 	div_val=(SINGLE)(stop/1000.0);
 3065              		.loc 1 737 0
 3066 008e 40F20003 		movw	r3, #:lower16:__aeabi_fdiv
 3067 0092 C0F20003 		movt	r3, #:upper16:__aeabi_fdiv
 3068 0096 B868     		ldr	r0, [r7, #8]	@ float
 3069 0098 2249     		ldr	r1, .L145+12	@ float
 3070 009a 9847     		blx	r3
 3071 009c 0346     		mov	r3, r0
 3072 009e FB60     		str	r3, [r7, #12]	@ float
 738:..//utils/multi-steppers/multi-steppers.c **** 	stop+=(div_val+1000.0);
 3073              		.loc 1 738 0
 3074 00a0 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 3075 00a4 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 3076 00a8 B868     		ldr	r0, [r7, #8]	@ float
 3077 00aa 9847     		blx	r3
 3078 00ac 0446     		mov	r4, r0
 3079 00ae 0D46     		mov	r5, r1
 3080 00b0 40F20003 		movw	r3, #:lower16:__aeabi_f2d
 3081 00b4 C0F20003 		movt	r3, #:upper16:__aeabi_f2d
 3082 00b8 F868     		ldr	r0, [r7, #12]	@ float
 3083 00ba 9847     		blx	r3
 3084 00bc 0246     		mov	r2, r0
 3085 00be 0B46     		mov	r3, r1
 3086 00c0 40F2000C 		movw	ip, #:lower16:__aeabi_dadd
 3087 00c4 C0F2000C 		movt	ip, #:upper16:__aeabi_dadd
 3088 00c8 1046     		mov	r0, r2
 3089 00ca 1946     		mov	r1, r3
 3090 00cc 12A3     		adr	r3, .L145
 3091 00ce D3E90023 		ldrd	r2, [r3]
 3092 00d2 E047     		blx	ip
 3093 00d4 0246     		mov	r2, r0
 3094 00d6 0B46     		mov	r3, r1
 3095 00d8 40F2000C 		movw	ip, #:lower16:__aeabi_dadd
 3096 00dc C0F2000C 		movt	ip, #:upper16:__aeabi_dadd
 3097 00e0 2046     		mov	r0, r4
 3098 00e2 2946     		mov	r1, r5
 3099 00e4 E047     		blx	ip
 3100 00e6 0246     		mov	r2, r0
 3101 00e8 0B46     		mov	r3, r1
 3102 00ea 1046     		mov	r0, r2
 3103 00ec 1946     		mov	r1, r3
 3104 00ee 40F20003 		movw	r3, #:lower16:__aeabi_d2f
 3105 00f2 C0F20003 		movt	r3, #:upper16:__aeabi_d2f
 3106 00f6 9847     		blx	r3
 3107 00f8 0346     		mov	r3, r0
 3108 00fa BB60     		str	r3, [r7, #8]	@ float
 739:..//utils/multi-steppers/multi-steppers.c **** 	// printf("StopDist: %d\n",stop);
 740:..//utils/multi-steppers/multi-steppers.c **** 	stepper_set_final_pos(motor_num,stop);
 3109              		.loc 1 740 0
 3110 00fc 7868     		ldr	r0, [r7, #4]
 3111 00fe B968     		ldr	r1, [r7, #8]	@ float
 3112 0100 40F20003 		movw	r3, #:lower16:stepper_set_final_pos
 3113 0104 C0F20003 		movt	r3, #:upper16:stepper_set_final_pos
 3114 0108 9847     		blx	r3
 741:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 3115              		.loc 1 741 0
 3116 010a 4FF00103 		mov	r3, #1
 742:..//utils/multi-steppers/multi-steppers.c **** }
 3117              		.loc 1 742 0
 3118 010e 1846     		mov	r0, r3
 3119 0110 07F11007 		add	r7, r7, #16
 3120 0114 BD46     		mov	sp, r7
 3121 0116 B0BD     		pop	{r4, r5, r7, pc}
 3122              	.L146:
 3123              		.align	3
 3124              	.L145:
 3125 0118 00000000 		.word	0
 3126 011c 00408F40 		.word	1083129856
 3127 0120 00000000 		.word	0
 3128 0124 00007A44 		.word	1148846080
 3129              		.cfi_endproc
 3130              	.LFE45:
 3132              		.section	.text.stepper_set_new_profile,"ax",%progbits
 3133              		.align	2
 3134              		.global	stepper_set_new_profile
 3135              		.thumb
 3136              		.thumb_func
 3138              	stepper_set_new_profile:
 3139              	.LFB46:
 743:..//utils/multi-steppers/multi-steppers.c **** 
 744:..//utils/multi-steppers/multi-steppers.c **** 
 745:..//utils/multi-steppers/multi-steppers.c **** /* setup a new profile..*/
 746:..//utils/multi-steppers/multi-steppers.c **** // int stepper_set_new_profile(int axis, float v_max, float a_max){
 747:..//utils/multi-steppers/multi-steppers.c **** int stepper_set_new_profile(int axis, float v_max, float a_max, float d_max){
 3140              		.loc 1 747 0
 3141              		.cfi_startproc
 3142              		@ args = 0, pretend = 0, frame = 24
 3143              		@ frame_needed = 1, uses_anonymous_args = 0
 3144 0000 80B5     		push	{r7, lr}
 3145              	.LCFI46:
 3146              		.cfi_def_cfa_offset 8
 3147 0002 86B0     		sub	sp, sp, #24
 3148              	.LCFI47:
 3149              		.cfi_def_cfa_offset 32
 3150 0004 00AF     		add	r7, sp, #0
 3151              		.cfi_offset 14, -4
 3152              		.cfi_offset 7, -8
 3153              	.LCFI48:
 3154              		.cfi_def_cfa_register 7
 3155 0006 F860     		str	r0, [r7, #12]
 3156 0008 B960     		str	r1, [r7, #8]	@ float
 3157 000a 7A60     		str	r2, [r7, #4]	@ float
 3158 000c 3B60     		str	r3, [r7, #0]	@ float
 748:..//utils/multi-steppers/multi-steppers.c **** 	// print_string("\nset_new_profile");
 749:..//utils/multi-steppers/multi-steppers.c **** 	profiler_t *p = &Profiler[axis];
 3159              		.loc 1 749 0
 3160 000e FA68     		ldr	r2, [r7, #12]
 3161 0010 1346     		mov	r3, r2
 3162 0012 4FEAC303 		lsl	r3, r3, #3
 3163 0016 C2EB0303 		rsb	r3, r2, r3
 3164 001a 4FEAC303 		lsl	r3, r3, #3
 3165 001e 1A46     		mov	r2, r3
 3166 0020 40F20003 		movw	r3, #:lower16:Profiler
 3167 0024 C0F20003 		movt	r3, #:upper16:Profiler
 3168 0028 1344     		add	r3, r2, r3
 3169 002a 7B61     		str	r3, [r7, #20]
 750:..//utils/multi-steppers/multi-steppers.c **** 	p->a_max = a_max;
 3170              		.loc 1 750 0
 3171 002c 7B69     		ldr	r3, [r7, #20]
 3172 002e 7A68     		ldr	r2, [r7, #4]	@ float
 3173 0030 9A60     		str	r2, [r3, #8]	@ float
 751:..//utils/multi-steppers/multi-steppers.c **** 	p->v_max = v_max;
 3174              		.loc 1 751 0
 3175 0032 7B69     		ldr	r3, [r7, #20]
 3176 0034 BA68     		ldr	r2, [r7, #8]	@ float
 3177 0036 5A60     		str	r2, [r3, #4]	@ float
 752:..//utils/multi-steppers/multi-steppers.c **** 	// p->ainv2 = 0.5/p->a_max;
 753:..//utils/multi-steppers/multi-steppers.c **** 	p->d_max = d_max;
 3178              		.loc 1 753 0
 3179 0038 7B69     		ldr	r3, [r7, #20]
 3180 003a 3A68     		ldr	r2, [r7, #0]	@ float
 3181 003c 1A63     		str	r2, [r3, #48]	@ float
 754:..//utils/multi-steppers/multi-steppers.c **** 	// p->dinv2 = p->d_max;
 755:..//utils/multi-steppers/multi-steppers.c **** 	p->dinv2 = 0.5/p->d_max;
 3182              		.loc 1 755 0
 3183 003e 7B69     		ldr	r3, [r7, #20]
 3184 0040 1A6B     		ldr	r2, [r3, #48]	@ float
 3185 0042 40F20003 		movw	r3, #:lower16:__aeabi_fdiv
 3186 0046 C0F20003 		movt	r3, #:upper16:__aeabi_fdiv
 3187 004a 0748     		ldr	r0, .L149	@ float
 3188 004c 1146     		mov	r1, r2
 3189 004e 9847     		blx	r3
 3190 0050 0346     		mov	r3, r0
 3191 0052 1A46     		mov	r2, r3
 3192 0054 7B69     		ldr	r3, [r7, #20]
 3193 0056 5A63     		str	r2, [r3, #52]	@ float
 756:..//utils/multi-steppers/multi-steppers.c **** 	// p->ainv2 = p->d_max;
 757:..//utils/multi-steppers/multi-steppers.c **** 	// printf("\n  ainv:  %.f  dinv %.f ",p->ainv2,p->dinv2);
 758:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 3194              		.loc 1 758 0
 3195 0058 4FF00103 		mov	r3, #1
 759:..//utils/multi-steppers/multi-steppers.c **** }
 3196              		.loc 1 759 0
 3197 005c 1846     		mov	r0, r3
 3198 005e 07F11807 		add	r7, r7, #24
 3199 0062 BD46     		mov	sp, r7
 3200 0064 80BD     		pop	{r7, pc}
 3201              	.L150:
 3202 0066 00BF     		.align	2
 3203              	.L149:
 3204 0068 0000003F 		.word	1056964608
 3205              		.cfi_endproc
 3206              	.LFE46:
 3208              		.section	.text.stepper_set_new_profile_ainv,"ax",%progbits
 3209              		.align	2
 3210              		.global	stepper_set_new_profile_ainv
 3211              		.thumb
 3212              		.thumb_func
 3214              	stepper_set_new_profile_ainv:
 3215              	.LFB47:
 760:..//utils/multi-steppers/multi-steppers.c **** 
 761:..//utils/multi-steppers/multi-steppers.c **** int stepper_set_new_profile_ainv(int axis, float v_max, float a_max, float a_inv2){
 3216              		.loc 1 761 0
 3217              		.cfi_startproc
 3218              		@ args = 0, pretend = 0, frame = 24
 3219              		@ frame_needed = 1, uses_anonymous_args = 0
 3220              		@ link register save eliminated.
 3221 0000 80B4     		push	{r7}
 3222              	.LCFI49:
 3223              		.cfi_def_cfa_offset 4
 3224 0002 87B0     		sub	sp, sp, #28
 3225              	.LCFI50:
 3226              		.cfi_def_cfa_offset 32
 3227 0004 00AF     		add	r7, sp, #0
 3228              		.cfi_offset 7, -4
 3229              	.LCFI51:
 3230              		.cfi_def_cfa_register 7
 3231 0006 F860     		str	r0, [r7, #12]
 3232 0008 B960     		str	r1, [r7, #8]	@ float
 3233 000a 7A60     		str	r2, [r7, #4]	@ float
 3234 000c 3B60     		str	r3, [r7, #0]	@ float
 762:..//utils/multi-steppers/multi-steppers.c **** 	profiler_t *p = &Profiler[axis];
 3235              		.loc 1 762 0
 3236 000e FA68     		ldr	r2, [r7, #12]
 3237 0010 1346     		mov	r3, r2
 3238 0012 4FEAC303 		lsl	r3, r3, #3
 3239 0016 C2EB0303 		rsb	r3, r2, r3
 3240 001a 4FEAC303 		lsl	r3, r3, #3
 3241 001e 1A46     		mov	r2, r3
 3242 0020 40F20003 		movw	r3, #:lower16:Profiler
 3243 0024 C0F20003 		movt	r3, #:upper16:Profiler
 3244 0028 1344     		add	r3, r2, r3
 3245 002a 7B61     		str	r3, [r7, #20]
 763:..//utils/multi-steppers/multi-steppers.c **** 	p->a_max = a_max;
 3246              		.loc 1 763 0
 3247 002c 7B69     		ldr	r3, [r7, #20]
 3248 002e 7A68     		ldr	r2, [r7, #4]	@ float
 3249 0030 9A60     		str	r2, [r3, #8]	@ float
 764:..//utils/multi-steppers/multi-steppers.c **** 	p->v_max = v_max;
 3250              		.loc 1 764 0
 3251 0032 7B69     		ldr	r3, [r7, #20]
 3252 0034 BA68     		ldr	r2, [r7, #8]	@ float
 3253 0036 5A60     		str	r2, [r3, #4]	@ float
 765:..//utils/multi-steppers/multi-steppers.c **** 	p->ainv2 = a_inv2;
 3254              		.loc 1 765 0
 3255 0038 7B69     		ldr	r3, [r7, #20]
 3256 003a 3A68     		ldr	r2, [r7, #0]	@ float
 3257 003c 9A61     		str	r2, [r3, #24]	@ float
 766:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 3258              		.loc 1 766 0
 3259 003e 4FF00103 		mov	r3, #1
 767:..//utils/multi-steppers/multi-steppers.c **** }
 3260              		.loc 1 767 0
 3261 0042 1846     		mov	r0, r3
 3262 0044 07F11C07 		add	r7, r7, #28
 3263 0048 BD46     		mov	sp, r7
 3264 004a 80BC     		pop	{r7}
 3265 004c 7047     		bx	lr
 3266              		.cfi_endproc
 3267              	.LFE47:
 3269 004e 00BF     		.section	.text.stepper_set_new_vmax,"ax",%progbits
 3270              		.align	2
 3271              		.global	stepper_set_new_vmax
 3272              		.thumb
 3273              		.thumb_func
 3275              	stepper_set_new_vmax:
 3276              	.LFB48:
 768:..//utils/multi-steppers/multi-steppers.c **** 
 769:..//utils/multi-steppers/multi-steppers.c **** int stepper_set_new_vmax(int axis, float v_max){
 3277              		.loc 1 769 0
 3278              		.cfi_startproc
 3279              		@ args = 0, pretend = 0, frame = 16
 3280              		@ frame_needed = 1, uses_anonymous_args = 0
 3281              		@ link register save eliminated.
 3282 0000 80B4     		push	{r7}
 3283              	.LCFI52:
 3284              		.cfi_def_cfa_offset 4
 3285 0002 85B0     		sub	sp, sp, #20
 3286              	.LCFI53:
 3287              		.cfi_def_cfa_offset 24
 3288 0004 00AF     		add	r7, sp, #0
 3289              		.cfi_offset 7, -4
 3290              	.LCFI54:
 3291              		.cfi_def_cfa_register 7
 3292 0006 7860     		str	r0, [r7, #4]
 3293 0008 3960     		str	r1, [r7, #0]	@ float
 770:..//utils/multi-steppers/multi-steppers.c **** 	profiler_t *p = &Profiler[axis];
 3294              		.loc 1 770 0
 3295 000a 7A68     		ldr	r2, [r7, #4]
 3296 000c 1346     		mov	r3, r2
 3297 000e 4FEAC303 		lsl	r3, r3, #3
 3298 0012 C2EB0303 		rsb	r3, r2, r3
 3299 0016 4FEAC303 		lsl	r3, r3, #3
 3300 001a 1A46     		mov	r2, r3
 3301 001c 40F20003 		movw	r3, #:lower16:Profiler
 3302 0020 C0F20003 		movt	r3, #:upper16:Profiler
 3303 0024 1344     		add	r3, r2, r3
 3304 0026 FB60     		str	r3, [r7, #12]
 771:..//utils/multi-steppers/multi-steppers.c **** 	p->v_max = v_max;
 3305              		.loc 1 771 0
 3306 0028 FB68     		ldr	r3, [r7, #12]
 3307 002a 3A68     		ldr	r2, [r7, #0]	@ float
 3308 002c 5A60     		str	r2, [r3, #4]	@ float
 772:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 3309              		.loc 1 772 0
 3310 002e 4FF00103 		mov	r3, #1
 773:..//utils/multi-steppers/multi-steppers.c **** }
 3311              		.loc 1 773 0
 3312 0032 1846     		mov	r0, r3
 3313 0034 07F11407 		add	r7, r7, #20
 3314 0038 BD46     		mov	sp, r7
 3315 003a 80BC     		pop	{r7}
 3316 003c 7047     		bx	lr
 3317              		.cfi_endproc
 3318              	.LFE48:
 3320 003e 00BF     		.section	.text.stepper_set_new_amax,"ax",%progbits
 3321              		.align	2
 3322              		.global	stepper_set_new_amax
 3323              		.thumb
 3324              		.thumb_func
 3326              	stepper_set_new_amax:
 3327              	.LFB49:
 774:..//utils/multi-steppers/multi-steppers.c **** 
 775:..//utils/multi-steppers/multi-steppers.c **** int stepper_set_new_amax(int axis, float a_max){
 3328              		.loc 1 775 0
 3329              		.cfi_startproc
 3330              		@ args = 0, pretend = 0, frame = 16
 3331              		@ frame_needed = 1, uses_anonymous_args = 0
 3332              		@ link register save eliminated.
 3333 0000 80B4     		push	{r7}
 3334              	.LCFI55:
 3335              		.cfi_def_cfa_offset 4
 3336 0002 85B0     		sub	sp, sp, #20
 3337              	.LCFI56:
 3338              		.cfi_def_cfa_offset 24
 3339 0004 00AF     		add	r7, sp, #0
 3340              		.cfi_offset 7, -4
 3341              	.LCFI57:
 3342              		.cfi_def_cfa_register 7
 3343 0006 7860     		str	r0, [r7, #4]
 3344 0008 3960     		str	r1, [r7, #0]	@ float
 776:..//utils/multi-steppers/multi-steppers.c **** 	profiler_t *p = &Profiler[axis];
 3345              		.loc 1 776 0
 3346 000a 7A68     		ldr	r2, [r7, #4]
 3347 000c 1346     		mov	r3, r2
 3348 000e 4FEAC303 		lsl	r3, r3, #3
 3349 0012 C2EB0303 		rsb	r3, r2, r3
 3350 0016 4FEAC303 		lsl	r3, r3, #3
 3351 001a 1A46     		mov	r2, r3
 3352 001c 40F20003 		movw	r3, #:lower16:Profiler
 3353 0020 C0F20003 		movt	r3, #:upper16:Profiler
 3354 0024 1344     		add	r3, r2, r3
 3355 0026 FB60     		str	r3, [r7, #12]
 777:..//utils/multi-steppers/multi-steppers.c **** 	p->a_max = a_max;
 3356              		.loc 1 777 0
 3357 0028 FB68     		ldr	r3, [r7, #12]
 3358 002a 3A68     		ldr	r2, [r7, #0]	@ float
 3359 002c 9A60     		str	r2, [r3, #8]	@ float
 778:..//utils/multi-steppers/multi-steppers.c **** 	// p->ainv2 = 0.5/p->a_max;
 779:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 3360              		.loc 1 779 0
 3361 002e 4FF00103 		mov	r3, #1
 780:..//utils/multi-steppers/multi-steppers.c **** }
 3362              		.loc 1 780 0
 3363 0032 1846     		mov	r0, r3
 3364 0034 07F11407 		add	r7, r7, #20
 3365 0038 BD46     		mov	sp, r7
 3366 003a 80BC     		pop	{r7}
 3367 003c 7047     		bx	lr
 3368              		.cfi_endproc
 3369              	.LFE49:
 3371 003e 00BF     		.section	.text.stepper_set_new_de_max,"ax",%progbits
 3372              		.align	2
 3373              		.global	stepper_set_new_de_max
 3374              		.thumb
 3375              		.thumb_func
 3377              	stepper_set_new_de_max:
 3378              	.LFB50:
 781:..//utils/multi-steppers/multi-steppers.c **** 
 782:..//utils/multi-steppers/multi-steppers.c **** int stepper_set_new_de_max(int axis, float d_max){
 3379              		.loc 1 782 0
 3380              		.cfi_startproc
 3381              		@ args = 0, pretend = 0, frame = 16
 3382              		@ frame_needed = 1, uses_anonymous_args = 0
 3383 0000 80B5     		push	{r7, lr}
 3384              	.LCFI58:
 3385              		.cfi_def_cfa_offset 8
 3386 0002 84B0     		sub	sp, sp, #16
 3387              	.LCFI59:
 3388              		.cfi_def_cfa_offset 24
 3389 0004 00AF     		add	r7, sp, #0
 3390              		.cfi_offset 14, -4
 3391              		.cfi_offset 7, -8
 3392              	.LCFI60:
 3393              		.cfi_def_cfa_register 7
 3394 0006 7860     		str	r0, [r7, #4]
 3395 0008 3960     		str	r1, [r7, #0]	@ float
 783:..//utils/multi-steppers/multi-steppers.c **** 	profiler_t *p = &Profiler[axis];
 3396              		.loc 1 783 0
 3397 000a 7A68     		ldr	r2, [r7, #4]
 3398 000c 1346     		mov	r3, r2
 3399 000e 4FEAC303 		lsl	r3, r3, #3
 3400 0012 C2EB0303 		rsb	r3, r2, r3
 3401 0016 4FEAC303 		lsl	r3, r3, #3
 3402 001a 1A46     		mov	r2, r3
 3403 001c 40F20003 		movw	r3, #:lower16:Profiler
 3404 0020 C0F20003 		movt	r3, #:upper16:Profiler
 3405 0024 1344     		add	r3, r2, r3
 3406 0026 FB60     		str	r3, [r7, #12]
 784:..//utils/multi-steppers/multi-steppers.c **** 	p->d_max = d_max;
 3407              		.loc 1 784 0
 3408 0028 FB68     		ldr	r3, [r7, #12]
 3409 002a 3A68     		ldr	r2, [r7, #0]	@ float
 3410 002c 1A63     		str	r2, [r3, #48]	@ float
 785:..//utils/multi-steppers/multi-steppers.c **** 	p->dinv2 = 0.5/p->d_max;
 3411              		.loc 1 785 0
 3412 002e FB68     		ldr	r3, [r7, #12]
 3413 0030 1A6B     		ldr	r2, [r3, #48]	@ float
 3414 0032 40F20003 		movw	r3, #:lower16:__aeabi_fdiv
 3415 0036 C0F20003 		movt	r3, #:upper16:__aeabi_fdiv
 3416 003a 0748     		ldr	r0, .L159	@ float
 3417 003c 1146     		mov	r1, r2
 3418 003e 9847     		blx	r3
 3419 0040 0346     		mov	r3, r0
 3420 0042 1A46     		mov	r2, r3
 3421 0044 FB68     		ldr	r3, [r7, #12]
 3422 0046 5A63     		str	r2, [r3, #52]	@ float
 786:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 3423              		.loc 1 786 0
 3424 0048 4FF00103 		mov	r3, #1
 787:..//utils/multi-steppers/multi-steppers.c **** }
 3425              		.loc 1 787 0
 3426 004c 1846     		mov	r0, r3
 3427 004e 07F11007 		add	r7, r7, #16
 3428 0052 BD46     		mov	sp, r7
 3429 0054 80BD     		pop	{r7, pc}
 3430              	.L160:
 3431 0056 00BF     		.align	2
 3432              	.L159:
 3433 0058 0000003F 		.word	1056964608
 3434              		.cfi_endproc
 3435              	.LFE50:
 3437              		.section	.text.stepper_set_final_pos,"ax",%progbits
 3438              		.align	2
 3439              		.global	stepper_set_final_pos
 3440              		.thumb
 3441              		.thumb_func
 3443              	stepper_set_final_pos:
 3444              	.LFB51:
 788:..//utils/multi-steppers/multi-steppers.c **** 
 789:..//utils/multi-steppers/multi-steppers.c **** /* this sets the final position of the motor "motor num "*/
 790:..//utils/multi-steppers/multi-steppers.c **** int stepper_set_final_pos(int axis, float steps){
 3445              		.loc 1 790 0
 3446              		.cfi_startproc
 3447              		@ args = 0, pretend = 0, frame = 8
 3448              		@ frame_needed = 1, uses_anonymous_args = 0
 3449              		@ link register save eliminated.
 3450 0000 80B4     		push	{r7}
 3451              	.LCFI61:
 3452              		.cfi_def_cfa_offset 4
 3453 0002 83B0     		sub	sp, sp, #12
 3454              	.LCFI62:
 3455              		.cfi_def_cfa_offset 16
 3456 0004 00AF     		add	r7, sp, #0
 3457              		.cfi_offset 7, -4
 3458              	.LCFI63:
 3459              		.cfi_def_cfa_register 7
 3460 0006 7860     		str	r0, [r7, #4]
 3461 0008 3960     		str	r1, [r7, #0]	@ float
 791:..//utils/multi-steppers/multi-steppers.c **** 	Profiler[axis].jointpos = steps;
 3462              		.loc 1 791 0
 3463 000a 7968     		ldr	r1, [r7, #4]
 3464 000c 40F20002 		movw	r2, #:lower16:Profiler
 3465 0010 C0F20002 		movt	r2, #:upper16:Profiler
 3466 0014 0B46     		mov	r3, r1
 3467 0016 4FEAC303 		lsl	r3, r3, #3
 3468 001a C1EB0303 		rsb	r3, r1, r3
 3469 001e 4FEAC303 		lsl	r3, r3, #3
 3470 0022 1344     		add	r3, r3, r2
 3471 0024 03F11C03 		add	r3, r3, #28
 3472 0028 3A68     		ldr	r2, [r7, #0]	@ float
 3473 002a 1A60     		str	r2, [r3, #0]	@ float
 792:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 3474              		.loc 1 792 0
 3475 002c 4FF00103 		mov	r3, #1
 793:..//utils/multi-steppers/multi-steppers.c **** }
 3476              		.loc 1 793 0
 3477 0030 1846     		mov	r0, r3
 3478 0032 07F10C07 		add	r7, r7, #12
 3479 0036 BD46     		mov	sp, r7
 3480 0038 80BC     		pop	{r7}
 3481 003a 7047     		bx	lr
 3482              		.cfi_endproc
 3483              	.LFE51:
 3485              		.section	.text.stepper_get_final_pos,"ax",%progbits
 3486              		.align	2
 3487              		.global	stepper_get_final_pos
 3488              		.thumb
 3489              		.thumb_func
 3491              	stepper_get_final_pos:
 3492              	.LFB52:
 794:..//utils/multi-steppers/multi-steppers.c **** 
 795:..//utils/multi-steppers/multi-steppers.c **** int32_t stepper_get_final_pos(int axis){
 3493              		.loc 1 795 0
 3494              		.cfi_startproc
 3495              		@ args = 0, pretend = 0, frame = 8
 3496              		@ frame_needed = 1, uses_anonymous_args = 0
 3497 0000 80B5     		push	{r7, lr}
 3498              	.LCFI64:
 3499              		.cfi_def_cfa_offset 8
 3500 0002 82B0     		sub	sp, sp, #8
 3501              	.LCFI65:
 3502              		.cfi_def_cfa_offset 16
 3503 0004 00AF     		add	r7, sp, #0
 3504              		.cfi_offset 14, -4
 3505              		.cfi_offset 7, -8
 3506              	.LCFI66:
 3507              		.cfi_def_cfa_register 7
 3508 0006 7860     		str	r0, [r7, #4]
 796:..//utils/multi-steppers/multi-steppers.c **** 	return Profiler[axis].jointpos;
 3509              		.loc 1 796 0
 3510 0008 7968     		ldr	r1, [r7, #4]
 3511 000a 40F20002 		movw	r2, #:lower16:Profiler
 3512 000e C0F20002 		movt	r2, #:upper16:Profiler
 3513 0012 0B46     		mov	r3, r1
 3514 0014 4FEAC303 		lsl	r3, r3, #3
 3515 0018 C1EB0303 		rsb	r3, r1, r3
 3516 001c 4FEAC303 		lsl	r3, r3, #3
 3517 0020 1344     		add	r3, r3, r2
 3518 0022 03F11C03 		add	r3, r3, #28
 3519 0026 1A68     		ldr	r2, [r3, #0]	@ float
 3520 0028 40F20003 		movw	r3, #:lower16:__aeabi_f2iz
 3521 002c C0F20003 		movt	r3, #:upper16:__aeabi_f2iz
 3522 0030 1046     		mov	r0, r2
 3523 0032 9847     		blx	r3
 3524 0034 0346     		mov	r3, r0
 797:..//utils/multi-steppers/multi-steppers.c **** }
 3525              		.loc 1 797 0
 3526 0036 1846     		mov	r0, r3
 3527 0038 07F10807 		add	r7, r7, #8
 3528 003c BD46     		mov	sp, r7
 3529 003e 80BD     		pop	{r7, pc}
 3530              		.cfi_endproc
 3531              	.LFE52:
 3533              		.section	.text.stepper_get_running_motor,"ax",%progbits
 3534              		.align	2
 3535              		.global	stepper_get_running_motor
 3536              		.thumb
 3537              		.thumb_func
 3539              	stepper_get_running_motor:
 3540              	.LFB53:
 798:..//utils/multi-steppers/multi-steppers.c **** 
 799:..//utils/multi-steppers/multi-steppers.c **** // int32_t stepper_set_final_pos_acc(int axis, int32_t pos){
 800:..//utils/multi-steppers/multi-steppers.c **** 	// profiler_t *p = &Profiler[axis];
 801:..//utils/multi-steppers/multi-steppers.c **** 	// p->x_final += pos;
 802:..//utils/multi-steppers/multi-steppers.c **** 	// return p->x_final;
 803:..//utils/multi-steppers/multi-steppers.c **** // }
 804:..//utils/multi-steppers/multi-steppers.c **** 
 805:..//utils/multi-steppers/multi-steppers.c **** //return 0 if motor not running else return 1
 806:..//utils/multi-steppers/multi-steppers.c **** int stepper_get_running_motor(int axis){
 3541              		.loc 1 806 0
 3542              		.cfi_startproc
 3543              		@ args = 0, pretend = 0, frame = 8
 3544              		@ frame_needed = 1, uses_anonymous_args = 0
 3545              		@ link register save eliminated.
 3546 0000 80B4     		push	{r7}
 3547              	.LCFI67:
 3548              		.cfi_def_cfa_offset 4
 3549 0002 83B0     		sub	sp, sp, #12
 3550              	.LCFI68:
 3551              		.cfi_def_cfa_offset 16
 3552 0004 00AF     		add	r7, sp, #0
 3553              		.cfi_offset 7, -4
 3554              	.LCFI69:
 3555              		.cfi_def_cfa_register 7
 3556 0006 7860     		str	r0, [r7, #4]
 807:..//utils/multi-steppers/multi-steppers.c **** 	if (Profiler[axis].state == MOTOR_STOP){
 3557              		.loc 1 807 0
 3558 0008 7968     		ldr	r1, [r7, #4]
 3559 000a 40F20002 		movw	r2, #:lower16:Profiler
 3560 000e C0F20002 		movt	r2, #:upper16:Profiler
 3561 0012 0B46     		mov	r3, r1
 3562 0014 4FEAC303 		lsl	r3, r3, #3
 3563 0018 C1EB0303 		rsb	r3, r1, r3
 3564 001c 4FEAC303 		lsl	r3, r3, #3
 3565 0020 1344     		add	r3, r3, r2
 3566 0022 03F12003 		add	r3, r3, #32
 3567 0026 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3568 0028 002B     		cmp	r3, #0
 3569 002a 02D1     		bne	.L166
 808:..//utils/multi-steppers/multi-steppers.c **** 		return 0;
 3570              		.loc 1 808 0
 3571 002c 4FF00003 		mov	r3, #0
 3572 0030 01E0     		b	.L167
 3573              	.L166:
 809:..//utils/multi-steppers/multi-steppers.c **** 	}
 810:..//utils/multi-steppers/multi-steppers.c **** 	else{
 811:..//utils/multi-steppers/multi-steppers.c **** 		return 1;
 3574              		.loc 1 811 0
 3575 0032 4FF00103 		mov	r3, #1
 3576              	.L167:
 812:..//utils/multi-steppers/multi-steppers.c **** 	}
 813:..//utils/multi-steppers/multi-steppers.c **** }
 3577              		.loc 1 813 0
 3578 0036 1846     		mov	r0, r3
 3579 0038 07F10C07 		add	r7, r7, #12
 3580 003c BD46     		mov	sp, r7
 3581 003e 80BC     		pop	{r7}
 3582 0040 7047     		bx	lr
 3583              		.cfi_endproc
 3584              	.LFE53:
 3586 0042 00BF     		.section	.text.stepper_get_running_motors,"ax",%progbits
 3587              		.align	2
 3588              		.global	stepper_get_running_motors
 3589              		.thumb
 3590              		.thumb_func
 3592              	stepper_get_running_motors:
 3593              	.LFB54:
 814:..//utils/multi-steppers/multi-steppers.c **** 
 815:..//utils/multi-steppers/multi-steppers.c **** int stepper_get_running_motors(void){
 3594              		.loc 1 815 0
 3595              		.cfi_startproc
 3596              		@ args = 0, pretend = 0, frame = 8
 3597              		@ frame_needed = 1, uses_anonymous_args = 0
 3598 0000 80B5     		push	{r7, lr}
 3599              	.LCFI70:
 3600              		.cfi_def_cfa_offset 8
 3601 0002 82B0     		sub	sp, sp, #8
 3602              	.LCFI71:
 3603              		.cfi_def_cfa_offset 16
 3604 0004 00AF     		add	r7, sp, #0
 3605              		.cfi_offset 14, -4
 3606              		.cfi_offset 7, -8
 3607              	.LCFI72:
 3608              		.cfi_def_cfa_register 7
 816:..//utils/multi-steppers/multi-steppers.c **** 	int i;
 817:..//utils/multi-steppers/multi-steppers.c **** 	int retVal = 0;
 3609              		.loc 1 817 0
 3610 0006 4FF00003 		mov	r3, #0
 3611 000a 7B60     		str	r3, [r7, #4]
 818:..//utils/multi-steppers/multi-steppers.c **** 	for(i=0;i<NUM_AXES;i++){
 3612              		.loc 1 818 0
 3613 000c 4FF00003 		mov	r3, #0
 3614 0010 3B60     		str	r3, [r7, #0]
 3615 0012 11E0     		b	.L170
 3616              	.L171:
 819:..//utils/multi-steppers/multi-steppers.c **** 		retVal |= stepper_get_running_motor(i) << i;
 3617              		.loc 1 819 0
 3618 0014 3868     		ldr	r0, [r7, #0]
 3619 0016 40F20003 		movw	r3, #:lower16:stepper_get_running_motor
 3620 001a C0F20003 		movt	r3, #:upper16:stepper_get_running_motor
 3621 001e 9847     		blx	r3
 3622 0020 0246     		mov	r2, r0
 3623 0022 3B68     		ldr	r3, [r7, #0]
 3624 0024 02FA03F3 		lsl	r3, r2, r3
 3625 0028 7A68     		ldr	r2, [r7, #4]
 3626 002a 42EA0303 		orr	r3, r2, r3
 3627 002e 7B60     		str	r3, [r7, #4]
 3628              		.loc 1 818 0
 3629 0030 3B68     		ldr	r3, [r7, #0]
 3630 0032 03F10103 		add	r3, r3, #1
 3631 0036 3B60     		str	r3, [r7, #0]
 3632              	.L170:
 3633 0038 3B68     		ldr	r3, [r7, #0]
 3634 003a 012B     		cmp	r3, #1
 3635 003c EADD     		ble	.L171
 820:..//utils/multi-steppers/multi-steppers.c **** 	}
 821:..//utils/multi-steppers/multi-steppers.c **** 	return retVal;
 3636              		.loc 1 821 0
 3637 003e 7B68     		ldr	r3, [r7, #4]
 822:..//utils/multi-steppers/multi-steppers.c **** }
 3638              		.loc 1 822 0
 3639 0040 1846     		mov	r0, r3
 3640 0042 07F10807 		add	r7, r7, #8
 3641 0046 BD46     		mov	sp, r7
 3642 0048 80BD     		pop	{r7, pc}
 3643              		.cfi_endproc
 3644              	.LFE54:
 3646 004a 00BF     		.section	.text.stepper_get_max_vel,"ax",%progbits
 3647              		.align	2
 3648              		.global	stepper_get_max_vel
 3649              		.thumb
 3650              		.thumb_func
 3652              	stepper_get_max_vel:
 3653              	.LFB55:
 823:..//utils/multi-steppers/multi-steppers.c **** 
 824:..//utils/multi-steppers/multi-steppers.c **** SINGLE stepper_get_max_vel(int axis){
 3654              		.loc 1 824 0
 3655              		.cfi_startproc
 3656              		@ args = 0, pretend = 0, frame = 8
 3657              		@ frame_needed = 1, uses_anonymous_args = 0
 3658              		@ link register save eliminated.
 3659 0000 80B4     		push	{r7}
 3660              	.LCFI73:
 3661              		.cfi_def_cfa_offset 4
 3662 0002 83B0     		sub	sp, sp, #12
 3663              	.LCFI74:
 3664              		.cfi_def_cfa_offset 16
 3665 0004 00AF     		add	r7, sp, #0
 3666              		.cfi_offset 7, -4
 3667              	.LCFI75:
 3668              		.cfi_def_cfa_register 7
 3669 0006 7860     		str	r0, [r7, #4]
 825:..//utils/multi-steppers/multi-steppers.c **** 	return Profiler[axis].v_max;
 3670              		.loc 1 825 0
 3671 0008 7968     		ldr	r1, [r7, #4]
 3672 000a 40F20002 		movw	r2, #:lower16:Profiler
 3673 000e C0F20002 		movt	r2, #:upper16:Profiler
 3674 0012 0B46     		mov	r3, r1
 3675 0014 4FEAC303 		lsl	r3, r3, #3
 3676 0018 C1EB0303 		rsb	r3, r1, r3
 3677 001c 4FEAC303 		lsl	r3, r3, #3
 3678 0020 1344     		add	r3, r3, r2
 3679 0022 03F10403 		add	r3, r3, #4
 3680 0026 1B68     		ldr	r3, [r3, #0]	@ float
 826:..//utils/multi-steppers/multi-steppers.c **** }
 3681              		.loc 1 826 0
 3682 0028 1846     		mov	r0, r3
 3683 002a 07F10C07 		add	r7, r7, #12
 3684 002e BD46     		mov	sp, r7
 3685 0030 80BC     		pop	{r7}
 3686 0032 7047     		bx	lr
 3687              		.cfi_endproc
 3688              	.LFE55:
 3690              		.section	.text.stepper_get_max_acc,"ax",%progbits
 3691              		.align	2
 3692              		.global	stepper_get_max_acc
 3693              		.thumb
 3694              		.thumb_func
 3696              	stepper_get_max_acc:
 3697              	.LFB56:
 827:..//utils/multi-steppers/multi-steppers.c **** 
 828:..//utils/multi-steppers/multi-steppers.c **** SINGLE stepper_get_max_acc(int axis){
 3698              		.loc 1 828 0
 3699              		.cfi_startproc
 3700              		@ args = 0, pretend = 0, frame = 8
 3701              		@ frame_needed = 1, uses_anonymous_args = 0
 3702              		@ link register save eliminated.
 3703 0000 80B4     		push	{r7}
 3704              	.LCFI76:
 3705              		.cfi_def_cfa_offset 4
 3706 0002 83B0     		sub	sp, sp, #12
 3707              	.LCFI77:
 3708              		.cfi_def_cfa_offset 16
 3709 0004 00AF     		add	r7, sp, #0
 3710              		.cfi_offset 7, -4
 3711              	.LCFI78:
 3712              		.cfi_def_cfa_register 7
 3713 0006 7860     		str	r0, [r7, #4]
 829:..//utils/multi-steppers/multi-steppers.c **** 	return Profiler[axis].a_max;
 3714              		.loc 1 829 0
 3715 0008 7968     		ldr	r1, [r7, #4]
 3716 000a 40F20002 		movw	r2, #:lower16:Profiler
 3717 000e C0F20002 		movt	r2, #:upper16:Profiler
 3718 0012 0B46     		mov	r3, r1
 3719 0014 4FEAC303 		lsl	r3, r3, #3
 3720 0018 C1EB0303 		rsb	r3, r1, r3
 3721 001c 03F10103 		add	r3, r3, #1
 3722 0020 52F83330 		ldr	r3, [r2, r3, lsl #3]	@ float
 830:..//utils/multi-steppers/multi-steppers.c **** }
 3723              		.loc 1 830 0
 3724 0024 1846     		mov	r0, r3
 3725 0026 07F10C07 		add	r7, r7, #12
 3726 002a BD46     		mov	sp, r7
 3727 002c 80BC     		pop	{r7}
 3728 002e 7047     		bx	lr
 3729              		.cfi_endproc
 3730              	.LFE56:
 3732              		.section	.text.stepper_set_curr_pos,"ax",%progbits
 3733              		.align	2
 3734              		.global	stepper_set_curr_pos
 3735              		.thumb
 3736              		.thumb_func
 3738              	stepper_set_curr_pos:
 3739              	.LFB57:
 831:..//utils/multi-steppers/multi-steppers.c **** 
 832:..//utils/multi-steppers/multi-steppers.c **** int stepper_set_curr_pos(int axis, float steps){
 3740              		.loc 1 832 0
 3741              		.cfi_startproc
 3742              		@ args = 0, pretend = 0, frame = 8
 3743              		@ frame_needed = 1, uses_anonymous_args = 0
 3744 0000 90B5     		push	{r4, r7, lr}
 3745              	.LCFI79:
 3746              		.cfi_def_cfa_offset 12
 3747 0002 83B0     		sub	sp, sp, #12
 3748              	.LCFI80:
 3749              		.cfi_def_cfa_offset 24
 3750 0004 00AF     		add	r7, sp, #0
 3751              		.cfi_offset 14, -4
 3752              		.cfi_offset 7, -8
 3753              		.cfi_offset 4, -12
 3754              	.LCFI81:
 3755              		.cfi_def_cfa_register 7
 3756 0006 7860     		str	r0, [r7, #4]
 3757 0008 3960     		str	r1, [r7, #0]	@ float
 833:..//utils/multi-steppers/multi-steppers.c **** 	Profiler[axis].jointpos=steps; //Without motion...
 3758              		.loc 1 833 0
 3759 000a 7968     		ldr	r1, [r7, #4]
 3760 000c 40F20002 		movw	r2, #:lower16:Profiler
 3761 0010 C0F20002 		movt	r2, #:upper16:Profiler
 3762 0014 0B46     		mov	r3, r1
 3763 0016 4FEAC303 		lsl	r3, r3, #3
 3764 001a C1EB0303 		rsb	r3, r1, r3
 3765 001e 4FEAC303 		lsl	r3, r3, #3
 3766 0022 1344     		add	r3, r3, r2
 3767 0024 03F11C03 		add	r3, r3, #28
 3768 0028 3A68     		ldr	r2, [r7, #0]	@ float
 3769 002a 1A60     		str	r2, [r3, #0]	@ float
 834:..//utils/multi-steppers/multi-steppers.c **** 	Profiler[axis].offset=(SINGLE)(Profiler[axis].x_final)-Profiler[axis].jointpos;
 3770              		.loc 1 834 0
 3771 002c 7C68     		ldr	r4, [r7, #4]
 3772 002e 7968     		ldr	r1, [r7, #4]
 3773 0030 40F20002 		movw	r2, #:lower16:Profiler
 3774 0034 C0F20002 		movt	r2, #:upper16:Profiler
 3775 0038 0B46     		mov	r3, r1
 3776 003a 4FEAC303 		lsl	r3, r3, #3
 3777 003e C1EB0303 		rsb	r3, r1, r3
 3778 0042 4FEAC303 		lsl	r3, r3, #3
 3779 0046 1344     		add	r3, r3, r2
 3780 0048 1A68     		ldr	r2, [r3, #0]
 3781 004a 40F20003 		movw	r3, #:lower16:__aeabi_i2f
 3782 004e C0F20003 		movt	r3, #:upper16:__aeabi_i2f
 3783 0052 1046     		mov	r0, r2
 3784 0054 9847     		blx	r3
 3785 0056 7968     		ldr	r1, [r7, #4]
 3786 0058 40F20002 		movw	r2, #:lower16:Profiler
 3787 005c C0F20002 		movt	r2, #:upper16:Profiler
 3788 0060 0B46     		mov	r3, r1
 3789 0062 4FEAC303 		lsl	r3, r3, #3
 3790 0066 C1EB0303 		rsb	r3, r1, r3
 3791 006a 4FEAC303 		lsl	r3, r3, #3
 3792 006e 1344     		add	r3, r3, r2
 3793 0070 03F11C03 		add	r3, r3, #28
 3794 0074 1A68     		ldr	r2, [r3, #0]	@ float
 3795 0076 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 3796 007a C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 3797 007e 1146     		mov	r1, r2
 3798 0080 9847     		blx	r3
 3799 0082 0346     		mov	r3, r0
 3800 0084 1946     		mov	r1, r3
 3801 0086 40F20002 		movw	r2, #:lower16:Profiler
 3802 008a C0F20002 		movt	r2, #:upper16:Profiler
 3803 008e 2346     		mov	r3, r4
 3804 0090 4FEAC303 		lsl	r3, r3, #3
 3805 0094 C4EB0303 		rsb	r3, r4, r3
 3806 0098 4FEAC303 		lsl	r3, r3, #3
 3807 009c 1344     		add	r3, r3, r2
 3808 009e 03F12003 		add	r3, r3, #32
 3809 00a2 1960     		str	r1, [r3, #0]	@ float
 835:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 3810              		.loc 1 835 0
 3811 00a4 4FF00103 		mov	r3, #1
 836:..//utils/multi-steppers/multi-steppers.c **** }
 3812              		.loc 1 836 0
 3813 00a8 1846     		mov	r0, r3
 3814 00aa 07F10C07 		add	r7, r7, #12
 3815 00ae BD46     		mov	sp, r7
 3816 00b0 90BD     		pop	{r4, r7, pc}
 3817              		.cfi_endproc
 3818              	.LFE57:
 3820 00b2 00BF     		.section	.text.stepper_offset_inc,"ax",%progbits
 3821              		.align	2
 3822              		.global	stepper_offset_inc
 3823              		.thumb
 3824              		.thumb_func
 3826              	stepper_offset_inc:
 3827              	.LFB58:
 837:..//utils/multi-steppers/multi-steppers.c **** 
 838:..//utils/multi-steppers/multi-steppers.c **** // /*set the current position as the zero for all the axes*/
 839:..//utils/multi-steppers/multi-steppers.c **** // int stepper_set_curr_pos_as_zero(void)
 840:..//utils/multi-steppers/multi-steppers.c **** // {
 841:..//utils/multi-steppers/multi-steppers.c **** 	// int i;
 842:..//utils/multi-steppers/multi-steppers.c **** 	// for (i = 0 ; i < NUM_AXES ; i++ )
 843:..//utils/multi-steppers/multi-steppers.c **** 	// {
 844:..//utils/multi-steppers/multi-steppers.c **** 		// // Profiler[i].x_offset = Profiler[i].x_curr ;
 845:..//utils/multi-steppers/multi-steppers.c **** 	// }
 846:..//utils/multi-steppers/multi-steppers.c **** 	// return 1;
 847:..//utils/multi-steppers/multi-steppers.c **** // }
 848:..//utils/multi-steppers/multi-steppers.c **** 
 849:..//utils/multi-steppers/multi-steppers.c **** int stepper_offset_inc(int axis, int offset){
 3828              		.loc 1 849 0
 3829              		.cfi_startproc
 3830              		@ args = 0, pretend = 0, frame = 8
 3831              		@ frame_needed = 1, uses_anonymous_args = 0
 3832 0000 B0B5     		push	{r4, r5, r7, lr}
 3833              	.LCFI82:
 3834              		.cfi_def_cfa_offset 16
 3835 0002 82B0     		sub	sp, sp, #8
 3836              	.LCFI83:
 3837              		.cfi_def_cfa_offset 24
 3838 0004 00AF     		add	r7, sp, #0
 3839              		.cfi_offset 14, -4
 3840              		.cfi_offset 7, -8
 3841              		.cfi_offset 5, -12
 3842              		.cfi_offset 4, -16
 3843              	.LCFI84:
 3844              		.cfi_def_cfa_register 7
 3845 0006 7860     		str	r0, [r7, #4]
 3846 0008 3960     		str	r1, [r7, #0]
 850:..//utils/multi-steppers/multi-steppers.c **** 	Profiler[axis].offset += offset;
 3847              		.loc 1 850 0
 3848 000a 7C68     		ldr	r4, [r7, #4]
 3849 000c 7968     		ldr	r1, [r7, #4]
 3850 000e 40F20002 		movw	r2, #:lower16:Profiler
 3851 0012 C0F20002 		movt	r2, #:upper16:Profiler
 3852 0016 0B46     		mov	r3, r1
 3853 0018 4FEAC303 		lsl	r3, r3, #3
 3854 001c C1EB0303 		rsb	r3, r1, r3
 3855 0020 4FEAC303 		lsl	r3, r3, #3
 3856 0024 1344     		add	r3, r3, r2
 3857 0026 03F12003 		add	r3, r3, #32
 3858 002a 1D68     		ldr	r5, [r3, #0]	@ float
 3859 002c 40F20003 		movw	r3, #:lower16:__aeabi_i2f
 3860 0030 C0F20003 		movt	r3, #:upper16:__aeabi_i2f
 3861 0034 3868     		ldr	r0, [r7, #0]
 3862 0036 9847     		blx	r3
 3863 0038 0246     		mov	r2, r0
 3864 003a 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 3865 003e C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 3866 0042 2846     		mov	r0, r5
 3867 0044 1146     		mov	r1, r2
 3868 0046 9847     		blx	r3
 3869 0048 0346     		mov	r3, r0
 3870 004a 1946     		mov	r1, r3
 3871 004c 40F20002 		movw	r2, #:lower16:Profiler
 3872 0050 C0F20002 		movt	r2, #:upper16:Profiler
 3873 0054 2346     		mov	r3, r4
 3874 0056 4FEAC303 		lsl	r3, r3, #3
 3875 005a C4EB0303 		rsb	r3, r4, r3
 3876 005e 4FEAC303 		lsl	r3, r3, #3
 3877 0062 1344     		add	r3, r3, r2
 3878 0064 03F12003 		add	r3, r3, #32
 3879 0068 1960     		str	r1, [r3, #0]	@ float
 851:..//utils/multi-steppers/multi-steppers.c **** 	return 1;
 3880              		.loc 1 851 0
 3881 006a 4FF00103 		mov	r3, #1
 852:..//utils/multi-steppers/multi-steppers.c **** }
 3882              		.loc 1 852 0
 3883 006e 1846     		mov	r0, r3
 3884 0070 07F10807 		add	r7, r7, #8
 3885 0074 BD46     		mov	sp, r7
 3886 0076 B0BD     		pop	{r4, r5, r7, pc}
 3887              		.cfi_endproc
 3888              	.LFE58:
 3890              		.section	.text.stepper_get_cur_pos,"ax",%progbits
 3891              		.align	2
 3892              		.global	stepper_get_cur_pos
 3893              		.thumb
 3894              		.thumb_func
 3896              	stepper_get_cur_pos:
 3897              	.LFB59:
 853:..//utils/multi-steppers/multi-steppers.c **** 
 854:..//utils/multi-steppers/multi-steppers.c **** int32_t stepper_get_cur_pos(int axis){	
 3898              		.loc 1 854 0
 3899              		.cfi_startproc
 3900              		@ args = 0, pretend = 0, frame = 8
 3901              		@ frame_needed = 1, uses_anonymous_args = 0
 3902 0000 80B5     		push	{r7, lr}
 3903              	.LCFI85:
 3904              		.cfi_def_cfa_offset 8
 3905 0002 82B0     		sub	sp, sp, #8
 3906              	.LCFI86:
 3907              		.cfi_def_cfa_offset 16
 3908 0004 00AF     		add	r7, sp, #0
 3909              		.cfi_offset 14, -4
 3910              		.cfi_offset 7, -8
 3911              	.LCFI87:
 3912              		.cfi_def_cfa_register 7
 3913 0006 7860     		str	r0, [r7, #4]
 855:..//utils/multi-steppers/multi-steppers.c **** 	return (Profiler[axis].x_curr - Profiler[axis].offset);
 3914              		.loc 1 855 0
 3915 0008 7968     		ldr	r1, [r7, #4]
 3916 000a 40F20002 		movw	r2, #:lower16:Profiler
 3917 000e C0F20002 		movt	r2, #:upper16:Profiler
 3918 0012 0B46     		mov	r3, r1
 3919 0014 4FEAC303 		lsl	r3, r3, #3
 3920 0018 C1EB0303 		rsb	r3, r1, r3
 3921 001c 03F10103 		add	r3, r3, #1
 3922 0020 4FEAC303 		lsl	r3, r3, #3
 3923 0024 1344     		add	r3, r3, r2
 3924 0026 5A68     		ldr	r2, [r3, #4]
 3925 0028 40F20003 		movw	r3, #:lower16:__aeabi_i2f
 3926 002c C0F20003 		movt	r3, #:upper16:__aeabi_i2f
 3927 0030 1046     		mov	r0, r2
 3928 0032 9847     		blx	r3
 3929 0034 7968     		ldr	r1, [r7, #4]
 3930 0036 40F20002 		movw	r2, #:lower16:Profiler
 3931 003a C0F20002 		movt	r2, #:upper16:Profiler
 3932 003e 0B46     		mov	r3, r1
 3933 0040 4FEAC303 		lsl	r3, r3, #3
 3934 0044 C1EB0303 		rsb	r3, r1, r3
 3935 0048 4FEAC303 		lsl	r3, r3, #3
 3936 004c 1344     		add	r3, r3, r2
 3937 004e 03F12003 		add	r3, r3, #32
 3938 0052 1A68     		ldr	r2, [r3, #0]	@ float
 3939 0054 40F20003 		movw	r3, #:lower16:__aeabi_fsub
 3940 0058 C0F20003 		movt	r3, #:upper16:__aeabi_fsub
 3941 005c 1146     		mov	r1, r2
 3942 005e 9847     		blx	r3
 3943 0060 0346     		mov	r3, r0
 3944 0062 1A46     		mov	r2, r3
 3945 0064 40F20003 		movw	r3, #:lower16:__aeabi_f2iz
 3946 0068 C0F20003 		movt	r3, #:upper16:__aeabi_f2iz
 3947 006c 1046     		mov	r0, r2
 3948 006e 9847     		blx	r3
 3949 0070 0346     		mov	r3, r0
 856:..//utils/multi-steppers/multi-steppers.c **** }
 3950              		.loc 1 856 0
 3951 0072 1846     		mov	r0, r3
 3952 0074 07F10807 		add	r7, r7, #8
 3953 0078 BD46     		mov	sp, r7
 3954 007a 80BD     		pop	{r7, pc}
 3955              		.cfi_endproc
 3956              	.LFE59:
 3958              		.section	.text.ulceil,"ax",%progbits
 3959              		.align	2
 3960              		.thumb
 3961              		.thumb_func
 3963              	ulceil:
 3964              	.LFB60:
 857:..//utils/multi-steppers/multi-steppers.c **** 
 858:..//utils/multi-steppers/multi-steppers.c **** /* helper function - computes integeral multiple of increment that is greater
 859:..//utils/multi-steppers/multi-steppers.c ****    or equal to value */
 860:..//utils/multi-steppers/multi-steppers.c **** static uint32_t ulceil(uint32_t value, uint32_t increment)
 861:..//utils/multi-steppers/multi-steppers.c **** {
 3965              		.loc 1 861 0
 3966              		.cfi_startproc
 3967              		@ args = 0, pretend = 0, frame = 8
 3968              		@ frame_needed = 1, uses_anonymous_args = 0
 3969              		@ link register save eliminated.
 3970 0000 80B4     		push	{r7}
 3971              	.LCFI88:
 3972              		.cfi_def_cfa_offset 4
 3973 0002 83B0     		sub	sp, sp, #12
 3974              	.LCFI89:
 3975              		.cfi_def_cfa_offset 16
 3976 0004 00AF     		add	r7, sp, #0
 3977              		.cfi_offset 7, -4
 3978              	.LCFI90:
 3979              		.cfi_def_cfa_register 7
 3980 0006 7860     		str	r0, [r7, #4]
 3981 0008 3960     		str	r1, [r7, #0]
 862:..//utils/multi-steppers/multi-steppers.c ****     if ( value == 0 ) {
 3982              		.loc 1 862 0
 3983 000a 7B68     		ldr	r3, [r7, #4]
 3984 000c 002B     		cmp	r3, #0
 3985 000e 02D1     		bne	.L184
 863:..//utils/multi-steppers/multi-steppers.c **** 		return 0;
 3986              		.loc 1 863 0
 3987 0010 4FF00003 		mov	r3, #0
 3988 0014 0AE0     		b	.L185
 3989              	.L184:
 864:..//utils/multi-steppers/multi-steppers.c ****     }
 865:..//utils/multi-steppers/multi-steppers.c ****     return increment*(((value-1)/increment)+1);
 3990              		.loc 1 865 0
 3991 0016 7B68     		ldr	r3, [r7, #4]
 3992 0018 03F1FF32 		add	r2, r3, #-1
 3993 001c 3B68     		ldr	r3, [r7, #0]
 3994 001e B2FBF3F3 		udiv	r3, r2, r3
 3995 0022 03F10103 		add	r3, r3, #1
 3996 0026 3A68     		ldr	r2, [r7, #0]
 3997 0028 02FB03F3 		mul	r3, r2, r3
 3998              	.L185:
 866:..//utils/multi-steppers/multi-steppers.c **** }
 3999              		.loc 1 866 0
 4000 002c 1846     		mov	r0, r3
 4001 002e 07F10C07 		add	r7, r7, #12
 4002 0032 BD46     		mov	sp, r7
 4003 0034 80BC     		pop	{r7}
 4004 0036 7047     		bx	lr
 4005              		.cfi_endproc
 4006              	.LFE60:
 4008              		.section	.text.stepper_steps,"ax",%progbits
 4009              		.align	2
 4010              		.global	stepper_steps
 4011              		.thumb
 4012              		.thumb_func
 4014              	stepper_steps:
 4015              	.LFB61:
 867:..//utils/multi-steppers/multi-steppers.c **** 
 868:..//utils/multi-steppers/multi-steppers.c **** int stepper_steps(int motor_num, float steps){
 4016              		.loc 1 868 0
 4017              		.cfi_startproc
 4018              		@ args = 0, pretend = 0, frame = 24
 4019              		@ frame_needed = 1, uses_anonymous_args = 0
 4020 0000 80B5     		push	{r7, lr}
 4021              	.LCFI91:
 4022              		.cfi_def_cfa_offset 8
 4023 0002 86B0     		sub	sp, sp, #24
 4024              	.LCFI92:
 4025              		.cfi_def_cfa_offset 32
 4026 0004 00AF     		add	r7, sp, #0
 4027              		.cfi_offset 14, -4
 4028              		.cfi_offset 7, -8
 4029              	.LCFI93:
 4030              		.cfi_def_cfa_register 7
 4031 0006 7860     		str	r0, [r7, #4]
 4032 0008 3960     		str	r1, [r7, #0]	@ float
 869:..//utils/multi-steppers/multi-steppers.c **** 	int retval;
 870:..//utils/multi-steppers/multi-steppers.c **** 	float diff = 0.0;
 4033              		.loc 1 870 0
 4034 000a 134B     		ldr	r3, .L189	@ float
 4035 000c FB60     		str	r3, [r7, #12]	@ float
 871:..//utils/multi-steppers/multi-steppers.c **** 	int32_t final_steps = 0;
 4036              		.loc 1 871 0
 4037 000e 4FF00003 		mov	r3, #0
 4038 0012 3B61     		str	r3, [r7, #16]
 872:..//utils/multi-steppers/multi-steppers.c **** 	profiler_t *p; 
 873:..//utils/multi-steppers/multi-steppers.c **** 	p = &Profiler[motor_num];
 4039              		.loc 1 873 0
 4040 0014 7A68     		ldr	r2, [r7, #4]
 4041 0016 1346     		mov	r3, r2
 4042 0018 4FEAC303 		lsl	r3, r3, #3
 4043 001c C2EB0303 		rsb	r3, r2, r3
 4044 0020 4FEAC303 		lsl	r3, r3, #3
 4045 0024 1A46     		mov	r2, r3
 4046 0026 40F20003 		movw	r3, #:lower16:Profiler
 4047 002a C0F20003 		movt	r3, #:upper16:Profiler
 4048 002e 1344     		add	r3, r2, r3
 4049 0030 7B61     		str	r3, [r7, #20]
 874:..//utils/multi-steppers/multi-steppers.c **** 	p->jointpos += steps;	
 4050              		.loc 1 874 0
 4051 0032 7B69     		ldr	r3, [r7, #20]
 4052 0034 DA69     		ldr	r2, [r3, #28]	@ float
 4053 0036 40F20003 		movw	r3, #:lower16:__aeabi_fadd
 4054 003a C0F20003 		movt	r3, #:upper16:__aeabi_fadd
 4055 003e 1046     		mov	r0, r2
 4056 0040 3968     		ldr	r1, [r7, #0]	@ float
 4057 0042 9847     		blx	r3
 4058 0044 0346     		mov	r3, r0
 4059 0046 1A46     		mov	r2, r3
 4060 0048 7B69     		ldr	r3, [r7, #20]
 4061 004a DA61     		str	r2, [r3, #28]	@ float
 875:..//utils/multi-steppers/multi-steppers.c **** 	return retval;
 4062              		.loc 1 875 0
 4063 004c BB68     		ldr	r3, [r7, #8]
 876:..//utils/multi-steppers/multi-steppers.c **** }
 4064              		.loc 1 876 0
 4065 004e 1846     		mov	r0, r3
 4066 0050 07F11807 		add	r7, r7, #24
 4067 0054 BD46     		mov	sp, r7
 4068 0056 80BD     		pop	{r7, pc}
 4069              	.L190:
 4070              		.align	2
 4071              	.L189:
 4072 0058 00000000 		.word	0
 4073              		.cfi_endproc
 4074              	.LFE61:
 4076              		.section	.text.stepper_reset_axis,"ax",%progbits
 4077              		.align	2
 4078              		.global	stepper_reset_axis
 4079              		.thumb
 4080              		.thumb_func
 4082              	stepper_reset_axis:
 4083              	.LFB62:
 877:..//utils/multi-steppers/multi-steppers.c **** 
 878:..//utils/multi-steppers/multi-steppers.c **** int stepper_reset_axis(int axis){
 4084              		.loc 1 878 0
 4085              		.cfi_startproc
 4086              		@ args = 0, pretend = 0, frame = 16
 4087              		@ frame_needed = 1, uses_anonymous_args = 0
 4088 0000 80B5     		push	{r7, lr}
 4089              	.LCFI94:
 4090              		.cfi_def_cfa_offset 8
 4091 0002 84B0     		sub	sp, sp, #16
 4092              	.LCFI95:
 4093              		.cfi_def_cfa_offset 24
 4094 0004 00AF     		add	r7, sp, #0
 4095              		.cfi_offset 14, -4
 4096              		.cfi_offset 7, -8
 4097              	.LCFI96:
 4098              		.cfi_def_cfa_register 7
 4099 0006 7860     		str	r0, [r7, #4]
 879:..//utils/multi-steppers/multi-steppers.c **** 	// new function added 24/7/2013 to address issue of multistepper failing during motor check
 880:..//utils/multi-steppers/multi-steppers.c **** 	// ASK amit..
 881:..//utils/multi-steppers/multi-steppers.c **** 	// print_string("ProfilerInit\n");
 882:..//utils/multi-steppers/multi-steppers.c **** 	profiler_t *p; 
 883:..//utils/multi-steppers/multi-steppers.c **** 	p = &Profiler[axis];	
 4100              		.loc 1 883 0
 4101 0008 7A68     		ldr	r2, [r7, #4]
 4102 000a 1346     		mov	r3, r2
 4103 000c 4FEAC303 		lsl	r3, r3, #3
 4104 0010 C2EB0303 		rsb	r3, r2, r3
 4105 0014 4FEAC303 		lsl	r3, r3, #3
 4106 0018 1A46     		mov	r2, r3
 4107 001a 40F20003 		movw	r3, #:lower16:Profiler
 4108 001e C0F20003 		movt	r3, #:upper16:Profiler
 4109 0022 1344     		add	r3, r2, r3
 4110 0024 FB60     		str	r3, [r7, #12]
 884:..//utils/multi-steppers/multi-steppers.c **** 	p->x_final = 0;
 4111              		.loc 1 884 0
 4112 0026 FB68     		ldr	r3, [r7, #12]
 4113 0028 4FF00002 		mov	r2, #0
 4114 002c 1A60     		str	r2, [r3, #0]
 885:..//utils/multi-steppers/multi-steppers.c **** 	p->jointpos = 0.0;
 4115              		.loc 1 885 0
 4116 002e FB68     		ldr	r3, [r7, #12]
 4117 0030 104A     		ldr	r2, .L193	@ float
 4118 0032 DA61     		str	r2, [r3, #28]	@ float
 886:..//utils/multi-steppers/multi-steppers.c **** 	p->offset = 0.0;
 4119              		.loc 1 886 0
 4120 0034 FB68     		ldr	r3, [r7, #12]
 4121 0036 0F4A     		ldr	r2, .L193	@ float
 4122 0038 1A62     		str	r2, [r3, #32]	@ float
 887:..//utils/multi-steppers/multi-steppers.c **** 	// p->x_final_offset = 0.0;
 888:..//utils/multi-steppers/multi-steppers.c **** 	p->x_curr = 0;
 4123              		.loc 1 888 0
 4124 003a FB68     		ldr	r3, [r7, #12]
 4125 003c 4FF00002 		mov	r2, #0
 4126 0040 DA60     		str	r2, [r3, #12]
 889:..//utils/multi-steppers/multi-steppers.c **** 	p->x_next = 0.0;
 4127              		.loc 1 889 0
 4128 0042 FB68     		ldr	r3, [r7, #12]
 4129 0044 0B4A     		ldr	r2, .L193	@ float
 4130 0046 1A61     		str	r2, [r3, #16]	@ float
 890:..//utils/multi-steppers/multi-steppers.c **** 	p->v_next = 0.0;
 4131              		.loc 1 890 0
 4132 0048 FB68     		ldr	r3, [r7, #12]
 4133 004a 0A4A     		ldr	r2, .L193	@ float
 4134 004c 5A61     		str	r2, [r3, #20]	@ float
 891:..//utils/multi-steppers/multi-steppers.c **** 	// p->eps_x = 2;
 892:..//utils/multi-steppers/multi-steppers.c **** 	// p->ainv2 = 0.5/p->a_max;
 893:..//utils/multi-steppers/multi-steppers.c **** 	// p->mp_mode = MPM_HARD_STOP;
 894:..//utils/multi-steppers/multi-steppers.c **** 	p->state = MOTOR_STOP;
 4135              		.loc 1 894 0
 4136 004e FB68     		ldr	r3, [r7, #12]
 4137 0050 4FF00002 		mov	r2, #0
 4138 0054 83F82420 		strb	r2, [r3, #36]
 895:..//utils/multi-steppers/multi-steppers.c **** 	stepper_init_pulse_generator_single_axis(axis);	
 4139              		.loc 1 895 0
 4140 0058 7868     		ldr	r0, [r7, #4]
 4141 005a 40F20003 		movw	r3, #:lower16:stepper_init_pulse_generator_single_axis
 4142 005e C0F20003 		movt	r3, #:upper16:stepper_init_pulse_generator_single_axis
 4143 0062 9847     		blx	r3
 896:..//utils/multi-steppers/multi-steppers.c **** 	return 1;	
 4144              		.loc 1 896 0
 4145 0064 4FF00103 		mov	r3, #1
 897:..//utils/multi-steppers/multi-steppers.c **** }
 4146              		.loc 1 897 0
 4147 0068 1846     		mov	r0, r3
 4148 006a 07F11007 		add	r7, r7, #16
 4149 006e BD46     		mov	sp, r7
 4150 0070 80BD     		pop	{r7, pc}
 4151              	.L194:
 4152 0072 00BF     		.align	2
 4153              	.L193:
 4154 0074 00000000 		.word	0
 4155              		.cfi_endproc
 4156              	.LFE62:
 4158              		.text
 4159              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 multi-steppers.c
                            *COM*:00000004 periodns
                            *COM*:00000004 periodfp
                            *COM*:00000004 freqscale
                            *COM*:00000004 accelscale
                            *COM*:00000004 dtns
                            *COM*:00000004 dt
                            *COM*:00000004 recip_dt
                            *COM*:000000d0 g_stepgen
                            *COM*:00000070 Profiler
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:37     .bss.trig_update_freq:00000000 trig_update_freq
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:34     .bss.trig_update_freq:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:44     .bss.modbus_data_complete:00000000 modbus_data_complete
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:41     .bss.modbus_data_complete:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:50     .bss.ring_slaveID:00000000 ring_slaveID
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:51     .bss.ring_slaveID:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:57     .bss.PULSE_PORT_NUM:00000000 PULSE_PORT_NUM
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:54     .bss.PULSE_PORT_NUM:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:64     .data.PULSE_PORT_SET_NUM:00000000 PULSE_PORT_SET_NUM
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:61     .data.PULSE_PORT_SET_NUM:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:74     .data.PULSE_PORT_CLEAR_NUM:00000000 PULSE_PORT_CLEAR_NUM
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:71     .data.PULSE_PORT_CLEAR_NUM:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:84     .data.PULSE_PORT_DIR_NUM:00000000 PULSE_PORT_DIR_NUM
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:81     .data.PULSE_PORT_DIR_NUM:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:94     .data.PULSE_PIN_OFFSET_NUM:00000000 PULSE_PIN_OFFSET_NUM
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:91     .data.PULSE_PIN_OFFSET_NUM:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:104    .bss.DIR_PORT_NUM:00000000 DIR_PORT_NUM
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:101    .bss.DIR_PORT_NUM:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:111    .data.DIR_PORT_SET_NUM:00000000 DIR_PORT_SET_NUM
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:108    .data.DIR_PORT_SET_NUM:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:121    .data.DIR_PORT_CLEAR_NUM:00000000 DIR_PORT_CLEAR_NUM
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:118    .data.DIR_PORT_CLEAR_NUM:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:131    .data.DIR_PORT_DIR_NUM:00000000 DIR_PORT_DIR_NUM
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:128    .data.DIR_PORT_DIR_NUM:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:141    .data.DIR_PIN_OFFSET_NUM:00000000 DIR_PIN_OFFSET_NUM
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:138    .data.DIR_PIN_OFFSET_NUM:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:147    .text.Move_Motor:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:152    .text.Move_Motor:00000000 Move_Motor
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2859   .text.stepper_move_motor:00000000 stepper_move_motor
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:461    .text.stepper_update_freq:00000000 stepper_update_freq
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:187    .text.Make_Pulses:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:192    .text.Make_Pulses:00000000 Make_Pulses
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:264    .text.stepper_make_pulses:00000000 stepper_make_pulses
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:222    .text.Pulse_Clear:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:227    .text.Pulse_Clear:00000000 Pulse_Clear
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:259    .text.stepper_make_pulses:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:456    .text.stepper_update_freq:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:1236   .text.stepper_update_freq:000006f0 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:1246   .text.stepper_stop_distance:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:1251   .text.stepper_stop_distance:00000000 stepper_stop_distance
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:1316   .text.stepper_next_position:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:1321   .text.stepper_next_position:00000000 stepper_next_position
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:1944   .text.stepper_next_position:00000510 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:1954   .text.stepper_init_pulse_generator_single_axis:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:1959   .text.stepper_init_pulse_generator_single_axis:00000000 stepper_init_pulse_generator_single_axis
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3963   .text.ulceil:00000000 ulceil
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2433   .text.stepper_init_pulse_generator_single_axis:00000410 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2443   .text.stepper_init_pulse_generator:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2448   .text.stepper_init_pulse_generator:00000000 stepper_init_pulse_generator
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2582   .text.stepper_init_pulse_generator:00000130 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2591   .text.stepper_init_profiler:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2596   .text.stepper_init_profiler:00000000 stepper_init_profiler
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2672   .text.stepper_init_profiler:00000074 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2680   .text.stepper_init_all_profilers:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2685   .text.stepper_init_all_profilers:00000000 stepper_init_all_profilers
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2740   .text.stepper_init_timers:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2745   .text.stepper_init_timers:00000000 stepper_init_timers
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2783   .text.stepper_init:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2788   .text.stepper_init:00000000 stepper_init
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2819   .text.print_profiler_data:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2824   .text.print_profiler_data:00000000 print_profiler_data
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2854   .text.stepper_move_motor:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2917   .text.stepper_stop_motor:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2922   .text.stepper_stop_motor:00000000 stepper_stop_motor
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3896   .text.stepper_get_cur_pos:00000000 stepper_get_cur_pos
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3443   .text.stepper_set_final_pos:00000000 stepper_set_final_pos
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2984   .text.stepper_stop_motor:00000068 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2989   .text.stepper_stop_synchro_motor:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2994   .text.stepper_stop_synchro_motor:00000000 stepper_stop_synchro_motor
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3125   .text.stepper_stop_synchro_motor:00000118 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3133   .text.stepper_set_new_profile:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3138   .text.stepper_set_new_profile:00000000 stepper_set_new_profile
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3204   .text.stepper_set_new_profile:00000068 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3209   .text.stepper_set_new_profile_ainv:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3214   .text.stepper_set_new_profile_ainv:00000000 stepper_set_new_profile_ainv
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3270   .text.stepper_set_new_vmax:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3275   .text.stepper_set_new_vmax:00000000 stepper_set_new_vmax
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3321   .text.stepper_set_new_amax:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3326   .text.stepper_set_new_amax:00000000 stepper_set_new_amax
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3372   .text.stepper_set_new_de_max:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3377   .text.stepper_set_new_de_max:00000000 stepper_set_new_de_max
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3433   .text.stepper_set_new_de_max:00000058 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3438   .text.stepper_set_final_pos:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3486   .text.stepper_get_final_pos:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3491   .text.stepper_get_final_pos:00000000 stepper_get_final_pos
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3534   .text.stepper_get_running_motor:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3539   .text.stepper_get_running_motor:00000000 stepper_get_running_motor
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3587   .text.stepper_get_running_motors:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3592   .text.stepper_get_running_motors:00000000 stepper_get_running_motors
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3647   .text.stepper_get_max_vel:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3652   .text.stepper_get_max_vel:00000000 stepper_get_max_vel
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3691   .text.stepper_get_max_acc:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3696   .text.stepper_get_max_acc:00000000 stepper_get_max_acc
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3733   .text.stepper_set_curr_pos:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3738   .text.stepper_set_curr_pos:00000000 stepper_set_curr_pos
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3821   .text.stepper_offset_inc:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3826   .text.stepper_offset_inc:00000000 stepper_offset_inc
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3891   .text.stepper_get_cur_pos:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:3959   .text.ulceil:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:4009   .text.stepper_steps:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:4014   .text.stepper_steps:00000000 stepper_steps
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:4072   .text.stepper_steps:00000058 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:4077   .text.stepper_reset_axis:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:4082   .text.stepper_reset_axis:00000000 stepper_reset_axis
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:4154   .text.stepper_reset_axis:00000074 $d
                     .debug_frame:00000010 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cck4LKdf.s:2590   .text.stepper_init_pulse_generator:00000144 $t

UNDEFINED SYMBOLS
enable_timer
__aeabi_fsub
__aeabi_fmul
__aeabi_l2d
__aeabi_dmul
__aeabi_d2f
__aeabi_fcmpgt
__aeabi_fdiv
__aeabi_fadd
__aeabi_f2d
__aeabi_dadd
__aeabi_fcmplt
__aeabi_dcmplt
__aeabi_f2iz
__aeabi_i2f
__aeabi_fcmpeq
__aeabi_ddiv
__aeabi_i2d
__aeabi_fcmple
__aeabi_dcmpgt
init_timer0_freq
init_timer1_freq
init_timer2_freq
