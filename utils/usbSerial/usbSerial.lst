   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"usbSerial.c"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  24              		.align	2
  25              		.thumb
  26              		.thumb_func
  28              	NVIC_EnableIRQ:
  29              	.LFB14:
  30              		.file 1 "..//common/Core/CM3/core_cm3.h"
   1:..//common/Core/CM3/core_cm3.h **** /**************************************************************************//**
   2:..//common/Core/CM3/core_cm3.h ****  * @file     core_cm3.h
   3:..//common/Core/CM3/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:..//common/Core/CM3/core_cm3.h ****  * @version  V1.30
   5:..//common/Core/CM3/core_cm3.h ****  * @date     30. October 2009
   6:..//common/Core/CM3/core_cm3.h ****  *
   7:..//common/Core/CM3/core_cm3.h ****  * @note
   8:..//common/Core/CM3/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:..//common/Core/CM3/core_cm3.h ****  *
  10:..//common/Core/CM3/core_cm3.h ****  * @par
  11:..//common/Core/CM3/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:..//common/Core/CM3/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:..//common/Core/CM3/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:..//common/Core/CM3/core_cm3.h ****  *
  15:..//common/Core/CM3/core_cm3.h ****  * @par
  16:..//common/Core/CM3/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:..//common/Core/CM3/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:..//common/Core/CM3/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:..//common/Core/CM3/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:..//common/Core/CM3/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:..//common/Core/CM3/core_cm3.h ****  *
  22:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
  23:..//common/Core/CM3/core_cm3.h **** 
  24:..//common/Core/CM3/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:..//common/Core/CM3/core_cm3.h **** #define __CM3_CORE_H__
  26:..//common/Core/CM3/core_cm3.h **** 
  27:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:..//common/Core/CM3/core_cm3.h ****  *
  29:..//common/Core/CM3/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:..//common/Core/CM3/core_cm3.h ****  *   - Error 10: \n
  31:..//common/Core/CM3/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:..//common/Core/CM3/core_cm3.h ****  *     Error 10: Expecting ';'
  33:..//common/Core/CM3/core_cm3.h ****  * .
  34:..//common/Core/CM3/core_cm3.h ****  *   - Error 530: \n
  35:..//common/Core/CM3/core_cm3.h ****  *     return(__regBasePri); \n
  36:..//common/Core/CM3/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:..//common/Core/CM3/core_cm3.h ****  * . 
  38:..//common/Core/CM3/core_cm3.h ****  *   - Error 550: \n
  39:..//common/Core/CM3/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:..//common/Core/CM3/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:..//common/Core/CM3/core_cm3.h ****  * .
  42:..//common/Core/CM3/core_cm3.h ****  *   - Error 754: \n
  43:..//common/Core/CM3/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:..//common/Core/CM3/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:..//common/Core/CM3/core_cm3.h ****  * .
  46:..//common/Core/CM3/core_cm3.h ****  *   - Error 750: \n
  47:..//common/Core/CM3/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:..//common/Core/CM3/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:..//common/Core/CM3/core_cm3.h ****  * .
  50:..//common/Core/CM3/core_cm3.h ****  *   - Error 528: \n
  51:..//common/Core/CM3/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:..//common/Core/CM3/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:..//common/Core/CM3/core_cm3.h ****  * .
  54:..//common/Core/CM3/core_cm3.h ****  *   - Error 751: \n
  55:..//common/Core/CM3/core_cm3.h ****  *     } InterruptType_Type; \n
  56:..//common/Core/CM3/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:..//common/Core/CM3/core_cm3.h ****  * .
  58:..//common/Core/CM3/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:..//common/Core/CM3/core_cm3.h ****  *
  60:..//common/Core/CM3/core_cm3.h ****  */
  61:..//common/Core/CM3/core_cm3.h **** 
  62:..//common/Core/CM3/core_cm3.h **** /*lint -save */
  63:..//common/Core/CM3/core_cm3.h **** /*lint -e10  */
  64:..//common/Core/CM3/core_cm3.h **** /*lint -e530 */
  65:..//common/Core/CM3/core_cm3.h **** /*lint -e550 */
  66:..//common/Core/CM3/core_cm3.h **** /*lint -e754 */
  67:..//common/Core/CM3/core_cm3.h **** /*lint -e750 */
  68:..//common/Core/CM3/core_cm3.h **** /*lint -e528 */
  69:..//common/Core/CM3/core_cm3.h **** /*lint -e751 */
  70:..//common/Core/CM3/core_cm3.h **** 
  71:..//common/Core/CM3/core_cm3.h **** 
  72:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:..//common/Core/CM3/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:..//common/Core/CM3/core_cm3.h ****     - CMSIS version number
  75:..//common/Core/CM3/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:..//common/Core/CM3/core_cm3.h ****     - Cortex-M core peripheral base address
  77:..//common/Core/CM3/core_cm3.h ****   @{
  78:..//common/Core/CM3/core_cm3.h ****  */
  79:..//common/Core/CM3/core_cm3.h **** 
  80:..//common/Core/CM3/core_cm3.h **** #ifdef __cplusplus
  81:..//common/Core/CM3/core_cm3.h ****  extern "C" {
  82:..//common/Core/CM3/core_cm3.h **** #endif 
  83:..//common/Core/CM3/core_cm3.h **** 
  84:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:..//common/Core/CM3/core_cm3.h **** 
  88:..//common/Core/CM3/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:..//common/Core/CM3/core_cm3.h **** 
  90:..//common/Core/CM3/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:..//common/Core/CM3/core_cm3.h **** 
  92:..//common/Core/CM3/core_cm3.h **** #if defined (__ICCARM__)
  93:..//common/Core/CM3/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:..//common/Core/CM3/core_cm3.h **** #endif
  95:..//common/Core/CM3/core_cm3.h **** 
  96:..//common/Core/CM3/core_cm3.h **** 
  97:..//common/Core/CM3/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:..//common/Core/CM3/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:..//common/Core/CM3/core_cm3.h **** #endif
 100:..//common/Core/CM3/core_cm3.h **** 
 101:..//common/Core/CM3/core_cm3.h **** 
 102:..//common/Core/CM3/core_cm3.h **** 
 103:..//common/Core/CM3/core_cm3.h **** 
 104:..//common/Core/CM3/core_cm3.h **** /**
 105:..//common/Core/CM3/core_cm3.h ****  * IO definitions
 106:..//common/Core/CM3/core_cm3.h ****  *
 107:..//common/Core/CM3/core_cm3.h ****  * define access restrictions to peripheral registers
 108:..//common/Core/CM3/core_cm3.h ****  */
 109:..//common/Core/CM3/core_cm3.h **** 
 110:..//common/Core/CM3/core_cm3.h **** #ifdef __cplusplus
 111:..//common/Core/CM3/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:..//common/Core/CM3/core_cm3.h **** #else
 113:..//common/Core/CM3/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:..//common/Core/CM3/core_cm3.h **** #endif
 115:..//common/Core/CM3/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:..//common/Core/CM3/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:..//common/Core/CM3/core_cm3.h **** 
 118:..//common/Core/CM3/core_cm3.h **** 
 119:..//common/Core/CM3/core_cm3.h **** 
 120:..//common/Core/CM3/core_cm3.h **** /*******************************************************************************
 121:..//common/Core/CM3/core_cm3.h ****  *                 Register Abstraction
 122:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
 123:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:..//common/Core/CM3/core_cm3.h ****  @{
 125:..//common/Core/CM3/core_cm3.h **** */
 126:..//common/Core/CM3/core_cm3.h **** 
 127:..//common/Core/CM3/core_cm3.h **** 
 128:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:..//common/Core/CM3/core_cm3.h ****   @{
 131:..//common/Core/CM3/core_cm3.h ****  */
 132:..//common/Core/CM3/core_cm3.h **** typedef struct
 133:..//common/Core/CM3/core_cm3.h **** {
 134:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:..//common/Core/CM3/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:..//common/Core/CM3/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:..//common/Core/CM3/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:..//common/Core/CM3/core_cm3.h **** }  NVIC_Type;                                               
 148:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:..//common/Core/CM3/core_cm3.h **** 
 150:..//common/Core/CM3/core_cm3.h **** 
 151:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:..//common/Core/CM3/core_cm3.h ****   @{
 154:..//common/Core/CM3/core_cm3.h ****  */
 155:..//common/Core/CM3/core_cm3.h **** typedef struct
 156:..//common/Core/CM3/core_cm3.h **** {
 157:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:..//common/Core/CM3/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:..//common/Core/CM3/core_cm3.h **** } SCB_Type;                                                
 177:..//common/Core/CM3/core_cm3.h **** 
 178:..//common/Core/CM3/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:..//common/Core/CM3/core_cm3.h **** 
 182:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:..//common/Core/CM3/core_cm3.h **** 
 185:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:..//common/Core/CM3/core_cm3.h **** 
 188:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:..//common/Core/CM3/core_cm3.h **** 
 191:..//common/Core/CM3/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:..//common/Core/CM3/core_cm3.h **** 
 195:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:..//common/Core/CM3/core_cm3.h **** 
 198:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:..//common/Core/CM3/core_cm3.h **** 
 201:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:..//common/Core/CM3/core_cm3.h **** 
 204:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:..//common/Core/CM3/core_cm3.h **** 
 207:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:..//common/Core/CM3/core_cm3.h **** 
 210:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:..//common/Core/CM3/core_cm3.h **** 
 213:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:..//common/Core/CM3/core_cm3.h **** 
 216:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:..//common/Core/CM3/core_cm3.h **** 
 219:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:..//common/Core/CM3/core_cm3.h **** 
 222:..//common/Core/CM3/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:..//common/Core/CM3/core_cm3.h **** 
 226:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:..//common/Core/CM3/core_cm3.h **** 
 229:..//common/Core/CM3/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:..//common/Core/CM3/core_cm3.h **** 
 233:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:..//common/Core/CM3/core_cm3.h **** 
 236:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:..//common/Core/CM3/core_cm3.h **** 
 239:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:..//common/Core/CM3/core_cm3.h **** 
 242:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:..//common/Core/CM3/core_cm3.h **** 
 245:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:..//common/Core/CM3/core_cm3.h **** 
 248:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:..//common/Core/CM3/core_cm3.h **** 
 251:..//common/Core/CM3/core_cm3.h **** /* SCB System Control Register Definitions */
 252:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:..//common/Core/CM3/core_cm3.h **** 
 255:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:..//common/Core/CM3/core_cm3.h **** 
 258:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:..//common/Core/CM3/core_cm3.h **** 
 261:..//common/Core/CM3/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:..//common/Core/CM3/core_cm3.h **** 
 265:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:..//common/Core/CM3/core_cm3.h **** 
 268:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:..//common/Core/CM3/core_cm3.h **** 
 271:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:..//common/Core/CM3/core_cm3.h **** 
 274:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:..//common/Core/CM3/core_cm3.h **** 
 277:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:..//common/Core/CM3/core_cm3.h **** 
 280:..//common/Core/CM3/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:..//common/Core/CM3/core_cm3.h **** 
 284:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:..//common/Core/CM3/core_cm3.h **** 
 287:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:..//common/Core/CM3/core_cm3.h **** 
 290:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:..//common/Core/CM3/core_cm3.h **** 
 293:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:..//common/Core/CM3/core_cm3.h **** 
 296:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:..//common/Core/CM3/core_cm3.h **** 
 299:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:..//common/Core/CM3/core_cm3.h **** 
 302:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:..//common/Core/CM3/core_cm3.h **** 
 305:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:..//common/Core/CM3/core_cm3.h **** 
 308:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:..//common/Core/CM3/core_cm3.h **** 
 311:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:..//common/Core/CM3/core_cm3.h ****                                      
 314:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:..//common/Core/CM3/core_cm3.h **** 
 317:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:..//common/Core/CM3/core_cm3.h **** 
 320:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:..//common/Core/CM3/core_cm3.h **** 
 323:..//common/Core/CM3/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:..//common/Core/CM3/core_cm3.h **** 
 327:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:..//common/Core/CM3/core_cm3.h **** 
 330:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:..//common/Core/CM3/core_cm3.h **** 
 333:..//common/Core/CM3/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:..//common/Core/CM3/core_cm3.h **** 
 337:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:..//common/Core/CM3/core_cm3.h **** 
 340:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:..//common/Core/CM3/core_cm3.h **** 
 343:..//common/Core/CM3/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:..//common/Core/CM3/core_cm3.h **** 
 347:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:..//common/Core/CM3/core_cm3.h **** 
 350:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:..//common/Core/CM3/core_cm3.h **** 
 353:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:..//common/Core/CM3/core_cm3.h **** 
 356:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:..//common/Core/CM3/core_cm3.h **** 
 360:..//common/Core/CM3/core_cm3.h **** 
 361:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for SysTick
 363:..//common/Core/CM3/core_cm3.h ****   @{
 364:..//common/Core/CM3/core_cm3.h ****  */
 365:..//common/Core/CM3/core_cm3.h **** typedef struct
 366:..//common/Core/CM3/core_cm3.h **** {
 367:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:..//common/Core/CM3/core_cm3.h **** } SysTick_Type;
 372:..//common/Core/CM3/core_cm3.h **** 
 373:..//common/Core/CM3/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:..//common/Core/CM3/core_cm3.h **** 
 377:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:..//common/Core/CM3/core_cm3.h **** 
 380:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:..//common/Core/CM3/core_cm3.h **** 
 383:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:..//common/Core/CM3/core_cm3.h **** 
 386:..//common/Core/CM3/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:..//common/Core/CM3/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:..//common/Core/CM3/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:..//common/Core/CM3/core_cm3.h **** 
 390:..//common/Core/CM3/core_cm3.h **** /* SysTick Current Register Definitions */
 391:..//common/Core/CM3/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:..//common/Core/CM3/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:..//common/Core/CM3/core_cm3.h **** 
 394:..//common/Core/CM3/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:..//common/Core/CM3/core_cm3.h **** 
 398:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:..//common/Core/CM3/core_cm3.h **** 
 401:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:..//common/Core/CM3/core_cm3.h **** 
 405:..//common/Core/CM3/core_cm3.h **** 
 406:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:..//common/Core/CM3/core_cm3.h ****   @{
 409:..//common/Core/CM3/core_cm3.h ****  */
 410:..//common/Core/CM3/core_cm3.h **** typedef struct
 411:..//common/Core/CM3/core_cm3.h **** {
 412:..//common/Core/CM3/core_cm3.h ****   __O  union  
 413:..//common/Core/CM3/core_cm3.h ****   {
 414:..//common/Core/CM3/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:..//common/Core/CM3/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:..//common/Core/CM3/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:..//common/Core/CM3/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:..//common/Core/CM3/core_cm3.h **** } ITM_Type;                                                
 445:..//common/Core/CM3/core_cm3.h **** 
 446:..//common/Core/CM3/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:..//common/Core/CM3/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:..//common/Core/CM3/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:..//common/Core/CM3/core_cm3.h **** 
 450:..//common/Core/CM3/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:..//common/Core/CM3/core_cm3.h **** 
 454:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:..//common/Core/CM3/core_cm3.h **** 
 457:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:..//common/Core/CM3/core_cm3.h **** 
 460:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:..//common/Core/CM3/core_cm3.h **** 
 463:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:..//common/Core/CM3/core_cm3.h **** 
 466:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:..//common/Core/CM3/core_cm3.h **** 
 469:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:..//common/Core/CM3/core_cm3.h **** 
 472:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:..//common/Core/CM3/core_cm3.h **** 
 475:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:..//common/Core/CM3/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:..//common/Core/CM3/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:..//common/Core/CM3/core_cm3.h **** 
 479:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:..//common/Core/CM3/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:..//common/Core/CM3/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:..//common/Core/CM3/core_cm3.h **** 
 483:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:..//common/Core/CM3/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:..//common/Core/CM3/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:..//common/Core/CM3/core_cm3.h **** 
 487:..//common/Core/CM3/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:..//common/Core/CM3/core_cm3.h **** 
 491:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:..//common/Core/CM3/core_cm3.h **** 
 494:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:..//common/Core/CM3/core_cm3.h **** 
 498:..//common/Core/CM3/core_cm3.h **** 
 499:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:..//common/Core/CM3/core_cm3.h ****   @{
 502:..//common/Core/CM3/core_cm3.h ****  */
 503:..//common/Core/CM3/core_cm3.h **** typedef struct
 504:..//common/Core/CM3/core_cm3.h **** {
 505:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0;
 506:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:..//common/Core/CM3/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:..//common/Core/CM3/core_cm3.h **** #else
 510:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED1;
 511:..//common/Core/CM3/core_cm3.h **** #endif
 512:..//common/Core/CM3/core_cm3.h **** } InterruptType_Type;
 513:..//common/Core/CM3/core_cm3.h **** 
 514:..//common/Core/CM3/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:..//common/Core/CM3/core_cm3.h **** 
 518:..//common/Core/CM3/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:..//common/Core/CM3/core_cm3.h **** 
 522:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:..//common/Core/CM3/core_cm3.h **** 
 525:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:..//common/Core/CM3/core_cm3.h **** 
 529:..//common/Core/CM3/core_cm3.h **** 
 530:..//common/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:..//common/Core/CM3/core_cm3.h ****   @{
 534:..//common/Core/CM3/core_cm3.h ****  */
 535:..//common/Core/CM3/core_cm3.h **** typedef struct
 536:..//common/Core/CM3/core_cm3.h **** {
 537:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:..//common/Core/CM3/core_cm3.h **** } MPU_Type;                                                
 549:..//common/Core/CM3/core_cm3.h **** 
 550:..//common/Core/CM3/core_cm3.h **** /* MPU Type Register */
 551:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:..//common/Core/CM3/core_cm3.h **** 
 554:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:..//common/Core/CM3/core_cm3.h **** 
 557:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:..//common/Core/CM3/core_cm3.h **** 
 560:..//common/Core/CM3/core_cm3.h **** /* MPU Control Register */
 561:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:..//common/Core/CM3/core_cm3.h **** 
 564:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:..//common/Core/CM3/core_cm3.h **** 
 567:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:..//common/Core/CM3/core_cm3.h **** 
 570:..//common/Core/CM3/core_cm3.h **** /* MPU Region Number Register */
 571:..//common/Core/CM3/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:..//common/Core/CM3/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:..//common/Core/CM3/core_cm3.h **** 
 574:..//common/Core/CM3/core_cm3.h **** /* MPU Region Base Address Register */
 575:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:..//common/Core/CM3/core_cm3.h **** 
 578:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:..//common/Core/CM3/core_cm3.h **** 
 581:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:..//common/Core/CM3/core_cm3.h **** 
 584:..//common/Core/CM3/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:..//common/Core/CM3/core_cm3.h **** 
 588:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:..//common/Core/CM3/core_cm3.h **** 
 591:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:..//common/Core/CM3/core_cm3.h **** 
 594:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:..//common/Core/CM3/core_cm3.h **** 
 597:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:..//common/Core/CM3/core_cm3.h **** 
 600:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:..//common/Core/CM3/core_cm3.h **** 
 603:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:..//common/Core/CM3/core_cm3.h **** 
 606:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:..//common/Core/CM3/core_cm3.h **** 
 609:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:..//common/Core/CM3/core_cm3.h **** 
 612:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:..//common/Core/CM3/core_cm3.h **** #endif
 614:..//common/Core/CM3/core_cm3.h **** 
 615:..//common/Core/CM3/core_cm3.h **** 
 616:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:..//common/Core/CM3/core_cm3.h ****   @{
 619:..//common/Core/CM3/core_cm3.h ****  */
 620:..//common/Core/CM3/core_cm3.h **** typedef struct
 621:..//common/Core/CM3/core_cm3.h **** {
 622:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:..//common/Core/CM3/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:..//common/Core/CM3/core_cm3.h **** } CoreDebug_Type;
 627:..//common/Core/CM3/core_cm3.h **** 
 628:..//common/Core/CM3/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:..//common/Core/CM3/core_cm3.h **** 
 632:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:..//common/Core/CM3/core_cm3.h **** 
 635:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:..//common/Core/CM3/core_cm3.h **** 
 638:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:..//common/Core/CM3/core_cm3.h **** 
 641:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:..//common/Core/CM3/core_cm3.h **** 
 644:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:..//common/Core/CM3/core_cm3.h **** 
 647:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:..//common/Core/CM3/core_cm3.h **** 
 650:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:..//common/Core/CM3/core_cm3.h **** 
 653:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:..//common/Core/CM3/core_cm3.h **** 
 656:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:..//common/Core/CM3/core_cm3.h **** 
 659:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:..//common/Core/CM3/core_cm3.h **** 
 662:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:..//common/Core/CM3/core_cm3.h **** 
 665:..//common/Core/CM3/core_cm3.h **** /* Debug Core Register Selector Register */
 666:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:..//common/Core/CM3/core_cm3.h **** 
 669:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:..//common/Core/CM3/core_cm3.h **** 
 672:..//common/Core/CM3/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:..//common/Core/CM3/core_cm3.h **** 
 676:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:..//common/Core/CM3/core_cm3.h **** 
 679:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:..//common/Core/CM3/core_cm3.h **** 
 682:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:..//common/Core/CM3/core_cm3.h **** 
 685:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:..//common/Core/CM3/core_cm3.h **** 
 688:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:..//common/Core/CM3/core_cm3.h **** 
 691:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:..//common/Core/CM3/core_cm3.h **** 
 694:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:..//common/Core/CM3/core_cm3.h **** 
 697:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:..//common/Core/CM3/core_cm3.h **** 
 700:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:..//common/Core/CM3/core_cm3.h **** 
 703:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:..//common/Core/CM3/core_cm3.h **** 
 706:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:..//common/Core/CM3/core_cm3.h **** 
 709:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:..//common/Core/CM3/core_cm3.h **** 
 713:..//common/Core/CM3/core_cm3.h **** 
 714:..//common/Core/CM3/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:..//common/Core/CM3/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:..//common/Core/CM3/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:..//common/Core/CM3/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:..//common/Core/CM3/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:..//common/Core/CM3/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:..//common/Core/CM3/core_cm3.h **** 
 722:..//common/Core/CM3/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:..//common/Core/CM3/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:..//common/Core/CM3/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:..//common/Core/CM3/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:..//common/Core/CM3/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:..//common/Core/CM3/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:..//common/Core/CM3/core_cm3.h **** 
 729:..//common/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:..//common/Core/CM3/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:..//common/Core/CM3/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:..//common/Core/CM3/core_cm3.h **** #endif
 733:..//common/Core/CM3/core_cm3.h **** 
 734:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:..//common/Core/CM3/core_cm3.h **** 
 736:..//common/Core/CM3/core_cm3.h **** 
 737:..//common/Core/CM3/core_cm3.h **** /*******************************************************************************
 738:..//common/Core/CM3/core_cm3.h ****  *                Hardware Abstraction Layer
 739:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
 740:..//common/Core/CM3/core_cm3.h **** 
 741:..//common/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   )
 742:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:..//common/Core/CM3/core_cm3.h **** 
 745:..//common/Core/CM3/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:..//common/Core/CM3/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:..//common/Core/CM3/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:..//common/Core/CM3/core_cm3.h **** 
 749:..//common/Core/CM3/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:..//common/Core/CM3/core_cm3.h **** 
 753:..//common/Core/CM3/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:..//common/Core/CM3/core_cm3.h **** 
 757:..//common/Core/CM3/core_cm3.h **** #endif
 758:..//common/Core/CM3/core_cm3.h **** 
 759:..//common/Core/CM3/core_cm3.h **** 
 760:..//common/Core/CM3/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:..//common/Core/CM3/core_cm3.h **** 
 762:..//common/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:..//common/Core/CM3/core_cm3.h **** /* ARM armcc specific functions */
 764:..//common/Core/CM3/core_cm3.h **** 
 765:..//common/Core/CM3/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:..//common/Core/CM3/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:..//common/Core/CM3/core_cm3.h **** 
 768:..//common/Core/CM3/core_cm3.h **** #define __NOP                             __nop
 769:..//common/Core/CM3/core_cm3.h **** #define __WFI                             __wfi
 770:..//common/Core/CM3/core_cm3.h **** #define __WFE                             __wfe
 771:..//common/Core/CM3/core_cm3.h **** #define __SEV                             __sev
 772:..//common/Core/CM3/core_cm3.h **** #define __ISB()                           __isb(0)
 773:..//common/Core/CM3/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:..//common/Core/CM3/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:..//common/Core/CM3/core_cm3.h **** #define __REV                             __rev
 776:..//common/Core/CM3/core_cm3.h **** #define __RBIT                            __rbit
 777:..//common/Core/CM3/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:..//common/Core/CM3/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:..//common/Core/CM3/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:..//common/Core/CM3/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:..//common/Core/CM3/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:..//common/Core/CM3/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:..//common/Core/CM3/core_cm3.h **** 
 784:..//common/Core/CM3/core_cm3.h **** 
 785:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:..//common/Core/CM3/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:..//common/Core/CM3/core_cm3.h **** 
 790:..//common/Core/CM3/core_cm3.h **** 
 791:..//common/Core/CM3/core_cm3.h **** /**
 792:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:..//common/Core/CM3/core_cm3.h ****  *
 794:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
 795:..//common/Core/CM3/core_cm3.h ****  *
 796:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 797:..//common/Core/CM3/core_cm3.h ****  */
 798:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:..//common/Core/CM3/core_cm3.h **** 
 800:..//common/Core/CM3/core_cm3.h **** /**
 801:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:..//common/Core/CM3/core_cm3.h ****  *
 803:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:..//common/Core/CM3/core_cm3.h ****  *
 805:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:..//common/Core/CM3/core_cm3.h ****  */
 808:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:..//common/Core/CM3/core_cm3.h **** 
 810:..//common/Core/CM3/core_cm3.h **** /**
 811:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:..//common/Core/CM3/core_cm3.h ****  *
 813:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
 814:..//common/Core/CM3/core_cm3.h ****  *
 815:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
 817:..//common/Core/CM3/core_cm3.h ****  */
 818:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:..//common/Core/CM3/core_cm3.h **** 
 820:..//common/Core/CM3/core_cm3.h **** /**
 821:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:..//common/Core/CM3/core_cm3.h ****  *
 823:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:..//common/Core/CM3/core_cm3.h ****  *
 825:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:..//common/Core/CM3/core_cm3.h ****  */
 828:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:..//common/Core/CM3/core_cm3.h **** 
 830:..//common/Core/CM3/core_cm3.h **** /**
 831:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:..//common/Core/CM3/core_cm3.h ****  *
 833:..//common/Core/CM3/core_cm3.h ****  * @param   value  value to reverse
 834:..//common/Core/CM3/core_cm3.h ****  * @return         reversed value
 835:..//common/Core/CM3/core_cm3.h ****  *
 836:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:..//common/Core/CM3/core_cm3.h ****  */
 838:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:..//common/Core/CM3/core_cm3.h **** 
 840:..//common/Core/CM3/core_cm3.h **** /**
 841:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:..//common/Core/CM3/core_cm3.h ****  *
 843:..//common/Core/CM3/core_cm3.h ****  * @param   value  value to reverse
 844:..//common/Core/CM3/core_cm3.h ****  * @return         reversed value
 845:..//common/Core/CM3/core_cm3.h ****  *
 846:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:..//common/Core/CM3/core_cm3.h ****  */
 848:..//common/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:..//common/Core/CM3/core_cm3.h **** 
 850:..//common/Core/CM3/core_cm3.h **** 
 851:..//common/Core/CM3/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:..//common/Core/CM3/core_cm3.h **** 
 853:..//common/Core/CM3/core_cm3.h **** /**
 854:..//common/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:..//common/Core/CM3/core_cm3.h ****  *
 856:..//common/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:..//common/Core/CM3/core_cm3.h ****  */
 858:..//common/Core/CM3/core_cm3.h **** extern void __CLREX(void);
 859:..//common/Core/CM3/core_cm3.h **** 
 860:..//common/Core/CM3/core_cm3.h **** /**
 861:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 862:..//common/Core/CM3/core_cm3.h ****  *
 863:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
 864:..//common/Core/CM3/core_cm3.h ****  *
 865:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 866:..//common/Core/CM3/core_cm3.h ****  */
 867:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:..//common/Core/CM3/core_cm3.h **** 
 869:..//common/Core/CM3/core_cm3.h **** /**
 870:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 871:..//common/Core/CM3/core_cm3.h ****  *
 872:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
 873:..//common/Core/CM3/core_cm3.h ****  *
 874:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
 875:..//common/Core/CM3/core_cm3.h ****  */
 876:..//common/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:..//common/Core/CM3/core_cm3.h **** 
 878:..//common/Core/CM3/core_cm3.h **** /**
 879:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:..//common/Core/CM3/core_cm3.h ****  *
 881:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
 882:..//common/Core/CM3/core_cm3.h ****  *
 883:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:..//common/Core/CM3/core_cm3.h ****  */
 885:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:..//common/Core/CM3/core_cm3.h **** 
 887:..//common/Core/CM3/core_cm3.h **** /**
 888:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:..//common/Core/CM3/core_cm3.h ****  *
 890:..//common/Core/CM3/core_cm3.h ****  * @param   priMask  PriMask
 891:..//common/Core/CM3/core_cm3.h ****  *
 892:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:..//common/Core/CM3/core_cm3.h ****  */
 894:..//common/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:..//common/Core/CM3/core_cm3.h **** 
 896:..//common/Core/CM3/core_cm3.h **** /**
 897:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:..//common/Core/CM3/core_cm3.h ****  *
 899:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
 900:..//common/Core/CM3/core_cm3.h ****  *
 901:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 902:..//common/Core/CM3/core_cm3.h ****  */
 903:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:..//common/Core/CM3/core_cm3.h **** 
 905:..//common/Core/CM3/core_cm3.h **** /**
 906:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:..//common/Core/CM3/core_cm3.h ****  *
 908:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask faultMask value
 909:..//common/Core/CM3/core_cm3.h ****  *
 910:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
 911:..//common/Core/CM3/core_cm3.h ****  */
 912:..//common/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:..//common/Core/CM3/core_cm3.h **** 
 914:..//common/Core/CM3/core_cm3.h **** /**
 915:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 916:..//common/Core/CM3/core_cm3.h ****  * 
 917:..//common/Core/CM3/core_cm3.h ****  * @return Control value
 918:..//common/Core/CM3/core_cm3.h ****  *
 919:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
 920:..//common/Core/CM3/core_cm3.h ****  */
 921:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:..//common/Core/CM3/core_cm3.h **** 
 923:..//common/Core/CM3/core_cm3.h **** /**
 924:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 925:..//common/Core/CM3/core_cm3.h ****  *
 926:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
 927:..//common/Core/CM3/core_cm3.h ****  *
 928:..//common/Core/CM3/core_cm3.h ****  * Set the control register
 929:..//common/Core/CM3/core_cm3.h ****  */
 930:..//common/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:..//common/Core/CM3/core_cm3.h **** 
 932:..//common/Core/CM3/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:..//common/Core/CM3/core_cm3.h **** 
 934:..//common/Core/CM3/core_cm3.h **** /**
 935:..//common/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:..//common/Core/CM3/core_cm3.h ****  *
 937:..//common/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:..//common/Core/CM3/core_cm3.h ****  */
 939:..//common/Core/CM3/core_cm3.h **** #define __CLREX                           __clrex
 940:..//common/Core/CM3/core_cm3.h **** 
 941:..//common/Core/CM3/core_cm3.h **** /**
 942:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 943:..//common/Core/CM3/core_cm3.h ****  *
 944:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
 945:..//common/Core/CM3/core_cm3.h ****  *
 946:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 947:..//common/Core/CM3/core_cm3.h ****  */
 948:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:..//common/Core/CM3/core_cm3.h **** {
 950:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:..//common/Core/CM3/core_cm3.h ****   return(__regBasePri);
 952:..//common/Core/CM3/core_cm3.h **** }
 953:..//common/Core/CM3/core_cm3.h **** 
 954:..//common/Core/CM3/core_cm3.h **** /**
 955:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 956:..//common/Core/CM3/core_cm3.h ****  *
 957:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
 958:..//common/Core/CM3/core_cm3.h ****  *
 959:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
 960:..//common/Core/CM3/core_cm3.h ****  */
 961:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:..//common/Core/CM3/core_cm3.h **** {
 963:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:..//common/Core/CM3/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:..//common/Core/CM3/core_cm3.h **** }
 966:..//common/Core/CM3/core_cm3.h **** 
 967:..//common/Core/CM3/core_cm3.h **** /**
 968:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:..//common/Core/CM3/core_cm3.h ****  *
 970:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
 971:..//common/Core/CM3/core_cm3.h ****  *
 972:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:..//common/Core/CM3/core_cm3.h ****  */
 974:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:..//common/Core/CM3/core_cm3.h **** {
 976:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:..//common/Core/CM3/core_cm3.h ****   return(__regPriMask);
 978:..//common/Core/CM3/core_cm3.h **** }
 979:..//common/Core/CM3/core_cm3.h **** 
 980:..//common/Core/CM3/core_cm3.h **** /**
 981:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:..//common/Core/CM3/core_cm3.h ****  *
 983:..//common/Core/CM3/core_cm3.h ****  * @param  priMask  PriMask
 984:..//common/Core/CM3/core_cm3.h ****  *
 985:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:..//common/Core/CM3/core_cm3.h ****  */
 987:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:..//common/Core/CM3/core_cm3.h **** {
 989:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:..//common/Core/CM3/core_cm3.h ****   __regPriMask = (priMask);
 991:..//common/Core/CM3/core_cm3.h **** }
 992:..//common/Core/CM3/core_cm3.h **** 
 993:..//common/Core/CM3/core_cm3.h **** /**
 994:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:..//common/Core/CM3/core_cm3.h ****  *
 996:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
 997:..//common/Core/CM3/core_cm3.h ****  *
 998:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 999:..//common/Core/CM3/core_cm3.h ****  */
1000:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:..//common/Core/CM3/core_cm3.h **** {
1002:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:..//common/Core/CM3/core_cm3.h ****   return(__regFaultMask);
1004:..//common/Core/CM3/core_cm3.h **** }
1005:..//common/Core/CM3/core_cm3.h **** 
1006:..//common/Core/CM3/core_cm3.h **** /**
1007:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:..//common/Core/CM3/core_cm3.h ****  *
1009:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask  faultMask value
1010:..//common/Core/CM3/core_cm3.h ****  *
1011:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
1012:..//common/Core/CM3/core_cm3.h ****  */
1013:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:..//common/Core/CM3/core_cm3.h **** {
1015:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:..//common/Core/CM3/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:..//common/Core/CM3/core_cm3.h **** }
1018:..//common/Core/CM3/core_cm3.h **** 
1019:..//common/Core/CM3/core_cm3.h **** /**
1020:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
1021:..//common/Core/CM3/core_cm3.h ****  * 
1022:..//common/Core/CM3/core_cm3.h ****  * @return Control value
1023:..//common/Core/CM3/core_cm3.h ****  *
1024:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
1025:..//common/Core/CM3/core_cm3.h ****  */
1026:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:..//common/Core/CM3/core_cm3.h **** {
1028:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:..//common/Core/CM3/core_cm3.h ****   return(__regControl);
1030:..//common/Core/CM3/core_cm3.h **** }
1031:..//common/Core/CM3/core_cm3.h **** 
1032:..//common/Core/CM3/core_cm3.h **** /**
1033:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
1034:..//common/Core/CM3/core_cm3.h ****  *
1035:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
1036:..//common/Core/CM3/core_cm3.h ****  *
1037:..//common/Core/CM3/core_cm3.h ****  * Set the control register
1038:..//common/Core/CM3/core_cm3.h ****  */
1039:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:..//common/Core/CM3/core_cm3.h **** {
1041:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:..//common/Core/CM3/core_cm3.h ****   __regControl = control;
1043:..//common/Core/CM3/core_cm3.h **** }
1044:..//common/Core/CM3/core_cm3.h **** 
1045:..//common/Core/CM3/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:..//common/Core/CM3/core_cm3.h **** 
1047:..//common/Core/CM3/core_cm3.h **** 
1048:..//common/Core/CM3/core_cm3.h **** 
1049:..//common/Core/CM3/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:..//common/Core/CM3/core_cm3.h **** /* IAR iccarm specific functions */
1051:..//common/Core/CM3/core_cm3.h **** 
1052:..//common/Core/CM3/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:..//common/Core/CM3/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:..//common/Core/CM3/core_cm3.h **** 
1055:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:..//common/Core/CM3/core_cm3.h **** 
1058:..//common/Core/CM3/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:..//common/Core/CM3/core_cm3.h **** 
1064:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:..//common/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:..//common/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:..//common/Core/CM3/core_cm3.h **** 
1076:..//common/Core/CM3/core_cm3.h **** 
1077:..//common/Core/CM3/core_cm3.h **** /**
1078:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:..//common/Core/CM3/core_cm3.h ****  *
1080:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
1081:..//common/Core/CM3/core_cm3.h ****  *
1082:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
1083:..//common/Core/CM3/core_cm3.h ****  */
1084:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:..//common/Core/CM3/core_cm3.h **** 
1086:..//common/Core/CM3/core_cm3.h **** /**
1087:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:..//common/Core/CM3/core_cm3.h ****  *
1089:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:..//common/Core/CM3/core_cm3.h ****  *
1091:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:..//common/Core/CM3/core_cm3.h ****  */
1094:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:..//common/Core/CM3/core_cm3.h **** 
1096:..//common/Core/CM3/core_cm3.h **** /**
1097:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:..//common/Core/CM3/core_cm3.h ****  *
1099:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
1100:..//common/Core/CM3/core_cm3.h ****  *
1101:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
1103:..//common/Core/CM3/core_cm3.h ****  */
1104:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:..//common/Core/CM3/core_cm3.h **** 
1106:..//common/Core/CM3/core_cm3.h **** /**
1107:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:..//common/Core/CM3/core_cm3.h ****  *
1109:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:..//common/Core/CM3/core_cm3.h ****  *
1111:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:..//common/Core/CM3/core_cm3.h ****  */
1114:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:..//common/Core/CM3/core_cm3.h **** 
1116:..//common/Core/CM3/core_cm3.h **** /**
1117:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:..//common/Core/CM3/core_cm3.h ****  *
1119:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1120:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1121:..//common/Core/CM3/core_cm3.h ****  *
1122:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:..//common/Core/CM3/core_cm3.h ****  */
1124:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:..//common/Core/CM3/core_cm3.h **** 
1126:..//common/Core/CM3/core_cm3.h **** /**
1127:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
1128:..//common/Core/CM3/core_cm3.h ****  *
1129:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1130:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1131:..//common/Core/CM3/core_cm3.h ****  *
1132:..//common/Core/CM3/core_cm3.h ****  * Reverse bit order of value
1133:..//common/Core/CM3/core_cm3.h ****  */
1134:..//common/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:..//common/Core/CM3/core_cm3.h **** 
1136:..//common/Core/CM3/core_cm3.h **** /**
1137:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:..//common/Core/CM3/core_cm3.h ****  *
1139:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1140:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1141:..//common/Core/CM3/core_cm3.h ****  *
1142:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:..//common/Core/CM3/core_cm3.h ****  */
1144:..//common/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:..//common/Core/CM3/core_cm3.h **** 
1146:..//common/Core/CM3/core_cm3.h **** /**
1147:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:..//common/Core/CM3/core_cm3.h ****  *
1149:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1150:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1151:..//common/Core/CM3/core_cm3.h ****  *
1152:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:..//common/Core/CM3/core_cm3.h ****  */
1154:..//common/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:..//common/Core/CM3/core_cm3.h **** 
1156:..//common/Core/CM3/core_cm3.h **** /**
1157:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:..//common/Core/CM3/core_cm3.h ****  *
1159:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1160:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1161:..//common/Core/CM3/core_cm3.h ****  *
1162:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:..//common/Core/CM3/core_cm3.h ****  */
1164:..//common/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:..//common/Core/CM3/core_cm3.h **** 
1166:..//common/Core/CM3/core_cm3.h **** /**
1167:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:..//common/Core/CM3/core_cm3.h ****  *
1169:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1170:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1171:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1172:..//common/Core/CM3/core_cm3.h ****  *
1173:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:..//common/Core/CM3/core_cm3.h ****  */
1175:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:..//common/Core/CM3/core_cm3.h **** 
1177:..//common/Core/CM3/core_cm3.h **** /**
1178:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:..//common/Core/CM3/core_cm3.h ****  *
1180:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1181:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1182:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1183:..//common/Core/CM3/core_cm3.h ****  *
1184:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:..//common/Core/CM3/core_cm3.h ****  */
1186:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:..//common/Core/CM3/core_cm3.h **** 
1188:..//common/Core/CM3/core_cm3.h **** /**
1189:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:..//common/Core/CM3/core_cm3.h ****  *
1191:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1192:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1193:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1194:..//common/Core/CM3/core_cm3.h ****  *
1195:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:..//common/Core/CM3/core_cm3.h ****  */
1197:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:..//common/Core/CM3/core_cm3.h **** 
1199:..//common/Core/CM3/core_cm3.h **** 
1200:..//common/Core/CM3/core_cm3.h **** 
1201:..//common/Core/CM3/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:..//common/Core/CM3/core_cm3.h **** /* GNU gcc specific functions */
1203:..//common/Core/CM3/core_cm3.h **** 
1204:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:..//common/Core/CM3/core_cm3.h **** 
1207:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:..//common/Core/CM3/core_cm3.h **** 
1210:..//common/Core/CM3/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:..//common/Core/CM3/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:..//common/Core/CM3/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:..//common/Core/CM3/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:..//common/Core/CM3/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:..//common/Core/CM3/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:..//common/Core/CM3/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:..//common/Core/CM3/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:..//common/Core/CM3/core_cm3.h **** 
1219:..//common/Core/CM3/core_cm3.h **** 
1220:..//common/Core/CM3/core_cm3.h **** /**
1221:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:..//common/Core/CM3/core_cm3.h ****  *
1223:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
1224:..//common/Core/CM3/core_cm3.h ****  *
1225:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
1226:..//common/Core/CM3/core_cm3.h ****  */
1227:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:..//common/Core/CM3/core_cm3.h **** 
1229:..//common/Core/CM3/core_cm3.h **** /**
1230:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:..//common/Core/CM3/core_cm3.h ****  *
1232:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:..//common/Core/CM3/core_cm3.h ****  *
1234:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:..//common/Core/CM3/core_cm3.h ****  */
1237:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:..//common/Core/CM3/core_cm3.h **** 
1239:..//common/Core/CM3/core_cm3.h **** /**
1240:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:..//common/Core/CM3/core_cm3.h ****  *
1242:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
1243:..//common/Core/CM3/core_cm3.h ****  *
1244:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
1246:..//common/Core/CM3/core_cm3.h ****  */
1247:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:..//common/Core/CM3/core_cm3.h **** 
1249:..//common/Core/CM3/core_cm3.h **** /**
1250:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:..//common/Core/CM3/core_cm3.h ****  *
1252:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:..//common/Core/CM3/core_cm3.h ****  *
1254:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:..//common/Core/CM3/core_cm3.h ****  */
1257:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:..//common/Core/CM3/core_cm3.h **** 
1259:..//common/Core/CM3/core_cm3.h **** /**
1260:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
1261:..//common/Core/CM3/core_cm3.h ****  *
1262:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
1263:..//common/Core/CM3/core_cm3.h ****  *
1264:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
1265:..//common/Core/CM3/core_cm3.h ****  */
1266:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:..//common/Core/CM3/core_cm3.h **** 
1268:..//common/Core/CM3/core_cm3.h **** /**
1269:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
1270:..//common/Core/CM3/core_cm3.h ****  *
1271:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
1272:..//common/Core/CM3/core_cm3.h ****  *
1273:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
1274:..//common/Core/CM3/core_cm3.h ****  */
1275:..//common/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:..//common/Core/CM3/core_cm3.h **** 
1277:..//common/Core/CM3/core_cm3.h **** /**
1278:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:..//common/Core/CM3/core_cm3.h ****  *
1280:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
1281:..//common/Core/CM3/core_cm3.h ****  *
1282:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:..//common/Core/CM3/core_cm3.h ****  */
1284:..//common/Core/CM3/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:..//common/Core/CM3/core_cm3.h **** 
1286:..//common/Core/CM3/core_cm3.h **** /**
1287:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:..//common/Core/CM3/core_cm3.h ****  *
1289:..//common/Core/CM3/core_cm3.h ****  * @param  priMask  PriMask
1290:..//common/Core/CM3/core_cm3.h ****  *
1291:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:..//common/Core/CM3/core_cm3.h ****  */
1293:..//common/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:..//common/Core/CM3/core_cm3.h **** 
1295:..//common/Core/CM3/core_cm3.h **** /**
1296:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:..//common/Core/CM3/core_cm3.h ****  *
1298:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
1299:..//common/Core/CM3/core_cm3.h ****  *
1300:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
1301:..//common/Core/CM3/core_cm3.h ****  */
1302:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:..//common/Core/CM3/core_cm3.h **** 
1304:..//common/Core/CM3/core_cm3.h **** /**
1305:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:..//common/Core/CM3/core_cm3.h ****  *
1307:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask  faultMask value
1308:..//common/Core/CM3/core_cm3.h ****  *
1309:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
1310:..//common/Core/CM3/core_cm3.h ****  */
1311:..//common/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:..//common/Core/CM3/core_cm3.h **** 
1313:..//common/Core/CM3/core_cm3.h **** /**
1314:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
1315:..//common/Core/CM3/core_cm3.h **** * 
1316:..//common/Core/CM3/core_cm3.h **** *  @return Control value
1317:..//common/Core/CM3/core_cm3.h ****  *
1318:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
1319:..//common/Core/CM3/core_cm3.h ****  */
1320:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:..//common/Core/CM3/core_cm3.h **** 
1322:..//common/Core/CM3/core_cm3.h **** /**
1323:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
1324:..//common/Core/CM3/core_cm3.h ****  *
1325:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
1326:..//common/Core/CM3/core_cm3.h ****  *
1327:..//common/Core/CM3/core_cm3.h ****  * Set the control register
1328:..//common/Core/CM3/core_cm3.h ****  */
1329:..//common/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:..//common/Core/CM3/core_cm3.h **** 
1331:..//common/Core/CM3/core_cm3.h **** /**
1332:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:..//common/Core/CM3/core_cm3.h ****  *
1334:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1335:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1336:..//common/Core/CM3/core_cm3.h ****  *
1337:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in integer value
1338:..//common/Core/CM3/core_cm3.h ****  */
1339:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:..//common/Core/CM3/core_cm3.h **** 
1341:..//common/Core/CM3/core_cm3.h **** /**
1342:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:..//common/Core/CM3/core_cm3.h ****  *
1344:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1345:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1346:..//common/Core/CM3/core_cm3.h ****  *
1347:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:..//common/Core/CM3/core_cm3.h ****  */
1349:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:..//common/Core/CM3/core_cm3.h **** 
1351:..//common/Core/CM3/core_cm3.h **** /**
1352:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:..//common/Core/CM3/core_cm3.h ****  *
1354:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1355:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1356:..//common/Core/CM3/core_cm3.h ****  *
1357:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:..//common/Core/CM3/core_cm3.h ****  */
1359:..//common/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:..//common/Core/CM3/core_cm3.h **** 
1361:..//common/Core/CM3/core_cm3.h **** /**
1362:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
1363:..//common/Core/CM3/core_cm3.h ****  *
1364:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1365:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1366:..//common/Core/CM3/core_cm3.h ****  *
1367:..//common/Core/CM3/core_cm3.h ****  * Reverse bit order of value
1368:..//common/Core/CM3/core_cm3.h ****  */
1369:..//common/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:..//common/Core/CM3/core_cm3.h **** 
1371:..//common/Core/CM3/core_cm3.h **** /**
1372:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:..//common/Core/CM3/core_cm3.h ****  *
1374:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1375:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1376:..//common/Core/CM3/core_cm3.h ****  *
1377:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:..//common/Core/CM3/core_cm3.h ****  */
1379:..//common/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:..//common/Core/CM3/core_cm3.h **** 
1381:..//common/Core/CM3/core_cm3.h **** /**
1382:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:..//common/Core/CM3/core_cm3.h ****  *
1384:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1385:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1386:..//common/Core/CM3/core_cm3.h ****  *
1387:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:..//common/Core/CM3/core_cm3.h ****  */
1389:..//common/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:..//common/Core/CM3/core_cm3.h **** 
1391:..//common/Core/CM3/core_cm3.h **** /**
1392:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:..//common/Core/CM3/core_cm3.h ****  *
1394:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1395:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1396:..//common/Core/CM3/core_cm3.h ****  *
1397:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:..//common/Core/CM3/core_cm3.h ****  */
1399:..//common/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:..//common/Core/CM3/core_cm3.h **** 
1401:..//common/Core/CM3/core_cm3.h **** /**
1402:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:..//common/Core/CM3/core_cm3.h ****  *
1404:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1405:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1406:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1407:..//common/Core/CM3/core_cm3.h ****  *
1408:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:..//common/Core/CM3/core_cm3.h ****  */
1410:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:..//common/Core/CM3/core_cm3.h **** 
1412:..//common/Core/CM3/core_cm3.h **** /**
1413:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:..//common/Core/CM3/core_cm3.h ****  *
1415:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1416:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1417:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1418:..//common/Core/CM3/core_cm3.h ****  *
1419:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:..//common/Core/CM3/core_cm3.h ****  */
1421:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:..//common/Core/CM3/core_cm3.h **** 
1423:..//common/Core/CM3/core_cm3.h **** /**
1424:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:..//common/Core/CM3/core_cm3.h ****  *
1426:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1427:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1428:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1429:..//common/Core/CM3/core_cm3.h ****  *
1430:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:..//common/Core/CM3/core_cm3.h ****  */
1432:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:..//common/Core/CM3/core_cm3.h **** 
1434:..//common/Core/CM3/core_cm3.h **** 
1435:..//common/Core/CM3/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:..//common/Core/CM3/core_cm3.h **** /* TASKING carm specific functions */
1437:..//common/Core/CM3/core_cm3.h **** 
1438:..//common/Core/CM3/core_cm3.h **** /*
1439:..//common/Core/CM3/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:..//common/Core/CM3/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:..//common/Core/CM3/core_cm3.h ****  * Including the CMSIS ones.
1442:..//common/Core/CM3/core_cm3.h ****  */
1443:..//common/Core/CM3/core_cm3.h **** 
1444:..//common/Core/CM3/core_cm3.h **** #endif
1445:..//common/Core/CM3/core_cm3.h **** 
1446:..//common/Core/CM3/core_cm3.h **** 
1447:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:..//common/Core/CM3/core_cm3.h ****   Core  Function Interface containing:
1449:..//common/Core/CM3/core_cm3.h ****   - Core NVIC Functions
1450:..//common/Core/CM3/core_cm3.h ****   - Core SysTick Functions
1451:..//common/Core/CM3/core_cm3.h ****   - Core Reset Functions
1452:..//common/Core/CM3/core_cm3.h **** */
1453:..//common/Core/CM3/core_cm3.h **** /*@{*/
1454:..//common/Core/CM3/core_cm3.h **** 
1455:..//common/Core/CM3/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:..//common/Core/CM3/core_cm3.h **** 
1457:..//common/Core/CM3/core_cm3.h **** /**
1458:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:..//common/Core/CM3/core_cm3.h ****  *
1460:..//common/Core/CM3/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:..//common/Core/CM3/core_cm3.h ****  *
1462:..//common/Core/CM3/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:..//common/Core/CM3/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:..//common/Core/CM3/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:..//common/Core/CM3/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:..//common/Core/CM3/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:..//common/Core/CM3/core_cm3.h ****  */
1468:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:..//common/Core/CM3/core_cm3.h **** {
1470:..//common/Core/CM3/core_cm3.h ****   uint32_t reg_value;
1471:..//common/Core/CM3/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:..//common/Core/CM3/core_cm3.h ****   
1473:..//common/Core/CM3/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:..//common/Core/CM3/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:..//common/Core/CM3/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:..//common/Core/CM3/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:..//common/Core/CM3/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:..//common/Core/CM3/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:..//common/Core/CM3/core_cm3.h **** }
1480:..//common/Core/CM3/core_cm3.h **** 
1481:..//common/Core/CM3/core_cm3.h **** /**
1482:..//common/Core/CM3/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:..//common/Core/CM3/core_cm3.h ****  *
1484:..//common/Core/CM3/core_cm3.h ****  * @return priority grouping field 
1485:..//common/Core/CM3/core_cm3.h ****  *
1486:..//common/Core/CM3/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:..//common/Core/CM3/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:..//common/Core/CM3/core_cm3.h ****  */
1489:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:..//common/Core/CM3/core_cm3.h **** {
1491:..//common/Core/CM3/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:..//common/Core/CM3/core_cm3.h **** }
1493:..//common/Core/CM3/core_cm3.h **** 
1494:..//common/Core/CM3/core_cm3.h **** /**
1495:..//common/Core/CM3/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:..//common/Core/CM3/core_cm3.h ****  *
1497:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:..//common/Core/CM3/core_cm3.h ****  *
1499:..//common/Core/CM3/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:..//common/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:..//common/Core/CM3/core_cm3.h ****  */
1502:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:..//common/Core/CM3/core_cm3.h **** {
  31              		.loc 1 1503 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  36 0000 80B4     		push	{r7}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 4
  39 0002 83B0     		sub	sp, sp, #12
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 16
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_offset 7, -4
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 0346     		mov	r3, r0
  47 0008 FB71     		strb	r3, [r7, #7]
1504:..//common/Core/CM3/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  48              		.loc 1 1504 0
  49 000a 4EF20013 		movw	r3, #:lower16:-536813312
  50 000e CEF20003 		movt	r3, #:upper16:-536813312
  51 0012 97F90720 		ldrsb	r2, [r7, #7]
  52 0016 4FEA5212 		lsr	r2, r2, #5
  53 001a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
  54 001c 01F01F01 		and	r1, r1, #31
  55 0020 4FF00100 		mov	r0, #1
  56 0024 00FA01F1 		lsl	r1, r0, r1
  57 0028 43F82210 		str	r1, [r3, r2, lsl #2]
1505:..//common/Core/CM3/core_cm3.h **** }
  58              		.loc 1 1505 0
  59 002c 07F10C07 		add	r7, r7, #12
  60 0030 BD46     		mov	sp, r7
  61 0032 80BC     		pop	{r7}
  62 0034 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE14:
  66              		.comm	buff_rxUSB,256,4
  67              		.comm	ring_rxUSB,12,4
  68              		.comm	modbusUSB,180,4
  69 0036 00BF     		.section	.data.LineCoding,"aw",%progbits
  70              		.align	2
  73              	LineCoding:
  74 0000 00C20100 		.word	115200
  75 0004 00       		.byte	0
  76 0005 00       		.byte	0
  77 0006 08       		.byte	8
  78 0007 00       		.space	1
  79              		.section	.bss.abBulkBuf,"aw",%nobits
  80              		.align	2
  83              	abBulkBuf:
  84 0000 00000000 		.space	64
  84      00000000 
  84      00000000 
  84      00000000 
  84      00000000 
  85              		.section	.bss.abClassReqData,"aw",%nobits
  86              		.align	2
  89              	abClassReqData:
  90 0000 00000000 		.space	8
  90      00000000 
  91              		.section	.bss.txdata,"aw",%nobits
  92              		.align	2
  95              	txdata:
  96 0000 00000000 		.space	512
  96      00000000 
  96      00000000 
  96      00000000 
  96      00000000 
  97              		.section	.bss.rxdata,"aw",%nobits
  98              		.align	2
 101              	rxdata:
 102 0000 00000000 		.space	512
 102      00000000 
 102      00000000 
 102      00000000 
 102      00000000 
 103              		.section	.bss.txfifo,"aw",%nobits
 104              		.align	2
 107              	txfifo:
 108 0000 00000000 		.space	12
 108      00000000 
 108      00000000 
 109              		.section	.bss.rxfifo,"aw",%nobits
 110              		.align	2
 113              	rxfifo:
 114 0000 00000000 		.space	12
 114      00000000 
 114      00000000 
 115              		.section	.rodata.abDescriptors,"a",%progbits
 116              		.align	2
 119              	abDescriptors:
 120 0000 12       		.byte	18
 121 0001 01       		.byte	1
 122 0002 01       		.byte	1
 123 0003 01       		.byte	1
 124 0004 02       		.byte	2
 125 0005 00       		.byte	0
 126 0006 00       		.byte	0
 127 0007 40       		.byte	64
 128 0008 FF       		.byte	-1
 129 0009 FF       		.byte	-1
 130 000a 06       		.byte	6
 131 000b 00       		.byte	0
 132 000c 00       		.byte	0
 133 000d 01       		.byte	1
 134 000e 01       		.byte	1
 135 000f 02       		.byte	2
 136 0010 03       		.byte	3
 137 0011 01       		.byte	1
 138 0012 09       		.byte	9
 139 0013 02       		.byte	2
 140 0014 43       		.byte	67
 141 0015 00       		.byte	0
 142 0016 02       		.byte	2
 143 0017 01       		.byte	1
 144 0018 00       		.byte	0
 145 0019 C0       		.byte	-64
 146 001a 32       		.byte	50
 147 001b 09       		.byte	9
 148 001c 04       		.byte	4
 149 001d 00       		.byte	0
 150 001e 00       		.byte	0
 151 001f 01       		.byte	1
 152 0020 02       		.byte	2
 153 0021 02       		.byte	2
 154 0022 01       		.byte	1
 155 0023 00       		.byte	0
 156 0024 05       		.byte	5
 157 0025 24       		.byte	36
 158 0026 00       		.byte	0
 159 0027 10       		.byte	16
 160 0028 01       		.byte	1
 161 0029 05       		.byte	5
 162 002a 24       		.byte	36
 163 002b 01       		.byte	1
 164 002c 01       		.byte	1
 165 002d 01       		.byte	1
 166 002e 04       		.byte	4
 167 002f 24       		.byte	36
 168 0030 02       		.byte	2
 169 0031 02       		.byte	2
 170 0032 05       		.byte	5
 171 0033 24       		.byte	36
 172 0034 06       		.byte	6
 173 0035 00       		.byte	0
 174 0036 01       		.byte	1
 175 0037 07       		.byte	7
 176 0038 05       		.byte	5
 177 0039 81       		.byte	-127
 178 003a 03       		.byte	3
 179 003b 08       		.byte	8
 180 003c 00       		.byte	0
 181 003d 0A       		.byte	10
 182 003e 09       		.byte	9
 183 003f 04       		.byte	4
 184 0040 01       		.byte	1
 185 0041 00       		.byte	0
 186 0042 02       		.byte	2
 187 0043 0A       		.byte	10
 188 0044 00       		.byte	0
 189 0045 00       		.byte	0
 190 0046 00       		.byte	0
 191 0047 07       		.byte	7
 192 0048 05       		.byte	5
 193 0049 05       		.byte	5
 194 004a 02       		.byte	2
 195 004b 40       		.byte	64
 196 004c 00       		.byte	0
 197 004d 00       		.byte	0
 198 004e 07       		.byte	7
 199 004f 05       		.byte	5
 200 0050 82       		.byte	-126
 201 0051 02       		.byte	2
 202 0052 40       		.byte	64
 203 0053 00       		.byte	0
 204 0054 00       		.byte	0
 205 0055 04       		.byte	4
 206 0056 03       		.byte	3
 207 0057 09       		.byte	9
 208 0058 04       		.byte	4
 209 0059 0E       		.byte	14
 210 005a 03       		.byte	3
 211 005b 43       		.byte	67
 212 005c 00       		.byte	0
 213 005d 4E       		.byte	78
 214 005e 00       		.byte	0
 215 005f 43       		.byte	67
 216 0060 00       		.byte	0
 217 0061 55       		.byte	85
 218 0062 00       		.byte	0
 219 0063 53       		.byte	83
 220 0064 00       		.byte	0
 221 0065 42       		.byte	66
 222 0066 00       		.byte	0
 223 0067 14       		.byte	20
 224 0068 03       		.byte	3
 225 0069 43       		.byte	67
 226 006a 00       		.byte	0
 227 006b 4E       		.byte	78
 228 006c 00       		.byte	0
 229 006d 43       		.byte	67
 230 006e 00       		.byte	0
 231 006f 53       		.byte	83
 232 0070 00       		.byte	0
 233 0071 65       		.byte	101
 234 0072 00       		.byte	0
 235 0073 72       		.byte	114
 236 0074 00       		.byte	0
 237 0075 69       		.byte	105
 238 0076 00       		.byte	0
 239 0077 61       		.byte	97
 240 0078 00       		.byte	0
 241 0079 6C       		.byte	108
 242 007a 00       		.byte	0
 243 007b 12       		.byte	18
 244 007c 03       		.byte	3
 245 007d 43       		.byte	67
 246 007e 00       		.byte	0
 247 007f 4E       		.byte	78
 248 0080 00       		.byte	0
 249 0081 43       		.byte	67
 250 0082 00       		.byte	0
 251 0083 30       		.byte	48
 252 0084 00       		.byte	0
 253 0085 43       		.byte	67
 254 0086 00       		.byte	0
 255 0087 30       		.byte	48
 256 0088 00       		.byte	0
 257 0089 44       		.byte	68
 258 008a 00       		.byte	0
 259 008b 45       		.byte	69
 260 008c 00       		.byte	0
 261 008d 00       		.byte	0
 262 008e 0000     		.section	.text.BulkOut,"ax",%progbits
 263              		.align	2
 264              		.thumb
 265              		.thumb_func
 267              	BulkOut:
 268              	.LFB29:
 269              		.file 2 "..//utils/usbSerial/usbSerial.c"
   1:..//utils/usbSerial/usbSerial.c **** //#define POLLED_USBSERIAL True
   2:..//utils/usbSerial/usbSerial.c **** 
   3:..//utils/usbSerial/usbSerial.c **** 
   4:..//utils/usbSerial/usbSerial.c **** /*
   5:..//utils/usbSerial/usbSerial.c **** 	LPCUSB, an USB device driver for LPC microcontrollers	
   6:..//utils/usbSerial/usbSerial.c **** 	Copyright (C) 2006 Bertrik Sikken (bertrik@sikken.nl)
   7:..//utils/usbSerial/usbSerial.c **** 
   8:..//utils/usbSerial/usbSerial.c **** 	Redistribution and use in source and binary forms, with or without
   9:..//utils/usbSerial/usbSerial.c **** 	modification, are permitted provided that the following conditions are met:
  10:..//utils/usbSerial/usbSerial.c **** 
  11:..//utils/usbSerial/usbSerial.c **** 	1. Redistributions of source code must retain the above copyright
  12:..//utils/usbSerial/usbSerial.c **** 	   notice, this list of conditions and the following disclaimer.
  13:..//utils/usbSerial/usbSerial.c **** 	2. Redistributions in binary form must reproduce the above copyright
  14:..//utils/usbSerial/usbSerial.c **** 	   notice, this list of conditions and the following disclaimer in the
  15:..//utils/usbSerial/usbSerial.c **** 	   documentation and/or other materials provided with the distribution.
  16:..//utils/usbSerial/usbSerial.c **** 	3. The name of the author may not be used to endorse or promote products
  17:..//utils/usbSerial/usbSerial.c **** 	   derived from this software without specific prior written permission.
  18:..//utils/usbSerial/usbSerial.c **** 
  19:..//utils/usbSerial/usbSerial.c **** 	THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  20:..//utils/usbSerial/usbSerial.c **** 	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  21:..//utils/usbSerial/usbSerial.c **** 	OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  22:..//utils/usbSerial/usbSerial.c **** 	IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, 
  23:..//utils/usbSerial/usbSerial.c **** 	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  24:..//utils/usbSerial/usbSerial.c **** 	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  25:..//utils/usbSerial/usbSerial.c **** 	DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  26:..//utils/usbSerial/usbSerial.c **** 	THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  27:..//utils/usbSerial/usbSerial.c **** 	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  28:..//utils/usbSerial/usbSerial.c **** 	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  29:..//utils/usbSerial/usbSerial.c **** */
  30:..//utils/usbSerial/usbSerial.c **** 
  31:..//utils/usbSerial/usbSerial.c **** /*
  32:..//utils/usbSerial/usbSerial.c **** 	Minimal implementation of a USB serial port, using the CDC class.
  33:..//utils/usbSerial/usbSerial.c **** 	This example application simply echoes everything it receives right back
  34:..//utils/usbSerial/usbSerial.c **** 	to the host.
  35:..//utils/usbSerial/usbSerial.c **** 
  36:..//utils/usbSerial/usbSerial.c **** 	Windows:
  37:..//utils/usbSerial/usbSerial.c **** 	Extract the usbser.sys file from .cab file in C:\WINDOWS\Driver Cache\i386
  38:..//utils/usbSerial/usbSerial.c **** 	and store it somewhere (C:\temp is a good place) along with the usbser.inf
  39:..//utils/usbSerial/usbSerial.c **** 	file. Then plug in the LPC176x and direct windows to the usbser driver.
  40:..//utils/usbSerial/usbSerial.c **** 	Windows then creates an extra COMx port that you can open in a terminal
  41:..//utils/usbSerial/usbSerial.c **** 	program, like hyperterminal.
  42:..//utils/usbSerial/usbSerial.c **** 
  43:..//utils/usbSerial/usbSerial.c **** 	Linux:
  44:..//utils/usbSerial/usbSerial.c **** 	The device should be recognised automatically by the cdc_acm driver,
  45:..//utils/usbSerial/usbSerial.c **** 	which creates a /dev/ttyACMx device file that acts just like a regular
  46:..//utils/usbSerial/usbSerial.c **** 	serial port.
  47:..//utils/usbSerial/usbSerial.c **** 
  48:..//utils/usbSerial/usbSerial.c **** */
  49:..//utils/usbSerial/usbSerial.c **** 
  50:..//utils/usbSerial/usbSerial.c **** /* Modified by Sagar G V, Feb 2011
  51:..//utils/usbSerial/usbSerial.c **** Used the USB CDC example to create a library. Added the following functions
  52:..//utils/usbSerial/usbSerial.c **** 
  53:..//utils/usbSerial/usbSerial.c **** void VCOM_puts(const char* str); //writes a null terminated string. 
  54:..//utils/usbSerial/usbSerial.c **** void VCOM_putc(char c); // writes a character.
  55:..//utils/usbSerial/usbSerial.c **** void VCOM_putHex(uint8_t hex); // writes 0x.. hex value on the terminal.
  56:..//utils/usbSerial/usbSerial.c **** char VCOM_getc(); // returns character entered in the terminal. blocking function
  57:..//utils/usbSerial/usbSerial.c **** void VCOM_gets(char* str); // returns a string. '\r' or '\n' will terminate character collection.
  58:..//utils/usbSerial/usbSerial.c **** char VCOM_getc_echo(); // returns character entered and echoes the same back.
  59:..//utils/usbSerial/usbSerial.c **** void VCOM_gets_echo(char *str); // gets string terminated in '\r' or '\n' and echoes back the same.
  60:..//utils/usbSerial/usbSerial.c **** 
  61:..//utils/usbSerial/usbSerial.c **** */
  62:..//utils/usbSerial/usbSerial.c **** 
  63:..//utils/usbSerial/usbSerial.c **** 
  64:..//utils/usbSerial/usbSerial.c **** #include "usbSerial.h"
  65:..//utils/usbSerial/usbSerial.c **** #include "modbus.h"
  66:..//utils/usbSerial/usbSerial.c **** #include "uart.h"
  67:..//utils/usbSerial/usbSerial.c **** 
  68:..//utils/usbSerial/usbSerial.c **** uint8_t	 buff_rxUSB[USB_SIZE];
  69:..//utils/usbSerial/usbSerial.c **** ring_t	 ring_rxUSB;
  70:..//utils/usbSerial/usbSerial.c **** #ifdef MOD_USB
  71:..//utils/usbSerial/usbSerial.c **** modbus_t modbusUSB;
  72:..//utils/usbSerial/usbSerial.c **** #endif
  73:..//utils/usbSerial/usbSerial.c **** 
  74:..//utils/usbSerial/usbSerial.c **** // data structure for GET_LINE_CODING / SET_LINE_CODING class requests
  75:..//utils/usbSerial/usbSerial.c **** typedef struct {
  76:..//utils/usbSerial/usbSerial.c **** 	U32		dwDTERate;
  77:..//utils/usbSerial/usbSerial.c **** 	uint8_t		bCharFormat;
  78:..//utils/usbSerial/usbSerial.c **** 	uint8_t		bParityType;
  79:..//utils/usbSerial/usbSerial.c **** 	uint8_t		bDataBits;
  80:..//utils/usbSerial/usbSerial.c **** } TLineCoding;
  81:..//utils/usbSerial/usbSerial.c **** 
  82:..//utils/usbSerial/usbSerial.c **** static TLineCoding LineCoding = {115200, 0, 0, 8};
  83:..//utils/usbSerial/usbSerial.c **** static uint8_t abBulkBuf[64];
  84:..//utils/usbSerial/usbSerial.c **** static uint8_t abClassReqData[8];
  85:..//utils/usbSerial/usbSerial.c **** 
  86:..//utils/usbSerial/usbSerial.c **** static uint8_t txdata[VCOM_FIFO_SIZE];
  87:..//utils/usbSerial/usbSerial.c **** static uint8_t rxdata[VCOM_FIFO_SIZE];
  88:..//utils/usbSerial/usbSerial.c **** 
  89:..//utils/usbSerial/usbSerial.c **** static fifo_t txfifo;
  90:..//utils/usbSerial/usbSerial.c **** static fifo_t rxfifo;
  91:..//utils/usbSerial/usbSerial.c **** 
  92:..//utils/usbSerial/usbSerial.c **** // forward declaration of interrupt handler
  93:..//utils/usbSerial/usbSerial.c **** void USBIntHandler(void);
  94:..//utils/usbSerial/usbSerial.c **** 
  95:..//utils/usbSerial/usbSerial.c **** static const uint8_t abDescriptors[] = {
  96:..//utils/usbSerial/usbSerial.c **** 
  97:..//utils/usbSerial/usbSerial.c **** // device descriptor
  98:..//utils/usbSerial/usbSerial.c **** 	0x12,
  99:..//utils/usbSerial/usbSerial.c **** 	DESC_DEVICE,
 100:..//utils/usbSerial/usbSerial.c **** 	LE_WORD(0x0101),			// bcdUSB
 101:..//utils/usbSerial/usbSerial.c **** 	0x02,						// bDeviceClass
 102:..//utils/usbSerial/usbSerial.c **** 	0x00,						// bDeviceSubClass
 103:..//utils/usbSerial/usbSerial.c **** 	0x00,						// bDeviceProtocol
 104:..//utils/usbSerial/usbSerial.c **** 	MAX_PACKET_SIZE0,			// bMaxPacketSize
 105:..//utils/usbSerial/usbSerial.c **** 	LE_WORD(0xFFFF),			// idVendor
 106:..//utils/usbSerial/usbSerial.c **** 	LE_WORD(0x0006),			// idProduct
 107:..//utils/usbSerial/usbSerial.c **** 	LE_WORD(0x0100),			// bcdDevice
 108:..//utils/usbSerial/usbSerial.c **** 	0x01,						// iManufacturer
 109:..//utils/usbSerial/usbSerial.c **** 	0x02,						// iProduct
 110:..//utils/usbSerial/usbSerial.c **** 	0x03,						// iSerialNumber
 111:..//utils/usbSerial/usbSerial.c **** 	0x01,						// bNumConfigurations
 112:..//utils/usbSerial/usbSerial.c **** 
 113:..//utils/usbSerial/usbSerial.c **** // configuration descriptor
 114:..//utils/usbSerial/usbSerial.c **** 	0x09,
 115:..//utils/usbSerial/usbSerial.c **** 	DESC_CONFIGURATION,
 116:..//utils/usbSerial/usbSerial.c **** 	LE_WORD(67),				// wTotalLength
 117:..//utils/usbSerial/usbSerial.c **** 	0x02,						// bNumInterfaces
 118:..//utils/usbSerial/usbSerial.c **** 	0x01,						// bConfigurationValue
 119:..//utils/usbSerial/usbSerial.c **** 	0x00,						// iConfiguration
 120:..//utils/usbSerial/usbSerial.c **** 	0xC0,						// bmAttributes
 121:..//utils/usbSerial/usbSerial.c **** 	0x32,						// bMaxPower
 122:..//utils/usbSerial/usbSerial.c **** // control class interface
 123:..//utils/usbSerial/usbSerial.c **** 	0x09,
 124:..//utils/usbSerial/usbSerial.c **** 	DESC_INTERFACE,
 125:..//utils/usbSerial/usbSerial.c **** 	0x00,						// bInterfaceNumber
 126:..//utils/usbSerial/usbSerial.c **** 	0x00,						// bAlternateSetting
 127:..//utils/usbSerial/usbSerial.c **** 	0x01,						// bNumEndPoints
 128:..//utils/usbSerial/usbSerial.c **** 	0x02,						// bInterfaceClass
 129:..//utils/usbSerial/usbSerial.c **** 	0x02,						// bInterfaceSubClass
 130:..//utils/usbSerial/usbSerial.c **** 	0x01,						// bInterfaceProtocol, linux requires value of 1 for the cdc_acm module
 131:..//utils/usbSerial/usbSerial.c **** 	0x00,						// iInterface
 132:..//utils/usbSerial/usbSerial.c **** // header functional descriptor
 133:..//utils/usbSerial/usbSerial.c **** 	0x05,
 134:..//utils/usbSerial/usbSerial.c **** 	CS_INTERFACE,
 135:..//utils/usbSerial/usbSerial.c **** 	0x00,
 136:..//utils/usbSerial/usbSerial.c **** 	LE_WORD(0x0110),
 137:..//utils/usbSerial/usbSerial.c **** // call management functional descriptor
 138:..//utils/usbSerial/usbSerial.c **** 	0x05,
 139:..//utils/usbSerial/usbSerial.c **** 	CS_INTERFACE,
 140:..//utils/usbSerial/usbSerial.c **** 	0x01,
 141:..//utils/usbSerial/usbSerial.c **** 	0x01,						// bmCapabilities = device handles call management
 142:..//utils/usbSerial/usbSerial.c **** 	0x01,						// bDataInterface
 143:..//utils/usbSerial/usbSerial.c **** // ACM functional descriptor
 144:..//utils/usbSerial/usbSerial.c **** 	0x04,
 145:..//utils/usbSerial/usbSerial.c **** 	CS_INTERFACE,
 146:..//utils/usbSerial/usbSerial.c **** 	0x02,
 147:..//utils/usbSerial/usbSerial.c **** 	0x02,						// bmCapabilities
 148:..//utils/usbSerial/usbSerial.c **** // union functional descriptor
 149:..//utils/usbSerial/usbSerial.c **** 	0x05,
 150:..//utils/usbSerial/usbSerial.c **** 	CS_INTERFACE,
 151:..//utils/usbSerial/usbSerial.c **** 	0x06,
 152:..//utils/usbSerial/usbSerial.c **** 	0x00,						// bMasterInterface
 153:..//utils/usbSerial/usbSerial.c **** 	0x01,						// bSlaveInterface0
 154:..//utils/usbSerial/usbSerial.c **** // notification EP
 155:..//utils/usbSerial/usbSerial.c **** 	0x07,
 156:..//utils/usbSerial/usbSerial.c **** 	DESC_ENDPOINT,
 157:..//utils/usbSerial/usbSerial.c **** 	INT_IN_EP,					// bEndpointAddress
 158:..//utils/usbSerial/usbSerial.c **** 	0x03,						// bmAttributes = intr
 159:..//utils/usbSerial/usbSerial.c **** 	LE_WORD(8),					// wMaxPacketSize
 160:..//utils/usbSerial/usbSerial.c **** 	0x0A,						// bInterval
 161:..//utils/usbSerial/usbSerial.c **** // data class interface descriptor
 162:..//utils/usbSerial/usbSerial.c **** 	0x09,
 163:..//utils/usbSerial/usbSerial.c **** 	DESC_INTERFACE,
 164:..//utils/usbSerial/usbSerial.c **** 	0x01,						// bInterfaceNumber
 165:..//utils/usbSerial/usbSerial.c **** 	0x00,						// bAlternateSetting
 166:..//utils/usbSerial/usbSerial.c **** 	0x02,						// bNumEndPoints
 167:..//utils/usbSerial/usbSerial.c **** 	0x0A,						// bInterfaceClass = data
 168:..//utils/usbSerial/usbSerial.c **** 	0x00,						// bInterfaceSubClass
 169:..//utils/usbSerial/usbSerial.c **** 	0x00,						// bInterfaceProtocol
 170:..//utils/usbSerial/usbSerial.c **** 	0x00,						// iInterface
 171:..//utils/usbSerial/usbSerial.c **** // data EP OUT
 172:..//utils/usbSerial/usbSerial.c **** 	0x07,
 173:..//utils/usbSerial/usbSerial.c **** 	DESC_ENDPOINT,
 174:..//utils/usbSerial/usbSerial.c **** 	BULK_OUT_EP,				// bEndpointAddress
 175:..//utils/usbSerial/usbSerial.c **** 	0x02,						// bmAttributes = bulk
 176:..//utils/usbSerial/usbSerial.c **** 	LE_WORD(MAX_PACKET_SIZE),	// wMaxPacketSize
 177:..//utils/usbSerial/usbSerial.c **** 	0x00,						// bInterval
 178:..//utils/usbSerial/usbSerial.c **** // data EP in
 179:..//utils/usbSerial/usbSerial.c **** 	0x07,
 180:..//utils/usbSerial/usbSerial.c **** 	DESC_ENDPOINT,
 181:..//utils/usbSerial/usbSerial.c **** 	BULK_IN_EP,					// bEndpointAddress
 182:..//utils/usbSerial/usbSerial.c **** 	0x02,						// bmAttributes = bulk
 183:..//utils/usbSerial/usbSerial.c **** 	LE_WORD(MAX_PACKET_SIZE),	// wMaxPacketSize
 184:..//utils/usbSerial/usbSerial.c **** 	0x00,						// bInterval
 185:..//utils/usbSerial/usbSerial.c **** 	
 186:..//utils/usbSerial/usbSerial.c **** 	// string descriptors
 187:..//utils/usbSerial/usbSerial.c **** 	0x04,
 188:..//utils/usbSerial/usbSerial.c **** 	DESC_STRING,
 189:..//utils/usbSerial/usbSerial.c **** 	LE_WORD(0x0409),
 190:..//utils/usbSerial/usbSerial.c **** 
 191:..//utils/usbSerial/usbSerial.c **** 	0x0E,
 192:..//utils/usbSerial/usbSerial.c **** 	DESC_STRING,
 193:..//utils/usbSerial/usbSerial.c **** 	'C', 0, 'N', 0, 'C', 0, 'U', 0, 'S', 0, 'B', 0,
 194:..//utils/usbSerial/usbSerial.c **** 
 195:..//utils/usbSerial/usbSerial.c **** 	0x14,
 196:..//utils/usbSerial/usbSerial.c **** 	DESC_STRING,
 197:..//utils/usbSerial/usbSerial.c **** 	'C', 0, 'N', 0, 'C', 0, 'S', 0, 'e', 0, 'r', 0, 'i', 0, 'a', 0, 'l', 0,
 198:..//utils/usbSerial/usbSerial.c **** 
 199:..//utils/usbSerial/usbSerial.c **** 	0x12,
 200:..//utils/usbSerial/usbSerial.c **** 	DESC_STRING,
 201:..//utils/usbSerial/usbSerial.c **** 	'C', 0, 'N', 0, 'C', 0, '0', 0, 'C', 0, '0', 0, 'D', 0, 'E', 0,
 202:..//utils/usbSerial/usbSerial.c **** 
 203:..//utils/usbSerial/usbSerial.c **** // terminating zero
 204:..//utils/usbSerial/usbSerial.c **** 	0
 205:..//utils/usbSerial/usbSerial.c **** };
 206:..//utils/usbSerial/usbSerial.c **** 
 207:..//utils/usbSerial/usbSerial.c **** 
 208:..//utils/usbSerial/usbSerial.c **** /**
 209:..//utils/usbSerial/usbSerial.c **** 	Local function to handle incoming bulk data
 210:..//utils/usbSerial/usbSerial.c **** 		
 211:..//utils/usbSerial/usbSerial.c **** 	@param [in] bEP
 212:..//utils/usbSerial/usbSerial.c **** 	@param [in] bEPStatus
 213:..//utils/usbSerial/usbSerial.c ****  */
 214:..//utils/usbSerial/usbSerial.c **** static void BulkOut(uint8_t bEP, uint8_t bEPStatus)
 215:..//utils/usbSerial/usbSerial.c **** {
 270              		.loc 2 215 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 16
 273              		@ frame_needed = 1, uses_anonymous_args = 0
 274 0000 80B5     		push	{r7, lr}
 275              	.LCFI3:
 276              		.cfi_def_cfa_offset 8
 277 0002 84B0     		sub	sp, sp, #16
 278              	.LCFI4:
 279              		.cfi_def_cfa_offset 24
 280 0004 00AF     		add	r7, sp, #0
 281              		.cfi_offset 14, -4
 282              		.cfi_offset 7, -8
 283              	.LCFI5:
 284              		.cfi_def_cfa_register 7
 285 0006 0246     		mov	r2, r0
 286 0008 0B46     		mov	r3, r1
 287 000a FA71     		strb	r2, [r7, #7]
 288 000c BB71     		strb	r3, [r7, #6]
 216:..//utils/usbSerial/usbSerial.c **** 	int i, iLen;
 217:..//utils/usbSerial/usbSerial.c **** 	bEPStatus = bEPStatus;
 218:..//utils/usbSerial/usbSerial.c **** 	if (fifo_free(&rxfifo) < MAX_PACKET_SIZE) {
 289              		.loc 2 218 0
 290 000e 40F20000 		movw	r0, #:lower16:rxfifo
 291 0012 C0F20000 		movt	r0, #:upper16:rxfifo
 292 0016 40F20003 		movw	r3, #:lower16:fifo_free
 293 001a C0F20003 		movt	r3, #:upper16:fifo_free
 294 001e 9847     		blx	r3
 295 0020 0346     		mov	r3, r0
 296 0022 3F2B     		cmp	r3, #63
 297 0024 2BDD     		ble	.L9
 298              	.L4:
 219:..//utils/usbSerial/usbSerial.c **** 		// may not fit into fifo
 220:..//utils/usbSerial/usbSerial.c **** 		return;
 221:..//utils/usbSerial/usbSerial.c **** 	}
 222:..//utils/usbSerial/usbSerial.c **** 	// get data from USB into intermediate buffer
 223:..//utils/usbSerial/usbSerial.c **** 	iLen = USBHwEPRead(bEP, abBulkBuf, sizeof(abBulkBuf));
 299              		.loc 2 223 0
 300 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 301 0028 1846     		mov	r0, r3
 302 002a 40F20001 		movw	r1, #:lower16:abBulkBuf
 303 002e C0F20001 		movt	r1, #:upper16:abBulkBuf
 304 0032 4FF04002 		mov	r2, #64
 305 0036 40F20003 		movw	r3, #:lower16:USBHwEPRead
 306 003a C0F20003 		movt	r3, #:upper16:USBHwEPRead
 307 003e 9847     		blx	r3
 308 0040 0346     		mov	r3, r0
 309 0042 FB60     		str	r3, [r7, #12]
 224:..//utils/usbSerial/usbSerial.c **** 	for (i = 0; i < iLen; i++) {
 310              		.loc 2 224 0
 311 0044 4FF00003 		mov	r3, #0
 312 0048 BB60     		str	r3, [r7, #8]
 313 004a 13E0     		b	.L6
 314              	.L7:
 225:..//utils/usbSerial/usbSerial.c **** 		// put into FIFO
 226:..//utils/usbSerial/usbSerial.c **** 		// if (!fifo_put(&rxfifo, abBulkBuf[i])) {
 227:..//utils/usbSerial/usbSerial.c **** 		// 	// overflow... :(
 228:..//utils/usbSerial/usbSerial.c **** 		// 	ASSERT(False);
 229:..//utils/usbSerial/usbSerial.c **** 		// 	break;
 230:..//utils/usbSerial/usbSerial.c **** 		// }
 231:..//utils/usbSerial/usbSerial.c **** 		
 232:..//utils/usbSerial/usbSerial.c **** 		#ifdef MOD_USB
 233:..//utils/usbSerial/usbSerial.c **** 		checkModbusData(&modbusUSB, abBulkBuf[i]);
 315              		.loc 2 233 0
 316 004c BA68     		ldr	r2, [r7, #8]
 317 004e 40F20003 		movw	r3, #:lower16:abBulkBuf
 318 0052 C0F20003 		movt	r3, #:upper16:abBulkBuf
 319 0056 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 320 0058 40F20000 		movw	r0, #:lower16:modbusUSB
 321 005c C0F20000 		movt	r0, #:upper16:modbusUSB
 322 0060 1946     		mov	r1, r3
 323 0062 40F20003 		movw	r3, #:lower16:checkModbusData
 324 0066 C0F20003 		movt	r3, #:upper16:checkModbusData
 325 006a 9847     		blx	r3
 326              		.loc 2 224 0
 327 006c BB68     		ldr	r3, [r7, #8]
 328 006e 03F10103 		add	r3, r3, #1
 329 0072 BB60     		str	r3, [r7, #8]
 330              	.L6:
 331 0074 BA68     		ldr	r2, [r7, #8]
 332 0076 FB68     		ldr	r3, [r7, #12]
 333 0078 9A42     		cmp	r2, r3
 334 007a E7DB     		blt	.L7
 335 007c 00E0     		b	.L8
 336              	.L9:
 337              		.loc 2 220 0
 338 007e 00BF     		nop
 339              	.L8:
 234:..//utils/usbSerial/usbSerial.c **** 		#else
 235:..//utils/usbSerial/usbSerial.c **** 		ring_putc(&ring_rxUSB, abBulkBuf[i]);
 236:..//utils/usbSerial/usbSerial.c **** 		#endif
 237:..//utils/usbSerial/usbSerial.c **** 	}
 238:..//utils/usbSerial/usbSerial.c **** }
 340              		.loc 2 238 0
 341 0080 07F11007 		add	r7, r7, #16
 342 0084 BD46     		mov	sp, r7
 343 0086 80BD     		pop	{r7, pc}
 344              		.cfi_endproc
 345              	.LFE29:
 347              		.section	.text.BulkIn,"ax",%progbits
 348              		.align	2
 349              		.thumb
 350              		.thumb_func
 352              	BulkIn:
 353              	.LFB30:
 239:..//utils/usbSerial/usbSerial.c **** 
 240:..//utils/usbSerial/usbSerial.c **** 
 241:..//utils/usbSerial/usbSerial.c **** /**
 242:..//utils/usbSerial/usbSerial.c **** 	Local function to handle outgoing bulk data
 243:..//utils/usbSerial/usbSerial.c **** 		
 244:..//utils/usbSerial/usbSerial.c **** 	@param [in] bEP
 245:..//utils/usbSerial/usbSerial.c **** 	@param [in] bEPStatus
 246:..//utils/usbSerial/usbSerial.c ****  */
 247:..//utils/usbSerial/usbSerial.c **** static void BulkIn(uint8_t bEP, uint8_t bEPStatus)
 248:..//utils/usbSerial/usbSerial.c **** {
 354              		.loc 2 248 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 16
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358 0000 80B5     		push	{r7, lr}
 359              	.LCFI6:
 360              		.cfi_def_cfa_offset 8
 361 0002 84B0     		sub	sp, sp, #16
 362              	.LCFI7:
 363              		.cfi_def_cfa_offset 24
 364 0004 00AF     		add	r7, sp, #0
 365              		.cfi_offset 14, -4
 366              		.cfi_offset 7, -8
 367              	.LCFI8:
 368              		.cfi_def_cfa_register 7
 369 0006 0246     		mov	r2, r0
 370 0008 0B46     		mov	r3, r1
 371 000a FA71     		strb	r2, [r7, #7]
 372 000c BB71     		strb	r3, [r7, #6]
 249:..//utils/usbSerial/usbSerial.c **** 	int i, iLen;
 250:..//utils/usbSerial/usbSerial.c **** 	bEPStatus = bEPStatus;
 251:..//utils/usbSerial/usbSerial.c **** 	if (fifo_avail(&txfifo) == 0) {
 373              		.loc 2 251 0
 374 000e 40F20000 		movw	r0, #:lower16:txfifo
 375 0012 C0F20000 		movt	r0, #:upper16:txfifo
 376 0016 40F20003 		movw	r3, #:lower16:fifo_avail
 377 001a C0F20003 		movt	r3, #:upper16:fifo_avail
 378 001e 9847     		blx	r3
 379 0020 0346     		mov	r3, r0
 380 0022 002B     		cmp	r3, #0
 381 0024 07D1     		bne	.L11
 252:..//utils/usbSerial/usbSerial.c **** 		// no more data, disable further NAK interrupts until next USB frame
 253:..//utils/usbSerial/usbSerial.c **** 		USBHwNakIntEnable(0);
 382              		.loc 2 253 0
 383 0026 4FF00000 		mov	r0, #0
 384 002a 40F20003 		movw	r3, #:lower16:USBHwNakIntEnable
 385 002e C0F20003 		movt	r3, #:upper16:USBHwNakIntEnable
 386 0032 9847     		blx	r3
 254:..//utils/usbSerial/usbSerial.c **** 		return;
 387              		.loc 2 254 0
 388 0034 30E0     		b	.L17
 389              	.L11:
 255:..//utils/usbSerial/usbSerial.c **** 	}
 256:..//utils/usbSerial/usbSerial.c **** 
 257:..//utils/usbSerial/usbSerial.c **** 	// get bytes from transmit FIFO into intermediate buffer
 258:..//utils/usbSerial/usbSerial.c **** 	for (i = 0; i < MAX_PACKET_SIZE; i++) {
 390              		.loc 2 258 0
 391 0036 4FF00003 		mov	r3, #0
 392 003a BB60     		str	r3, [r7, #8]
 393 003c 16E0     		b	.L13
 394              	.L16:
 259:..//utils/usbSerial/usbSerial.c **** 		if (!fifo_get(&txfifo, &abBulkBuf[i])) {
 395              		.loc 2 259 0
 396 003e BA68     		ldr	r2, [r7, #8]
 397 0040 40F20003 		movw	r3, #:lower16:abBulkBuf
 398 0044 C0F20003 		movt	r3, #:upper16:abBulkBuf
 399 0048 1344     		add	r3, r2, r3
 400 004a 40F20000 		movw	r0, #:lower16:txfifo
 401 004e C0F20000 		movt	r0, #:upper16:txfifo
 402 0052 1946     		mov	r1, r3
 403 0054 40F20003 		movw	r3, #:lower16:fifo_get
 404 0058 C0F20003 		movt	r3, #:upper16:fifo_get
 405 005c 9847     		blx	r3
 406 005e 0346     		mov	r3, r0
 407 0060 002B     		cmp	r3, #0
 408 0062 07D0     		beq	.L18
 409              	.L14:
 410              		.loc 2 258 0
 411 0064 BB68     		ldr	r3, [r7, #8]
 412 0066 03F10103 		add	r3, r3, #1
 413 006a BB60     		str	r3, [r7, #8]
 414              	.L13:
 415 006c BB68     		ldr	r3, [r7, #8]
 416 006e 3F2B     		cmp	r3, #63
 417 0070 E5DD     		ble	.L16
 418 0072 00E0     		b	.L15
 419              	.L18:
 260:..//utils/usbSerial/usbSerial.c **** 			break;
 420              		.loc 2 260 0
 421 0074 00BF     		nop
 422              	.L15:
 261:..//utils/usbSerial/usbSerial.c **** 		}
 262:..//utils/usbSerial/usbSerial.c **** 	}
 263:..//utils/usbSerial/usbSerial.c **** 	iLen = i;
 423              		.loc 2 263 0
 424 0076 BB68     		ldr	r3, [r7, #8]
 425 0078 FB60     		str	r3, [r7, #12]
 264:..//utils/usbSerial/usbSerial.c **** 	
 265:..//utils/usbSerial/usbSerial.c **** 	// send over USB
 266:..//utils/usbSerial/usbSerial.c **** 	if (iLen > 0) {
 426              		.loc 2 266 0
 427 007a FB68     		ldr	r3, [r7, #12]
 428 007c 002B     		cmp	r3, #0
 429 007e 0BDD     		ble	.L17
 267:..//utils/usbSerial/usbSerial.c **** 		USBHwEPWrite(bEP, abBulkBuf, iLen);
 430              		.loc 2 267 0
 431 0080 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 432 0082 1846     		mov	r0, r3
 433 0084 40F20001 		movw	r1, #:lower16:abBulkBuf
 434 0088 C0F20001 		movt	r1, #:upper16:abBulkBuf
 435 008c FA68     		ldr	r2, [r7, #12]
 436 008e 40F20003 		movw	r3, #:lower16:USBHwEPWrite
 437 0092 C0F20003 		movt	r3, #:upper16:USBHwEPWrite
 438 0096 9847     		blx	r3
 439              	.L17:
 268:..//utils/usbSerial/usbSerial.c **** 	}
 269:..//utils/usbSerial/usbSerial.c **** }
 440              		.loc 2 269 0
 441 0098 07F11007 		add	r7, r7, #16
 442 009c BD46     		mov	sp, r7
 443 009e 80BD     		pop	{r7, pc}
 444              		.cfi_endproc
 445              	.LFE30:
 447              		.section	.text.HandleClassRequest,"ax",%progbits
 448              		.align	2
 449              		.thumb
 450              		.thumb_func
 452              	HandleClassRequest:
 453              	.LFB31:
 270:..//utils/usbSerial/usbSerial.c **** 
 271:..//utils/usbSerial/usbSerial.c **** 
 272:..//utils/usbSerial/usbSerial.c **** /**
 273:..//utils/usbSerial/usbSerial.c **** 	Local function to handle the USB-CDC class requests
 274:..//utils/usbSerial/usbSerial.c **** 		
 275:..//utils/usbSerial/usbSerial.c **** 	@param [in] pSetup
 276:..//utils/usbSerial/usbSerial.c **** 	@param [out] piLen
 277:..//utils/usbSerial/usbSerial.c **** 	@param [out] ppbData
 278:..//utils/usbSerial/usbSerial.c ****  */
 279:..//utils/usbSerial/usbSerial.c **** static BOOL HandleClassRequest(TSetupPacket *pSetup, int *piLen, uint8_t **ppbData)
 280:..//utils/usbSerial/usbSerial.c **** {
 454              		.loc 2 280 0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 24
 457              		@ frame_needed = 1, uses_anonymous_args = 0
 458              		@ link register save eliminated.
 459 0000 80B4     		push	{r7}
 460              	.LCFI9:
 461              		.cfi_def_cfa_offset 4
 462 0002 87B0     		sub	sp, sp, #28
 463              	.LCFI10:
 464              		.cfi_def_cfa_offset 32
 465 0004 00AF     		add	r7, sp, #0
 466              		.cfi_offset 7, -4
 467              	.LCFI11:
 468              		.cfi_def_cfa_register 7
 469 0006 F860     		str	r0, [r7, #12]
 470 0008 B960     		str	r1, [r7, #8]
 471 000a 7A60     		str	r2, [r7, #4]
 281:..//utils/usbSerial/usbSerial.c **** 	int i;
 282:..//utils/usbSerial/usbSerial.c **** 	switch (pSetup->bRequest) {
 472              		.loc 2 282 0
 473 000c FB68     		ldr	r3, [r7, #12]
 474 000e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 475 0010 212B     		cmp	r3, #33
 476 0012 1FD0     		beq	.L22
 477 0014 222B     		cmp	r3, #34
 478 0016 2BD0     		beq	.L30
 479 0018 202B     		cmp	r3, #32
 480 001a 26D1     		bne	.L29
 481              	.L21:
 283:..//utils/usbSerial/usbSerial.c **** 
 284:..//utils/usbSerial/usbSerial.c **** 	// set line coding
 285:..//utils/usbSerial/usbSerial.c **** 	case SET_LINE_CODING:
 286:..//utils/usbSerial/usbSerial.c **** 
 287:..//utils/usbSerial/usbSerial.c **** 		//memcpy((uint8_t *)&LineCoding, *ppbData, 7);
 288:..//utils/usbSerial/usbSerial.c **** 		*piLen = 7;
 482              		.loc 2 288 0
 483 001c BB68     		ldr	r3, [r7, #8]
 484 001e 4FF00702 		mov	r2, #7
 485 0022 1A60     		str	r2, [r3, #0]
 289:..//utils/usbSerial/usbSerial.c **** 		for(i=0;i<7;i++)
 486              		.loc 2 289 0
 487 0024 4FF00003 		mov	r3, #0
 488 0028 7B61     		str	r3, [r7, #20]
 489 002a 0FE0     		b	.L24
 490              	.L25:
 290:..//utils/usbSerial/usbSerial.c **** 			((uint8_t *)&LineCoding)[i] = (*ppbData)[i];
 491              		.loc 2 290 0
 492 002c 40F20003 		movw	r3, #:lower16:LineCoding
 493 0030 C0F20003 		movt	r3, #:upper16:LineCoding
 494 0034 7A69     		ldr	r2, [r7, #20]
 495 0036 1344     		add	r3, r3, r2
 496 0038 7A68     		ldr	r2, [r7, #4]
 497 003a 1168     		ldr	r1, [r2, #0]
 498 003c 7A69     		ldr	r2, [r7, #20]
 499 003e 0A44     		add	r2, r1, r2
 500 0040 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 501 0042 1A70     		strb	r2, [r3, #0]
 502              		.loc 2 289 0
 503 0044 7B69     		ldr	r3, [r7, #20]
 504 0046 03F10103 		add	r3, r3, #1
 505 004a 7B61     		str	r3, [r7, #20]
 506              	.L24:
 507 004c 7B69     		ldr	r3, [r7, #20]
 508 004e 062B     		cmp	r3, #6
 509 0050 ECDD     		ble	.L25
 291:..//utils/usbSerial/usbSerial.c **** 
 292:..//utils/usbSerial/usbSerial.c **** 		break;
 510              		.loc 2 292 0
 511 0052 0EE0     		b	.L26
 512              	.L22:
 293:..//utils/usbSerial/usbSerial.c **** 
 294:..//utils/usbSerial/usbSerial.c **** 	// get line coding
 295:..//utils/usbSerial/usbSerial.c **** 	case GET_LINE_CODING:
 296:..//utils/usbSerial/usbSerial.c **** 
 297:..//utils/usbSerial/usbSerial.c **** 		*ppbData = (uint8_t *)&LineCoding;
 513              		.loc 2 297 0
 514 0054 40F20003 		movw	r3, #:lower16:LineCoding
 515 0058 C0F20003 		movt	r3, #:upper16:LineCoding
 516 005c 7A68     		ldr	r2, [r7, #4]
 517 005e 1360     		str	r3, [r2, #0]
 298:..//utils/usbSerial/usbSerial.c **** 		*piLen = 7;
 518              		.loc 2 298 0
 519 0060 BB68     		ldr	r3, [r7, #8]
 520 0062 4FF00702 		mov	r2, #7
 521 0066 1A60     		str	r2, [r3, #0]
 299:..//utils/usbSerial/usbSerial.c **** 		break;
 522              		.loc 2 299 0
 523 0068 03E0     		b	.L26
 524              	.L29:
 300:..//utils/usbSerial/usbSerial.c **** 
 301:..//utils/usbSerial/usbSerial.c **** 	// set control line state
 302:..//utils/usbSerial/usbSerial.c **** 	case SET_CONTROL_LINE_STATE:
 303:..//utils/usbSerial/usbSerial.c **** 		// bit0 = DTR, bit = RTS
 304:..//utils/usbSerial/usbSerial.c **** 
 305:..//utils/usbSerial/usbSerial.c **** 		break;
 306:..//utils/usbSerial/usbSerial.c **** 
 307:..//utils/usbSerial/usbSerial.c **** 	default:
 308:..//utils/usbSerial/usbSerial.c **** 		return False;
 525              		.loc 2 308 0
 526 006a 4FF00003 		mov	r3, #0
 527 006e 02E0     		b	.L27
 528              	.L30:
 529              		.loc 2 305 0
 530 0070 00BF     		nop
 531              	.L26:
 309:..//utils/usbSerial/usbSerial.c **** 	}
 310:..//utils/usbSerial/usbSerial.c **** 	return True;
 532              		.loc 2 310 0
 533 0072 4FF00103 		mov	r3, #1
 534              	.L27:
 311:..//utils/usbSerial/usbSerial.c **** }
 535              		.loc 2 311 0
 536 0076 1846     		mov	r0, r3
 537 0078 07F11C07 		add	r7, r7, #28
 538 007c BD46     		mov	sp, r7
 539 007e 80BC     		pop	{r7}
 540 0080 7047     		bx	lr
 541              		.cfi_endproc
 542              	.LFE31:
 544 0082 00BF     		.section	.text.VCOM_init,"ax",%progbits
 545              		.align	2
 546              		.global	VCOM_init
 547              		.thumb
 548              		.thumb_func
 550              	VCOM_init:
 551              	.LFB32:
 312:..//utils/usbSerial/usbSerial.c **** 
 313:..//utils/usbSerial/usbSerial.c **** 
 314:..//utils/usbSerial/usbSerial.c **** /**
 315:..//utils/usbSerial/usbSerial.c **** 	Initialises the VCOM port.
 316:..//utils/usbSerial/usbSerial.c **** 	Call this function before using VCOM_puttchar or VCOM_getchar
 317:..//utils/usbSerial/usbSerial.c ****  */
 318:..//utils/usbSerial/usbSerial.c **** void VCOM_init(void)
 319:..//utils/usbSerial/usbSerial.c **** {
 552              		.loc 2 319 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 1, uses_anonymous_args = 0
 556 0000 80B5     		push	{r7, lr}
 557              	.LCFI12:
 558              		.cfi_def_cfa_offset 8
 559 0002 00AF     		add	r7, sp, #0
 560              		.cfi_offset 14, -4
 561              		.cfi_offset 7, -8
 562              	.LCFI13:
 563              		.cfi_def_cfa_register 7
 320:..//utils/usbSerial/usbSerial.c **** 	fifo_init(&txfifo, txdata);
 564              		.loc 2 320 0
 565 0004 40F20000 		movw	r0, #:lower16:txfifo
 566 0008 C0F20000 		movt	r0, #:upper16:txfifo
 567 000c 40F20001 		movw	r1, #:lower16:txdata
 568 0010 C0F20001 		movt	r1, #:upper16:txdata
 569 0014 40F20003 		movw	r3, #:lower16:fifo_init
 570 0018 C0F20003 		movt	r3, #:upper16:fifo_init
 571 001c 9847     		blx	r3
 321:..//utils/usbSerial/usbSerial.c **** 	fifo_init(&rxfifo, rxdata);
 572              		.loc 2 321 0
 573 001e 40F20000 		movw	r0, #:lower16:rxfifo
 574 0022 C0F20000 		movt	r0, #:upper16:rxfifo
 575 0026 40F20001 		movw	r1, #:lower16:rxdata
 576 002a C0F20001 		movt	r1, #:upper16:rxdata
 577 002e 40F20003 		movw	r3, #:lower16:fifo_init
 578 0032 C0F20003 		movt	r3, #:upper16:fifo_init
 579 0036 9847     		blx	r3
 322:..//utils/usbSerial/usbSerial.c **** }
 580              		.loc 2 322 0
 581 0038 80BD     		pop	{r7, pc}
 582              		.cfi_endproc
 583              	.LFE32:
 585 003a 00BF     		.section	.text.VCOM_TxBuff_init,"ax",%progbits
 586              		.align	2
 587              		.global	VCOM_TxBuff_init
 588              		.thumb
 589              		.thumb_func
 591              	VCOM_TxBuff_init:
 592              	.LFB33:
 323:..//utils/usbSerial/usbSerial.c **** 
 324:..//utils/usbSerial/usbSerial.c ****  void VCOM_TxBuff_init(void)
 325:..//utils/usbSerial/usbSerial.c **** {
 593              		.loc 2 325 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 0
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 0000 80B5     		push	{r7, lr}
 598              	.LCFI14:
 599              		.cfi_def_cfa_offset 8
 600 0002 00AF     		add	r7, sp, #0
 601              		.cfi_offset 14, -4
 602              		.cfi_offset 7, -8
 603              	.LCFI15:
 604              		.cfi_def_cfa_register 7
 326:..//utils/usbSerial/usbSerial.c **** 	fifo_init(&txfifo, txdata);
 605              		.loc 2 326 0
 606 0004 40F20000 		movw	r0, #:lower16:txfifo
 607 0008 C0F20000 		movt	r0, #:upper16:txfifo
 608 000c 40F20001 		movw	r1, #:lower16:txdata
 609 0010 C0F20001 		movt	r1, #:upper16:txdata
 610 0014 40F20003 		movw	r3, #:lower16:fifo_init
 611 0018 C0F20003 		movt	r3, #:upper16:fifo_init
 612 001c 9847     		blx	r3
 327:..//utils/usbSerial/usbSerial.c **** }
 613              		.loc 2 327 0
 614 001e 80BD     		pop	{r7, pc}
 615              		.cfi_endproc
 616              	.LFE33:
 618              		.section	.text.VCOM_RxBuff_init,"ax",%progbits
 619              		.align	2
 620              		.global	VCOM_RxBuff_init
 621              		.thumb
 622              		.thumb_func
 624              	VCOM_RxBuff_init:
 625              	.LFB34:
 328:..//utils/usbSerial/usbSerial.c ****  
 329:..//utils/usbSerial/usbSerial.c **** 
 330:..//utils/usbSerial/usbSerial.c **** void VCOM_RxBuff_init(void)
 331:..//utils/usbSerial/usbSerial.c **** {
 626              		.loc 2 331 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630 0000 80B5     		push	{r7, lr}
 631              	.LCFI16:
 632              		.cfi_def_cfa_offset 8
 633 0002 00AF     		add	r7, sp, #0
 634              		.cfi_offset 14, -4
 635              		.cfi_offset 7, -8
 636              	.LCFI17:
 637              		.cfi_def_cfa_register 7
 332:..//utils/usbSerial/usbSerial.c **** 	fifo_init(&rxfifo, rxdata);
 638              		.loc 2 332 0
 639 0004 40F20000 		movw	r0, #:lower16:rxfifo
 640 0008 C0F20000 		movt	r0, #:upper16:rxfifo
 641 000c 40F20001 		movw	r1, #:lower16:rxdata
 642 0010 C0F20001 		movt	r1, #:upper16:rxdata
 643 0014 40F20003 		movw	r3, #:lower16:fifo_init
 644 0018 C0F20003 		movt	r3, #:upper16:fifo_init
 645 001c 9847     		blx	r3
 333:..//utils/usbSerial/usbSerial.c **** }
 646              		.loc 2 333 0
 647 001e 80BD     		pop	{r7, pc}
 648              		.cfi_endproc
 649              	.LFE34:
 651              		.section	.text.VCOM_putchar,"ax",%progbits
 652              		.align	2
 653              		.global	VCOM_putchar
 654              		.thumb
 655              		.thumb_func
 657              	VCOM_putchar:
 658              	.LFB35:
 334:..//utils/usbSerial/usbSerial.c **** 
 335:..//utils/usbSerial/usbSerial.c **** /**
 336:..//utils/usbSerial/usbSerial.c **** 	Writes one character to VCOM port
 337:..//utils/usbSerial/usbSerial.c **** 	
 338:..//utils/usbSerial/usbSerial.c **** 	@param [in] c character to write
 339:..//utils/usbSerial/usbSerial.c **** 	@returns character written, or EOF if character could not be written
 340:..//utils/usbSerial/usbSerial.c ****  */
 341:..//utils/usbSerial/usbSerial.c **** int VCOM_putchar(int c)
 342:..//utils/usbSerial/usbSerial.c **** {
 659              		.loc 2 342 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 8
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663 0000 80B5     		push	{r7, lr}
 664              	.LCFI18:
 665              		.cfi_def_cfa_offset 8
 666 0002 82B0     		sub	sp, sp, #8
 667              	.LCFI19:
 668              		.cfi_def_cfa_offset 16
 669 0004 00AF     		add	r7, sp, #0
 670              		.cfi_offset 14, -4
 671              		.cfi_offset 7, -8
 672              	.LCFI20:
 673              		.cfi_def_cfa_register 7
 674 0006 7860     		str	r0, [r7, #4]
 343:..//utils/usbSerial/usbSerial.c **** 	return fifo_put(&txfifo, c) ? c : EOF;
 675              		.loc 2 343 0
 676 0008 7B68     		ldr	r3, [r7, #4]
 677 000a DBB2     		uxtb	r3, r3
 678 000c 40F20000 		movw	r0, #:lower16:txfifo
 679 0010 C0F20000 		movt	r0, #:upper16:txfifo
 680 0014 1946     		mov	r1, r3
 681 0016 40F20003 		movw	r3, #:lower16:fifo_put
 682 001a C0F20003 		movt	r3, #:upper16:fifo_put
 683 001e 9847     		blx	r3
 684 0020 0346     		mov	r3, r0
 685 0022 002B     		cmp	r3, #0
 686 0024 01D0     		beq	.L38
 687 0026 7B68     		ldr	r3, [r7, #4]
 688 0028 01E0     		b	.L39
 689              	.L38:
 690 002a 4FF0FF33 		mov	r3, #-1
 691              	.L39:
 344:..//utils/usbSerial/usbSerial.c **** }
 692              		.loc 2 344 0
 693 002e 1846     		mov	r0, r3
 694 0030 07F10807 		add	r7, r7, #8
 695 0034 BD46     		mov	sp, r7
 696 0036 80BD     		pop	{r7, pc}
 697              		.cfi_endproc
 698              	.LFE35:
 700              		.section	.text.VCOM_getchar,"ax",%progbits
 701              		.align	2
 702              		.global	VCOM_getchar
 703              		.thumb
 704              		.thumb_func
 706              	VCOM_getchar:
 707              	.LFB36:
 345:..//utils/usbSerial/usbSerial.c **** 
 346:..//utils/usbSerial/usbSerial.c **** 
 347:..//utils/usbSerial/usbSerial.c **** /**
 348:..//utils/usbSerial/usbSerial.c **** 	Reads one character from VCOM port
 349:..//utils/usbSerial/usbSerial.c **** 	
 350:..//utils/usbSerial/usbSerial.c **** 	@returns character read, or EOF if character could not be read
 351:..//utils/usbSerial/usbSerial.c ****  */
 352:..//utils/usbSerial/usbSerial.c **** int VCOM_getchar(void)
 353:..//utils/usbSerial/usbSerial.c **** {
 708              		.loc 2 353 0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 8
 711              		@ frame_needed = 1, uses_anonymous_args = 0
 712 0000 80B5     		push	{r7, lr}
 713              	.LCFI21:
 714              		.cfi_def_cfa_offset 8
 715 0002 82B0     		sub	sp, sp, #8
 716              	.LCFI22:
 717              		.cfi_def_cfa_offset 16
 718 0004 00AF     		add	r7, sp, #0
 719              		.cfi_offset 14, -4
 720              		.cfi_offset 7, -8
 721              	.LCFI23:
 722              		.cfi_def_cfa_register 7
 354:..//utils/usbSerial/usbSerial.c **** 	uint8_t c;
 355:..//utils/usbSerial/usbSerial.c **** 	
 356:..//utils/usbSerial/usbSerial.c **** 	return fifo_get(&rxfifo, &c) ? c : EOF;
 723              		.loc 2 356 0
 724 0006 07F10703 		add	r3, r7, #7
 725 000a 40F20000 		movw	r0, #:lower16:rxfifo
 726 000e C0F20000 		movt	r0, #:upper16:rxfifo
 727 0012 1946     		mov	r1, r3
 728 0014 40F20003 		movw	r3, #:lower16:fifo_get
 729 0018 C0F20003 		movt	r3, #:upper16:fifo_get
 730 001c 9847     		blx	r3
 731 001e 0346     		mov	r3, r0
 732 0020 002B     		cmp	r3, #0
 733 0022 01D0     		beq	.L42
 734 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 735 0026 01E0     		b	.L43
 736              	.L42:
 737 0028 4FF0FF33 		mov	r3, #-1
 738              	.L43:
 357:..//utils/usbSerial/usbSerial.c **** }
 739              		.loc 2 357 0
 740 002c 1846     		mov	r0, r3
 741 002e 07F10807 		add	r7, r7, #8
 742 0032 BD46     		mov	sp, r7
 743 0034 80BD     		pop	{r7, pc}
 744              		.cfi_endproc
 745              	.LFE36:
 747 0036 00BF     		.section	.text.VCOM_getchar1,"ax",%progbits
 748              		.align	2
 749              		.global	VCOM_getchar1
 750              		.thumb
 751              		.thumb_func
 753              	VCOM_getchar1:
 754              	.LFB37:
 358:..//utils/usbSerial/usbSerial.c **** 
 359:..//utils/usbSerial/usbSerial.c **** 
 360:..//utils/usbSerial/usbSerial.c **** int VCOM_getchar1(uint8_t *t) //data stored in pointer and returns 1 or 0
 361:..//utils/usbSerial/usbSerial.c **** {
 755              		.loc 2 361 0
 756              		.cfi_startproc
 757              		@ args = 0, pretend = 0, frame = 16
 758              		@ frame_needed = 1, uses_anonymous_args = 0
 759 0000 80B5     		push	{r7, lr}
 760              	.LCFI24:
 761              		.cfi_def_cfa_offset 8
 762 0002 84B0     		sub	sp, sp, #16
 763              	.LCFI25:
 764              		.cfi_def_cfa_offset 24
 765 0004 00AF     		add	r7, sp, #0
 766              		.cfi_offset 14, -4
 767              		.cfi_offset 7, -8
 768              	.LCFI26:
 769              		.cfi_def_cfa_register 7
 770 0006 7860     		str	r0, [r7, #4]
 362:..//utils/usbSerial/usbSerial.c **** 	uint8_t c;
 363:..//utils/usbSerial/usbSerial.c **** 	
 364:..//utils/usbSerial/usbSerial.c **** 	if(fifo_get(&rxfifo, &c)){
 771              		.loc 2 364 0
 772 0008 07F10F03 		add	r3, r7, #15
 773 000c 40F20000 		movw	r0, #:lower16:rxfifo
 774 0010 C0F20000 		movt	r0, #:upper16:rxfifo
 775 0014 1946     		mov	r1, r3
 776 0016 40F20003 		movw	r3, #:lower16:fifo_get
 777 001a C0F20003 		movt	r3, #:upper16:fifo_get
 778 001e 9847     		blx	r3
 779 0020 0346     		mov	r3, r0
 780 0022 002B     		cmp	r3, #0
 781 0024 05D0     		beq	.L46
 365:..//utils/usbSerial/usbSerial.c **** 		*t = c;
 782              		.loc 2 365 0
 783 0026 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 784 0028 7B68     		ldr	r3, [r7, #4]
 785 002a 1A70     		strb	r2, [r3, #0]
 366:..//utils/usbSerial/usbSerial.c **** 		return 1;
 786              		.loc 2 366 0
 787 002c 4FF00103 		mov	r3, #1
 788 0030 01E0     		b	.L47
 789              	.L46:
 367:..//utils/usbSerial/usbSerial.c **** 	}
 368:..//utils/usbSerial/usbSerial.c **** 	else{
 369:..//utils/usbSerial/usbSerial.c **** 		return 0;
 790              		.loc 2 369 0
 791 0032 4FF00003 		mov	r3, #0
 792              	.L47:
 370:..//utils/usbSerial/usbSerial.c **** 	}
 371:..//utils/usbSerial/usbSerial.c **** 	
 372:..//utils/usbSerial/usbSerial.c **** 	return 0;
 373:..//utils/usbSerial/usbSerial.c **** }
 793              		.loc 2 373 0
 794 0036 1846     		mov	r0, r3
 795 0038 07F11007 		add	r7, r7, #16
 796 003c BD46     		mov	sp, r7
 797 003e 80BD     		pop	{r7, pc}
 798              		.cfi_endproc
 799              	.LFE37:
 801              		.section	.text.VCOM_getcharN,"ax",%progbits
 802              		.align	2
 803              		.global	VCOM_getcharN
 804              		.thumb
 805              		.thumb_func
 807              	VCOM_getcharN:
 808              	.LFB38:
 374:..//utils/usbSerial/usbSerial.c **** 
 375:..//utils/usbSerial/usbSerial.c **** int VCOM_getcharN(int num, uint8_t *t) //data stored into array
 376:..//utils/usbSerial/usbSerial.c **** {
 809              		.loc 2 376 0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 24
 812              		@ frame_needed = 1, uses_anonymous_args = 0
 813 0000 80B5     		push	{r7, lr}
 814              	.LCFI27:
 815              		.cfi_def_cfa_offset 8
 816 0002 86B0     		sub	sp, sp, #24
 817              	.LCFI28:
 818              		.cfi_def_cfa_offset 32
 819 0004 00AF     		add	r7, sp, #0
 820              		.cfi_offset 14, -4
 821              		.cfi_offset 7, -8
 822              	.LCFI29:
 823              		.cfi_def_cfa_register 7
 824 0006 7860     		str	r0, [r7, #4]
 825 0008 3960     		str	r1, [r7, #0]
 377:..//utils/usbSerial/usbSerial.c **** 	uint8_t c;
 378:..//utils/usbSerial/usbSerial.c **** 	int i = 0;
 826              		.loc 2 378 0
 827 000a 4FF00003 		mov	r3, #0
 828 000e 3B61     		str	r3, [r7, #16]
 379:..//utils/usbSerial/usbSerial.c **** 	int count = 0;
 829              		.loc 2 379 0
 830 0010 4FF00003 		mov	r3, #0
 831 0014 7B61     		str	r3, [r7, #20]
 380:..//utils/usbSerial/usbSerial.c **** 	if(num > VCOM_FIFO_SIZE){ //invalid size
 832              		.loc 2 380 0
 833 0016 7B68     		ldr	r3, [r7, #4]
 834 0018 B3F5007F 		cmp	r3, #512
 835 001c 02DD     		ble	.L50
 381:..//utils/usbSerial/usbSerial.c **** 		return 0;
 836              		.loc 2 381 0
 837 001e 4FF00003 		mov	r3, #0
 838 0022 32E0     		b	.L51
 839              	.L50:
 382:..//utils/usbSerial/usbSerial.c **** 	}
 383:..//utils/usbSerial/usbSerial.c **** 	
 384:..//utils/usbSerial/usbSerial.c **** 	for(i = 0 ; i < num ; i++){
 840              		.loc 2 384 0
 841 0024 4FF00003 		mov	r3, #0
 842 0028 3B61     		str	r3, [r7, #16]
 843 002a 28E0     		b	.L52
 844              	.L55:
 385:..//utils/usbSerial/usbSerial.c **** 		while(!fifo_get(&rxfifo, &c)){ //wait for data
 386:..//utils/usbSerial/usbSerial.c **** 			if(count >= USB_TIMEOUT_COUNT){ //timeout
 845              		.loc 2 386 0
 846 002c 7A69     		ldr	r2, [r7, #20]
 847 002e 42F20F73 		movw	r3, #9999
 848 0032 9A42     		cmp	r2, r3
 849 0034 02DD     		ble	.L54
 387:..//utils/usbSerial/usbSerial.c **** 				return 0;
 850              		.loc 2 387 0
 851 0036 4FF00003 		mov	r3, #0
 852 003a 26E0     		b	.L51
 853              	.L54:
 388:..//utils/usbSerial/usbSerial.c **** 			}
 389:..//utils/usbSerial/usbSerial.c **** 			count++;
 854              		.loc 2 389 0
 855 003c 7B69     		ldr	r3, [r7, #20]
 856 003e 03F10103 		add	r3, r3, #1
 857 0042 7B61     		str	r3, [r7, #20]
 858 0044 00E0     		b	.L53
 859              	.L58:
 860              		.loc 2 385 0
 861 0046 00BF     		nop
 862              	.L53:
 863 0048 07F10F03 		add	r3, r7, #15
 864 004c 40F20000 		movw	r0, #:lower16:rxfifo
 865 0050 C0F20000 		movt	r0, #:upper16:rxfifo
 866 0054 1946     		mov	r1, r3
 867 0056 40F20003 		movw	r3, #:lower16:fifo_get
 868 005a C0F20003 		movt	r3, #:upper16:fifo_get
 869 005e 9847     		blx	r3
 870 0060 0346     		mov	r3, r0
 871 0062 002B     		cmp	r3, #0
 872 0064 E2D0     		beq	.L55
 390:..//utils/usbSerial/usbSerial.c **** 		}
 391:..//utils/usbSerial/usbSerial.c **** 		*(t+i) = c;
 873              		.loc 2 391 0
 874 0066 3A69     		ldr	r2, [r7, #16]
 875 0068 3B68     		ldr	r3, [r7, #0]
 876 006a 1344     		add	r3, r2, r3
 877 006c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 878 006e 1A70     		strb	r2, [r3, #0]
 392:..//utils/usbSerial/usbSerial.c **** 		count = 0;
 879              		.loc 2 392 0
 880 0070 4FF00003 		mov	r3, #0
 881 0074 7B61     		str	r3, [r7, #20]
 882              		.loc 2 384 0
 883 0076 3B69     		ldr	r3, [r7, #16]
 884 0078 03F10103 		add	r3, r3, #1
 885 007c 3B61     		str	r3, [r7, #16]
 886              	.L52:
 887 007e 3A69     		ldr	r2, [r7, #16]
 888 0080 7B68     		ldr	r3, [r7, #4]
 889 0082 9A42     		cmp	r2, r3
 890 0084 DFDB     		blt	.L58
 393:..//utils/usbSerial/usbSerial.c **** 	}
 394:..//utils/usbSerial/usbSerial.c **** 	
 395:..//utils/usbSerial/usbSerial.c **** 	return 1;
 891              		.loc 2 395 0
 892 0086 4FF00103 		mov	r3, #1
 893              	.L51:
 396:..//utils/usbSerial/usbSerial.c **** }
 894              		.loc 2 396 0
 895 008a 1846     		mov	r0, r3
 896 008c 07F11807 		add	r7, r7, #24
 897 0090 BD46     		mov	sp, r7
 898 0092 80BD     		pop	{r7, pc}
 899              		.cfi_endproc
 900              	.LFE38:
 902              		.section	.text.VCOM_ChkRcv,"ax",%progbits
 903              		.align	2
 904              		.global	VCOM_ChkRcv
 905              		.thumb
 906              		.thumb_func
 908              	VCOM_ChkRcv:
 909              	.LFB39:
 397:..//utils/usbSerial/usbSerial.c **** 
 398:..//utils/usbSerial/usbSerial.c **** uint16_t VCOM_ChkRcv(void){
 910              		.loc 2 398 0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 0
 913              		@ frame_needed = 1, uses_anonymous_args = 0
 914 0000 80B5     		push	{r7, lr}
 915              	.LCFI30:
 916              		.cfi_def_cfa_offset 8
 917 0002 00AF     		add	r7, sp, #0
 918              		.cfi_offset 14, -4
 919              		.cfi_offset 7, -8
 920              	.LCFI31:
 921              		.cfi_def_cfa_register 7
 399:..//utils/usbSerial/usbSerial.c **** 	// printf("\n vcom");
 400:..//utils/usbSerial/usbSerial.c **** 	return ring_is_empty (&ring_rxUSB);
 922              		.loc 2 400 0
 923 0004 40F20000 		movw	r0, #:lower16:ring_rxUSB
 924 0008 C0F20000 		movt	r0, #:upper16:ring_rxUSB
 925 000c 40F20003 		movw	r3, #:lower16:ring_is_empty
 926 0010 C0F20003 		movt	r3, #:upper16:ring_is_empty
 927 0014 9847     		blx	r3
 928 0016 0346     		mov	r3, r0
 401:..//utils/usbSerial/usbSerial.c **** }
 929              		.loc 2 401 0
 930 0018 1846     		mov	r0, r3
 931 001a 80BD     		pop	{r7, pc}
 932              		.cfi_endproc
 933              	.LFE39:
 935              		.section	.text.VCOM_GetCh,"ax",%progbits
 936              		.align	2
 937              		.global	VCOM_GetCh
 938              		.thumb
 939              		.thumb_func
 941              	VCOM_GetCh:
 942              	.LFB40:
 402:..//utils/usbSerial/usbSerial.c **** 
 403:..//utils/usbSerial/usbSerial.c **** 
 404:..//utils/usbSerial/usbSerial.c **** uint8_t VCOM_GetCh(void){
 943              		.loc 2 404 0
 944              		.cfi_startproc
 945              		@ args = 0, pretend = 0, frame = 0
 946              		@ frame_needed = 1, uses_anonymous_args = 0
 947 0000 80B5     		push	{r7, lr}
 948              	.LCFI32:
 949              		.cfi_def_cfa_offset 8
 950 0002 00AF     		add	r7, sp, #0
 951              		.cfi_offset 14, -4
 952              		.cfi_offset 7, -8
 953              	.LCFI33:
 954              		.cfi_def_cfa_register 7
 405:..//utils/usbSerial/usbSerial.c **** 	while(ring_getc (&ring_rxUSB)){
 955              		.loc 2 405 0
 956 0004 40F20000 		movw	r0, #:lower16:ring_rxUSB
 957 0008 C0F20000 		movt	r0, #:upper16:ring_rxUSB
 958 000c 40F20003 		movw	r3, #:lower16:ring_getc
 959 0010 C0F20003 		movt	r3, #:upper16:ring_getc
 960 0014 9847     		blx	r3
 961 0016 0346     		mov	r3, r0
 962 0018 002B     		cmp	r3, #0
 963 001a 02D0     		beq	.L62
 406:..//utils/usbSerial/usbSerial.c **** 		return (uint8_t)-1;
 964              		.loc 2 406 0
 965 001c 4FF0FF03 		mov	r3, #255
 966 0020 04E0     		b	.L63
 967              	.L62:
 407:..//utils/usbSerial/usbSerial.c **** 	}
 408:..//utils/usbSerial/usbSerial.c **** 	return ring_rxUSB.dt_got;
 968              		.loc 2 408 0
 969 0022 40F20003 		movw	r3, #:lower16:ring_rxUSB
 970 0026 C0F20003 		movt	r3, #:upper16:ring_rxUSB
 971 002a 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 972              	.L63:
 409:..//utils/usbSerial/usbSerial.c **** }
 973              		.loc 2 409 0
 974 002c 1846     		mov	r0, r3
 975 002e 80BD     		pop	{r7, pc}
 976              		.cfi_endproc
 977              	.LFE40:
 979              		.section	.text.USB_IRQHandler,"ax",%progbits
 980              		.align	2
 981              		.global	USB_IRQHandler
 982              		.thumb
 983              		.thumb_func
 985              	USB_IRQHandler:
 986              	.LFB41:
 410:..//utils/usbSerial/usbSerial.c **** 
 411:..//utils/usbSerial/usbSerial.c **** 
 412:..//utils/usbSerial/usbSerial.c **** /**
 413:..//utils/usbSerial/usbSerial.c **** 	Interrupt handler
 414:..//utils/usbSerial/usbSerial.c **** 	
 415:..//utils/usbSerial/usbSerial.c **** 	Simply calls the USB ISR
 416:..//utils/usbSerial/usbSerial.c ****  */
 417:..//utils/usbSerial/usbSerial.c **** //void USBIntHandler(void)
 418:..//utils/usbSerial/usbSerial.c **** void USB_IRQHandler(void)
 419:..//utils/usbSerial/usbSerial.c **** {
 987              		.loc 2 419 0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 0
 990              		@ frame_needed = 1, uses_anonymous_args = 0
 991 0000 80B5     		push	{r7, lr}
 992              	.LCFI34:
 993              		.cfi_def_cfa_offset 8
 994 0002 00AF     		add	r7, sp, #0
 995              		.cfi_offset 14, -4
 996              		.cfi_offset 7, -8
 997              	.LCFI35:
 998              		.cfi_def_cfa_register 7
 420:..//utils/usbSerial/usbSerial.c **** 	// printf("\n1");
 421:..//utils/usbSerial/usbSerial.c **** 	USBHwISR();
 999              		.loc 2 421 0
 1000 0004 40F20003 		movw	r3, #:lower16:USBHwISR
 1001 0008 C0F20003 		movt	r3, #:upper16:USBHwISR
 1002 000c 9847     		blx	r3
 422:..//utils/usbSerial/usbSerial.c **** }
 1003              		.loc 2 422 0
 1004 000e 80BD     		pop	{r7, pc}
 1005              		.cfi_endproc
 1006              	.LFE41:
 1008              		.section	.text.USBFrameHandler,"ax",%progbits
 1009              		.align	2
 1010              		.thumb
 1011              		.thumb_func
 1013              	USBFrameHandler:
 1014              	.LFB42:
 423:..//utils/usbSerial/usbSerial.c **** 
 424:..//utils/usbSerial/usbSerial.c **** 
 425:..//utils/usbSerial/usbSerial.c **** static void USBFrameHandler(U16 wFrame)
 426:..//utils/usbSerial/usbSerial.c **** {
 1015              		.loc 2 426 0
 1016              		.cfi_startproc
 1017              		@ args = 0, pretend = 0, frame = 8
 1018              		@ frame_needed = 1, uses_anonymous_args = 0
 1019 0000 80B5     		push	{r7, lr}
 1020              	.LCFI36:
 1021              		.cfi_def_cfa_offset 8
 1022 0002 82B0     		sub	sp, sp, #8
 1023              	.LCFI37:
 1024              		.cfi_def_cfa_offset 16
 1025 0004 00AF     		add	r7, sp, #0
 1026              		.cfi_offset 14, -4
 1027              		.cfi_offset 7, -8
 1028              	.LCFI38:
 1029              		.cfi_def_cfa_register 7
 1030 0006 0346     		mov	r3, r0
 1031 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 427:..//utils/usbSerial/usbSerial.c **** 	wFrame = wFrame;
 428:..//utils/usbSerial/usbSerial.c **** 	if (fifo_avail(&txfifo) > 0) {
 1032              		.loc 2 428 0
 1033 000a 40F20000 		movw	r0, #:lower16:txfifo
 1034 000e C0F20000 		movt	r0, #:upper16:txfifo
 1035 0012 40F20003 		movw	r3, #:lower16:fifo_avail
 1036 0016 C0F20003 		movt	r3, #:upper16:fifo_avail
 1037 001a 9847     		blx	r3
 1038 001c 0346     		mov	r3, r0
 1039 001e 002B     		cmp	r3, #0
 1040 0020 06DD     		ble	.L69
 429:..//utils/usbSerial/usbSerial.c **** 		// data available, enable NAK interrupt on bulk in
 430:..//utils/usbSerial/usbSerial.c **** 		USBHwNakIntEnable(INACK_BI);
 1041              		.loc 2 430 0
 1042 0022 4FF02000 		mov	r0, #32
 1043 0026 40F20003 		movw	r3, #:lower16:USBHwNakIntEnable
 1044 002a C0F20003 		movt	r3, #:upper16:USBHwNakIntEnable
 1045 002e 9847     		blx	r3
 1046              	.L69:
 431:..//utils/usbSerial/usbSerial.c **** 	}
 432:..//utils/usbSerial/usbSerial.c **** }
 1047              		.loc 2 432 0
 1048 0030 07F10807 		add	r7, r7, #8
 1049 0034 BD46     		mov	sp, r7
 1050 0036 80BD     		pop	{r7, pc}
 1051              		.cfi_endproc
 1052              	.LFE42:
 1054              		.section	.text.usbSerialInit,"ax",%progbits
 1055              		.align	2
 1056              		.global	usbSerialInit
 1057              		.thumb
 1058              		.thumb_func
 1060              	usbSerialInit:
 1061              	.LFB43:
 433:..//utils/usbSerial/usbSerial.c **** 
 434:..//utils/usbSerial/usbSerial.c **** void enable_USB_interrupts(void);
 435:..//utils/usbSerial/usbSerial.c **** 
 436:..//utils/usbSerial/usbSerial.c **** 
 437:..//utils/usbSerial/usbSerial.c **** /*************************************************************************
 438:..//utils/usbSerial/usbSerial.c **** 	main
 439:..//utils/usbSerial/usbSerial.c **** 	====
 440:..//utils/usbSerial/usbSerial.c **** **************************************************************************/
 441:..//utils/usbSerial/usbSerial.c **** int usbSerialInit()
 442:..//utils/usbSerial/usbSerial.c **** {
 1062              		.loc 2 442 0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 0
 1065              		@ frame_needed = 1, uses_anonymous_args = 0
 1066 0000 80B5     		push	{r7, lr}
 1067              	.LCFI39:
 1068              		.cfi_def_cfa_offset 8
 1069 0002 00AF     		add	r7, sp, #0
 1070              		.cfi_offset 14, -4
 1071              		.cfi_offset 7, -8
 1072              	.LCFI40:
 1073              		.cfi_def_cfa_register 7
 443:..//utils/usbSerial/usbSerial.c **** 	// initialise stack
 444:..//utils/usbSerial/usbSerial.c **** 	USBInit();
 1074              		.loc 2 444 0
 1075 0004 40F20003 		movw	r3, #:lower16:USBInit
 1076 0008 C0F20003 		movt	r3, #:upper16:USBInit
 1077 000c 9847     		blx	r3
 445:..//utils/usbSerial/usbSerial.c **** 
 446:..//utils/usbSerial/usbSerial.c **** 	// register descriptors
 447:..//utils/usbSerial/usbSerial.c **** 	USBRegisterDescriptors(abDescriptors);
 1078              		.loc 2 447 0
 1079 000e 40F20000 		movw	r0, #:lower16:abDescriptors
 1080 0012 C0F20000 		movt	r0, #:upper16:abDescriptors
 1081 0016 40F20003 		movw	r3, #:lower16:USBRegisterDescriptors
 1082 001a C0F20003 		movt	r3, #:upper16:USBRegisterDescriptors
 1083 001e 9847     		blx	r3
 448:..//utils/usbSerial/usbSerial.c **** 
 449:..//utils/usbSerial/usbSerial.c **** 	// register class request handler
 450:..//utils/usbSerial/usbSerial.c **** 	USBRegisterRequestHandler(REQTYPE_TYPE_CLASS, HandleClassRequest, abClassReqData);
 1084              		.loc 2 450 0
 1085 0020 4FF00100 		mov	r0, #1
 1086 0024 40F20001 		movw	r1, #:lower16:HandleClassRequest
 1087 0028 C0F20001 		movt	r1, #:upper16:HandleClassRequest
 1088 002c 40F20002 		movw	r2, #:lower16:abClassReqData
 1089 0030 C0F20002 		movt	r2, #:upper16:abClassReqData
 1090 0034 40F20003 		movw	r3, #:lower16:USBRegisterRequestHandler
 1091 0038 C0F20003 		movt	r3, #:upper16:USBRegisterRequestHandler
 1092 003c 9847     		blx	r3
 451:..//utils/usbSerial/usbSerial.c **** 
 452:..//utils/usbSerial/usbSerial.c **** 	// register endpoint handlers
 453:..//utils/usbSerial/usbSerial.c **** 	USBHwRegisterEPIntHandler(INT_IN_EP, NULL);
 1093              		.loc 2 453 0
 1094 003e 4FF08100 		mov	r0, #129
 1095 0042 4FF00001 		mov	r1, #0
 1096 0046 40F20003 		movw	r3, #:lower16:USBHwRegisterEPIntHandler
 1097 004a C0F20003 		movt	r3, #:upper16:USBHwRegisterEPIntHandler
 1098 004e 9847     		blx	r3
 454:..//utils/usbSerial/usbSerial.c **** 	USBHwRegisterEPIntHandler(BULK_IN_EP, BulkIn);
 1099              		.loc 2 454 0
 1100 0050 4FF08200 		mov	r0, #130
 1101 0054 40F20001 		movw	r1, #:lower16:BulkIn
 1102 0058 C0F20001 		movt	r1, #:upper16:BulkIn
 1103 005c 40F20003 		movw	r3, #:lower16:USBHwRegisterEPIntHandler
 1104 0060 C0F20003 		movt	r3, #:upper16:USBHwRegisterEPIntHandler
 1105 0064 9847     		blx	r3
 455:..//utils/usbSerial/usbSerial.c **** 	USBHwRegisterEPIntHandler(BULK_OUT_EP, BulkOut);
 1106              		.loc 2 455 0
 1107 0066 4FF00500 		mov	r0, #5
 1108 006a 40F20001 		movw	r1, #:lower16:BulkOut
 1109 006e C0F20001 		movt	r1, #:upper16:BulkOut
 1110 0072 40F20003 		movw	r3, #:lower16:USBHwRegisterEPIntHandler
 1111 0076 C0F20003 		movt	r3, #:upper16:USBHwRegisterEPIntHandler
 1112 007a 9847     		blx	r3
 456:..//utils/usbSerial/usbSerial.c **** 	
 457:..//utils/usbSerial/usbSerial.c **** 	// register frame handler
 458:..//utils/usbSerial/usbSerial.c **** 	USBHwRegisterFrameHandler(USBFrameHandler);
 1113              		.loc 2 458 0
 1114 007c 40F20000 		movw	r0, #:lower16:USBFrameHandler
 1115 0080 C0F20000 		movt	r0, #:upper16:USBFrameHandler
 1116 0084 40F20003 		movw	r3, #:lower16:USBHwRegisterFrameHandler
 1117 0088 C0F20003 		movt	r3, #:upper16:USBHwRegisterFrameHandler
 1118 008c 9847     		blx	r3
 459:..//utils/usbSerial/usbSerial.c **** 
 460:..//utils/usbSerial/usbSerial.c **** 	// enable bulk-in interrupts on NAKs
 461:..//utils/usbSerial/usbSerial.c **** 	USBHwNakIntEnable(INACK_BI);
 1119              		.loc 2 461 0
 1120 008e 4FF02000 		mov	r0, #32
 1121 0092 40F20003 		movw	r3, #:lower16:USBHwNakIntEnable
 1122 0096 C0F20003 		movt	r3, #:upper16:USBHwNakIntEnable
 1123 009a 9847     		blx	r3
 462:..//utils/usbSerial/usbSerial.c **** 
 463:..//utils/usbSerial/usbSerial.c **** 	// initialise VCOM
 464:..//utils/usbSerial/usbSerial.c **** 	VCOM_init();
 1124              		.loc 2 464 0
 1125 009c 40F20003 		movw	r3, #:lower16:VCOM_init
 1126 00a0 C0F20003 		movt	r3, #:upper16:VCOM_init
 1127 00a4 9847     		blx	r3
 465:..//utils/usbSerial/usbSerial.c **** 	
 466:..//utils/usbSerial/usbSerial.c **** #ifdef MOD_USB
 467:..//utils/usbSerial/usbSerial.c **** 	modUSB_init();
 1128              		.loc 2 467 0
 1129 00a6 40F20003 		movw	r3, #:lower16:modUSB_init
 1130 00aa C0F20003 		movt	r3, #:upper16:modUSB_init
 1131 00ae 9847     		blx	r3
 468:..//utils/usbSerial/usbSerial.c **** #endif
 469:..//utils/usbSerial/usbSerial.c **** 
 470:..//utils/usbSerial/usbSerial.c **** /* CodeRed - comment out original interrupt setup code	
 471:..//utils/usbSerial/usbSerial.c **** 	// set up USB interrupt
 472:..//utils/usbSerial/usbSerial.c **** 	VICIntSelect &= ~(1<<22);               // select IRQ for USB
 473:..//utils/usbSerial/usbSerial.c **** 	VICIntEnable |= (1<<22);
 474:..//utils/usbSerial/usbSerial.c **** 
 475:..//utils/usbSerial/usbSerial.c **** 	(*(&VICVectCntl0+INT_VECT_NUM)) = 0x20 | 22; // choose highest priority ISR slot 	
 476:..//utils/usbSerial/usbSerial.c **** 	(*(&VICVectAddr0+INT_VECT_NUM)) = (int)USBIntHandler;
 477:..//utils/usbSerial/usbSerial.c **** 	
 478:..//utils/usbSerial/usbSerial.c **** 	enableIRQ();
 479:..//utils/usbSerial/usbSerial.c **** */	
 480:..//utils/usbSerial/usbSerial.c **** 
 481:..//utils/usbSerial/usbSerial.c **** // CodeRed - add in interrupt setup code for RDB1768
 482:..//utils/usbSerial/usbSerial.c **** 
 483:..//utils/usbSerial/usbSerial.c **** #ifndef POLLED_USBSERIAL
 484:..//utils/usbSerial/usbSerial.c **** 	//enable_USB_interrupts();
 485:..//utils/usbSerial/usbSerial.c **** 	NVIC_EnableIRQ(USB_IRQn); 
 1132              		.loc 2 485 0
 1133 00b0 4FF01800 		mov	r0, #24
 1134 00b4 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 1135 00b8 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 1136 00bc 9847     		blx	r3
 486:..//utils/usbSerial/usbSerial.c **** 	
 487:..//utils/usbSerial/usbSerial.c **** #endif
 488:..//utils/usbSerial/usbSerial.c **** 		
 489:..//utils/usbSerial/usbSerial.c **** 	// connect to bus
 490:..//utils/usbSerial/usbSerial.c **** 		
 491:..//utils/usbSerial/usbSerial.c **** 
 492:..//utils/usbSerial/usbSerial.c **** 	USBHwConnect(True);
 1137              		.loc 2 492 0
 1138 00be 4FF00100 		mov	r0, #1
 1139 00c2 40F20003 		movw	r3, #:lower16:USBHwConnect
 1140 00c6 C0F20003 		movt	r3, #:upper16:USBHwConnect
 1141 00ca 9847     		blx	r3
 493:..//utils/usbSerial/usbSerial.c **** 
 494:..//utils/usbSerial/usbSerial.c **** 
 495:..//utils/usbSerial/usbSerial.c **** 	return 0;
 1142              		.loc 2 495 0
 1143 00cc 4FF00003 		mov	r3, #0
 496:..//utils/usbSerial/usbSerial.c **** }
 1144              		.loc 2 496 0
 1145 00d0 1846     		mov	r0, r3
 1146 00d2 80BD     		pop	{r7, pc}
 1147              		.cfi_endproc
 1148              	.LFE43:
 1150              		.section	.text.VCOM_puts,"ax",%progbits
 1151              		.align	2
 1152              		.global	VCOM_puts
 1153              		.thumb
 1154              		.thumb_func
 1156              	VCOM_puts:
 1157              	.LFB44:
 497:..//utils/usbSerial/usbSerial.c **** 
 498:..//utils/usbSerial/usbSerial.c **** void VCOM_puts(const char* str)
 499:..//utils/usbSerial/usbSerial.c **** {
 1158              		.loc 2 499 0
 1159              		.cfi_startproc
 1160              		@ args = 0, pretend = 0, frame = 8
 1161              		@ frame_needed = 1, uses_anonymous_args = 0
 1162 0000 80B5     		push	{r7, lr}
 1163              	.LCFI41:
 1164              		.cfi_def_cfa_offset 8
 1165 0002 82B0     		sub	sp, sp, #8
 1166              	.LCFI42:
 1167              		.cfi_def_cfa_offset 16
 1168 0004 00AF     		add	r7, sp, #0
 1169              		.cfi_offset 14, -4
 1170              		.cfi_offset 7, -8
 1171              	.LCFI43:
 1172              		.cfi_def_cfa_register 7
 1173 0006 7860     		str	r0, [r7, #4]
 500:..//utils/usbSerial/usbSerial.c **** 	while(*str != '\0')
 1174              		.loc 2 500 0
 1175 0008 0BE0     		b	.L73
 1176              	.L74:
 501:..//utils/usbSerial/usbSerial.c **** 	{
 502:..//utils/usbSerial/usbSerial.c **** 		VCOM_putchar(*str++);
 1177              		.loc 2 502 0
 1178 000a 7B68     		ldr	r3, [r7, #4]
 1179 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1180 000e 7A68     		ldr	r2, [r7, #4]
 1181 0010 02F10102 		add	r2, r2, #1
 1182 0014 7A60     		str	r2, [r7, #4]
 1183 0016 1846     		mov	r0, r3
 1184 0018 40F20003 		movw	r3, #:lower16:VCOM_putchar
 1185 001c C0F20003 		movt	r3, #:upper16:VCOM_putchar
 1186 0020 9847     		blx	r3
 1187              	.L73:
 1188              		.loc 2 500 0
 1189 0022 7B68     		ldr	r3, [r7, #4]
 1190 0024 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1191 0026 002B     		cmp	r3, #0
 1192 0028 EFD1     		bne	.L74
 503:..//utils/usbSerial/usbSerial.c **** 	}
 504:..//utils/usbSerial/usbSerial.c **** }
 1193              		.loc 2 504 0
 1194 002a 07F10807 		add	r7, r7, #8
 1195 002e BD46     		mov	sp, r7
 1196 0030 80BD     		pop	{r7, pc}
 1197              		.cfi_endproc
 1198              	.LFE44:
 1200 0032 00BF     		.section	.text.VCOM_putc,"ax",%progbits
 1201              		.align	2
 1202              		.global	VCOM_putc
 1203              		.thumb
 1204              		.thumb_func
 1206              	VCOM_putc:
 1207              	.LFB45:
 505:..//utils/usbSerial/usbSerial.c **** void VCOM_putc(char c)
 506:..//utils/usbSerial/usbSerial.c **** {
 1208              		.loc 2 506 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 8
 1211              		@ frame_needed = 1, uses_anonymous_args = 0
 1212 0000 80B5     		push	{r7, lr}
 1213              	.LCFI44:
 1214              		.cfi_def_cfa_offset 8
 1215 0002 82B0     		sub	sp, sp, #8
 1216              	.LCFI45:
 1217              		.cfi_def_cfa_offset 16
 1218 0004 00AF     		add	r7, sp, #0
 1219              		.cfi_offset 14, -4
 1220              		.cfi_offset 7, -8
 1221              	.LCFI46:
 1222              		.cfi_def_cfa_register 7
 1223 0006 0346     		mov	r3, r0
 1224 0008 FB71     		strb	r3, [r7, #7]
 1225              	.L77:
 507:..//utils/usbSerial/usbSerial.c **** 	while(VCOM_putchar(c) == EOF);
 1226              		.loc 2 507 0
 1227 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1228 000c 1846     		mov	r0, r3
 1229 000e 40F20003 		movw	r3, #:lower16:VCOM_putchar
 1230 0012 C0F20003 		movt	r3, #:upper16:VCOM_putchar
 1231 0016 9847     		blx	r3
 1232 0018 0346     		mov	r3, r0
 1233 001a B3F1FF3F 		cmp	r3, #-1
 1234 001e F4D0     		beq	.L77
 508:..//utils/usbSerial/usbSerial.c **** }
 1235              		.loc 2 508 0
 1236 0020 07F10807 		add	r7, r7, #8
 1237 0024 BD46     		mov	sp, r7
 1238 0026 80BD     		pop	{r7, pc}
 1239              		.cfi_endproc
 1240              	.LFE45:
 1242              		.section	.text.VCOM_getc,"ax",%progbits
 1243              		.align	2
 1244              		.global	VCOM_getc
 1245              		.thumb
 1246              		.thumb_func
 1248              	VCOM_getc:
 1249              	.LFB46:
 509:..//utils/usbSerial/usbSerial.c **** 
 510:..//utils/usbSerial/usbSerial.c **** int VCOM_getc()
 511:..//utils/usbSerial/usbSerial.c **** {
 1250              		.loc 2 511 0
 1251              		.cfi_startproc
 1252              		@ args = 0, pretend = 0, frame = 8
 1253              		@ frame_needed = 1, uses_anonymous_args = 0
 1254 0000 80B5     		push	{r7, lr}
 1255              	.LCFI47:
 1256              		.cfi_def_cfa_offset 8
 1257 0002 82B0     		sub	sp, sp, #8
 1258              	.LCFI48:
 1259              		.cfi_def_cfa_offset 16
 1260 0004 00AF     		add	r7, sp, #0
 1261              		.cfi_offset 14, -4
 1262              		.cfi_offset 7, -8
 1263              	.LCFI49:
 1264              		.cfi_def_cfa_register 7
 512:..//utils/usbSerial/usbSerial.c **** 	int c;
 513:..//utils/usbSerial/usbSerial.c **** 	c = EOF;
 1265              		.loc 2 513 0
 1266 0006 4FF0FF33 		mov	r3, #-1
 1267 000a 7B60     		str	r3, [r7, #4]
 514:..//utils/usbSerial/usbSerial.c ****     c = VCOM_getchar();
 1268              		.loc 2 514 0
 1269 000c 40F20003 		movw	r3, #:lower16:VCOM_getchar
 1270 0010 C0F20003 		movt	r3, #:upper16:VCOM_getchar
 1271 0014 9847     		blx	r3
 1272 0016 0346     		mov	r3, r0
 1273 0018 7B60     		str	r3, [r7, #4]
 515:..//utils/usbSerial/usbSerial.c **** 
 516:..//utils/usbSerial/usbSerial.c **** 	if(c != EOF)
 517:..//utils/usbSerial/usbSerial.c **** 	{	
 518:..//utils/usbSerial/usbSerial.c **** 		// VCOM_printf("\nreceived ");
 519:..//utils/usbSerial/usbSerial.c **** 		// VCOM_putc(c);
 520:..//utils/usbSerial/usbSerial.c **** 	}
 521:..//utils/usbSerial/usbSerial.c **** 	return c;
 1274              		.loc 2 521 0
 1275 001a 7B68     		ldr	r3, [r7, #4]
 522:..//utils/usbSerial/usbSerial.c **** }
 1276              		.loc 2 522 0
 1277 001c 1846     		mov	r0, r3
 1278 001e 07F10807 		add	r7, r7, #8
 1279 0022 BD46     		mov	sp, r7
 1280 0024 80BD     		pop	{r7, pc}
 1281              		.cfi_endproc
 1282              	.LFE46:
 1284 0026 00BF     		.section	.rodata
 1285              		.align	2
 1286              	.LC0:
 1287 0000 307800   		.ascii	"0x\000"
 1288              		.section	.text.VCOM_putHex,"ax",%progbits
 1289              		.align	2
 1290              		.global	VCOM_putHex
 1291              		.thumb
 1292              		.thumb_func
 1294              	VCOM_putHex:
 1295              	.LFB47:
 523:..//utils/usbSerial/usbSerial.c **** 
 524:..//utils/usbSerial/usbSerial.c **** void VCOM_putHex(uint8_t hex)
 525:..//utils/usbSerial/usbSerial.c **** {
 1296              		.loc 2 525 0
 1297              		.cfi_startproc
 1298              		@ args = 0, pretend = 0, frame = 16
 1299              		@ frame_needed = 1, uses_anonymous_args = 0
 1300 0000 80B5     		push	{r7, lr}
 1301              	.LCFI50:
 1302              		.cfi_def_cfa_offset 8
 1303 0002 84B0     		sub	sp, sp, #16
 1304              	.LCFI51:
 1305              		.cfi_def_cfa_offset 24
 1306 0004 00AF     		add	r7, sp, #0
 1307              		.cfi_offset 14, -4
 1308              		.cfi_offset 7, -8
 1309              	.LCFI52:
 1310              		.cfi_def_cfa_register 7
 1311 0006 0346     		mov	r3, r0
 1312 0008 FB71     		strb	r3, [r7, #7]
 526:..//utils/usbSerial/usbSerial.c **** 	uint8_t temp;
 527:..//utils/usbSerial/usbSerial.c **** 	VCOM_puts("0x");
 1313              		.loc 2 527 0
 1314 000a 40F20000 		movw	r0, #:lower16:.LC0
 1315 000e C0F20000 		movt	r0, #:upper16:.LC0
 1316 0012 40F20003 		movw	r3, #:lower16:VCOM_puts
 1317 0016 C0F20003 		movt	r3, #:upper16:VCOM_puts
 1318 001a 9847     		blx	r3
 528:..//utils/usbSerial/usbSerial.c **** 	
 529:..//utils/usbSerial/usbSerial.c **** 	temp = ((hex >> 4) & 0x0F) + 0x30;// add 0x30 to get ASCII value
 1319              		.loc 2 529 0
 1320 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1321 001e 4FEA1313 		lsr	r3, r3, #4
 1322 0022 DBB2     		uxtb	r3, r3
 1323 0024 03F13003 		add	r3, r3, #48
 1324 0028 FB73     		strb	r3, [r7, #15]
 530:..//utils/usbSerial/usbSerial.c **** 	if(temp > 0x39)
 1325              		.loc 2 530 0
 1326 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1327 002c 392B     		cmp	r3, #57
 1328 002e 03D9     		bls	.L82
 531:..//utils/usbSerial/usbSerial.c **** 		temp += 7; // alphabet, not numeral
 1329              		.loc 2 531 0
 1330 0030 FB7B     		ldrb	r3, [r7, #15]
 1331 0032 03F10703 		add	r3, r3, #7
 1332 0036 FB73     		strb	r3, [r7, #15]
 1333              	.L82:
 532:..//utils/usbSerial/usbSerial.c **** 	VCOM_putc((char)temp); 
 1334              		.loc 2 532 0
 1335 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1336 003a 1846     		mov	r0, r3
 1337 003c 40F20003 		movw	r3, #:lower16:VCOM_putc
 1338 0040 C0F20003 		movt	r3, #:upper16:VCOM_putc
 1339 0044 9847     		blx	r3
 533:..//utils/usbSerial/usbSerial.c **** 	
 534:..//utils/usbSerial/usbSerial.c **** 	temp = ((hex) & 0x0F) + 0x30;
 1340              		.loc 2 534 0
 1341 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1342 0048 03F00F03 		and	r3, r3, #15
 1343 004c 03F13003 		add	r3, r3, #48
 1344 0050 FB73     		strb	r3, [r7, #15]
 535:..//utils/usbSerial/usbSerial.c **** 	if(temp > 0x39)
 1345              		.loc 2 535 0
 1346 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1347 0054 392B     		cmp	r3, #57
 1348 0056 03D9     		bls	.L83
 536:..//utils/usbSerial/usbSerial.c **** 		temp += 7;
 1349              		.loc 2 536 0
 1350 0058 FB7B     		ldrb	r3, [r7, #15]
 1351 005a 03F10703 		add	r3, r3, #7
 1352 005e FB73     		strb	r3, [r7, #15]
 1353              	.L83:
 537:..//utils/usbSerial/usbSerial.c **** 		
 538:..//utils/usbSerial/usbSerial.c **** 	VCOM_putc((char)temp);
 1354              		.loc 2 538 0
 1355 0060 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1356 0062 1846     		mov	r0, r3
 1357 0064 40F20003 		movw	r3, #:lower16:VCOM_putc
 1358 0068 C0F20003 		movt	r3, #:upper16:VCOM_putc
 1359 006c 9847     		blx	r3
 539:..//utils/usbSerial/usbSerial.c **** }
 1360              		.loc 2 539 0
 1361 006e 07F11007 		add	r7, r7, #16
 1362 0072 BD46     		mov	sp, r7
 1363 0074 80BD     		pop	{r7, pc}
 1364              		.cfi_endproc
 1365              	.LFE47:
 1367 0076 00BF     		.section	.text.VCOM_gets,"ax",%progbits
 1368              		.align	2
 1369              		.global	VCOM_gets
 1370              		.thumb
 1371              		.thumb_func
 1373              	VCOM_gets:
 1374              	.LFB48:
 540:..//utils/usbSerial/usbSerial.c **** void VCOM_gets(char* str)
 541:..//utils/usbSerial/usbSerial.c **** {
 1375              		.loc 2 541 0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 16
 1378              		@ frame_needed = 1, uses_anonymous_args = 0
 1379 0000 80B5     		push	{r7, lr}
 1380              	.LCFI53:
 1381              		.cfi_def_cfa_offset 8
 1382 0002 84B0     		sub	sp, sp, #16
 1383              	.LCFI54:
 1384              		.cfi_def_cfa_offset 24
 1385 0004 00AF     		add	r7, sp, #0
 1386              		.cfi_offset 14, -4
 1387              		.cfi_offset 7, -8
 1388              	.LCFI55:
 1389              		.cfi_def_cfa_register 7
 1390 0006 7860     		str	r0, [r7, #4]
 542:..//utils/usbSerial/usbSerial.c **** 	char c;
 543:..//utils/usbSerial/usbSerial.c **** 	c = VCOM_getc();
 1391              		.loc 2 543 0
 1392 0008 40F20003 		movw	r3, #:lower16:VCOM_getc
 1393 000c C0F20003 		movt	r3, #:upper16:VCOM_getc
 1394 0010 9847     		blx	r3
 1395 0012 0346     		mov	r3, r0
 1396 0014 FB73     		strb	r3, [r7, #15]
 544:..//utils/usbSerial/usbSerial.c **** 	while((c != '\n') && (c != '\r'))
 1397              		.loc 2 544 0
 1398 0016 0DE0     		b	.L86
 1399              	.L88:
 545:..//utils/usbSerial/usbSerial.c **** 	{
 546:..//utils/usbSerial/usbSerial.c **** 		*str++ = c;
 1400              		.loc 2 546 0
 1401 0018 7B68     		ldr	r3, [r7, #4]
 1402 001a FA7B     		ldrb	r2, [r7, #15]
 1403 001c 1A70     		strb	r2, [r3, #0]
 1404 001e 7B68     		ldr	r3, [r7, #4]
 1405 0020 03F10103 		add	r3, r3, #1
 1406 0024 7B60     		str	r3, [r7, #4]
 547:..//utils/usbSerial/usbSerial.c **** 		c = VCOM_getc();
 1407              		.loc 2 547 0
 1408 0026 40F20003 		movw	r3, #:lower16:VCOM_getc
 1409 002a C0F20003 		movt	r3, #:upper16:VCOM_getc
 1410 002e 9847     		blx	r3
 1411 0030 0346     		mov	r3, r0
 1412 0032 FB73     		strb	r3, [r7, #15]
 1413              	.L86:
 1414              		.loc 2 544 0
 1415 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1416 0036 0A2B     		cmp	r3, #10
 1417 0038 02D0     		beq	.L87
 1418 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1419 003c 0D2B     		cmp	r3, #13
 1420 003e EBD1     		bne	.L88
 1421              	.L87:
 548:..//utils/usbSerial/usbSerial.c **** 	}
 549:..//utils/usbSerial/usbSerial.c **** 	*str = '\0';
 1422              		.loc 2 549 0
 1423 0040 7B68     		ldr	r3, [r7, #4]
 1424 0042 4FF00002 		mov	r2, #0
 1425 0046 1A70     		strb	r2, [r3, #0]
 550:..//utils/usbSerial/usbSerial.c **** }
 1426              		.loc 2 550 0
 1427 0048 07F11007 		add	r7, r7, #16
 1428 004c BD46     		mov	sp, r7
 1429 004e 80BD     		pop	{r7, pc}
 1430              		.cfi_endproc
 1431              	.LFE48:
 1433              		.section	.text.VCOM_getc_echo,"ax",%progbits
 1434              		.align	2
 1435              		.global	VCOM_getc_echo
 1436              		.thumb
 1437              		.thumb_func
 1439              	VCOM_getc_echo:
 1440              	.LFB49:
 551:..//utils/usbSerial/usbSerial.c **** char VCOM_getc_echo()
 552:..//utils/usbSerial/usbSerial.c **** {
 1441              		.loc 2 552 0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 8
 1444              		@ frame_needed = 1, uses_anonymous_args = 0
 1445 0000 80B5     		push	{r7, lr}
 1446              	.LCFI56:
 1447              		.cfi_def_cfa_offset 8
 1448 0002 82B0     		sub	sp, sp, #8
 1449              	.LCFI57:
 1450              		.cfi_def_cfa_offset 16
 1451 0004 00AF     		add	r7, sp, #0
 1452              		.cfi_offset 14, -4
 1453              		.cfi_offset 7, -8
 1454              	.LCFI58:
 1455              		.cfi_def_cfa_register 7
 553:..//utils/usbSerial/usbSerial.c **** 	char c;
 554:..//utils/usbSerial/usbSerial.c **** 	c = VCOM_getc();
 1456              		.loc 2 554 0
 1457 0006 40F20003 		movw	r3, #:lower16:VCOM_getc
 1458 000a C0F20003 		movt	r3, #:upper16:VCOM_getc
 1459 000e 9847     		blx	r3
 1460 0010 0346     		mov	r3, r0
 1461 0012 FB71     		strb	r3, [r7, #7]
 555:..//utils/usbSerial/usbSerial.c **** 	VCOM_putc(c);
 1462              		.loc 2 555 0
 1463 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1464 0016 1846     		mov	r0, r3
 1465 0018 40F20003 		movw	r3, #:lower16:VCOM_putc
 1466 001c C0F20003 		movt	r3, #:upper16:VCOM_putc
 1467 0020 9847     		blx	r3
 556:..//utils/usbSerial/usbSerial.c **** 	return c;
 1468              		.loc 2 556 0
 1469 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 557:..//utils/usbSerial/usbSerial.c **** }
 1470              		.loc 2 557 0
 1471 0024 1846     		mov	r0, r3
 1472 0026 07F10807 		add	r7, r7, #8
 1473 002a BD46     		mov	sp, r7
 1474 002c 80BD     		pop	{r7, pc}
 1475              		.cfi_endproc
 1476              	.LFE49:
 1478 002e 00BF     		.section	.text.VCOM_gets_echo,"ax",%progbits
 1479              		.align	2
 1480              		.global	VCOM_gets_echo
 1481              		.thumb
 1482              		.thumb_func
 1484              	VCOM_gets_echo:
 1485              	.LFB50:
 558:..//utils/usbSerial/usbSerial.c **** void VCOM_gets_echo(char *str)
 559:..//utils/usbSerial/usbSerial.c **** {
 1486              		.loc 2 559 0
 1487              		.cfi_startproc
 1488              		@ args = 0, pretend = 0, frame = 16
 1489              		@ frame_needed = 1, uses_anonymous_args = 0
 1490 0000 80B5     		push	{r7, lr}
 1491              	.LCFI59:
 1492              		.cfi_def_cfa_offset 8
 1493 0002 84B0     		sub	sp, sp, #16
 1494              	.LCFI60:
 1495              		.cfi_def_cfa_offset 24
 1496 0004 00AF     		add	r7, sp, #0
 1497              		.cfi_offset 14, -4
 1498              		.cfi_offset 7, -8
 1499              	.LCFI61:
 1500              		.cfi_def_cfa_register 7
 1501 0006 7860     		str	r0, [r7, #4]
 560:..//utils/usbSerial/usbSerial.c **** 	char c;
 561:..//utils/usbSerial/usbSerial.c **** 	c = VCOM_getc_echo();
 1502              		.loc 2 561 0
 1503 0008 40F20003 		movw	r3, #:lower16:VCOM_getc_echo
 1504 000c C0F20003 		movt	r3, #:upper16:VCOM_getc_echo
 1505 0010 9847     		blx	r3
 1506 0012 0346     		mov	r3, r0
 1507 0014 FB73     		strb	r3, [r7, #15]
 562:..//utils/usbSerial/usbSerial.c **** 	while((c != '\n') && (c != '\r'))
 1508              		.loc 2 562 0
 1509 0016 0DE0     		b	.L93
 1510              	.L95:
 563:..//utils/usbSerial/usbSerial.c **** 	{
 564:..//utils/usbSerial/usbSerial.c **** 		*str++ = c;
 1511              		.loc 2 564 0
 1512 0018 7B68     		ldr	r3, [r7, #4]
 1513 001a FA7B     		ldrb	r2, [r7, #15]
 1514 001c 1A70     		strb	r2, [r3, #0]
 1515 001e 7B68     		ldr	r3, [r7, #4]
 1516 0020 03F10103 		add	r3, r3, #1
 1517 0024 7B60     		str	r3, [r7, #4]
 565:..//utils/usbSerial/usbSerial.c **** 		c = VCOM_getc_echo();
 1518              		.loc 2 565 0
 1519 0026 40F20003 		movw	r3, #:lower16:VCOM_getc_echo
 1520 002a C0F20003 		movt	r3, #:upper16:VCOM_getc_echo
 1521 002e 9847     		blx	r3
 1522 0030 0346     		mov	r3, r0
 1523 0032 FB73     		strb	r3, [r7, #15]
 1524              	.L93:
 1525              		.loc 2 562 0
 1526 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1527 0036 0A2B     		cmp	r3, #10
 1528 0038 02D0     		beq	.L94
 1529 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1530 003c 0D2B     		cmp	r3, #13
 1531 003e EBD1     		bne	.L95
 1532              	.L94:
 566:..//utils/usbSerial/usbSerial.c **** 	}
 567:..//utils/usbSerial/usbSerial.c **** 	*str = '\0';
 1533              		.loc 2 567 0
 1534 0040 7B68     		ldr	r3, [r7, #4]
 1535 0042 4FF00002 		mov	r2, #0
 1536 0046 1A70     		strb	r2, [r3, #0]
 568:..//utils/usbSerial/usbSerial.c **** }
 1537              		.loc 2 568 0
 1538 0048 07F11007 		add	r7, r7, #16
 1539 004c BD46     		mov	sp, r7
 1540 004e 80BD     		pop	{r7, pc}
 1541              		.cfi_endproc
 1542              	.LFE50:
 1544              		.section	.text.xatoi,"ax",%progbits
 1545              		.align	2
 1546              		.global	xatoi
 1547              		.thumb
 1548              		.thumb_func
 1550              	xatoi:
 1551              	.LFB51:
 569:..//utils/usbSerial/usbSerial.c **** 
 570:..//utils/usbSerial/usbSerial.c **** /* Original code by ELM_ChaN. Modified by Martin Thomas */
 571:..//utils/usbSerial/usbSerial.c **** int xatoi (char **str, long *res)
 572:..//utils/usbSerial/usbSerial.c **** {
 1552              		.loc 2 572 0
 1553              		.cfi_startproc
 1554              		@ args = 0, pretend = 0, frame = 16
 1555              		@ frame_needed = 1, uses_anonymous_args = 0
 1556              		@ link register save eliminated.
 1557 0000 80B4     		push	{r7}
 1558              	.LCFI62:
 1559              		.cfi_def_cfa_offset 4
 1560 0002 85B0     		sub	sp, sp, #20
 1561              	.LCFI63:
 1562              		.cfi_def_cfa_offset 24
 1563 0004 00AF     		add	r7, sp, #0
 1564              		.cfi_offset 7, -4
 1565              	.LCFI64:
 1566              		.cfi_def_cfa_register 7
 1567 0006 7860     		str	r0, [r7, #4]
 1568 0008 3960     		str	r1, [r7, #0]
 573:..//utils/usbSerial/usbSerial.c **** 	uint32_t val;
 574:..//utils/usbSerial/usbSerial.c **** 	uint8_t c, radix, s = 0;
 1569              		.loc 2 574 0
 1570 000a 4FF00003 		mov	r3, #0
 1571 000e FB73     		strb	r3, [r7, #15]
 575:..//utils/usbSerial/usbSerial.c **** 
 576:..//utils/usbSerial/usbSerial.c **** 
 577:..//utils/usbSerial/usbSerial.c **** 	while ((c = **str) == ' ') (*str)++;
 1572              		.loc 2 577 0
 1573 0010 05E0     		b	.L98
 1574              	.L99:
 1575 0012 7B68     		ldr	r3, [r7, #4]
 1576 0014 1B68     		ldr	r3, [r3, #0]
 1577 0016 03F10102 		add	r2, r3, #1
 1578 001a 7B68     		ldr	r3, [r7, #4]
 1579 001c 1A60     		str	r2, [r3, #0]
 1580              	.L98:
 1581 001e 7B68     		ldr	r3, [r7, #4]
 1582 0020 1B68     		ldr	r3, [r3, #0]
 1583 0022 1B78     		ldrb	r3, [r3, #0]
 1584 0024 7B73     		strb	r3, [r7, #13]
 1585 0026 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1586 0028 202B     		cmp	r3, #32
 1587 002a F2D0     		beq	.L99
 578:..//utils/usbSerial/usbSerial.c **** 	if (c == '-') {
 1588              		.loc 2 578 0
 1589 002c 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1590 002e 2D2B     		cmp	r3, #45
 1591 0030 0CD1     		bne	.L100
 579:..//utils/usbSerial/usbSerial.c **** 		s = 1;
 1592              		.loc 2 579 0
 1593 0032 4FF00103 		mov	r3, #1
 1594 0036 FB73     		strb	r3, [r7, #15]
 580:..//utils/usbSerial/usbSerial.c **** 		c = *(++(*str));
 1595              		.loc 2 580 0
 1596 0038 7B68     		ldr	r3, [r7, #4]
 1597 003a 1B68     		ldr	r3, [r3, #0]
 1598 003c 03F10102 		add	r2, r3, #1
 1599 0040 7B68     		ldr	r3, [r7, #4]
 1600 0042 1A60     		str	r2, [r3, #0]
 1601 0044 7B68     		ldr	r3, [r7, #4]
 1602 0046 1B68     		ldr	r3, [r3, #0]
 1603 0048 1B78     		ldrb	r3, [r3, #0]
 1604 004a 7B73     		strb	r3, [r7, #13]
 1605              	.L100:
 581:..//utils/usbSerial/usbSerial.c **** 	}
 582:..//utils/usbSerial/usbSerial.c **** 	if (c == '0') {
 1606              		.loc 2 582 0
 1607 004c 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1608 004e 302B     		cmp	r3, #48
 1609 0050 43D1     		bne	.L101
 583:..//utils/usbSerial/usbSerial.c **** 		c = *(++(*str));
 1610              		.loc 2 583 0
 1611 0052 7B68     		ldr	r3, [r7, #4]
 1612 0054 1B68     		ldr	r3, [r3, #0]
 1613 0056 03F10102 		add	r2, r3, #1
 1614 005a 7B68     		ldr	r3, [r7, #4]
 1615 005c 1A60     		str	r2, [r3, #0]
 1616 005e 7B68     		ldr	r3, [r7, #4]
 1617 0060 1B68     		ldr	r3, [r3, #0]
 1618 0062 1B78     		ldrb	r3, [r3, #0]
 1619 0064 7B73     		strb	r3, [r7, #13]
 584:..//utils/usbSerial/usbSerial.c **** 		if (c <= ' ') {
 1620              		.loc 2 584 0
 1621 0066 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1622 0068 202B     		cmp	r3, #32
 1623 006a 06D8     		bhi	.L102
 585:..//utils/usbSerial/usbSerial.c **** 			*res = 0; return 1;
 1624              		.loc 2 585 0
 1625 006c 3B68     		ldr	r3, [r7, #0]
 1626 006e 4FF00002 		mov	r2, #0
 1627 0072 1A60     		str	r2, [r3, #0]
 1628 0074 4FF00103 		mov	r3, #1
 1629 0078 7EE0     		b	.L103
 1630              	.L102:
 586:..//utils/usbSerial/usbSerial.c **** 		}
 587:..//utils/usbSerial/usbSerial.c **** 		if (c == 'x') {
 1631              		.loc 2 587 0
 1632 007a 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1633 007c 782B     		cmp	r3, #120
 1634 007e 0DD1     		bne	.L104
 588:..//utils/usbSerial/usbSerial.c **** 			radix = 16;
 1635              		.loc 2 588 0
 1636 0080 4FF01003 		mov	r3, #16
 1637 0084 BB73     		strb	r3, [r7, #14]
 589:..//utils/usbSerial/usbSerial.c **** 			c = *(++(*str));
 1638              		.loc 2 589 0
 1639 0086 7B68     		ldr	r3, [r7, #4]
 1640 0088 1B68     		ldr	r3, [r3, #0]
 1641 008a 03F10102 		add	r2, r3, #1
 1642 008e 7B68     		ldr	r3, [r7, #4]
 1643 0090 1A60     		str	r2, [r3, #0]
 1644 0092 7B68     		ldr	r3, [r7, #4]
 1645 0094 1B68     		ldr	r3, [r3, #0]
 1646 0096 1B78     		ldrb	r3, [r3, #0]
 1647 0098 7B73     		strb	r3, [r7, #13]
 590:..//utils/usbSerial/usbSerial.c **** 		} else {
 591:..//utils/usbSerial/usbSerial.c **** 			if (c == 'b') {
 592:..//utils/usbSerial/usbSerial.c **** 				radix = 2;
 593:..//utils/usbSerial/usbSerial.c **** 				c = *(++(*str));
 594:..//utils/usbSerial/usbSerial.c **** 			} else {
 595:..//utils/usbSerial/usbSerial.c **** 				if ((c >= '0')&&(c <= '9'))
 596:..//utils/usbSerial/usbSerial.c **** 					radix = 8;
 597:..//utils/usbSerial/usbSerial.c **** 				else
 598:..//utils/usbSerial/usbSerial.c **** 					return 0;
 1648              		.loc 2 598 0
 1649 009a 2AE0     		b	.L108
 1650              	.L104:
 1651              		.loc 2 591 0
 1652 009c 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1653 009e 622B     		cmp	r3, #98
 1654 00a0 0DD1     		bne	.L106
 1655              		.loc 2 592 0
 1656 00a2 4FF00203 		mov	r3, #2
 1657 00a6 BB73     		strb	r3, [r7, #14]
 1658              		.loc 2 593 0
 1659 00a8 7B68     		ldr	r3, [r7, #4]
 1660 00aa 1B68     		ldr	r3, [r3, #0]
 1661 00ac 03F10102 		add	r2, r3, #1
 1662 00b0 7B68     		ldr	r3, [r7, #4]
 1663 00b2 1A60     		str	r2, [r3, #0]
 1664 00b4 7B68     		ldr	r3, [r7, #4]
 1665 00b6 1B68     		ldr	r3, [r3, #0]
 1666 00b8 1B78     		ldrb	r3, [r3, #0]
 1667 00ba 7B73     		strb	r3, [r7, #13]
 1668              		.loc 2 598 0
 1669 00bc 19E0     		b	.L108
 1670              	.L106:
 1671              		.loc 2 595 0
 1672 00be 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1673 00c0 2F2B     		cmp	r3, #47
 1674 00c2 07D9     		bls	.L107
 1675 00c4 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1676 00c6 392B     		cmp	r3, #57
 1677 00c8 04D8     		bhi	.L107
 1678              		.loc 2 596 0
 1679 00ca 4FF00803 		mov	r3, #8
 1680 00ce BB73     		strb	r3, [r7, #14]
 1681              		.loc 2 595 0
 1682 00d0 00BF     		nop
 1683 00d2 0EE0     		b	.L108
 1684              	.L107:
 1685              		.loc 2 598 0
 1686 00d4 4FF00003 		mov	r3, #0
 1687 00d8 4EE0     		b	.L103
 1688              	.L101:
 599:..//utils/usbSerial/usbSerial.c **** 			}
 600:..//utils/usbSerial/usbSerial.c **** 		}
 601:..//utils/usbSerial/usbSerial.c **** 	} else {
 602:..//utils/usbSerial/usbSerial.c **** 		if ((c < '1')||(c > '9'))
 1689              		.loc 2 602 0
 1690 00da 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1691 00dc 302B     		cmp	r3, #48
 1692 00de 02D9     		bls	.L109
 1693 00e0 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1694 00e2 392B     		cmp	r3, #57
 1695 00e4 02D9     		bls	.L110
 1696              	.L109:
 603:..//utils/usbSerial/usbSerial.c **** 			return 0;
 1697              		.loc 2 603 0
 1698 00e6 4FF00003 		mov	r3, #0
 1699 00ea 45E0     		b	.L103
 1700              	.L110:
 604:..//utils/usbSerial/usbSerial.c **** 		radix = 10;
 1701              		.loc 2 604 0
 1702 00ec 4FF00A03 		mov	r3, #10
 1703 00f0 BB73     		strb	r3, [r7, #14]
 1704              	.L108:
 605:..//utils/usbSerial/usbSerial.c **** 	}
 606:..//utils/usbSerial/usbSerial.c **** 	val = 0;
 1705              		.loc 2 606 0
 1706 00f2 4FF00003 		mov	r3, #0
 1707 00f6 BB60     		str	r3, [r7, #8]
 607:..//utils/usbSerial/usbSerial.c **** 	while (c > ' ') {
 1708              		.loc 2 607 0
 1709 00f8 2FE0     		b	.L111
 1710              	.L115:
 608:..//utils/usbSerial/usbSerial.c **** 		if (c >= 'a') c -= 0x20;
 1711              		.loc 2 608 0
 1712 00fa 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1713 00fc 602B     		cmp	r3, #96
 1714 00fe 03D9     		bls	.L112
 1715 0100 7B7B     		ldrb	r3, [r7, #13]
 1716 0102 A3F12003 		sub	r3, r3, #32
 1717 0106 7B73     		strb	r3, [r7, #13]
 1718              	.L112:
 609:..//utils/usbSerial/usbSerial.c **** 		c -= '0';
 1719              		.loc 2 609 0
 1720 0108 7B7B     		ldrb	r3, [r7, #13]
 1721 010a A3F13003 		sub	r3, r3, #48
 1722 010e 7B73     		strb	r3, [r7, #13]
 610:..//utils/usbSerial/usbSerial.c **** 		if (c >= 17) {
 1723              		.loc 2 610 0
 1724 0110 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1725 0112 102B     		cmp	r3, #16
 1726 0114 09D9     		bls	.L113
 611:..//utils/usbSerial/usbSerial.c **** 			c -= 7;
 1727              		.loc 2 611 0
 1728 0116 7B7B     		ldrb	r3, [r7, #13]
 1729 0118 A3F10703 		sub	r3, r3, #7
 1730 011c 7B73     		strb	r3, [r7, #13]
 612:..//utils/usbSerial/usbSerial.c **** 			if (c <= 9) return 0;
 1731              		.loc 2 612 0
 1732 011e 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1733 0120 092B     		cmp	r3, #9
 1734 0122 02D8     		bhi	.L113
 1735 0124 4FF00003 		mov	r3, #0
 1736 0128 26E0     		b	.L103
 1737              	.L113:
 613:..//utils/usbSerial/usbSerial.c **** 		}
 614:..//utils/usbSerial/usbSerial.c **** 		if (c >= radix) return 0;
 1738              		.loc 2 614 0
 1739 012a 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 1740 012c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1741 012e 9A42     		cmp	r2, r3
 1742 0130 02D3     		bcc	.L114
 1743 0132 4FF00003 		mov	r3, #0
 1744 0136 1FE0     		b	.L103
 1745              	.L114:
 615:..//utils/usbSerial/usbSerial.c **** 		val = val * radix + c;
 1746              		.loc 2 615 0
 1747 0138 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1748 013a BA68     		ldr	r2, [r7, #8]
 1749 013c 02FB03F2 		mul	r2, r2, r3
 1750 0140 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1751 0142 1344     		add	r3, r2, r3
 1752 0144 BB60     		str	r3, [r7, #8]
 616:..//utils/usbSerial/usbSerial.c **** 		c = *(++(*str));
 1753              		.loc 2 616 0
 1754 0146 7B68     		ldr	r3, [r7, #4]
 1755 0148 1B68     		ldr	r3, [r3, #0]
 1756 014a 03F10102 		add	r2, r3, #1
 1757 014e 7B68     		ldr	r3, [r7, #4]
 1758 0150 1A60     		str	r2, [r3, #0]
 1759 0152 7B68     		ldr	r3, [r7, #4]
 1760 0154 1B68     		ldr	r3, [r3, #0]
 1761 0156 1B78     		ldrb	r3, [r3, #0]
 1762 0158 7B73     		strb	r3, [r7, #13]
 1763              	.L111:
 1764              		.loc 2 607 0
 1765 015a 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1766 015c 202B     		cmp	r3, #32
 1767 015e CCD8     		bhi	.L115
 617:..//utils/usbSerial/usbSerial.c **** 	}
 618:..//utils/usbSerial/usbSerial.c **** 	if (s) val = -val;
 1768              		.loc 2 618 0
 1769 0160 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1770 0162 002B     		cmp	r3, #0
 1771 0164 03D0     		beq	.L116
 1772 0166 BB68     		ldr	r3, [r7, #8]
 1773 0168 C3F10003 		rsb	r3, r3, #0
 1774 016c BB60     		str	r3, [r7, #8]
 1775              	.L116:
 619:..//utils/usbSerial/usbSerial.c **** 	*res = val;
 1776              		.loc 2 619 0
 1777 016e BA68     		ldr	r2, [r7, #8]
 1778 0170 3B68     		ldr	r3, [r7, #0]
 1779 0172 1A60     		str	r2, [r3, #0]
 620:..//utils/usbSerial/usbSerial.c **** 	return 1;
 1780              		.loc 2 620 0
 1781 0174 4FF00103 		mov	r3, #1
 1782              	.L103:
 621:..//utils/usbSerial/usbSerial.c **** }
 1783              		.loc 2 621 0
 1784 0178 1846     		mov	r0, r3
 1785 017a 07F11407 		add	r7, r7, #20
 1786 017e BD46     		mov	sp, r7
 1787 0180 80BC     		pop	{r7}
 1788 0182 7047     		bx	lr
 1789              		.cfi_endproc
 1790              	.LFE51:
 1792              		.section	.text.xitoa,"ax",%progbits
 1793              		.align	2
 1794              		.global	xitoa
 1795              		.thumb
 1796              		.thumb_func
 1798              	xitoa:
 1799              	.LFB52:
 622:..//utils/usbSerial/usbSerial.c **** 
 623:..//utils/usbSerial/usbSerial.c **** 
 624:..//utils/usbSerial/usbSerial.c **** 
 625:..//utils/usbSerial/usbSerial.c **** void xitoa (long val, int radix, int len)
 626:..//utils/usbSerial/usbSerial.c **** {
 1800              		.loc 2 626 0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 48
 1803              		@ frame_needed = 1, uses_anonymous_args = 0
 1804 0000 80B5     		push	{r7, lr}
 1805              	.LCFI65:
 1806              		.cfi_def_cfa_offset 8
 1807 0002 8CB0     		sub	sp, sp, #48
 1808              	.LCFI66:
 1809              		.cfi_def_cfa_offset 56
 1810 0004 00AF     		add	r7, sp, #0
 1811              		.cfi_offset 14, -4
 1812              		.cfi_offset 7, -8
 1813              	.LCFI67:
 1814              		.cfi_def_cfa_register 7
 1815 0006 F860     		str	r0, [r7, #12]
 1816 0008 B960     		str	r1, [r7, #8]
 1817 000a 7A60     		str	r2, [r7, #4]
 627:..//utils/usbSerial/usbSerial.c **** 	uint8_t c, r, sgn = 0, pad = ' ';
 1818              		.loc 2 627 0
 1819 000c 4FF00003 		mov	r3, #0
 1820 0010 87F82930 		strb	r3, [r7, #41]
 1821 0014 4FF02003 		mov	r3, #32
 1822 0018 87F82A30 		strb	r3, [r7, #42]
 628:..//utils/usbSerial/usbSerial.c **** 	uint8_t s[20], i = 0;
 1823              		.loc 2 628 0
 1824 001c 4FF00003 		mov	r3, #0
 1825 0020 87F82B30 		strb	r3, [r7, #43]
 629:..//utils/usbSerial/usbSerial.c **** 	uint32_t v;
 630:..//utils/usbSerial/usbSerial.c **** 
 631:..//utils/usbSerial/usbSerial.c **** 
 632:..//utils/usbSerial/usbSerial.c **** 	if (radix < 0) {
 1826              		.loc 2 632 0
 1827 0024 BB68     		ldr	r3, [r7, #8]
 1828 0026 002B     		cmp	r3, #0
 1829 0028 0EDA     		bge	.L119
 633:..//utils/usbSerial/usbSerial.c **** 		radix = -radix;
 1830              		.loc 2 633 0
 1831 002a BB68     		ldr	r3, [r7, #8]
 1832 002c C3F10003 		rsb	r3, r3, #0
 1833 0030 BB60     		str	r3, [r7, #8]
 634:..//utils/usbSerial/usbSerial.c **** 		if (val < 0) {
 1834              		.loc 2 634 0
 1835 0032 FB68     		ldr	r3, [r7, #12]
 1836 0034 002B     		cmp	r3, #0
 1837 0036 07DA     		bge	.L119
 635:..//utils/usbSerial/usbSerial.c **** 			val = -val;
 1838              		.loc 2 635 0
 1839 0038 FB68     		ldr	r3, [r7, #12]
 1840 003a C3F10003 		rsb	r3, r3, #0
 1841 003e FB60     		str	r3, [r7, #12]
 636:..//utils/usbSerial/usbSerial.c **** 			sgn = '-';
 1842              		.loc 2 636 0
 1843 0040 4FF02D03 		mov	r3, #45
 1844 0044 87F82930 		strb	r3, [r7, #41]
 1845              	.L119:
 637:..//utils/usbSerial/usbSerial.c **** 		}
 638:..//utils/usbSerial/usbSerial.c **** 	}
 639:..//utils/usbSerial/usbSerial.c **** 	v = val;
 1846              		.loc 2 639 0
 1847 0048 FB68     		ldr	r3, [r7, #12]
 1848 004a FB62     		str	r3, [r7, #44]
 640:..//utils/usbSerial/usbSerial.c **** 	r = radix;
 1849              		.loc 2 640 0
 1850 004c BB68     		ldr	r3, [r7, #8]
 1851 004e 87F82830 		strb	r3, [r7, #40]
 641:..//utils/usbSerial/usbSerial.c **** 	if (len < 0) {
 1852              		.loc 2 641 0
 1853 0052 7B68     		ldr	r3, [r7, #4]
 1854 0054 002B     		cmp	r3, #0
 1855 0056 07DA     		bge	.L120
 642:..//utils/usbSerial/usbSerial.c **** 		len = -len;
 1856              		.loc 2 642 0
 1857 0058 7B68     		ldr	r3, [r7, #4]
 1858 005a C3F10003 		rsb	r3, r3, #0
 1859 005e 7B60     		str	r3, [r7, #4]
 643:..//utils/usbSerial/usbSerial.c **** 		pad = '0';
 1860              		.loc 2 643 0
 1861 0060 4FF03003 		mov	r3, #48
 1862 0064 87F82A30 		strb	r3, [r7, #42]
 1863              	.L120:
 644:..//utils/usbSerial/usbSerial.c **** 	}
 645:..//utils/usbSerial/usbSerial.c **** 	if (len > 20) return;
 1864              		.loc 2 645 0
 1865 0068 7B68     		ldr	r3, [r7, #4]
 1866 006a 142B     		cmp	r3, #20
 1867 006c 74DC     		bgt	.L129
 1868              	.L121:
 646:..//utils/usbSerial/usbSerial.c **** 	do {
 647:..//utils/usbSerial/usbSerial.c **** 		c = (uint8_t)(v % r);
 1869              		.loc 2 647 0
 1870 006e 97F82820 		ldrb	r2, [r7, #40]	@ zero_extendqisi2
 1871 0072 FB6A     		ldr	r3, [r7, #44]
 1872 0074 B3FBF2F1 		udiv	r1, r3, r2
 1873 0078 02FB01F2 		mul	r2, r2, r1
 1874 007c C2EB0303 		rsb	r3, r2, r3
 1875 0080 87F82730 		strb	r3, [r7, #39]
 648:..//utils/usbSerial/usbSerial.c **** 		if (c >= 10) c += 7;
 1876              		.loc 2 648 0
 1877 0084 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1878 0088 092B     		cmp	r3, #9
 1879 008a 05D9     		bls	.L123
 1880 008c 97F82730 		ldrb	r3, [r7, #39]
 1881 0090 03F10703 		add	r3, r3, #7
 1882 0094 87F82730 		strb	r3, [r7, #39]
 1883              	.L123:
 649:..//utils/usbSerial/usbSerial.c **** 		c += '0';
 1884              		.loc 2 649 0
 1885 0098 97F82730 		ldrb	r3, [r7, #39]
 1886 009c 03F13003 		add	r3, r3, #48
 1887 00a0 87F82730 		strb	r3, [r7, #39]
 650:..//utils/usbSerial/usbSerial.c **** 		s[i++] = c;
 1888              		.loc 2 650 0
 1889 00a4 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 1890 00a8 07F13002 		add	r2, r7, #48
 1891 00ac 1344     		add	r3, r2, r3
 1892 00ae 97F82720 		ldrb	r2, [r7, #39]
 1893 00b2 03F8202C 		strb	r2, [r3, #-32]
 1894 00b6 97F82B30 		ldrb	r3, [r7, #43]
 1895 00ba 03F10103 		add	r3, r3, #1
 1896 00be 87F82B30 		strb	r3, [r7, #43]
 651:..//utils/usbSerial/usbSerial.c **** 		v /= r;
 1897              		.loc 2 651 0
 1898 00c2 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1899 00c6 FA6A     		ldr	r2, [r7, #44]
 1900 00c8 B2FBF3F3 		udiv	r3, r2, r3
 1901 00cc FB62     		str	r3, [r7, #44]
 652:..//utils/usbSerial/usbSerial.c **** 	} while (v);
 1902              		.loc 2 652 0
 1903 00ce FB6A     		ldr	r3, [r7, #44]
 1904 00d0 002B     		cmp	r3, #0
 1905 00d2 CCD1     		bne	.L121
 653:..//utils/usbSerial/usbSerial.c **** 	if (sgn) s[i++] = sgn;
 1906              		.loc 2 653 0
 1907 00d4 97F82930 		ldrb	r3, [r7, #41]	@ zero_extendqisi2
 1908 00d8 002B     		cmp	r3, #0
 1909 00da 1FD0     		beq	.L130
 1910 00dc 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 1911 00e0 07F13002 		add	r2, r7, #48
 1912 00e4 1344     		add	r3, r2, r3
 1913 00e6 97F82920 		ldrb	r2, [r7, #41]
 1914 00ea 03F8202C 		strb	r2, [r3, #-32]
 1915 00ee 97F82B30 		ldrb	r3, [r7, #43]
 1916 00f2 03F10103 		add	r3, r3, #1
 1917 00f6 87F82B30 		strb	r3, [r7, #43]
 654:..//utils/usbSerial/usbSerial.c **** 	while (i < len)
 1918              		.loc 2 654 0
 1919 00fa 10E0     		b	.L125
 1920              	.L126:
 655:..//utils/usbSerial/usbSerial.c **** 		s[i++] = pad;
 1921              		.loc 2 655 0
 1922 00fc 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 1923 0100 07F13002 		add	r2, r7, #48
 1924 0104 1344     		add	r3, r2, r3
 1925 0106 97F82A20 		ldrb	r2, [r7, #42]
 1926 010a 03F8202C 		strb	r2, [r3, #-32]
 1927 010e 97F82B30 		ldrb	r3, [r7, #43]
 1928 0112 03F10103 		add	r3, r3, #1
 1929 0116 87F82B30 		strb	r3, [r7, #43]
 1930 011a 00E0     		b	.L125
 1931              	.L130:
 1932              		.loc 2 654 0
 1933 011c 00BF     		nop
 1934              	.L125:
 1935 011e 97F82B20 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 1936 0122 7B68     		ldr	r3, [r7, #4]
 1937 0124 9A42     		cmp	r2, r3
 1938 0126 E9DB     		blt	.L126
 1939              	.L127:
 656:..//utils/usbSerial/usbSerial.c **** 	do
 657:..//utils/usbSerial/usbSerial.c **** 		VCOM_putc(s[--i]);
 1940              		.loc 2 657 0
 1941 0128 97F82B30 		ldrb	r3, [r7, #43]
 1942 012c 03F1FF33 		add	r3, r3, #-1
 1943 0130 87F82B30 		strb	r3, [r7, #43]
 1944 0134 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 1945 0138 07F13002 		add	r2, r7, #48
 1946 013c 1344     		add	r3, r2, r3
 1947 013e 13F8203C 		ldrb	r3, [r3, #-32]	@ zero_extendqisi2
 1948 0142 1846     		mov	r0, r3
 1949 0144 40F20003 		movw	r3, #:lower16:VCOM_putc
 1950 0148 C0F20003 		movt	r3, #:upper16:VCOM_putc
 1951 014c 9847     		blx	r3
 658:..//utils/usbSerial/usbSerial.c **** 	while (i);
 1952              		.loc 2 658 0
 1953 014e 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 1954 0152 002B     		cmp	r3, #0
 1955 0154 E8D1     		bne	.L127
 1956 0156 00E0     		b	.L128
 1957              	.L129:
 1958              		.loc 2 645 0
 1959 0158 00BF     		nop
 1960              	.L128:
 659:..//utils/usbSerial/usbSerial.c **** }
 1961              		.loc 2 659 0
 1962 015a 07F13007 		add	r7, r7, #48
 1963 015e BD46     		mov	sp, r7
 1964 0160 80BD     		pop	{r7, pc}
 1965              		.cfi_endproc
 1966              	.LFE52:
 1968 0162 00BF     		.section	.rodata
 1969 0003 00       		.align	2
 1970              	.LC1:
 1971 0004 0A746F20 		.ascii	"\012to USB %s\012\000"
 1971      55534220 
 1971      25730A00 
 1972              		.section	.text.VCOM_printf,"ax",%progbits
 1973              		.align	2
 1974              		.global	VCOM_printf
 1975              		.thumb
 1976              		.thumb_func
 1978              	VCOM_printf:
 1979              	.LFB53:
 660:..//utils/usbSerial/usbSerial.c **** 
 661:..//utils/usbSerial/usbSerial.c **** void VCOM_printf (const char* str, ...)
 662:..//utils/usbSerial/usbSerial.c **** {
 1980              		.loc 2 662 0
 1981              		.cfi_startproc
 1982              		@ args = 4, pretend = 16, frame = 24
 1983              		@ frame_needed = 1, uses_anonymous_args = 1
 1984 0000 0FB4     		push	{r0, r1, r2, r3}
 1985              	.LCFI68:
 1986              		.cfi_def_cfa_offset 16
 1987 0002 80B5     		push	{r7, lr}
 1988              	.LCFI69:
 1989              		.cfi_def_cfa_offset 24
 1990 0004 86B0     		sub	sp, sp, #24
 1991              	.LCFI70:
 1992              		.cfi_def_cfa_offset 48
 1993 0006 00AF     		add	r7, sp, #0
 1994              		.cfi_offset 14, -20
 1995              		.cfi_offset 7, -24
 1996              		.cfi_offset 3, -4
 1997              		.cfi_offset 2, -8
 1998              		.cfi_offset 1, -12
 1999              		.cfi_offset 0, -16
 2000              	.LCFI71:
 2001              		.cfi_def_cfa_register 7
 663:..//utils/usbSerial/usbSerial.c **** 	printf("\nto USB %s\n",str);
 2002              		.loc 2 663 0
 2003 0008 40F20000 		movw	r0, #:lower16:.LC1
 2004 000c C0F20000 		movt	r0, #:upper16:.LC1
 2005 0010 396A     		ldr	r1, [r7, #32]
 2006 0012 40F20003 		movw	r3, #:lower16:printf
 2007 0016 C0F20003 		movt	r3, #:upper16:printf
 2008 001a 9847     		blx	r3
 664:..//utils/usbSerial/usbSerial.c **** 	// printf();
 665:..//utils/usbSerial/usbSerial.c **** 	va_list arp;
 666:..//utils/usbSerial/usbSerial.c **** 	int d, r, w, s, l;
 667:..//utils/usbSerial/usbSerial.c **** 
 668:..//utils/usbSerial/usbSerial.c **** 
 669:..//utils/usbSerial/usbSerial.c **** 	va_start(arp, str);
 2009              		.loc 2 669 0
 2010 001c 07F12403 		add	r3, r7, #36
 2011 0020 3B60     		str	r3, [r7, #0]
 670:..//utils/usbSerial/usbSerial.c **** 
 671:..//utils/usbSerial/usbSerial.c **** 	while ((d = *str++) != 0) {
 2012              		.loc 2 671 0
 2013 0022 C8E0     		b	.L132
 2014              	.L152:
 672:..//utils/usbSerial/usbSerial.c **** 		if (d != '%') {
 2015              		.loc 2 672 0
 2016 0024 7B68     		ldr	r3, [r7, #4]
 2017 0026 252B     		cmp	r3, #37
 2018 0028 08D0     		beq	.L133
 673:..//utils/usbSerial/usbSerial.c **** 			VCOM_putc(d); continue;
 2019              		.loc 2 673 0
 2020 002a 7B68     		ldr	r3, [r7, #4]
 2021 002c DBB2     		uxtb	r3, r3
 2022 002e 1846     		mov	r0, r3
 2023 0030 40F20003 		movw	r3, #:lower16:VCOM_putc
 2024 0034 C0F20003 		movt	r3, #:upper16:VCOM_putc
 2025 0038 9847     		blx	r3
 2026 003a BCE0     		b	.L132
 2027              	.L133:
 674:..//utils/usbSerial/usbSerial.c **** 		}
 675:..//utils/usbSerial/usbSerial.c **** 		d = *str++; w = r = s = l = 0;
 2028              		.loc 2 675 0
 2029 003c 3B6A     		ldr	r3, [r7, #32]
 2030 003e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2031 0040 7B60     		str	r3, [r7, #4]
 2032 0042 3B6A     		ldr	r3, [r7, #32]
 2033 0044 03F10103 		add	r3, r3, #1
 2034 0048 3B62     		str	r3, [r7, #32]
 2035 004a 4FF00003 		mov	r3, #0
 2036 004e 7B61     		str	r3, [r7, #20]
 2037 0050 7B69     		ldr	r3, [r7, #20]
 2038 0052 3B61     		str	r3, [r7, #16]
 2039 0054 3B69     		ldr	r3, [r7, #16]
 2040 0056 BB60     		str	r3, [r7, #8]
 2041 0058 BB68     		ldr	r3, [r7, #8]
 2042 005a FB60     		str	r3, [r7, #12]
 676:..//utils/usbSerial/usbSerial.c **** 		if (d == '0') {
 2043              		.loc 2 676 0
 2044 005c 7B68     		ldr	r3, [r7, #4]
 2045 005e 302B     		cmp	r3, #48
 2046 0060 20D1     		bne	.L135
 677:..//utils/usbSerial/usbSerial.c **** 			d = *str++; s = 1;
 2047              		.loc 2 677 0
 2048 0062 3B6A     		ldr	r3, [r7, #32]
 2049 0064 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2050 0066 7B60     		str	r3, [r7, #4]
 2051 0068 3B6A     		ldr	r3, [r7, #32]
 2052 006a 03F10103 		add	r3, r3, #1
 2053 006e 3B62     		str	r3, [r7, #32]
 2054 0070 4FF00103 		mov	r3, #1
 2055 0074 3B61     		str	r3, [r7, #16]
 678:..//utils/usbSerial/usbSerial.c **** 		}
 679:..//utils/usbSerial/usbSerial.c **** 		while ((d >= '0')&&(d <= '9')) {
 2056              		.loc 2 679 0
 2057 0076 15E0     		b	.L135
 2058              	.L137:
 680:..//utils/usbSerial/usbSerial.c **** 			w += w * 10 + (d - '0');
 2059              		.loc 2 680 0
 2060 0078 FA68     		ldr	r2, [r7, #12]
 2061 007a 1346     		mov	r3, r2
 2062 007c 4FEA8303 		lsl	r3, r3, #2
 2063 0080 1344     		add	r3, r3, r2
 2064 0082 4FEA4303 		lsl	r3, r3, #1
 2065 0086 1A46     		mov	r2, r3
 2066 0088 7B68     		ldr	r3, [r7, #4]
 2067 008a A3F13003 		sub	r3, r3, #48
 2068 008e 1344     		add	r3, r2, r3
 2069 0090 FA68     		ldr	r2, [r7, #12]
 2070 0092 1344     		add	r3, r2, r3
 2071 0094 FB60     		str	r3, [r7, #12]
 681:..//utils/usbSerial/usbSerial.c **** 			d = *str++;
 2072              		.loc 2 681 0
 2073 0096 3B6A     		ldr	r3, [r7, #32]
 2074 0098 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2075 009a 7B60     		str	r3, [r7, #4]
 2076 009c 3B6A     		ldr	r3, [r7, #32]
 2077 009e 03F10103 		add	r3, r3, #1
 2078 00a2 3B62     		str	r3, [r7, #32]
 2079              	.L135:
 2080              		.loc 2 679 0
 2081 00a4 7B68     		ldr	r3, [r7, #4]
 2082 00a6 2F2B     		cmp	r3, #47
 2083 00a8 02DD     		ble	.L136
 2084 00aa 7B68     		ldr	r3, [r7, #4]
 2085 00ac 392B     		cmp	r3, #57
 2086 00ae E3DD     		ble	.L137
 2087              	.L136:
 682:..//utils/usbSerial/usbSerial.c **** 		}
 683:..//utils/usbSerial/usbSerial.c **** 		if (s) w = -w;
 2088              		.loc 2 683 0
 2089 00b0 3B69     		ldr	r3, [r7, #16]
 2090 00b2 002B     		cmp	r3, #0
 2091 00b4 03D0     		beq	.L138
 2092 00b6 FB68     		ldr	r3, [r7, #12]
 2093 00b8 C3F10003 		rsb	r3, r3, #0
 2094 00bc FB60     		str	r3, [r7, #12]
 2095              	.L138:
 684:..//utils/usbSerial/usbSerial.c **** 		if (d == 'l') {
 2096              		.loc 2 684 0
 2097 00be 7B68     		ldr	r3, [r7, #4]
 2098 00c0 6C2B     		cmp	r3, #108
 2099 00c2 09D1     		bne	.L139
 685:..//utils/usbSerial/usbSerial.c **** 			l = 1;
 2100              		.loc 2 685 0
 2101 00c4 4FF00103 		mov	r3, #1
 2102 00c8 7B61     		str	r3, [r7, #20]
 686:..//utils/usbSerial/usbSerial.c **** 			d = *str++;
 2103              		.loc 2 686 0
 2104 00ca 3B6A     		ldr	r3, [r7, #32]
 2105 00cc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2106 00ce 7B60     		str	r3, [r7, #4]
 2107 00d0 3B6A     		ldr	r3, [r7, #32]
 2108 00d2 03F10103 		add	r3, r3, #1
 2109 00d6 3B62     		str	r3, [r7, #32]
 2110              	.L139:
 687:..//utils/usbSerial/usbSerial.c **** 		}
 688:..//utils/usbSerial/usbSerial.c **** 		if (!d) break;
 2111              		.loc 2 688 0
 2112 00d8 7B68     		ldr	r3, [r7, #4]
 2113 00da 002B     		cmp	r3, #0
 2114 00dc 7CD0     		beq	.L154
 2115              	.L140:
 689:..//utils/usbSerial/usbSerial.c **** 		if (d == 's') {
 2116              		.loc 2 689 0
 2117 00de 7B68     		ldr	r3, [r7, #4]
 2118 00e0 732B     		cmp	r3, #115
 2119 00e2 0BD1     		bne	.L142
 690:..//utils/usbSerial/usbSerial.c **** 			VCOM_puts(va_arg(arp, char*));
 2120              		.loc 2 690 0
 2121 00e4 3B68     		ldr	r3, [r7, #0]
 2122 00e6 03F10402 		add	r2, r3, #4
 2123 00ea 3A60     		str	r2, [r7, #0]
 2124 00ec 1B68     		ldr	r3, [r3, #0]
 2125 00ee 1846     		mov	r0, r3
 2126 00f0 40F20003 		movw	r3, #:lower16:VCOM_puts
 2127 00f4 C0F20003 		movt	r3, #:upper16:VCOM_puts
 2128 00f8 9847     		blx	r3
 691:..//utils/usbSerial/usbSerial.c **** 			continue;
 2129              		.loc 2 691 0
 2130 00fa 5CE0     		b	.L132
 2131              	.L142:
 692:..//utils/usbSerial/usbSerial.c **** 		}
 693:..//utils/usbSerial/usbSerial.c **** 		if (d == 'c') {
 2132              		.loc 2 693 0
 2133 00fc 7B68     		ldr	r3, [r7, #4]
 2134 00fe 632B     		cmp	r3, #99
 2135 0100 0CD1     		bne	.L143
 694:..//utils/usbSerial/usbSerial.c **** 			VCOM_putc((char)va_arg(arp, int));
 2136              		.loc 2 694 0
 2137 0102 3B68     		ldr	r3, [r7, #0]
 2138 0104 03F10402 		add	r2, r3, #4
 2139 0108 3A60     		str	r2, [r7, #0]
 2140 010a 1B68     		ldr	r3, [r3, #0]
 2141 010c DBB2     		uxtb	r3, r3
 2142 010e 1846     		mov	r0, r3
 2143 0110 40F20003 		movw	r3, #:lower16:VCOM_putc
 2144 0114 C0F20003 		movt	r3, #:upper16:VCOM_putc
 2145 0118 9847     		blx	r3
 695:..//utils/usbSerial/usbSerial.c **** 			continue;
 2146              		.loc 2 695 0
 2147 011a 4CE0     		b	.L132
 2148              	.L143:
 696:..//utils/usbSerial/usbSerial.c **** 		}
 697:..//utils/usbSerial/usbSerial.c **** 		if (d == 'u') r = 10;
 2149              		.loc 2 697 0
 2150 011c 7B68     		ldr	r3, [r7, #4]
 2151 011e 752B     		cmp	r3, #117
 2152 0120 02D1     		bne	.L144
 2153 0122 4FF00A03 		mov	r3, #10
 2154 0126 BB60     		str	r3, [r7, #8]
 2155              	.L144:
 698:..//utils/usbSerial/usbSerial.c **** 		if (d == 'd') r = -10;
 2156              		.loc 2 698 0
 2157 0128 7B68     		ldr	r3, [r7, #4]
 2158 012a 642B     		cmp	r3, #100
 2159 012c 02D1     		bne	.L145
 2160 012e 6FF00903 		mvn	r3, #9
 2161 0132 BB60     		str	r3, [r7, #8]
 2162              	.L145:
 699:..//utils/usbSerial/usbSerial.c **** 		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 2163              		.loc 2 699 0
 2164 0134 7B68     		ldr	r3, [r7, #4]
 2165 0136 582B     		cmp	r3, #88
 2166 0138 02D0     		beq	.L146
 2167 013a 7B68     		ldr	r3, [r7, #4]
 2168 013c 782B     		cmp	r3, #120
 2169 013e 02D1     		bne	.L147
 2170              	.L146:
 2171 0140 4FF01003 		mov	r3, #16
 2172 0144 BB60     		str	r3, [r7, #8]
 2173              	.L147:
 700:..//utils/usbSerial/usbSerial.c **** 		if (d == 'b') r = 2;
 2174              		.loc 2 700 0
 2175 0146 7B68     		ldr	r3, [r7, #4]
 2176 0148 622B     		cmp	r3, #98
 2177 014a 02D1     		bne	.L148
 2178 014c 4FF00203 		mov	r3, #2
 2179 0150 BB60     		str	r3, [r7, #8]
 2180              	.L148:
 701:..//utils/usbSerial/usbSerial.c **** 		if (!r) break;
 2181              		.loc 2 701 0
 2182 0152 BB68     		ldr	r3, [r7, #8]
 2183 0154 002B     		cmp	r3, #0
 2184 0156 41D0     		beq	.L155
 2185              	.L149:
 702:..//utils/usbSerial/usbSerial.c **** 		if (l) {
 2186              		.loc 2 702 0
 2187 0158 7B69     		ldr	r3, [r7, #20]
 2188 015a 002B     		cmp	r3, #0
 2189 015c 0DD0     		beq	.L150
 703:..//utils/usbSerial/usbSerial.c **** 			xitoa((long)va_arg(arp, long), r, w);
 2190              		.loc 2 703 0
 2191 015e 3B68     		ldr	r3, [r7, #0]
 2192 0160 03F10402 		add	r2, r3, #4
 2193 0164 3A60     		str	r2, [r7, #0]
 2194 0166 1B68     		ldr	r3, [r3, #0]
 2195 0168 1846     		mov	r0, r3
 2196 016a B968     		ldr	r1, [r7, #8]
 2197 016c FA68     		ldr	r2, [r7, #12]
 2198 016e 40F20003 		movw	r3, #:lower16:xitoa
 2199 0172 C0F20003 		movt	r3, #:upper16:xitoa
 2200 0176 9847     		blx	r3
 2201 0178 1DE0     		b	.L132
 2202              	.L150:
 704:..//utils/usbSerial/usbSerial.c **** 		} else {
 705:..//utils/usbSerial/usbSerial.c **** 			if (r > 0)
 2203              		.loc 2 705 0
 2204 017a BB68     		ldr	r3, [r7, #8]
 2205 017c 002B     		cmp	r3, #0
 2206 017e 0DDD     		ble	.L151
 706:..//utils/usbSerial/usbSerial.c **** 				xitoa((unsigned long)va_arg(arp, int), r, w);
 2207              		.loc 2 706 0
 2208 0180 3B68     		ldr	r3, [r7, #0]
 2209 0182 03F10402 		add	r2, r3, #4
 2210 0186 3A60     		str	r2, [r7, #0]
 2211 0188 1B68     		ldr	r3, [r3, #0]
 2212 018a 1846     		mov	r0, r3
 2213 018c B968     		ldr	r1, [r7, #8]
 2214 018e FA68     		ldr	r2, [r7, #12]
 2215 0190 40F20003 		movw	r3, #:lower16:xitoa
 2216 0194 C0F20003 		movt	r3, #:upper16:xitoa
 2217 0198 9847     		blx	r3
 2218 019a 0CE0     		b	.L132
 2219              	.L151:
 707:..//utils/usbSerial/usbSerial.c **** 			else
 708:..//utils/usbSerial/usbSerial.c **** 				xitoa((long)va_arg(arp, int), r, w);
 2220              		.loc 2 708 0
 2221 019c 3B68     		ldr	r3, [r7, #0]
 2222 019e 03F10402 		add	r2, r3, #4
 2223 01a2 3A60     		str	r2, [r7, #0]
 2224 01a4 1B68     		ldr	r3, [r3, #0]
 2225 01a6 1846     		mov	r0, r3
 2226 01a8 B968     		ldr	r1, [r7, #8]
 2227 01aa FA68     		ldr	r2, [r7, #12]
 2228 01ac 40F20003 		movw	r3, #:lower16:xitoa
 2229 01b0 C0F20003 		movt	r3, #:upper16:xitoa
 2230 01b4 9847     		blx	r3
 2231              	.L132:
 2232              		.loc 2 671 0
 2233 01b6 3B6A     		ldr	r3, [r7, #32]
 2234 01b8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2235 01ba 7B60     		str	r3, [r7, #4]
 2236 01bc 7B68     		ldr	r3, [r7, #4]
 2237 01be 002B     		cmp	r3, #0
 2238 01c0 0CBF     		ite	eq
 2239 01c2 0023     		moveq	r3, #0
 2240 01c4 0123     		movne	r3, #1
 2241 01c6 DBB2     		uxtb	r3, r3
 2242 01c8 3A6A     		ldr	r2, [r7, #32]
 2243 01ca 02F10102 		add	r2, r2, #1
 2244 01ce 3A62     		str	r2, [r7, #32]
 2245 01d0 002B     		cmp	r3, #0
 2246 01d2 7FF427AF 		bne	.L152
 2247 01d6 02E0     		b	.L153
 2248              	.L154:
 2249              		.loc 2 688 0
 2250 01d8 00BF     		nop
 2251 01da 00E0     		b	.L153
 2252              	.L155:
 2253              		.loc 2 701 0
 2254 01dc 00BF     		nop
 2255              	.L153:
 709:..//utils/usbSerial/usbSerial.c **** 		}
 710:..//utils/usbSerial/usbSerial.c **** 	}
 711:..//utils/usbSerial/usbSerial.c **** 
 712:..//utils/usbSerial/usbSerial.c **** 	va_end(arp);
 713:..//utils/usbSerial/usbSerial.c **** }
 2256              		.loc 2 713 0
 2257 01de 07F11807 		add	r7, r7, #24
 2258 01e2 BD46     		mov	sp, r7
 2259 01e4 BDE88040 		pop	{r7, lr}
 2260 01e8 04B0     		add	sp, sp, #16
 2261 01ea 7047     		bx	lr
 2262              		.cfi_endproc
 2263              	.LFE53:
 2265              		.section	.text.modUSB_init,"ax",%progbits
 2266              		.align	2
 2267              		.global	modUSB_init
 2268              		.thumb
 2269              		.thumb_func
 2271              	modUSB_init:
 2272              	.LFB54:
 714:..//utils/usbSerial/usbSerial.c **** 
 715:..//utils/usbSerial/usbSerial.c **** 
 716:..//utils/usbSerial/usbSerial.c **** int modUSB_init(){
 2273              		.loc 2 716 0
 2274              		.cfi_startproc
 2275              		@ args = 0, pretend = 0, frame = 0
 2276              		@ frame_needed = 1, uses_anonymous_args = 0
 2277 0000 80B5     		push	{r7, lr}
 2278              	.LCFI72:
 2279              		.cfi_def_cfa_offset 8
 2280 0002 00AF     		add	r7, sp, #0
 2281              		.cfi_offset 14, -4
 2282              		.cfi_offset 7, -8
 2283              	.LCFI73:
 2284              		.cfi_def_cfa_register 7
 717:..//utils/usbSerial/usbSerial.c **** #ifdef MOD_USB
 718:..//utils/usbSerial/usbSerial.c **** 	modInit(&modbusUSB, &ring_rxUSB, MOD_USB);
 2285              		.loc 2 718 0
 2286 0004 40F20000 		movw	r0, #:lower16:modbusUSB
 2287 0008 C0F20000 		movt	r0, #:upper16:modbusUSB
 2288 000c 40F20001 		movw	r1, #:lower16:ring_rxUSB
 2289 0010 C0F20001 		movt	r1, #:upper16:ring_rxUSB
 2290 0014 4FF00402 		mov	r2, #4
 2291 0018 40F20003 		movw	r3, #:lower16:modInit
 2292 001c C0F20003 		movt	r3, #:upper16:modInit
 2293 0020 9847     		blx	r3
 719:..//utils/usbSerial/usbSerial.c **** #endif
 720:..//utils/usbSerial/usbSerial.c **** 	ring_init( &ring_rxUSB, buff_rxUSB, USB_SIZE );
 2294              		.loc 2 720 0
 2295 0022 40F20000 		movw	r0, #:lower16:ring_rxUSB
 2296 0026 C0F20000 		movt	r0, #:upper16:ring_rxUSB
 2297 002a 40F20001 		movw	r1, #:lower16:buff_rxUSB
 2298 002e C0F20001 		movt	r1, #:upper16:buff_rxUSB
 2299 0032 4FF48072 		mov	r2, #256
 2300 0036 40F20003 		movw	r3, #:lower16:ring_init
 2301 003a C0F20003 		movt	r3, #:upper16:ring_init
 2302 003e 9847     		blx	r3
 721:..//utils/usbSerial/usbSerial.c **** 	return 1;
 2303              		.loc 2 721 0
 2304 0040 4FF00103 		mov	r3, #1
 722:..//utils/usbSerial/usbSerial.c **** }
 2305              		.loc 2 722 0
 2306 0044 1846     		mov	r0, r3
 2307 0046 80BD     		pop	{r7, pc}
 2308              		.cfi_endproc
 2309              	.LFE54:
 2311              		.text
 2312              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 usbSerial.c
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:24     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:28     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
                            *COM*:00000100 buff_rxUSB
                            *COM*:0000000c ring_rxUSB
                            *COM*:000000b4 modbusUSB
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:70     .data.LineCoding:00000000 $d
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:73     .data.LineCoding:00000000 LineCoding
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:80     .bss.abBulkBuf:00000000 $d
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:83     .bss.abBulkBuf:00000000 abBulkBuf
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:86     .bss.abClassReqData:00000000 $d
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:89     .bss.abClassReqData:00000000 abClassReqData
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:92     .bss.txdata:00000000 $d
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:95     .bss.txdata:00000000 txdata
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:98     .bss.rxdata:00000000 $d
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:101    .bss.rxdata:00000000 rxdata
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:104    .bss.txfifo:00000000 $d
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:107    .bss.txfifo:00000000 txfifo
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:110    .bss.rxfifo:00000000 $d
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:113    .bss.rxfifo:00000000 rxfifo
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:116    .rodata.abDescriptors:00000000 $d
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:119    .rodata.abDescriptors:00000000 abDescriptors
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:263    .text.BulkOut:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:267    .text.BulkOut:00000000 BulkOut
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:348    .text.BulkIn:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:352    .text.BulkIn:00000000 BulkIn
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:448    .text.HandleClassRequest:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:452    .text.HandleClassRequest:00000000 HandleClassRequest
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:545    .text.VCOM_init:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:550    .text.VCOM_init:00000000 VCOM_init
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:586    .text.VCOM_TxBuff_init:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:591    .text.VCOM_TxBuff_init:00000000 VCOM_TxBuff_init
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:619    .text.VCOM_RxBuff_init:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:624    .text.VCOM_RxBuff_init:00000000 VCOM_RxBuff_init
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:652    .text.VCOM_putchar:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:657    .text.VCOM_putchar:00000000 VCOM_putchar
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:701    .text.VCOM_getchar:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:706    .text.VCOM_getchar:00000000 VCOM_getchar
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:748    .text.VCOM_getchar1:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:753    .text.VCOM_getchar1:00000000 VCOM_getchar1
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:802    .text.VCOM_getcharN:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:807    .text.VCOM_getcharN:00000000 VCOM_getcharN
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:903    .text.VCOM_ChkRcv:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:908    .text.VCOM_ChkRcv:00000000 VCOM_ChkRcv
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:936    .text.VCOM_GetCh:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:941    .text.VCOM_GetCh:00000000 VCOM_GetCh
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:980    .text.USB_IRQHandler:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:985    .text.USB_IRQHandler:00000000 USB_IRQHandler
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1009   .text.USBFrameHandler:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1013   .text.USBFrameHandler:00000000 USBFrameHandler
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1055   .text.usbSerialInit:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1060   .text.usbSerialInit:00000000 usbSerialInit
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:2271   .text.modUSB_init:00000000 modUSB_init
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1151   .text.VCOM_puts:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1156   .text.VCOM_puts:00000000 VCOM_puts
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1201   .text.VCOM_putc:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1206   .text.VCOM_putc:00000000 VCOM_putc
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1243   .text.VCOM_getc:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1248   .text.VCOM_getc:00000000 VCOM_getc
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1285   .rodata:00000000 $d
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1286   .rodata:00000000 .LC0
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1289   .text.VCOM_putHex:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1294   .text.VCOM_putHex:00000000 VCOM_putHex
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1368   .text.VCOM_gets:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1373   .text.VCOM_gets:00000000 VCOM_gets
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1434   .text.VCOM_getc_echo:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1439   .text.VCOM_getc_echo:00000000 VCOM_getc_echo
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1479   .text.VCOM_gets_echo:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1484   .text.VCOM_gets_echo:00000000 VCOM_gets_echo
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1545   .text.xatoi:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1550   .text.xatoi:00000000 xatoi
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1793   .text.xitoa:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1798   .text.xitoa:00000000 xitoa
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1970   .rodata:00000004 .LC1
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1973   .text.VCOM_printf:00000000 $t
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:1978   .text.VCOM_printf:00000000 VCOM_printf
C:\Users\hdhed\AppData\Local\Temp\ccUzaeNU.s:2266   .text.modUSB_init:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
fifo_free
USBHwEPRead
checkModbusData
fifo_avail
USBHwNakIntEnable
fifo_get
USBHwEPWrite
fifo_init
fifo_put
ring_is_empty
ring_getc
USBHwISR
USBInit
USBRegisterDescriptors
USBRegisterRequestHandler
USBHwRegisterEPIntHandler
USBHwRegisterFrameHandler
USBHwConnect
printf
modInit
ring_init
