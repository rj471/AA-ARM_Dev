   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"lpc17xx_i2c.c"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  24              		.align	2
  25              		.thumb
  26              		.thumb_func
  28              	NVIC_EnableIRQ:
  29              	.LFB14:
  30              		.file 1 "..//common/Core/CM3/core_cm3.h"
   1:..//common/Core/CM3/core_cm3.h **** /**************************************************************************//**
   2:..//common/Core/CM3/core_cm3.h ****  * @file     core_cm3.h
   3:..//common/Core/CM3/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:..//common/Core/CM3/core_cm3.h ****  * @version  V1.30
   5:..//common/Core/CM3/core_cm3.h ****  * @date     30. October 2009
   6:..//common/Core/CM3/core_cm3.h ****  *
   7:..//common/Core/CM3/core_cm3.h ****  * @note
   8:..//common/Core/CM3/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:..//common/Core/CM3/core_cm3.h ****  *
  10:..//common/Core/CM3/core_cm3.h ****  * @par
  11:..//common/Core/CM3/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:..//common/Core/CM3/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:..//common/Core/CM3/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:..//common/Core/CM3/core_cm3.h ****  *
  15:..//common/Core/CM3/core_cm3.h ****  * @par
  16:..//common/Core/CM3/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:..//common/Core/CM3/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:..//common/Core/CM3/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:..//common/Core/CM3/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:..//common/Core/CM3/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:..//common/Core/CM3/core_cm3.h ****  *
  22:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
  23:..//common/Core/CM3/core_cm3.h **** 
  24:..//common/Core/CM3/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:..//common/Core/CM3/core_cm3.h **** #define __CM3_CORE_H__
  26:..//common/Core/CM3/core_cm3.h **** 
  27:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:..//common/Core/CM3/core_cm3.h ****  *
  29:..//common/Core/CM3/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:..//common/Core/CM3/core_cm3.h ****  *   - Error 10: \n
  31:..//common/Core/CM3/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:..//common/Core/CM3/core_cm3.h ****  *     Error 10: Expecting ';'
  33:..//common/Core/CM3/core_cm3.h ****  * .
  34:..//common/Core/CM3/core_cm3.h ****  *   - Error 530: \n
  35:..//common/Core/CM3/core_cm3.h ****  *     return(__regBasePri); \n
  36:..//common/Core/CM3/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:..//common/Core/CM3/core_cm3.h ****  * . 
  38:..//common/Core/CM3/core_cm3.h ****  *   - Error 550: \n
  39:..//common/Core/CM3/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:..//common/Core/CM3/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:..//common/Core/CM3/core_cm3.h ****  * .
  42:..//common/Core/CM3/core_cm3.h ****  *   - Error 754: \n
  43:..//common/Core/CM3/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:..//common/Core/CM3/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:..//common/Core/CM3/core_cm3.h ****  * .
  46:..//common/Core/CM3/core_cm3.h ****  *   - Error 750: \n
  47:..//common/Core/CM3/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:..//common/Core/CM3/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:..//common/Core/CM3/core_cm3.h ****  * .
  50:..//common/Core/CM3/core_cm3.h ****  *   - Error 528: \n
  51:..//common/Core/CM3/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:..//common/Core/CM3/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:..//common/Core/CM3/core_cm3.h ****  * .
  54:..//common/Core/CM3/core_cm3.h ****  *   - Error 751: \n
  55:..//common/Core/CM3/core_cm3.h ****  *     } InterruptType_Type; \n
  56:..//common/Core/CM3/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:..//common/Core/CM3/core_cm3.h ****  * .
  58:..//common/Core/CM3/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:..//common/Core/CM3/core_cm3.h ****  *
  60:..//common/Core/CM3/core_cm3.h ****  */
  61:..//common/Core/CM3/core_cm3.h **** 
  62:..//common/Core/CM3/core_cm3.h **** /*lint -save */
  63:..//common/Core/CM3/core_cm3.h **** /*lint -e10  */
  64:..//common/Core/CM3/core_cm3.h **** /*lint -e530 */
  65:..//common/Core/CM3/core_cm3.h **** /*lint -e550 */
  66:..//common/Core/CM3/core_cm3.h **** /*lint -e754 */
  67:..//common/Core/CM3/core_cm3.h **** /*lint -e750 */
  68:..//common/Core/CM3/core_cm3.h **** /*lint -e528 */
  69:..//common/Core/CM3/core_cm3.h **** /*lint -e751 */
  70:..//common/Core/CM3/core_cm3.h **** 
  71:..//common/Core/CM3/core_cm3.h **** 
  72:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:..//common/Core/CM3/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:..//common/Core/CM3/core_cm3.h ****     - CMSIS version number
  75:..//common/Core/CM3/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:..//common/Core/CM3/core_cm3.h ****     - Cortex-M core peripheral base address
  77:..//common/Core/CM3/core_cm3.h ****   @{
  78:..//common/Core/CM3/core_cm3.h ****  */
  79:..//common/Core/CM3/core_cm3.h **** 
  80:..//common/Core/CM3/core_cm3.h **** #ifdef __cplusplus
  81:..//common/Core/CM3/core_cm3.h ****  extern "C" {
  82:..//common/Core/CM3/core_cm3.h **** #endif 
  83:..//common/Core/CM3/core_cm3.h **** 
  84:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:..//common/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:..//common/Core/CM3/core_cm3.h **** 
  88:..//common/Core/CM3/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:..//common/Core/CM3/core_cm3.h **** 
  90:..//common/Core/CM3/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:..//common/Core/CM3/core_cm3.h **** 
  92:..//common/Core/CM3/core_cm3.h **** #if defined (__ICCARM__)
  93:..//common/Core/CM3/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:..//common/Core/CM3/core_cm3.h **** #endif
  95:..//common/Core/CM3/core_cm3.h **** 
  96:..//common/Core/CM3/core_cm3.h **** 
  97:..//common/Core/CM3/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:..//common/Core/CM3/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:..//common/Core/CM3/core_cm3.h **** #endif
 100:..//common/Core/CM3/core_cm3.h **** 
 101:..//common/Core/CM3/core_cm3.h **** 
 102:..//common/Core/CM3/core_cm3.h **** 
 103:..//common/Core/CM3/core_cm3.h **** 
 104:..//common/Core/CM3/core_cm3.h **** /**
 105:..//common/Core/CM3/core_cm3.h ****  * IO definitions
 106:..//common/Core/CM3/core_cm3.h ****  *
 107:..//common/Core/CM3/core_cm3.h ****  * define access restrictions to peripheral registers
 108:..//common/Core/CM3/core_cm3.h ****  */
 109:..//common/Core/CM3/core_cm3.h **** 
 110:..//common/Core/CM3/core_cm3.h **** #ifdef __cplusplus
 111:..//common/Core/CM3/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:..//common/Core/CM3/core_cm3.h **** #else
 113:..//common/Core/CM3/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:..//common/Core/CM3/core_cm3.h **** #endif
 115:..//common/Core/CM3/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:..//common/Core/CM3/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:..//common/Core/CM3/core_cm3.h **** 
 118:..//common/Core/CM3/core_cm3.h **** 
 119:..//common/Core/CM3/core_cm3.h **** 
 120:..//common/Core/CM3/core_cm3.h **** /*******************************************************************************
 121:..//common/Core/CM3/core_cm3.h ****  *                 Register Abstraction
 122:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
 123:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:..//common/Core/CM3/core_cm3.h ****  @{
 125:..//common/Core/CM3/core_cm3.h **** */
 126:..//common/Core/CM3/core_cm3.h **** 
 127:..//common/Core/CM3/core_cm3.h **** 
 128:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:..//common/Core/CM3/core_cm3.h ****   @{
 131:..//common/Core/CM3/core_cm3.h ****  */
 132:..//common/Core/CM3/core_cm3.h **** typedef struct
 133:..//common/Core/CM3/core_cm3.h **** {
 134:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:..//common/Core/CM3/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:..//common/Core/CM3/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:..//common/Core/CM3/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:..//common/Core/CM3/core_cm3.h **** }  NVIC_Type;                                               
 148:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:..//common/Core/CM3/core_cm3.h **** 
 150:..//common/Core/CM3/core_cm3.h **** 
 151:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:..//common/Core/CM3/core_cm3.h ****   @{
 154:..//common/Core/CM3/core_cm3.h ****  */
 155:..//common/Core/CM3/core_cm3.h **** typedef struct
 156:..//common/Core/CM3/core_cm3.h **** {
 157:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:..//common/Core/CM3/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:..//common/Core/CM3/core_cm3.h **** } SCB_Type;                                                
 177:..//common/Core/CM3/core_cm3.h **** 
 178:..//common/Core/CM3/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:..//common/Core/CM3/core_cm3.h **** 
 182:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:..//common/Core/CM3/core_cm3.h **** 
 185:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:..//common/Core/CM3/core_cm3.h **** 
 188:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:..//common/Core/CM3/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:..//common/Core/CM3/core_cm3.h **** 
 191:..//common/Core/CM3/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:..//common/Core/CM3/core_cm3.h **** 
 195:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:..//common/Core/CM3/core_cm3.h **** 
 198:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:..//common/Core/CM3/core_cm3.h **** 
 201:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:..//common/Core/CM3/core_cm3.h **** 
 204:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:..//common/Core/CM3/core_cm3.h **** 
 207:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:..//common/Core/CM3/core_cm3.h **** 
 210:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:..//common/Core/CM3/core_cm3.h **** 
 213:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:..//common/Core/CM3/core_cm3.h **** 
 216:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:..//common/Core/CM3/core_cm3.h **** 
 219:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:..//common/Core/CM3/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:..//common/Core/CM3/core_cm3.h **** 
 222:..//common/Core/CM3/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:..//common/Core/CM3/core_cm3.h **** 
 226:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:..//common/Core/CM3/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:..//common/Core/CM3/core_cm3.h **** 
 229:..//common/Core/CM3/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:..//common/Core/CM3/core_cm3.h **** 
 233:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:..//common/Core/CM3/core_cm3.h **** 
 236:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:..//common/Core/CM3/core_cm3.h **** 
 239:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:..//common/Core/CM3/core_cm3.h **** 
 242:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:..//common/Core/CM3/core_cm3.h **** 
 245:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:..//common/Core/CM3/core_cm3.h **** 
 248:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:..//common/Core/CM3/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:..//common/Core/CM3/core_cm3.h **** 
 251:..//common/Core/CM3/core_cm3.h **** /* SCB System Control Register Definitions */
 252:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:..//common/Core/CM3/core_cm3.h **** 
 255:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:..//common/Core/CM3/core_cm3.h **** 
 258:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:..//common/Core/CM3/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:..//common/Core/CM3/core_cm3.h **** 
 261:..//common/Core/CM3/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:..//common/Core/CM3/core_cm3.h **** 
 265:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:..//common/Core/CM3/core_cm3.h **** 
 268:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:..//common/Core/CM3/core_cm3.h **** 
 271:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:..//common/Core/CM3/core_cm3.h **** 
 274:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:..//common/Core/CM3/core_cm3.h **** 
 277:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:..//common/Core/CM3/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:..//common/Core/CM3/core_cm3.h **** 
 280:..//common/Core/CM3/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:..//common/Core/CM3/core_cm3.h **** 
 284:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:..//common/Core/CM3/core_cm3.h **** 
 287:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:..//common/Core/CM3/core_cm3.h **** 
 290:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:..//common/Core/CM3/core_cm3.h **** 
 293:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:..//common/Core/CM3/core_cm3.h **** 
 296:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:..//common/Core/CM3/core_cm3.h **** 
 299:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:..//common/Core/CM3/core_cm3.h **** 
 302:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:..//common/Core/CM3/core_cm3.h **** 
 305:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:..//common/Core/CM3/core_cm3.h **** 
 308:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:..//common/Core/CM3/core_cm3.h **** 
 311:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:..//common/Core/CM3/core_cm3.h ****                                      
 314:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:..//common/Core/CM3/core_cm3.h **** 
 317:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:..//common/Core/CM3/core_cm3.h **** 
 320:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:..//common/Core/CM3/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:..//common/Core/CM3/core_cm3.h **** 
 323:..//common/Core/CM3/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:..//common/Core/CM3/core_cm3.h **** 
 327:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:..//common/Core/CM3/core_cm3.h **** 
 330:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:..//common/Core/CM3/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:..//common/Core/CM3/core_cm3.h **** 
 333:..//common/Core/CM3/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:..//common/Core/CM3/core_cm3.h **** 
 337:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:..//common/Core/CM3/core_cm3.h **** 
 340:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:..//common/Core/CM3/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:..//common/Core/CM3/core_cm3.h **** 
 343:..//common/Core/CM3/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:..//common/Core/CM3/core_cm3.h **** 
 347:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:..//common/Core/CM3/core_cm3.h **** 
 350:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:..//common/Core/CM3/core_cm3.h **** 
 353:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:..//common/Core/CM3/core_cm3.h **** 
 356:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:..//common/Core/CM3/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:..//common/Core/CM3/core_cm3.h **** 
 360:..//common/Core/CM3/core_cm3.h **** 
 361:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for SysTick
 363:..//common/Core/CM3/core_cm3.h ****   @{
 364:..//common/Core/CM3/core_cm3.h ****  */
 365:..//common/Core/CM3/core_cm3.h **** typedef struct
 366:..//common/Core/CM3/core_cm3.h **** {
 367:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:..//common/Core/CM3/core_cm3.h **** } SysTick_Type;
 372:..//common/Core/CM3/core_cm3.h **** 
 373:..//common/Core/CM3/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:..//common/Core/CM3/core_cm3.h **** 
 377:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:..//common/Core/CM3/core_cm3.h **** 
 380:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:..//common/Core/CM3/core_cm3.h **** 
 383:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:..//common/Core/CM3/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:..//common/Core/CM3/core_cm3.h **** 
 386:..//common/Core/CM3/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:..//common/Core/CM3/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:..//common/Core/CM3/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:..//common/Core/CM3/core_cm3.h **** 
 390:..//common/Core/CM3/core_cm3.h **** /* SysTick Current Register Definitions */
 391:..//common/Core/CM3/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:..//common/Core/CM3/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:..//common/Core/CM3/core_cm3.h **** 
 394:..//common/Core/CM3/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:..//common/Core/CM3/core_cm3.h **** 
 398:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:..//common/Core/CM3/core_cm3.h **** 
 401:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:..//common/Core/CM3/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:..//common/Core/CM3/core_cm3.h **** 
 405:..//common/Core/CM3/core_cm3.h **** 
 406:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:..//common/Core/CM3/core_cm3.h ****   @{
 409:..//common/Core/CM3/core_cm3.h ****  */
 410:..//common/Core/CM3/core_cm3.h **** typedef struct
 411:..//common/Core/CM3/core_cm3.h **** {
 412:..//common/Core/CM3/core_cm3.h ****   __O  union  
 413:..//common/Core/CM3/core_cm3.h ****   {
 414:..//common/Core/CM3/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:..//common/Core/CM3/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:..//common/Core/CM3/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:..//common/Core/CM3/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:..//common/Core/CM3/core_cm3.h **** } ITM_Type;                                                
 445:..//common/Core/CM3/core_cm3.h **** 
 446:..//common/Core/CM3/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:..//common/Core/CM3/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:..//common/Core/CM3/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:..//common/Core/CM3/core_cm3.h **** 
 450:..//common/Core/CM3/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:..//common/Core/CM3/core_cm3.h **** 
 454:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:..//common/Core/CM3/core_cm3.h **** 
 457:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:..//common/Core/CM3/core_cm3.h **** 
 460:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:..//common/Core/CM3/core_cm3.h **** 
 463:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:..//common/Core/CM3/core_cm3.h **** 
 466:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:..//common/Core/CM3/core_cm3.h **** 
 469:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:..//common/Core/CM3/core_cm3.h **** 
 472:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:..//common/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:..//common/Core/CM3/core_cm3.h **** 
 475:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:..//common/Core/CM3/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:..//common/Core/CM3/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:..//common/Core/CM3/core_cm3.h **** 
 479:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:..//common/Core/CM3/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:..//common/Core/CM3/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:..//common/Core/CM3/core_cm3.h **** 
 483:..//common/Core/CM3/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:..//common/Core/CM3/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:..//common/Core/CM3/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:..//common/Core/CM3/core_cm3.h **** 
 487:..//common/Core/CM3/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:..//common/Core/CM3/core_cm3.h **** 
 491:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:..//common/Core/CM3/core_cm3.h **** 
 494:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:..//common/Core/CM3/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:..//common/Core/CM3/core_cm3.h **** 
 498:..//common/Core/CM3/core_cm3.h **** 
 499:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:..//common/Core/CM3/core_cm3.h ****   @{
 502:..//common/Core/CM3/core_cm3.h ****  */
 503:..//common/Core/CM3/core_cm3.h **** typedef struct
 504:..//common/Core/CM3/core_cm3.h **** {
 505:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED0;
 506:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:..//common/Core/CM3/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:..//common/Core/CM3/core_cm3.h **** #else
 510:..//common/Core/CM3/core_cm3.h ****        uint32_t RESERVED1;
 511:..//common/Core/CM3/core_cm3.h **** #endif
 512:..//common/Core/CM3/core_cm3.h **** } InterruptType_Type;
 513:..//common/Core/CM3/core_cm3.h **** 
 514:..//common/Core/CM3/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:..//common/Core/CM3/core_cm3.h **** 
 518:..//common/Core/CM3/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:..//common/Core/CM3/core_cm3.h **** 
 522:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:..//common/Core/CM3/core_cm3.h **** 
 525:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:..//common/Core/CM3/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:..//common/Core/CM3/core_cm3.h **** 
 529:..//common/Core/CM3/core_cm3.h **** 
 530:..//common/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:..//common/Core/CM3/core_cm3.h ****   @{
 534:..//common/Core/CM3/core_cm3.h ****  */
 535:..//common/Core/CM3/core_cm3.h **** typedef struct
 536:..//common/Core/CM3/core_cm3.h **** {
 537:..//common/Core/CM3/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:..//common/Core/CM3/core_cm3.h **** } MPU_Type;                                                
 549:..//common/Core/CM3/core_cm3.h **** 
 550:..//common/Core/CM3/core_cm3.h **** /* MPU Type Register */
 551:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:..//common/Core/CM3/core_cm3.h **** 
 554:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:..//common/Core/CM3/core_cm3.h **** 
 557:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:..//common/Core/CM3/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:..//common/Core/CM3/core_cm3.h **** 
 560:..//common/Core/CM3/core_cm3.h **** /* MPU Control Register */
 561:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:..//common/Core/CM3/core_cm3.h **** 
 564:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:..//common/Core/CM3/core_cm3.h **** 
 567:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:..//common/Core/CM3/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:..//common/Core/CM3/core_cm3.h **** 
 570:..//common/Core/CM3/core_cm3.h **** /* MPU Region Number Register */
 571:..//common/Core/CM3/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:..//common/Core/CM3/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:..//common/Core/CM3/core_cm3.h **** 
 574:..//common/Core/CM3/core_cm3.h **** /* MPU Region Base Address Register */
 575:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:..//common/Core/CM3/core_cm3.h **** 
 578:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:..//common/Core/CM3/core_cm3.h **** 
 581:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:..//common/Core/CM3/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:..//common/Core/CM3/core_cm3.h **** 
 584:..//common/Core/CM3/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:..//common/Core/CM3/core_cm3.h **** 
 588:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:..//common/Core/CM3/core_cm3.h **** 
 591:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:..//common/Core/CM3/core_cm3.h **** 
 594:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:..//common/Core/CM3/core_cm3.h **** 
 597:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:..//common/Core/CM3/core_cm3.h **** 
 600:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:..//common/Core/CM3/core_cm3.h **** 
 603:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:..//common/Core/CM3/core_cm3.h **** 
 606:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:..//common/Core/CM3/core_cm3.h **** 
 609:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:..//common/Core/CM3/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:..//common/Core/CM3/core_cm3.h **** 
 612:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:..//common/Core/CM3/core_cm3.h **** #endif
 614:..//common/Core/CM3/core_cm3.h **** 
 615:..//common/Core/CM3/core_cm3.h **** 
 616:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:..//common/Core/CM3/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:..//common/Core/CM3/core_cm3.h ****   @{
 619:..//common/Core/CM3/core_cm3.h ****  */
 620:..//common/Core/CM3/core_cm3.h **** typedef struct
 621:..//common/Core/CM3/core_cm3.h **** {
 622:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:..//common/Core/CM3/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:..//common/Core/CM3/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:..//common/Core/CM3/core_cm3.h **** } CoreDebug_Type;
 627:..//common/Core/CM3/core_cm3.h **** 
 628:..//common/Core/CM3/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:..//common/Core/CM3/core_cm3.h **** 
 632:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:..//common/Core/CM3/core_cm3.h **** 
 635:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:..//common/Core/CM3/core_cm3.h **** 
 638:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:..//common/Core/CM3/core_cm3.h **** 
 641:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:..//common/Core/CM3/core_cm3.h **** 
 644:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:..//common/Core/CM3/core_cm3.h **** 
 647:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:..//common/Core/CM3/core_cm3.h **** 
 650:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:..//common/Core/CM3/core_cm3.h **** 
 653:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:..//common/Core/CM3/core_cm3.h **** 
 656:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:..//common/Core/CM3/core_cm3.h **** 
 659:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:..//common/Core/CM3/core_cm3.h **** 
 662:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:..//common/Core/CM3/core_cm3.h **** 
 665:..//common/Core/CM3/core_cm3.h **** /* Debug Core Register Selector Register */
 666:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:..//common/Core/CM3/core_cm3.h **** 
 669:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:..//common/Core/CM3/core_cm3.h **** 
 672:..//common/Core/CM3/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:..//common/Core/CM3/core_cm3.h **** 
 676:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:..//common/Core/CM3/core_cm3.h **** 
 679:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:..//common/Core/CM3/core_cm3.h **** 
 682:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:..//common/Core/CM3/core_cm3.h **** 
 685:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:..//common/Core/CM3/core_cm3.h **** 
 688:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:..//common/Core/CM3/core_cm3.h **** 
 691:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:..//common/Core/CM3/core_cm3.h **** 
 694:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:..//common/Core/CM3/core_cm3.h **** 
 697:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:..//common/Core/CM3/core_cm3.h **** 
 700:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:..//common/Core/CM3/core_cm3.h **** 
 703:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:..//common/Core/CM3/core_cm3.h **** 
 706:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:..//common/Core/CM3/core_cm3.h **** 
 709:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:..//common/Core/CM3/core_cm3.h **** 
 713:..//common/Core/CM3/core_cm3.h **** 
 714:..//common/Core/CM3/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:..//common/Core/CM3/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:..//common/Core/CM3/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:..//common/Core/CM3/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:..//common/Core/CM3/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:..//common/Core/CM3/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:..//common/Core/CM3/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:..//common/Core/CM3/core_cm3.h **** 
 722:..//common/Core/CM3/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:..//common/Core/CM3/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:..//common/Core/CM3/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:..//common/Core/CM3/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:..//common/Core/CM3/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:..//common/Core/CM3/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:..//common/Core/CM3/core_cm3.h **** 
 729:..//common/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:..//common/Core/CM3/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:..//common/Core/CM3/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:..//common/Core/CM3/core_cm3.h **** #endif
 733:..//common/Core/CM3/core_cm3.h **** 
 734:..//common/Core/CM3/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:..//common/Core/CM3/core_cm3.h **** 
 736:..//common/Core/CM3/core_cm3.h **** 
 737:..//common/Core/CM3/core_cm3.h **** /*******************************************************************************
 738:..//common/Core/CM3/core_cm3.h ****  *                Hardware Abstraction Layer
 739:..//common/Core/CM3/core_cm3.h ****  ******************************************************************************/
 740:..//common/Core/CM3/core_cm3.h **** 
 741:..//common/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   )
 742:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:..//common/Core/CM3/core_cm3.h **** 
 745:..//common/Core/CM3/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:..//common/Core/CM3/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:..//common/Core/CM3/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:..//common/Core/CM3/core_cm3.h **** 
 749:..//common/Core/CM3/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:..//common/Core/CM3/core_cm3.h **** 
 753:..//common/Core/CM3/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:..//common/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:..//common/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:..//common/Core/CM3/core_cm3.h **** 
 757:..//common/Core/CM3/core_cm3.h **** #endif
 758:..//common/Core/CM3/core_cm3.h **** 
 759:..//common/Core/CM3/core_cm3.h **** 
 760:..//common/Core/CM3/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:..//common/Core/CM3/core_cm3.h **** 
 762:..//common/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:..//common/Core/CM3/core_cm3.h **** /* ARM armcc specific functions */
 764:..//common/Core/CM3/core_cm3.h **** 
 765:..//common/Core/CM3/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:..//common/Core/CM3/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:..//common/Core/CM3/core_cm3.h **** 
 768:..//common/Core/CM3/core_cm3.h **** #define __NOP                             __nop
 769:..//common/Core/CM3/core_cm3.h **** #define __WFI                             __wfi
 770:..//common/Core/CM3/core_cm3.h **** #define __WFE                             __wfe
 771:..//common/Core/CM3/core_cm3.h **** #define __SEV                             __sev
 772:..//common/Core/CM3/core_cm3.h **** #define __ISB()                           __isb(0)
 773:..//common/Core/CM3/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:..//common/Core/CM3/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:..//common/Core/CM3/core_cm3.h **** #define __REV                             __rev
 776:..//common/Core/CM3/core_cm3.h **** #define __RBIT                            __rbit
 777:..//common/Core/CM3/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:..//common/Core/CM3/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:..//common/Core/CM3/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:..//common/Core/CM3/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:..//common/Core/CM3/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:..//common/Core/CM3/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:..//common/Core/CM3/core_cm3.h **** 
 784:..//common/Core/CM3/core_cm3.h **** 
 785:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:..//common/Core/CM3/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:..//common/Core/CM3/core_cm3.h **** 
 790:..//common/Core/CM3/core_cm3.h **** 
 791:..//common/Core/CM3/core_cm3.h **** /**
 792:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:..//common/Core/CM3/core_cm3.h ****  *
 794:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
 795:..//common/Core/CM3/core_cm3.h ****  *
 796:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 797:..//common/Core/CM3/core_cm3.h ****  */
 798:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:..//common/Core/CM3/core_cm3.h **** 
 800:..//common/Core/CM3/core_cm3.h **** /**
 801:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:..//common/Core/CM3/core_cm3.h ****  *
 803:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:..//common/Core/CM3/core_cm3.h ****  *
 805:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:..//common/Core/CM3/core_cm3.h ****  */
 808:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:..//common/Core/CM3/core_cm3.h **** 
 810:..//common/Core/CM3/core_cm3.h **** /**
 811:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:..//common/Core/CM3/core_cm3.h ****  *
 813:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
 814:..//common/Core/CM3/core_cm3.h ****  *
 815:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
 817:..//common/Core/CM3/core_cm3.h ****  */
 818:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:..//common/Core/CM3/core_cm3.h **** 
 820:..//common/Core/CM3/core_cm3.h **** /**
 821:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:..//common/Core/CM3/core_cm3.h ****  *
 823:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:..//common/Core/CM3/core_cm3.h ****  *
 825:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:..//common/Core/CM3/core_cm3.h ****  */
 828:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:..//common/Core/CM3/core_cm3.h **** 
 830:..//common/Core/CM3/core_cm3.h **** /**
 831:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:..//common/Core/CM3/core_cm3.h ****  *
 833:..//common/Core/CM3/core_cm3.h ****  * @param   value  value to reverse
 834:..//common/Core/CM3/core_cm3.h ****  * @return         reversed value
 835:..//common/Core/CM3/core_cm3.h ****  *
 836:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:..//common/Core/CM3/core_cm3.h ****  */
 838:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:..//common/Core/CM3/core_cm3.h **** 
 840:..//common/Core/CM3/core_cm3.h **** /**
 841:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:..//common/Core/CM3/core_cm3.h ****  *
 843:..//common/Core/CM3/core_cm3.h ****  * @param   value  value to reverse
 844:..//common/Core/CM3/core_cm3.h ****  * @return         reversed value
 845:..//common/Core/CM3/core_cm3.h ****  *
 846:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:..//common/Core/CM3/core_cm3.h ****  */
 848:..//common/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:..//common/Core/CM3/core_cm3.h **** 
 850:..//common/Core/CM3/core_cm3.h **** 
 851:..//common/Core/CM3/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:..//common/Core/CM3/core_cm3.h **** 
 853:..//common/Core/CM3/core_cm3.h **** /**
 854:..//common/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:..//common/Core/CM3/core_cm3.h ****  *
 856:..//common/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:..//common/Core/CM3/core_cm3.h ****  */
 858:..//common/Core/CM3/core_cm3.h **** extern void __CLREX(void);
 859:..//common/Core/CM3/core_cm3.h **** 
 860:..//common/Core/CM3/core_cm3.h **** /**
 861:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 862:..//common/Core/CM3/core_cm3.h ****  *
 863:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
 864:..//common/Core/CM3/core_cm3.h ****  *
 865:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 866:..//common/Core/CM3/core_cm3.h ****  */
 867:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:..//common/Core/CM3/core_cm3.h **** 
 869:..//common/Core/CM3/core_cm3.h **** /**
 870:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 871:..//common/Core/CM3/core_cm3.h ****  *
 872:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
 873:..//common/Core/CM3/core_cm3.h ****  *
 874:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
 875:..//common/Core/CM3/core_cm3.h ****  */
 876:..//common/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:..//common/Core/CM3/core_cm3.h **** 
 878:..//common/Core/CM3/core_cm3.h **** /**
 879:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:..//common/Core/CM3/core_cm3.h ****  *
 881:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
 882:..//common/Core/CM3/core_cm3.h ****  *
 883:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:..//common/Core/CM3/core_cm3.h ****  */
 885:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:..//common/Core/CM3/core_cm3.h **** 
 887:..//common/Core/CM3/core_cm3.h **** /**
 888:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:..//common/Core/CM3/core_cm3.h ****  *
 890:..//common/Core/CM3/core_cm3.h ****  * @param   priMask  PriMask
 891:..//common/Core/CM3/core_cm3.h ****  *
 892:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:..//common/Core/CM3/core_cm3.h ****  */
 894:..//common/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:..//common/Core/CM3/core_cm3.h **** 
 896:..//common/Core/CM3/core_cm3.h **** /**
 897:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:..//common/Core/CM3/core_cm3.h ****  *
 899:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
 900:..//common/Core/CM3/core_cm3.h ****  *
 901:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 902:..//common/Core/CM3/core_cm3.h ****  */
 903:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:..//common/Core/CM3/core_cm3.h **** 
 905:..//common/Core/CM3/core_cm3.h **** /**
 906:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:..//common/Core/CM3/core_cm3.h ****  *
 908:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask faultMask value
 909:..//common/Core/CM3/core_cm3.h ****  *
 910:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
 911:..//common/Core/CM3/core_cm3.h ****  */
 912:..//common/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:..//common/Core/CM3/core_cm3.h **** 
 914:..//common/Core/CM3/core_cm3.h **** /**
 915:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 916:..//common/Core/CM3/core_cm3.h ****  * 
 917:..//common/Core/CM3/core_cm3.h ****  * @return Control value
 918:..//common/Core/CM3/core_cm3.h ****  *
 919:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
 920:..//common/Core/CM3/core_cm3.h ****  */
 921:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:..//common/Core/CM3/core_cm3.h **** 
 923:..//common/Core/CM3/core_cm3.h **** /**
 924:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 925:..//common/Core/CM3/core_cm3.h ****  *
 926:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
 927:..//common/Core/CM3/core_cm3.h ****  *
 928:..//common/Core/CM3/core_cm3.h ****  * Set the control register
 929:..//common/Core/CM3/core_cm3.h ****  */
 930:..//common/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:..//common/Core/CM3/core_cm3.h **** 
 932:..//common/Core/CM3/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:..//common/Core/CM3/core_cm3.h **** 
 934:..//common/Core/CM3/core_cm3.h **** /**
 935:..//common/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:..//common/Core/CM3/core_cm3.h ****  *
 937:..//common/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:..//common/Core/CM3/core_cm3.h ****  */
 939:..//common/Core/CM3/core_cm3.h **** #define __CLREX                           __clrex
 940:..//common/Core/CM3/core_cm3.h **** 
 941:..//common/Core/CM3/core_cm3.h **** /**
 942:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 943:..//common/Core/CM3/core_cm3.h ****  *
 944:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
 945:..//common/Core/CM3/core_cm3.h ****  *
 946:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 947:..//common/Core/CM3/core_cm3.h ****  */
 948:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:..//common/Core/CM3/core_cm3.h **** {
 950:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:..//common/Core/CM3/core_cm3.h ****   return(__regBasePri);
 952:..//common/Core/CM3/core_cm3.h **** }
 953:..//common/Core/CM3/core_cm3.h **** 
 954:..//common/Core/CM3/core_cm3.h **** /**
 955:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 956:..//common/Core/CM3/core_cm3.h ****  *
 957:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
 958:..//common/Core/CM3/core_cm3.h ****  *
 959:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
 960:..//common/Core/CM3/core_cm3.h ****  */
 961:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:..//common/Core/CM3/core_cm3.h **** {
 963:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:..//common/Core/CM3/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:..//common/Core/CM3/core_cm3.h **** }
 966:..//common/Core/CM3/core_cm3.h **** 
 967:..//common/Core/CM3/core_cm3.h **** /**
 968:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:..//common/Core/CM3/core_cm3.h ****  *
 970:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
 971:..//common/Core/CM3/core_cm3.h ****  *
 972:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:..//common/Core/CM3/core_cm3.h ****  */
 974:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:..//common/Core/CM3/core_cm3.h **** {
 976:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:..//common/Core/CM3/core_cm3.h ****   return(__regPriMask);
 978:..//common/Core/CM3/core_cm3.h **** }
 979:..//common/Core/CM3/core_cm3.h **** 
 980:..//common/Core/CM3/core_cm3.h **** /**
 981:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:..//common/Core/CM3/core_cm3.h ****  *
 983:..//common/Core/CM3/core_cm3.h ****  * @param  priMask  PriMask
 984:..//common/Core/CM3/core_cm3.h ****  *
 985:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:..//common/Core/CM3/core_cm3.h ****  */
 987:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:..//common/Core/CM3/core_cm3.h **** {
 989:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:..//common/Core/CM3/core_cm3.h ****   __regPriMask = (priMask);
 991:..//common/Core/CM3/core_cm3.h **** }
 992:..//common/Core/CM3/core_cm3.h **** 
 993:..//common/Core/CM3/core_cm3.h **** /**
 994:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:..//common/Core/CM3/core_cm3.h ****  *
 996:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
 997:..//common/Core/CM3/core_cm3.h ****  *
 998:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 999:..//common/Core/CM3/core_cm3.h ****  */
1000:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:..//common/Core/CM3/core_cm3.h **** {
1002:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:..//common/Core/CM3/core_cm3.h ****   return(__regFaultMask);
1004:..//common/Core/CM3/core_cm3.h **** }
1005:..//common/Core/CM3/core_cm3.h **** 
1006:..//common/Core/CM3/core_cm3.h **** /**
1007:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:..//common/Core/CM3/core_cm3.h ****  *
1009:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask  faultMask value
1010:..//common/Core/CM3/core_cm3.h ****  *
1011:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
1012:..//common/Core/CM3/core_cm3.h ****  */
1013:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:..//common/Core/CM3/core_cm3.h **** {
1015:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:..//common/Core/CM3/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:..//common/Core/CM3/core_cm3.h **** }
1018:..//common/Core/CM3/core_cm3.h **** 
1019:..//common/Core/CM3/core_cm3.h **** /**
1020:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
1021:..//common/Core/CM3/core_cm3.h ****  * 
1022:..//common/Core/CM3/core_cm3.h ****  * @return Control value
1023:..//common/Core/CM3/core_cm3.h ****  *
1024:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
1025:..//common/Core/CM3/core_cm3.h ****  */
1026:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:..//common/Core/CM3/core_cm3.h **** {
1028:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:..//common/Core/CM3/core_cm3.h ****   return(__regControl);
1030:..//common/Core/CM3/core_cm3.h **** }
1031:..//common/Core/CM3/core_cm3.h **** 
1032:..//common/Core/CM3/core_cm3.h **** /**
1033:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
1034:..//common/Core/CM3/core_cm3.h ****  *
1035:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
1036:..//common/Core/CM3/core_cm3.h ****  *
1037:..//common/Core/CM3/core_cm3.h ****  * Set the control register
1038:..//common/Core/CM3/core_cm3.h ****  */
1039:..//common/Core/CM3/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:..//common/Core/CM3/core_cm3.h **** {
1041:..//common/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:..//common/Core/CM3/core_cm3.h ****   __regControl = control;
1043:..//common/Core/CM3/core_cm3.h **** }
1044:..//common/Core/CM3/core_cm3.h **** 
1045:..//common/Core/CM3/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:..//common/Core/CM3/core_cm3.h **** 
1047:..//common/Core/CM3/core_cm3.h **** 
1048:..//common/Core/CM3/core_cm3.h **** 
1049:..//common/Core/CM3/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:..//common/Core/CM3/core_cm3.h **** /* IAR iccarm specific functions */
1051:..//common/Core/CM3/core_cm3.h **** 
1052:..//common/Core/CM3/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:..//common/Core/CM3/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:..//common/Core/CM3/core_cm3.h **** 
1055:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:..//common/Core/CM3/core_cm3.h **** 
1058:..//common/Core/CM3/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:..//common/Core/CM3/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:..//common/Core/CM3/core_cm3.h **** 
1064:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:..//common/Core/CM3/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:..//common/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:..//common/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:..//common/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:..//common/Core/CM3/core_cm3.h **** 
1076:..//common/Core/CM3/core_cm3.h **** 
1077:..//common/Core/CM3/core_cm3.h **** /**
1078:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:..//common/Core/CM3/core_cm3.h ****  *
1080:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
1081:..//common/Core/CM3/core_cm3.h ****  *
1082:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
1083:..//common/Core/CM3/core_cm3.h ****  */
1084:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:..//common/Core/CM3/core_cm3.h **** 
1086:..//common/Core/CM3/core_cm3.h **** /**
1087:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:..//common/Core/CM3/core_cm3.h ****  *
1089:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:..//common/Core/CM3/core_cm3.h ****  *
1091:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:..//common/Core/CM3/core_cm3.h ****  */
1094:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:..//common/Core/CM3/core_cm3.h **** 
1096:..//common/Core/CM3/core_cm3.h **** /**
1097:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:..//common/Core/CM3/core_cm3.h ****  *
1099:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
1100:..//common/Core/CM3/core_cm3.h ****  *
1101:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
1103:..//common/Core/CM3/core_cm3.h ****  */
1104:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:..//common/Core/CM3/core_cm3.h **** 
1106:..//common/Core/CM3/core_cm3.h **** /**
1107:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:..//common/Core/CM3/core_cm3.h ****  *
1109:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:..//common/Core/CM3/core_cm3.h ****  *
1111:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:..//common/Core/CM3/core_cm3.h ****  */
1114:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:..//common/Core/CM3/core_cm3.h **** 
1116:..//common/Core/CM3/core_cm3.h **** /**
1117:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:..//common/Core/CM3/core_cm3.h ****  *
1119:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1120:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1121:..//common/Core/CM3/core_cm3.h ****  *
1122:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:..//common/Core/CM3/core_cm3.h ****  */
1124:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:..//common/Core/CM3/core_cm3.h **** 
1126:..//common/Core/CM3/core_cm3.h **** /**
1127:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
1128:..//common/Core/CM3/core_cm3.h ****  *
1129:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1130:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1131:..//common/Core/CM3/core_cm3.h ****  *
1132:..//common/Core/CM3/core_cm3.h ****  * Reverse bit order of value
1133:..//common/Core/CM3/core_cm3.h ****  */
1134:..//common/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:..//common/Core/CM3/core_cm3.h **** 
1136:..//common/Core/CM3/core_cm3.h **** /**
1137:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:..//common/Core/CM3/core_cm3.h ****  *
1139:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1140:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1141:..//common/Core/CM3/core_cm3.h ****  *
1142:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:..//common/Core/CM3/core_cm3.h ****  */
1144:..//common/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:..//common/Core/CM3/core_cm3.h **** 
1146:..//common/Core/CM3/core_cm3.h **** /**
1147:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:..//common/Core/CM3/core_cm3.h ****  *
1149:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1150:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1151:..//common/Core/CM3/core_cm3.h ****  *
1152:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:..//common/Core/CM3/core_cm3.h ****  */
1154:..//common/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:..//common/Core/CM3/core_cm3.h **** 
1156:..//common/Core/CM3/core_cm3.h **** /**
1157:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:..//common/Core/CM3/core_cm3.h ****  *
1159:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1160:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1161:..//common/Core/CM3/core_cm3.h ****  *
1162:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:..//common/Core/CM3/core_cm3.h ****  */
1164:..//common/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:..//common/Core/CM3/core_cm3.h **** 
1166:..//common/Core/CM3/core_cm3.h **** /**
1167:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:..//common/Core/CM3/core_cm3.h ****  *
1169:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1170:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1171:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1172:..//common/Core/CM3/core_cm3.h ****  *
1173:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:..//common/Core/CM3/core_cm3.h ****  */
1175:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:..//common/Core/CM3/core_cm3.h **** 
1177:..//common/Core/CM3/core_cm3.h **** /**
1178:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:..//common/Core/CM3/core_cm3.h ****  *
1180:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1181:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1182:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1183:..//common/Core/CM3/core_cm3.h ****  *
1184:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:..//common/Core/CM3/core_cm3.h ****  */
1186:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:..//common/Core/CM3/core_cm3.h **** 
1188:..//common/Core/CM3/core_cm3.h **** /**
1189:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:..//common/Core/CM3/core_cm3.h ****  *
1191:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1192:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1193:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1194:..//common/Core/CM3/core_cm3.h ****  *
1195:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:..//common/Core/CM3/core_cm3.h ****  */
1197:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:..//common/Core/CM3/core_cm3.h **** 
1199:..//common/Core/CM3/core_cm3.h **** 
1200:..//common/Core/CM3/core_cm3.h **** 
1201:..//common/Core/CM3/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:..//common/Core/CM3/core_cm3.h **** /* GNU gcc specific functions */
1203:..//common/Core/CM3/core_cm3.h **** 
1204:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:..//common/Core/CM3/core_cm3.h **** 
1207:..//common/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:..//common/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:..//common/Core/CM3/core_cm3.h **** 
1210:..//common/Core/CM3/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:..//common/Core/CM3/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:..//common/Core/CM3/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:..//common/Core/CM3/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:..//common/Core/CM3/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:..//common/Core/CM3/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:..//common/Core/CM3/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:..//common/Core/CM3/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:..//common/Core/CM3/core_cm3.h **** 
1219:..//common/Core/CM3/core_cm3.h **** 
1220:..//common/Core/CM3/core_cm3.h **** /**
1221:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:..//common/Core/CM3/core_cm3.h ****  *
1223:..//common/Core/CM3/core_cm3.h ****  * @return ProcessStackPointer
1224:..//common/Core/CM3/core_cm3.h ****  *
1225:..//common/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
1226:..//common/Core/CM3/core_cm3.h ****  */
1227:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:..//common/Core/CM3/core_cm3.h **** 
1229:..//common/Core/CM3/core_cm3.h **** /**
1230:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:..//common/Core/CM3/core_cm3.h ****  *
1232:..//common/Core/CM3/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:..//common/Core/CM3/core_cm3.h ****  *
1234:..//common/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:..//common/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:..//common/Core/CM3/core_cm3.h ****  */
1237:..//common/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:..//common/Core/CM3/core_cm3.h **** 
1239:..//common/Core/CM3/core_cm3.h **** /**
1240:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:..//common/Core/CM3/core_cm3.h ****  *
1242:..//common/Core/CM3/core_cm3.h ****  * @return Main Stack Pointer
1243:..//common/Core/CM3/core_cm3.h ****  *
1244:..//common/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:..//common/Core/CM3/core_cm3.h ****  * Cortex processor register
1246:..//common/Core/CM3/core_cm3.h ****  */
1247:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:..//common/Core/CM3/core_cm3.h **** 
1249:..//common/Core/CM3/core_cm3.h **** /**
1250:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:..//common/Core/CM3/core_cm3.h ****  *
1252:..//common/Core/CM3/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:..//common/Core/CM3/core_cm3.h ****  *
1254:..//common/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:..//common/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:..//common/Core/CM3/core_cm3.h ****  */
1257:..//common/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:..//common/Core/CM3/core_cm3.h **** 
1259:..//common/Core/CM3/core_cm3.h **** /**
1260:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
1261:..//common/Core/CM3/core_cm3.h ****  *
1262:..//common/Core/CM3/core_cm3.h ****  * @return BasePriority
1263:..//common/Core/CM3/core_cm3.h ****  *
1264:..//common/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
1265:..//common/Core/CM3/core_cm3.h ****  */
1266:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:..//common/Core/CM3/core_cm3.h **** 
1268:..//common/Core/CM3/core_cm3.h **** /**
1269:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
1270:..//common/Core/CM3/core_cm3.h ****  *
1271:..//common/Core/CM3/core_cm3.h ****  * @param  basePri  BasePriority
1272:..//common/Core/CM3/core_cm3.h ****  *
1273:..//common/Core/CM3/core_cm3.h ****  * Set the base priority register
1274:..//common/Core/CM3/core_cm3.h ****  */
1275:..//common/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:..//common/Core/CM3/core_cm3.h **** 
1277:..//common/Core/CM3/core_cm3.h **** /**
1278:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:..//common/Core/CM3/core_cm3.h ****  *
1280:..//common/Core/CM3/core_cm3.h ****  * @return PriMask
1281:..//common/Core/CM3/core_cm3.h ****  *
1282:..//common/Core/CM3/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:..//common/Core/CM3/core_cm3.h ****  */
1284:..//common/Core/CM3/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:..//common/Core/CM3/core_cm3.h **** 
1286:..//common/Core/CM3/core_cm3.h **** /**
1287:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:..//common/Core/CM3/core_cm3.h ****  *
1289:..//common/Core/CM3/core_cm3.h ****  * @param  priMask  PriMask
1290:..//common/Core/CM3/core_cm3.h ****  *
1291:..//common/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:..//common/Core/CM3/core_cm3.h ****  */
1293:..//common/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:..//common/Core/CM3/core_cm3.h **** 
1295:..//common/Core/CM3/core_cm3.h **** /**
1296:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:..//common/Core/CM3/core_cm3.h ****  *
1298:..//common/Core/CM3/core_cm3.h ****  * @return FaultMask
1299:..//common/Core/CM3/core_cm3.h ****  *
1300:..//common/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
1301:..//common/Core/CM3/core_cm3.h ****  */
1302:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:..//common/Core/CM3/core_cm3.h **** 
1304:..//common/Core/CM3/core_cm3.h **** /**
1305:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:..//common/Core/CM3/core_cm3.h ****  *
1307:..//common/Core/CM3/core_cm3.h ****  * @param  faultMask  faultMask value
1308:..//common/Core/CM3/core_cm3.h ****  *
1309:..//common/Core/CM3/core_cm3.h ****  * Set the fault mask register
1310:..//common/Core/CM3/core_cm3.h ****  */
1311:..//common/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:..//common/Core/CM3/core_cm3.h **** 
1313:..//common/Core/CM3/core_cm3.h **** /**
1314:..//common/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
1315:..//common/Core/CM3/core_cm3.h **** * 
1316:..//common/Core/CM3/core_cm3.h **** *  @return Control value
1317:..//common/Core/CM3/core_cm3.h ****  *
1318:..//common/Core/CM3/core_cm3.h ****  * Return the content of the control register
1319:..//common/Core/CM3/core_cm3.h ****  */
1320:..//common/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:..//common/Core/CM3/core_cm3.h **** 
1322:..//common/Core/CM3/core_cm3.h **** /**
1323:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
1324:..//common/Core/CM3/core_cm3.h ****  *
1325:..//common/Core/CM3/core_cm3.h ****  * @param  control  Control value
1326:..//common/Core/CM3/core_cm3.h ****  *
1327:..//common/Core/CM3/core_cm3.h ****  * Set the control register
1328:..//common/Core/CM3/core_cm3.h ****  */
1329:..//common/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:..//common/Core/CM3/core_cm3.h **** 
1331:..//common/Core/CM3/core_cm3.h **** /**
1332:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:..//common/Core/CM3/core_cm3.h ****  *
1334:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1335:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1336:..//common/Core/CM3/core_cm3.h ****  *
1337:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in integer value
1338:..//common/Core/CM3/core_cm3.h ****  */
1339:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:..//common/Core/CM3/core_cm3.h **** 
1341:..//common/Core/CM3/core_cm3.h **** /**
1342:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:..//common/Core/CM3/core_cm3.h ****  *
1344:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1345:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1346:..//common/Core/CM3/core_cm3.h ****  *
1347:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:..//common/Core/CM3/core_cm3.h ****  */
1349:..//common/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:..//common/Core/CM3/core_cm3.h **** 
1351:..//common/Core/CM3/core_cm3.h **** /**
1352:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:..//common/Core/CM3/core_cm3.h ****  *
1354:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1355:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1356:..//common/Core/CM3/core_cm3.h ****  *
1357:..//common/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:..//common/Core/CM3/core_cm3.h ****  */
1359:..//common/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:..//common/Core/CM3/core_cm3.h **** 
1361:..//common/Core/CM3/core_cm3.h **** /**
1362:..//common/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
1363:..//common/Core/CM3/core_cm3.h ****  *
1364:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to reverse
1365:..//common/Core/CM3/core_cm3.h ****  * @return        reversed value
1366:..//common/Core/CM3/core_cm3.h ****  *
1367:..//common/Core/CM3/core_cm3.h ****  * Reverse bit order of value
1368:..//common/Core/CM3/core_cm3.h ****  */
1369:..//common/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:..//common/Core/CM3/core_cm3.h **** 
1371:..//common/Core/CM3/core_cm3.h **** /**
1372:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:..//common/Core/CM3/core_cm3.h ****  *
1374:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1375:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1376:..//common/Core/CM3/core_cm3.h ****  *
1377:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:..//common/Core/CM3/core_cm3.h ****  */
1379:..//common/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:..//common/Core/CM3/core_cm3.h **** 
1381:..//common/Core/CM3/core_cm3.h **** /**
1382:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:..//common/Core/CM3/core_cm3.h ****  *
1384:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1385:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1386:..//common/Core/CM3/core_cm3.h ****  *
1387:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:..//common/Core/CM3/core_cm3.h ****  */
1389:..//common/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:..//common/Core/CM3/core_cm3.h **** 
1391:..//common/Core/CM3/core_cm3.h **** /**
1392:..//common/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:..//common/Core/CM3/core_cm3.h ****  *
1394:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1395:..//common/Core/CM3/core_cm3.h ****  * @return        value of (*address)
1396:..//common/Core/CM3/core_cm3.h ****  *
1397:..//common/Core/CM3/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:..//common/Core/CM3/core_cm3.h ****  */
1399:..//common/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:..//common/Core/CM3/core_cm3.h **** 
1401:..//common/Core/CM3/core_cm3.h **** /**
1402:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:..//common/Core/CM3/core_cm3.h ****  *
1404:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1405:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1406:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1407:..//common/Core/CM3/core_cm3.h ****  *
1408:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:..//common/Core/CM3/core_cm3.h ****  */
1410:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:..//common/Core/CM3/core_cm3.h **** 
1412:..//common/Core/CM3/core_cm3.h **** /**
1413:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:..//common/Core/CM3/core_cm3.h ****  *
1415:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1416:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1417:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1418:..//common/Core/CM3/core_cm3.h ****  *
1419:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:..//common/Core/CM3/core_cm3.h ****  */
1421:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:..//common/Core/CM3/core_cm3.h **** 
1423:..//common/Core/CM3/core_cm3.h **** /**
1424:..//common/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:..//common/Core/CM3/core_cm3.h ****  *
1426:..//common/Core/CM3/core_cm3.h ****  * @param  value  value to store
1427:..//common/Core/CM3/core_cm3.h ****  * @param  *addr  address pointer
1428:..//common/Core/CM3/core_cm3.h ****  * @return        successful / failed
1429:..//common/Core/CM3/core_cm3.h ****  *
1430:..//common/Core/CM3/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:..//common/Core/CM3/core_cm3.h ****  */
1432:..//common/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:..//common/Core/CM3/core_cm3.h **** 
1434:..//common/Core/CM3/core_cm3.h **** 
1435:..//common/Core/CM3/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:..//common/Core/CM3/core_cm3.h **** /* TASKING carm specific functions */
1437:..//common/Core/CM3/core_cm3.h **** 
1438:..//common/Core/CM3/core_cm3.h **** /*
1439:..//common/Core/CM3/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:..//common/Core/CM3/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:..//common/Core/CM3/core_cm3.h ****  * Including the CMSIS ones.
1442:..//common/Core/CM3/core_cm3.h ****  */
1443:..//common/Core/CM3/core_cm3.h **** 
1444:..//common/Core/CM3/core_cm3.h **** #endif
1445:..//common/Core/CM3/core_cm3.h **** 
1446:..//common/Core/CM3/core_cm3.h **** 
1447:..//common/Core/CM3/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:..//common/Core/CM3/core_cm3.h ****   Core  Function Interface containing:
1449:..//common/Core/CM3/core_cm3.h ****   - Core NVIC Functions
1450:..//common/Core/CM3/core_cm3.h ****   - Core SysTick Functions
1451:..//common/Core/CM3/core_cm3.h ****   - Core Reset Functions
1452:..//common/Core/CM3/core_cm3.h **** */
1453:..//common/Core/CM3/core_cm3.h **** /*@{*/
1454:..//common/Core/CM3/core_cm3.h **** 
1455:..//common/Core/CM3/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:..//common/Core/CM3/core_cm3.h **** 
1457:..//common/Core/CM3/core_cm3.h **** /**
1458:..//common/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:..//common/Core/CM3/core_cm3.h ****  *
1460:..//common/Core/CM3/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:..//common/Core/CM3/core_cm3.h ****  *
1462:..//common/Core/CM3/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:..//common/Core/CM3/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:..//common/Core/CM3/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:..//common/Core/CM3/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:..//common/Core/CM3/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:..//common/Core/CM3/core_cm3.h ****  */
1468:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:..//common/Core/CM3/core_cm3.h **** {
1470:..//common/Core/CM3/core_cm3.h ****   uint32_t reg_value;
1471:..//common/Core/CM3/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:..//common/Core/CM3/core_cm3.h ****   
1473:..//common/Core/CM3/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:..//common/Core/CM3/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:..//common/Core/CM3/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:..//common/Core/CM3/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:..//common/Core/CM3/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:..//common/Core/CM3/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:..//common/Core/CM3/core_cm3.h **** }
1480:..//common/Core/CM3/core_cm3.h **** 
1481:..//common/Core/CM3/core_cm3.h **** /**
1482:..//common/Core/CM3/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:..//common/Core/CM3/core_cm3.h ****  *
1484:..//common/Core/CM3/core_cm3.h ****  * @return priority grouping field 
1485:..//common/Core/CM3/core_cm3.h ****  *
1486:..//common/Core/CM3/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:..//common/Core/CM3/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:..//common/Core/CM3/core_cm3.h ****  */
1489:..//common/Core/CM3/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:..//common/Core/CM3/core_cm3.h **** {
1491:..//common/Core/CM3/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:..//common/Core/CM3/core_cm3.h **** }
1493:..//common/Core/CM3/core_cm3.h **** 
1494:..//common/Core/CM3/core_cm3.h **** /**
1495:..//common/Core/CM3/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:..//common/Core/CM3/core_cm3.h ****  *
1497:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:..//common/Core/CM3/core_cm3.h ****  *
1499:..//common/Core/CM3/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:..//common/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:..//common/Core/CM3/core_cm3.h ****  */
1502:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:..//common/Core/CM3/core_cm3.h **** {
  31              		.loc 1 1503 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  36 0000 80B4     		push	{r7}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 4
  39 0002 83B0     		sub	sp, sp, #12
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 16
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_offset 7, -4
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 0346     		mov	r3, r0
  47 0008 FB71     		strb	r3, [r7, #7]
1504:..//common/Core/CM3/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  48              		.loc 1 1504 0
  49 000a 4EF20013 		movw	r3, #:lower16:-536813312
  50 000e CEF20003 		movt	r3, #:upper16:-536813312
  51 0012 97F90720 		ldrsb	r2, [r7, #7]
  52 0016 4FEA5212 		lsr	r2, r2, #5
  53 001a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
  54 001c 01F01F01 		and	r1, r1, #31
  55 0020 4FF00100 		mov	r0, #1
  56 0024 00FA01F1 		lsl	r1, r0, r1
  57 0028 43F82210 		str	r1, [r3, r2, lsl #2]
1505:..//common/Core/CM3/core_cm3.h **** }
  58              		.loc 1 1505 0
  59 002c 07F10C07 		add	r7, r7, #12
  60 0030 BD46     		mov	sp, r7
  61 0032 80BC     		pop	{r7}
  62 0034 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE14:
  66 0036 00BF     		.section	.text.NVIC_DisableIRQ,"ax",%progbits
  67              		.align	2
  68              		.thumb
  69              		.thumb_func
  71              	NVIC_DisableIRQ:
  72              	.LFB15:
1506:..//common/Core/CM3/core_cm3.h **** 
1507:..//common/Core/CM3/core_cm3.h **** /**
1508:..//common/Core/CM3/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:..//common/Core/CM3/core_cm3.h ****  * 
1510:..//common/Core/CM3/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:..//common/Core/CM3/core_cm3.h ****  * 
1512:..//common/Core/CM3/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:..//common/Core/CM3/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:..//common/Core/CM3/core_cm3.h ****  */
1515:..//common/Core/CM3/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:..//common/Core/CM3/core_cm3.h **** {
  73              		.loc 1 1516 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 8
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78 0000 80B4     		push	{r7}
  79              	.LCFI3:
  80              		.cfi_def_cfa_offset 4
  81 0002 83B0     		sub	sp, sp, #12
  82              	.LCFI4:
  83              		.cfi_def_cfa_offset 16
  84 0004 00AF     		add	r7, sp, #0
  85              		.cfi_offset 7, -4
  86              	.LCFI5:
  87              		.cfi_def_cfa_register 7
  88 0006 0346     		mov	r3, r0
  89 0008 FB71     		strb	r3, [r7, #7]
1517:..//common/Core/CM3/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  90              		.loc 1 1517 0
  91 000a 4EF20013 		movw	r3, #:lower16:-536813312
  92 000e CEF20003 		movt	r3, #:upper16:-536813312
  93 0012 97F90720 		ldrsb	r2, [r7, #7]
  94 0016 4FEA5212 		lsr	r2, r2, #5
  95 001a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
  96 001c 01F01F01 		and	r1, r1, #31
  97 0020 4FF00100 		mov	r0, #1
  98 0024 00FA01F1 		lsl	r1, r0, r1
  99 0028 02F12002 		add	r2, r2, #32
 100 002c 43F82210 		str	r1, [r3, r2, lsl #2]
1518:..//common/Core/CM3/core_cm3.h **** }
 101              		.loc 1 1518 0
 102 0030 07F10C07 		add	r7, r7, #12
 103 0034 BD46     		mov	sp, r7
 104 0036 80BC     		pop	{r7}
 105 0038 7047     		bx	lr
 106              		.cfi_endproc
 107              	.LFE15:
 109 003a 00BF     		.section	.bss.i2cdat,"aw",%nobits
 110              		.align	2
 113              	i2cdat:
 114 0000 00000000 		.space	24
 114      00000000 
 114      00000000 
 114      00000000 
 114      00000000 
 115              		.section	.bss.I2C_MasterComplete,"aw",%nobits
 116              		.align	2
 119              	I2C_MasterComplete:
 120 0000 00000000 		.space	12
 120      00000000 
 120      00000000 
 121              		.section	.bss.I2C_SlaveComplete,"aw",%nobits
 122              		.align	2
 125              	I2C_SlaveComplete:
 126 0000 00000000 		.space	12
 126      00000000 
 126      00000000 
 127              		.section	.bss.I2C_MonitorBufferIndex,"aw",%nobits
 128              		.align	2
 131              	I2C_MonitorBufferIndex:
 132 0000 00000000 		.space	4
 133              		.section	.text.I2C_getNum,"ax",%progbits
 134              		.align	2
 135              		.thumb
 136              		.thumb_func
 138              	I2C_getNum:
 139              	.LFB29:
 140              		.file 2 "..//common/src/lpc17xx_i2c.c"
   1:..//common/src/lpc17xx_i2c.c **** /***********************************************************************//**
   2:..//common/src/lpc17xx_i2c.c ****  * @file		lpc17xx_i2c.c
   3:..//common/src/lpc17xx_i2c.c ****  * @brief		Contains all functions support for I2C firmware library on LPC17xx
   4:..//common/src/lpc17xx_i2c.c ****  * @version		2.0
   5:..//common/src/lpc17xx_i2c.c ****  * @date		21. May. 2010
   6:..//common/src/lpc17xx_i2c.c ****  * @author		NXP MCU SW Application Team
   7:..//common/src/lpc17xx_i2c.c ****  **************************************************************************
   8:..//common/src/lpc17xx_i2c.c ****  * Software that is described herein is for illustrative purposes only
   9:..//common/src/lpc17xx_i2c.c ****  * which provides customers with programming information regarding the
  10:..//common/src/lpc17xx_i2c.c ****  * products. This software is supplied "AS IS" without any warranties.
  11:..//common/src/lpc17xx_i2c.c ****  * NXP Semiconductors assumes no responsibility or liability for the
  12:..//common/src/lpc17xx_i2c.c ****  * use of the software, conveys no license or title under any patent,
  13:..//common/src/lpc17xx_i2c.c ****  * copyright, or mask work right to the product. NXP Semiconductors
  14:..//common/src/lpc17xx_i2c.c ****  * reserves the right to make changes in the software without
  15:..//common/src/lpc17xx_i2c.c ****  * notification. NXP Semiconductors also make no representation or
  16:..//common/src/lpc17xx_i2c.c ****  * warranty that such application will be suitable for the specified
  17:..//common/src/lpc17xx_i2c.c ****  * use without further testing or modification.
  18:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
  19:..//common/src/lpc17xx_i2c.c **** 
  20:..//common/src/lpc17xx_i2c.c **** /* Peripheral group ----------------------------------------------------------- */
  21:..//common/src/lpc17xx_i2c.c **** /** @addtogroup I2C
  22:..//common/src/lpc17xx_i2c.c ****  * @{
  23:..//common/src/lpc17xx_i2c.c ****  */
  24:..//common/src/lpc17xx_i2c.c **** 
  25:..//common/src/lpc17xx_i2c.c **** /* Includes ------------------------------------------------------------------- */
  26:..//common/src/lpc17xx_i2c.c **** #include "lpc17xx_i2c.h"
  27:..//common/src/lpc17xx_i2c.c **** #include "lpc17xx_clkpwr.h"
  28:..//common/src/lpc17xx_i2c.c **** #include "lpc17xx_pinsel.h"
  29:..//common/src/lpc17xx_i2c.c **** 
  30:..//common/src/lpc17xx_i2c.c **** 
  31:..//common/src/lpc17xx_i2c.c **** /* If this source file built with example, the LPC17xx FW library configuration
  32:..//common/src/lpc17xx_i2c.c ****  * file in each example directory ("lpc17xx_libcfg.h") must be included,
  33:..//common/src/lpc17xx_i2c.c ****  * otherwise the default FW library configuration file must be included instead
  34:..//common/src/lpc17xx_i2c.c ****  */
  35:..//common/src/lpc17xx_i2c.c **** #ifdef __BUILD_WITH_EXAMPLE__
  36:..//common/src/lpc17xx_i2c.c **** #include "lpc17xx_libcfg.h"
  37:..//common/src/lpc17xx_i2c.c **** #else
  38:..//common/src/lpc17xx_i2c.c **** #include "lpc17xx_libcfg_default.h"
  39:..//common/src/lpc17xx_i2c.c **** #endif /* __BUILD_WITH_EXAMPLE__ */
  40:..//common/src/lpc17xx_i2c.c **** 
  41:..//common/src/lpc17xx_i2c.c **** 
  42:..//common/src/lpc17xx_i2c.c **** #ifdef _I2C
  43:..//common/src/lpc17xx_i2c.c **** 
  44:..//common/src/lpc17xx_i2c.c **** 
  45:..//common/src/lpc17xx_i2c.c **** /* Private Types -------------------------------------------------------------- */
  46:..//common/src/lpc17xx_i2c.c **** /** @defgroup I2C_Private_Types I2C Private Types
  47:..//common/src/lpc17xx_i2c.c ****  * @{
  48:..//common/src/lpc17xx_i2c.c ****  */
  49:..//common/src/lpc17xx_i2c.c **** 
  50:..//common/src/lpc17xx_i2c.c **** /**
  51:..//common/src/lpc17xx_i2c.c ****  * @brief I2C device configuration structure type
  52:..//common/src/lpc17xx_i2c.c ****  */
  53:..//common/src/lpc17xx_i2c.c **** typedef struct
  54:..//common/src/lpc17xx_i2c.c **** {
  55:..//common/src/lpc17xx_i2c.c ****   uint32_t      txrx_setup; 						/* Transmission setup */
  56:..//common/src/lpc17xx_i2c.c ****   int32_t		dir;								/* Current direction phase, 0 - write, 1 - read */
  57:..//common/src/lpc17xx_i2c.c **** } I2C_CFG_T;
  58:..//common/src/lpc17xx_i2c.c **** 
  59:..//common/src/lpc17xx_i2c.c **** /**
  60:..//common/src/lpc17xx_i2c.c ****  * @}
  61:..//common/src/lpc17xx_i2c.c ****  */
  62:..//common/src/lpc17xx_i2c.c **** 
  63:..//common/src/lpc17xx_i2c.c **** /* Private Variables ---------------------------------------------------------- */
  64:..//common/src/lpc17xx_i2c.c **** /**
  65:..//common/src/lpc17xx_i2c.c ****  * @brief II2C driver data for I2C0, I2C1 and I2C2
  66:..//common/src/lpc17xx_i2c.c ****  */
  67:..//common/src/lpc17xx_i2c.c **** static I2C_CFG_T i2cdat[3];
  68:..//common/src/lpc17xx_i2c.c **** 
  69:..//common/src/lpc17xx_i2c.c **** static uint32_t I2C_MasterComplete[3];
  70:..//common/src/lpc17xx_i2c.c **** static uint32_t I2C_SlaveComplete[3];
  71:..//common/src/lpc17xx_i2c.c **** 
  72:..//common/src/lpc17xx_i2c.c **** static uint32_t I2C_MonitorBufferIndex;
  73:..//common/src/lpc17xx_i2c.c **** 
  74:..//common/src/lpc17xx_i2c.c **** /* Private Functions ---------------------------------------------------------- */
  75:..//common/src/lpc17xx_i2c.c **** 
  76:..//common/src/lpc17xx_i2c.c **** /* Get I2C number */
  77:..//common/src/lpc17xx_i2c.c **** static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx);
  78:..//common/src/lpc17xx_i2c.c **** 
  79:..//common/src/lpc17xx_i2c.c **** /* Generate a start condition on I2C bus (in master mode only) */
  80:..//common/src/lpc17xx_i2c.c **** static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx);
  81:..//common/src/lpc17xx_i2c.c **** 
  82:..//common/src/lpc17xx_i2c.c **** /* Generate a stop condition on I2C bus (in master mode only) */
  83:..//common/src/lpc17xx_i2c.c **** static void I2C_Stop (LPC_I2C_TypeDef *I2Cx);
  84:..//common/src/lpc17xx_i2c.c **** 
  85:..//common/src/lpc17xx_i2c.c **** /* I2C send byte subroutine */
  86:..//common/src/lpc17xx_i2c.c **** static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte);
  87:..//common/src/lpc17xx_i2c.c **** 
  88:..//common/src/lpc17xx_i2c.c **** /* I2C get byte subroutine */
  89:..//common/src/lpc17xx_i2c.c **** static uint32_t I2C_GetByte (LPC_I2C_TypeDef *I2Cx, uint8_t *retdat, Bool ack);
  90:..//common/src/lpc17xx_i2c.c **** 
  91:..//common/src/lpc17xx_i2c.c **** /* I2C set clock (hz) */
  92:..//common/src/lpc17xx_i2c.c **** static void I2C_SetClock (LPC_I2C_TypeDef *I2Cx, uint32_t target_clock);
  93:..//common/src/lpc17xx_i2c.c **** 
  94:..//common/src/lpc17xx_i2c.c **** /*--------------------------------------------------------------------------------*/
  95:..//common/src/lpc17xx_i2c.c **** /********************************************************************//**
  96:..//common/src/lpc17xx_i2c.c ****  * @brief		Convert from I2C peripheral to number
  97:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
  98:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
  99:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 100:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 101:..//common/src/lpc17xx_i2c.c ****  * @return 		I2C number, could be: 0..2
 102:..//common/src/lpc17xx_i2c.c ****  *********************************************************************/
 103:..//common/src/lpc17xx_i2c.c **** static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx){
 141              		.loc 2 103 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 8
 144              		@ frame_needed = 1, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146 0000 80B4     		push	{r7}
 147              	.LCFI6:
 148              		.cfi_def_cfa_offset 4
 149 0002 83B0     		sub	sp, sp, #12
 150              	.LCFI7:
 151              		.cfi_def_cfa_offset 16
 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_offset 7, -4
 154              	.LCFI8:
 155              		.cfi_def_cfa_register 7
 156 0006 7860     		str	r0, [r7, #4]
 104:..//common/src/lpc17xx_i2c.c **** 	if (I2Cx == LPC_I2C0) {
 157              		.loc 2 104 0
 158 0008 7A68     		ldr	r2, [r7, #4]
 159 000a 4CF20003 		movw	r3, #:lower16:1073856512
 160 000e C4F20103 		movt	r3, #:upper16:1073856512
 161 0012 9A42     		cmp	r2, r3
 162 0014 02D1     		bne	.L6
 105:..//common/src/lpc17xx_i2c.c **** 		return (0);
 163              		.loc 2 105 0
 164 0016 4FF00003 		mov	r3, #0
 165 001a 15E0     		b	.L7
 166              	.L6:
 106:..//common/src/lpc17xx_i2c.c **** 	} else if (I2Cx == LPC_I2C1) {
 167              		.loc 2 106 0
 168 001c 7A68     		ldr	r2, [r7, #4]
 169 001e 4CF20003 		movw	r3, #:lower16:1074118656
 170 0022 C4F20503 		movt	r3, #:upper16:1074118656
 171 0026 9A42     		cmp	r2, r3
 172 0028 02D1     		bne	.L8
 107:..//common/src/lpc17xx_i2c.c **** 		return (1);
 173              		.loc 2 107 0
 174 002a 4FF00103 		mov	r3, #1
 175 002e 0BE0     		b	.L7
 176              	.L8:
 108:..//common/src/lpc17xx_i2c.c **** 	} else if (I2Cx == LPC_I2C2) {
 177              		.loc 2 108 0
 178 0030 7A68     		ldr	r2, [r7, #4]
 179 0032 40F20003 		movw	r3, #:lower16:1074397184
 180 0036 C4F20A03 		movt	r3, #:upper16:1074397184
 181 003a 9A42     		cmp	r2, r3
 182 003c 02D1     		bne	.L9
 109:..//common/src/lpc17xx_i2c.c **** 		return (2);
 183              		.loc 2 109 0
 184 003e 4FF00203 		mov	r3, #2
 185 0042 01E0     		b	.L7
 186              	.L9:
 110:..//common/src/lpc17xx_i2c.c **** 	}
 111:..//common/src/lpc17xx_i2c.c **** 	return (-1);
 187              		.loc 2 111 0
 188 0044 4FF0FF33 		mov	r3, #-1
 189              	.L7:
 112:..//common/src/lpc17xx_i2c.c **** }
 190              		.loc 2 112 0
 191 0048 1846     		mov	r0, r3
 192 004a 07F10C07 		add	r7, r7, #12
 193 004e BD46     		mov	sp, r7
 194 0050 80BC     		pop	{r7}
 195 0052 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE29:
 199              		.section	.text.I2C_Start,"ax",%progbits
 200              		.align	2
 201              		.thumb
 202              		.thumb_func
 204              	I2C_Start:
 205              	.LFB30:
 113:..//common/src/lpc17xx_i2c.c **** 
 114:..//common/src/lpc17xx_i2c.c **** /********************************************************************//**
 115:..//common/src/lpc17xx_i2c.c ****  * @brief		Generate a start condition on I2C bus (in master mode only)
 116:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 117:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 118:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 119:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 120:..//common/src/lpc17xx_i2c.c ****  * @return 		value of I2C status register after generate a start condition
 121:..//common/src/lpc17xx_i2c.c ****  *********************************************************************/
 122:..//common/src/lpc17xx_i2c.c **** static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
 123:..//common/src/lpc17xx_i2c.c **** {
 206              		.loc 2 123 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210              		@ link register save eliminated.
 211 0000 80B4     		push	{r7}
 212              	.LCFI9:
 213              		.cfi_def_cfa_offset 4
 214 0002 83B0     		sub	sp, sp, #12
 215              	.LCFI10:
 216              		.cfi_def_cfa_offset 16
 217 0004 00AF     		add	r7, sp, #0
 218              		.cfi_offset 7, -4
 219              	.LCFI11:
 220              		.cfi_def_cfa_register 7
 221 0006 7860     		str	r0, [r7, #4]
 124:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 222              		.loc 2 124 0
 223 0008 7B68     		ldr	r3, [r7, #4]
 224 000a 4FF00802 		mov	r2, #8
 225 000e 9A61     		str	r2, [r3, #24]
 125:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STA;
 226              		.loc 2 125 0
 227 0010 7B68     		ldr	r3, [r7, #4]
 228 0012 4FF02002 		mov	r2, #32
 229 0016 1A60     		str	r2, [r3, #0]
 230              	.L12:
 126:..//common/src/lpc17xx_i2c.c **** 
 127:..//common/src/lpc17xx_i2c.c **** 	// Wait for complete
 128:..//common/src/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 231              		.loc 2 128 0
 232 0018 7B68     		ldr	r3, [r7, #4]
 233 001a 1B68     		ldr	r3, [r3, #0]
 234 001c 03F00803 		and	r3, r3, #8
 235 0020 002B     		cmp	r3, #0
 236 0022 F9D0     		beq	.L12
 129:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 237              		.loc 2 129 0
 238 0024 7B68     		ldr	r3, [r7, #4]
 239 0026 4FF02002 		mov	r2, #32
 240 002a 9A61     		str	r2, [r3, #24]
 130:..//common/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 241              		.loc 2 130 0
 242 002c 7B68     		ldr	r3, [r7, #4]
 243 002e 5B68     		ldr	r3, [r3, #4]
 244 0030 03F0F803 		and	r3, r3, #248
 131:..//common/src/lpc17xx_i2c.c **** }
 245              		.loc 2 131 0
 246 0034 1846     		mov	r0, r3
 247 0036 07F10C07 		add	r7, r7, #12
 248 003a BD46     		mov	sp, r7
 249 003c 80BC     		pop	{r7}
 250 003e 7047     		bx	lr
 251              		.cfi_endproc
 252              	.LFE30:
 254              		.section	.text.I2C_Stop,"ax",%progbits
 255              		.align	2
 256              		.thumb
 257              		.thumb_func
 259              	I2C_Stop:
 260              	.LFB31:
 132:..//common/src/lpc17xx_i2c.c **** 
 133:..//common/src/lpc17xx_i2c.c **** /********************************************************************//**
 134:..//common/src/lpc17xx_i2c.c ****  * @brief		Generate a stop condition on I2C bus (in master mode only)
 135:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 136:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 137:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 138:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 139:..//common/src/lpc17xx_i2c.c ****  * @return 		None
 140:..//common/src/lpc17xx_i2c.c ****  *********************************************************************/
 141:..//common/src/lpc17xx_i2c.c **** static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
 142:..//common/src/lpc17xx_i2c.c **** {
 261              		.loc 2 142 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 8
 264              		@ frame_needed = 1, uses_anonymous_args = 0
 265              		@ link register save eliminated.
 266 0000 80B4     		push	{r7}
 267              	.LCFI12:
 268              		.cfi_def_cfa_offset 4
 269 0002 83B0     		sub	sp, sp, #12
 270              	.LCFI13:
 271              		.cfi_def_cfa_offset 16
 272 0004 00AF     		add	r7, sp, #0
 273              		.cfi_offset 7, -4
 274              	.LCFI14:
 275              		.cfi_def_cfa_register 7
 276 0006 7860     		str	r0, [r7, #4]
 143:..//common/src/lpc17xx_i2c.c **** 
 144:..//common/src/lpc17xx_i2c.c **** 	/* Make sure start bit is not active */
 145:..//common/src/lpc17xx_i2c.c **** 	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
 277              		.loc 2 145 0
 278 0008 7B68     		ldr	r3, [r7, #4]
 279 000a 1B68     		ldr	r3, [r3, #0]
 280 000c 03F02003 		and	r3, r3, #32
 281 0010 002B     		cmp	r3, #0
 282 0012 03D0     		beq	.L15
 146:..//common/src/lpc17xx_i2c.c **** 	{
 147:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 283              		.loc 2 147 0
 284 0014 7B68     		ldr	r3, [r7, #4]
 285 0016 4FF02002 		mov	r2, #32
 286 001a 9A61     		str	r2, [r3, #24]
 287              	.L15:
 148:..//common/src/lpc17xx_i2c.c **** 	}
 149:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STO;
 288              		.loc 2 149 0
 289 001c 7B68     		ldr	r3, [r7, #4]
 290 001e 4FF01002 		mov	r2, #16
 291 0022 1A60     		str	r2, [r3, #0]
 150:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 292              		.loc 2 150 0
 293 0024 7B68     		ldr	r3, [r7, #4]
 294 0026 4FF00802 		mov	r2, #8
 295 002a 9A61     		str	r2, [r3, #24]
 151:..//common/src/lpc17xx_i2c.c **** }
 296              		.loc 2 151 0
 297 002c 07F10C07 		add	r7, r7, #12
 298 0030 BD46     		mov	sp, r7
 299 0032 80BC     		pop	{r7}
 300 0034 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE31:
 304 0036 00BF     		.section	.text.I2C_SendByte,"ax",%progbits
 305              		.align	2
 306              		.thumb
 307              		.thumb_func
 309              	I2C_SendByte:
 310              	.LFB32:
 152:..//common/src/lpc17xx_i2c.c **** 
 153:..//common/src/lpc17xx_i2c.c **** /********************************************************************//**
 154:..//common/src/lpc17xx_i2c.c ****  * @brief		Send a byte
 155:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 156:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 157:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 158:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 159:..//common/src/lpc17xx_i2c.c ****  * @param[in]	databyte: number of byte
 160:..//common/src/lpc17xx_i2c.c ****  * @return 		value of I2C status register after sending
 161:..//common/src/lpc17xx_i2c.c ****  *********************************************************************/
 162:..//common/src/lpc17xx_i2c.c **** static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte)
 163:..//common/src/lpc17xx_i2c.c **** {
 311              		.loc 2 163 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 8
 314              		@ frame_needed = 1, uses_anonymous_args = 0
 315              		@ link register save eliminated.
 316 0000 80B4     		push	{r7}
 317              	.LCFI15:
 318              		.cfi_def_cfa_offset 4
 319 0002 83B0     		sub	sp, sp, #12
 320              	.LCFI16:
 321              		.cfi_def_cfa_offset 16
 322 0004 00AF     		add	r7, sp, #0
 323              		.cfi_offset 7, -4
 324              	.LCFI17:
 325              		.cfi_def_cfa_register 7
 326 0006 7860     		str	r0, [r7, #4]
 327 0008 0B46     		mov	r3, r1
 328 000a FB70     		strb	r3, [r7, #3]
 164:..//common/src/lpc17xx_i2c.c **** 	/* Make sure start bit is not active */
 165:..//common/src/lpc17xx_i2c.c **** 	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
 329              		.loc 2 165 0
 330 000c 7B68     		ldr	r3, [r7, #4]
 331 000e 1B68     		ldr	r3, [r3, #0]
 332 0010 03F02003 		and	r3, r3, #32
 333 0014 002B     		cmp	r3, #0
 334 0016 03D0     		beq	.L18
 166:..//common/src/lpc17xx_i2c.c **** 	{
 167:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 335              		.loc 2 167 0
 336 0018 7B68     		ldr	r3, [r7, #4]
 337 001a 4FF02002 		mov	r2, #32
 338 001e 9A61     		str	r2, [r3, #24]
 339              	.L18:
 168:..//common/src/lpc17xx_i2c.c **** 	}
 169:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2DAT = databyte & I2C_I2DAT_BITMASK;
 340              		.loc 2 169 0
 341 0020 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 342 0022 7B68     		ldr	r3, [r7, #4]
 343 0024 9A60     		str	r2, [r3, #8]
 170:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 344              		.loc 2 170 0
 345 0026 7B68     		ldr	r3, [r7, #4]
 346 0028 4FF00802 		mov	r2, #8
 347 002c 9A61     		str	r2, [r3, #24]
 348              	.L19:
 171:..//common/src/lpc17xx_i2c.c **** 
 172:..//common/src/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 349              		.loc 2 172 0
 350 002e 7B68     		ldr	r3, [r7, #4]
 351 0030 1B68     		ldr	r3, [r3, #0]
 352 0032 03F00803 		and	r3, r3, #8
 353 0036 002B     		cmp	r3, #0
 354 0038 F9D0     		beq	.L19
 173:..//common/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 355              		.loc 2 173 0
 356 003a 7B68     		ldr	r3, [r7, #4]
 357 003c 5B68     		ldr	r3, [r3, #4]
 358 003e 03F0F803 		and	r3, r3, #248
 174:..//common/src/lpc17xx_i2c.c **** }
 359              		.loc 2 174 0
 360 0042 1846     		mov	r0, r3
 361 0044 07F10C07 		add	r7, r7, #12
 362 0048 BD46     		mov	sp, r7
 363 004a 80BC     		pop	{r7}
 364 004c 7047     		bx	lr
 365              		.cfi_endproc
 366              	.LFE32:
 368 004e 00BF     		.section	.text.I2C_GetByte,"ax",%progbits
 369              		.align	2
 370              		.thumb
 371              		.thumb_func
 373              	I2C_GetByte:
 374              	.LFB33:
 175:..//common/src/lpc17xx_i2c.c **** 
 176:..//common/src/lpc17xx_i2c.c **** /********************************************************************//**
 177:..//common/src/lpc17xx_i2c.c ****  * @brief		Get a byte
 178:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 179:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 180:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 181:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 182:..//common/src/lpc17xx_i2c.c ****  * @param[out]	retdat	pointer to return data
 183:..//common/src/lpc17xx_i2c.c ****  * @param[in]	ack		assert acknowledge or not, should be: TRUE/FALSE
 184:..//common/src/lpc17xx_i2c.c ****  * @return 		value of I2C status register after sending
 185:..//common/src/lpc17xx_i2c.c ****  *********************************************************************/
 186:..//common/src/lpc17xx_i2c.c **** static uint32_t I2C_GetByte (LPC_I2C_TypeDef *I2Cx, uint8_t *retdat, Bool ack)
 187:..//common/src/lpc17xx_i2c.c **** {
 375              		.loc 2 187 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 16
 378              		@ frame_needed = 1, uses_anonymous_args = 0
 379              		@ link register save eliminated.
 380 0000 80B4     		push	{r7}
 381              	.LCFI18:
 382              		.cfi_def_cfa_offset 4
 383 0002 85B0     		sub	sp, sp, #20
 384              	.LCFI19:
 385              		.cfi_def_cfa_offset 24
 386 0004 00AF     		add	r7, sp, #0
 387              		.cfi_offset 7, -4
 388              	.LCFI20:
 389              		.cfi_def_cfa_register 7
 390 0006 F860     		str	r0, [r7, #12]
 391 0008 B960     		str	r1, [r7, #8]
 392 000a 1346     		mov	r3, r2
 393 000c FB71     		strb	r3, [r7, #7]
 188:..//common/src/lpc17xx_i2c.c **** 	if (ack == TRUE)
 394              		.loc 2 188 0
 395 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 396 0010 012B     		cmp	r3, #1
 397 0012 04D1     		bne	.L22
 189:..//common/src/lpc17xx_i2c.c **** 	{
 190:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 398              		.loc 2 190 0
 399 0014 FB68     		ldr	r3, [r7, #12]
 400 0016 4FF00402 		mov	r2, #4
 401 001a 1A60     		str	r2, [r3, #0]
 402 001c 03E0     		b	.L23
 403              	.L22:
 191:..//common/src/lpc17xx_i2c.c **** 	}
 192:..//common/src/lpc17xx_i2c.c **** 	else
 193:..//common/src/lpc17xx_i2c.c **** 	{
 194:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
 404              		.loc 2 194 0
 405 001e FB68     		ldr	r3, [r7, #12]
 406 0020 4FF00402 		mov	r2, #4
 407 0024 9A61     		str	r2, [r3, #24]
 408              	.L23:
 195:..//common/src/lpc17xx_i2c.c **** 	}
 196:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 409              		.loc 2 196 0
 410 0026 FB68     		ldr	r3, [r7, #12]
 411 0028 4FF00802 		mov	r2, #8
 412 002c 9A61     		str	r2, [r3, #24]
 413              	.L24:
 197:..//common/src/lpc17xx_i2c.c **** 
 198:..//common/src/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 414              		.loc 2 198 0
 415 002e FB68     		ldr	r3, [r7, #12]
 416 0030 1B68     		ldr	r3, [r3, #0]
 417 0032 03F00803 		and	r3, r3, #8
 418 0036 002B     		cmp	r3, #0
 419 0038 F9D0     		beq	.L24
 199:..//common/src/lpc17xx_i2c.c **** 	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 420              		.loc 2 199 0
 421 003a FB68     		ldr	r3, [r7, #12]
 422 003c 9B68     		ldr	r3, [r3, #8]
 423 003e DAB2     		uxtb	r2, r3
 424 0040 BB68     		ldr	r3, [r7, #8]
 425 0042 1A70     		strb	r2, [r3, #0]
 200:..//common/src/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 426              		.loc 2 200 0
 427 0044 FB68     		ldr	r3, [r7, #12]
 428 0046 5B68     		ldr	r3, [r3, #4]
 429 0048 03F0F803 		and	r3, r3, #248
 201:..//common/src/lpc17xx_i2c.c **** }
 430              		.loc 2 201 0
 431 004c 1846     		mov	r0, r3
 432 004e 07F11407 		add	r7, r7, #20
 433 0052 BD46     		mov	sp, r7
 434 0054 80BC     		pop	{r7}
 435 0056 7047     		bx	lr
 436              		.cfi_endproc
 437              	.LFE33:
 439              		.section	.text.I2C_SetClock,"ax",%progbits
 440              		.align	2
 441              		.thumb
 442              		.thumb_func
 444              	I2C_SetClock:
 445              	.LFB34:
 202:..//common/src/lpc17xx_i2c.c **** 
 203:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
 204:..//common/src/lpc17xx_i2c.c ****  * @brief 		Setup clock rate for I2C peripheral
 205:..//common/src/lpc17xx_i2c.c ****  * @param[in] 	I2Cx	I2C peripheral selected, should be:
 206:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 207:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 208:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 209:..//common/src/lpc17xx_i2c.c ****  * @param[in]	target_clock : clock of SSP (Hz)
 210:..//common/src/lpc17xx_i2c.c ****  * @return 		None
 211:..//common/src/lpc17xx_i2c.c ****  ***********************************************************************/
 212:..//common/src/lpc17xx_i2c.c **** static void I2C_SetClock (LPC_I2C_TypeDef *I2Cx, uint32_t target_clock)
 213:..//common/src/lpc17xx_i2c.c **** {
 446              		.loc 2 213 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 16
 449              		@ frame_needed = 1, uses_anonymous_args = 0
 450 0000 80B5     		push	{r7, lr}
 451              	.LCFI21:
 452              		.cfi_def_cfa_offset 8
 453 0002 84B0     		sub	sp, sp, #16
 454              	.LCFI22:
 455              		.cfi_def_cfa_offset 24
 456 0004 00AF     		add	r7, sp, #0
 457              		.cfi_offset 14, -4
 458              		.cfi_offset 7, -8
 459              	.LCFI23:
 460              		.cfi_def_cfa_register 7
 461 0006 7860     		str	r0, [r7, #4]
 462 0008 3960     		str	r1, [r7, #0]
 214:..//common/src/lpc17xx_i2c.c **** 	uint32_t temp;
 215:..//common/src/lpc17xx_i2c.c **** 
 216:..//common/src/lpc17xx_i2c.c **** 	// CHECK_PARAM(PARAM_I2Cx(I2Cx));
 217:..//common/src/lpc17xx_i2c.c **** 
 218:..//common/src/lpc17xx_i2c.c **** 	// Get PCLK of I2C controller
 219:..//common/src/lpc17xx_i2c.c **** 	if (I2Cx == LPC_I2C0)
 463              		.loc 2 219 0
 464 000a 7A68     		ldr	r2, [r7, #4]
 465 000c 4CF20003 		movw	r3, #:lower16:1073856512
 466 0010 C4F20103 		movt	r3, #:upper16:1073856512
 467 0014 9A42     		cmp	r2, r3
 468 0016 0CD1     		bne	.L27
 220:..//common/src/lpc17xx_i2c.c **** 	{
 221:..//common/src/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
 469              		.loc 2 221 0
 470 0018 4FF00E00 		mov	r0, #14
 471 001c 40F20003 		movw	r3, #:lower16:CLKPWR_GetPCLK
 472 0020 C0F20003 		movt	r3, #:upper16:CLKPWR_GetPCLK
 473 0024 9847     		blx	r3
 474 0026 0246     		mov	r2, r0
 475 0028 3B68     		ldr	r3, [r7, #0]
 476 002a B2FBF3F3 		udiv	r3, r2, r3
 477 002e FB60     		str	r3, [r7, #12]
 478 0030 26E0     		b	.L28
 479              	.L27:
 222:..//common/src/lpc17xx_i2c.c **** 	}
 223:..//common/src/lpc17xx_i2c.c **** 	else if (I2Cx == LPC_I2C1)
 480              		.loc 2 223 0
 481 0032 7A68     		ldr	r2, [r7, #4]
 482 0034 4CF20003 		movw	r3, #:lower16:1074118656
 483 0038 C4F20503 		movt	r3, #:upper16:1074118656
 484 003c 9A42     		cmp	r2, r3
 485 003e 0CD1     		bne	.L29
 224:..//common/src/lpc17xx_i2c.c **** 	{
 225:..//common/src/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
 486              		.loc 2 225 0
 487 0040 4FF02600 		mov	r0, #38
 488 0044 40F20003 		movw	r3, #:lower16:CLKPWR_GetPCLK
 489 0048 C0F20003 		movt	r3, #:upper16:CLKPWR_GetPCLK
 490 004c 9847     		blx	r3
 491 004e 0246     		mov	r2, r0
 492 0050 3B68     		ldr	r3, [r7, #0]
 493 0052 B2FBF3F3 		udiv	r3, r2, r3
 494 0056 FB60     		str	r3, [r7, #12]
 495 0058 12E0     		b	.L28
 496              	.L29:
 226:..//common/src/lpc17xx_i2c.c **** 	}
 227:..//common/src/lpc17xx_i2c.c **** 	else if (I2Cx == LPC_I2C2)
 497              		.loc 2 227 0
 498 005a 7A68     		ldr	r2, [r7, #4]
 499 005c 40F20003 		movw	r3, #:lower16:1074397184
 500 0060 C4F20A03 		movt	r3, #:upper16:1074397184
 501 0064 9A42     		cmp	r2, r3
 502 0066 0BD1     		bne	.L28
 228:..//common/src/lpc17xx_i2c.c **** 	{
 229:..//common/src/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
 503              		.loc 2 229 0
 504 0068 4FF02600 		mov	r0, #38
 505 006c 40F20003 		movw	r3, #:lower16:CLKPWR_GetPCLK
 506 0070 C0F20003 		movt	r3, #:upper16:CLKPWR_GetPCLK
 507 0074 9847     		blx	r3
 508 0076 0246     		mov	r2, r0
 509 0078 3B68     		ldr	r3, [r7, #0]
 510 007a B2FBF3F3 		udiv	r3, r2, r3
 511 007e FB60     		str	r3, [r7, #12]
 512              	.L28:
 230:..//common/src/lpc17xx_i2c.c **** 	}
 231:..//common/src/lpc17xx_i2c.c **** 
 232:..//common/src/lpc17xx_i2c.c **** 	/* Set the I2C clock value to register */
 233:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2SCLH = (uint32_t)(temp / 2);
 513              		.loc 2 233 0
 514 0080 FB68     		ldr	r3, [r7, #12]
 515 0082 4FEA5302 		lsr	r2, r3, #1
 516 0086 7B68     		ldr	r3, [r7, #4]
 517 0088 1A61     		str	r2, [r3, #16]
 234:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
 518              		.loc 2 234 0
 519 008a 7B68     		ldr	r3, [r7, #4]
 520 008c 1B69     		ldr	r3, [r3, #16]
 521 008e FA68     		ldr	r2, [r7, #12]
 522 0090 C3EB0202 		rsb	r2, r3, r2
 523 0094 7B68     		ldr	r3, [r7, #4]
 524 0096 5A61     		str	r2, [r3, #20]
 235:..//common/src/lpc17xx_i2c.c **** }
 525              		.loc 2 235 0
 526 0098 07F11007 		add	r7, r7, #16
 527 009c BD46     		mov	sp, r7
 528 009e 80BD     		pop	{r7, pc}
 529              		.cfi_endproc
 530              	.LFE34:
 532              		.section	.text.I2C_Init,"ax",%progbits
 533              		.align	2
 534              		.global	I2C_Init
 535              		.thumb
 536              		.thumb_func
 538              	I2C_Init:
 539              	.LFB35:
 236:..//common/src/lpc17xx_i2c.c **** /* End of Private Functions --------------------------------------------------- */
 237:..//common/src/lpc17xx_i2c.c **** 
 238:..//common/src/lpc17xx_i2c.c **** 
 239:..//common/src/lpc17xx_i2c.c **** /* Public Functions ----------------------------------------------------------- */
 240:..//common/src/lpc17xx_i2c.c **** /** @addtogroup I2C_Public_Functions
 241:..//common/src/lpc17xx_i2c.c ****  * @{
 242:..//common/src/lpc17xx_i2c.c ****  */
 243:..//common/src/lpc17xx_i2c.c **** 
 244:..//common/src/lpc17xx_i2c.c **** /********************************************************************//**
 245:..//common/src/lpc17xx_i2c.c ****  * @brief		Initializes the I2Cx peripheral with specified parameter.
 246:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
 247:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 248:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 249:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 250:..//common/src/lpc17xx_i2c.c ****  * @param[in]	clockrate Target clock rate value to initialized I2C
 251:..//common/src/lpc17xx_i2c.c ****  * 				peripheral (Hz)
 252:..//common/src/lpc17xx_i2c.c ****  * @return 		None
 253:..//common/src/lpc17xx_i2c.c ****  *********************************************************************/
 254:..//common/src/lpc17xx_i2c.c **** void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
 255:..//common/src/lpc17xx_i2c.c **** {
 540              		.loc 2 255 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 8
 543              		@ frame_needed = 1, uses_anonymous_args = 0
 544 0000 80B5     		push	{r7, lr}
 545              	.LCFI24:
 546              		.cfi_def_cfa_offset 8
 547 0002 82B0     		sub	sp, sp, #8
 548              	.LCFI25:
 549              		.cfi_def_cfa_offset 16
 550 0004 00AF     		add	r7, sp, #0
 551              		.cfi_offset 14, -4
 552              		.cfi_offset 7, -8
 553              	.LCFI26:
 554              		.cfi_def_cfa_register 7
 555 0006 7860     		str	r0, [r7, #4]
 556 0008 3960     		str	r1, [r7, #0]
 256:..//common/src/lpc17xx_i2c.c **** 	// CHECK_PARAM(PARAM_I2Cx(I2Cx));
 257:..//common/src/lpc17xx_i2c.c **** 
 258:..//common/src/lpc17xx_i2c.c **** 	if (I2Cx==LPC_I2C0)
 557              		.loc 2 258 0
 558 000a 7A68     		ldr	r2, [r7, #4]
 559 000c 4CF20003 		movw	r3, #:lower16:1073856512
 560 0010 C4F20103 		movt	r3, #:upper16:1073856512
 561 0014 9A42     		cmp	r2, r3
 562 0016 12D1     		bne	.L32
 259:..//common/src/lpc17xx_i2c.c **** 	{
 260:..//common/src/lpc17xx_i2c.c **** 		/* Set up clock and power for I2C0 module */
 261:..//common/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
 563              		.loc 2 261 0
 564 0018 4FF08000 		mov	r0, #128
 565 001c 4FF00101 		mov	r1, #1
 566 0020 40F20003 		movw	r3, #:lower16:CLKPWR_ConfigPPWR
 567 0024 C0F20003 		movt	r3, #:upper16:CLKPWR_ConfigPPWR
 568 0028 9847     		blx	r3
 262:..//common/src/lpc17xx_i2c.c **** 		/* As default, peripheral clock for I2C0 module
 263:..//common/src/lpc17xx_i2c.c **** 		 * is set to FCCLK / 2 */
 264:..//common/src/lpc17xx_i2c.c **** 		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
 569              		.loc 2 264 0
 570 002a 4FF00E00 		mov	r0, #14
 571 002e 4FF00201 		mov	r1, #2
 572 0032 40F20003 		movw	r3, #:lower16:CLKPWR_SetPCLKDiv
 573 0036 C0F20003 		movt	r3, #:upper16:CLKPWR_SetPCLKDiv
 574 003a 9847     		blx	r3
 575 003c 32E0     		b	.L33
 576              	.L32:
 265:..//common/src/lpc17xx_i2c.c **** 	}
 266:..//common/src/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C1)
 577              		.loc 2 266 0
 578 003e 7A68     		ldr	r2, [r7, #4]
 579 0040 4CF20003 		movw	r3, #:lower16:1074118656
 580 0044 C4F20503 		movt	r3, #:upper16:1074118656
 581 0048 9A42     		cmp	r2, r3
 582 004a 12D1     		bne	.L34
 267:..//common/src/lpc17xx_i2c.c **** 	{
 268:..//common/src/lpc17xx_i2c.c **** 		/* Set up clock and power for I2C1 module */
 269:..//common/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
 583              		.loc 2 269 0
 584 004c 4FF40020 		mov	r0, #524288
 585 0050 4FF00101 		mov	r1, #1
 586 0054 40F20003 		movw	r3, #:lower16:CLKPWR_ConfigPPWR
 587 0058 C0F20003 		movt	r3, #:upper16:CLKPWR_ConfigPPWR
 588 005c 9847     		blx	r3
 270:..//common/src/lpc17xx_i2c.c **** 		/* As default, peripheral clock for I2C1 module
 271:..//common/src/lpc17xx_i2c.c **** 		 * is set to FCCLK / 2 */
 272:..//common/src/lpc17xx_i2c.c **** 		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
 589              		.loc 2 272 0
 590 005e 4FF02600 		mov	r0, #38
 591 0062 4FF00201 		mov	r1, #2
 592 0066 40F20003 		movw	r3, #:lower16:CLKPWR_SetPCLKDiv
 593 006a C0F20003 		movt	r3, #:upper16:CLKPWR_SetPCLKDiv
 594 006e 9847     		blx	r3
 595 0070 18E0     		b	.L33
 596              	.L34:
 273:..//common/src/lpc17xx_i2c.c **** 	}
 274:..//common/src/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C2)
 597              		.loc 2 274 0
 598 0072 7A68     		ldr	r2, [r7, #4]
 599 0074 40F20003 		movw	r3, #:lower16:1074397184
 600 0078 C4F20A03 		movt	r3, #:upper16:1074397184
 601 007c 9A42     		cmp	r2, r3
 602 007e 1DD1     		bne	.L38
 275:..//common/src/lpc17xx_i2c.c **** 	{
 276:..//common/src/lpc17xx_i2c.c **** 		/* Set up clock and power for I2C2 module */
 277:..//common/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, ENABLE);
 603              		.loc 2 277 0
 604 0080 4FF08060 		mov	r0, #67108864
 605 0084 4FF00101 		mov	r1, #1
 606 0088 40F20003 		movw	r3, #:lower16:CLKPWR_ConfigPPWR
 607 008c C0F20003 		movt	r3, #:upper16:CLKPWR_ConfigPPWR
 608 0090 9847     		blx	r3
 278:..//common/src/lpc17xx_i2c.c **** 		/* As default, peripheral clock for I2C2 module
 279:..//common/src/lpc17xx_i2c.c **** 		 * is set to FCCLK / 2 */
 280:..//common/src/lpc17xx_i2c.c **** 		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C2, CLKPWR_PCLKSEL_CCLK_DIV_2);
 609              		.loc 2 280 0
 610 0092 4FF03400 		mov	r0, #52
 611 0096 4FF00201 		mov	r1, #2
 612 009a 40F20003 		movw	r3, #:lower16:CLKPWR_SetPCLKDiv
 613 009e C0F20003 		movt	r3, #:upper16:CLKPWR_SetPCLKDiv
 614 00a2 9847     		blx	r3
 615              	.L33:
 281:..//common/src/lpc17xx_i2c.c **** 	}
 282:..//common/src/lpc17xx_i2c.c **** 	else {
 283:..//common/src/lpc17xx_i2c.c **** 		// Up-Support this device
 284:..//common/src/lpc17xx_i2c.c **** 		return;
 285:..//common/src/lpc17xx_i2c.c **** 	}
 286:..//common/src/lpc17xx_i2c.c **** 
 287:..//common/src/lpc17xx_i2c.c ****     /* Set clock rate */
 288:..//common/src/lpc17xx_i2c.c ****     I2C_SetClock(I2Cx, clockrate);
 616              		.loc 2 288 0
 617 00a4 7868     		ldr	r0, [r7, #4]
 618 00a6 3968     		ldr	r1, [r7, #0]
 619 00a8 40F20003 		movw	r3, #:lower16:I2C_SetClock
 620 00ac C0F20003 		movt	r3, #:upper16:I2C_SetClock
 621 00b0 9847     		blx	r3
 289:..//common/src/lpc17xx_i2c.c ****     /* Set I2C operation to default */
 290:..//common/src/lpc17xx_i2c.c ****     I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
 622              		.loc 2 290 0
 623 00b2 7B68     		ldr	r3, [r7, #4]
 624 00b4 4FF06402 		mov	r2, #100
 625 00b8 9A61     		str	r2, [r3, #24]
 626 00ba 00E0     		b	.L37
 627              	.L38:
 628              		.loc 2 284 0
 629 00bc 00BF     		nop
 630              	.L37:
 291:..//common/src/lpc17xx_i2c.c **** }
 631              		.loc 2 291 0
 632 00be 07F10807 		add	r7, r7, #8
 633 00c2 BD46     		mov	sp, r7
 634 00c4 80BD     		pop	{r7, pc}
 635              		.cfi_endproc
 636              	.LFE35:
 638 00c6 00BF     		.section	.text.I2C_DeInit,"ax",%progbits
 639              		.align	2
 640              		.global	I2C_DeInit
 641              		.thumb
 642              		.thumb_func
 644              	I2C_DeInit:
 645              	.LFB36:
 292:..//common/src/lpc17xx_i2c.c **** 
 293:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
 294:..//common/src/lpc17xx_i2c.c ****  * @brief		De-initializes the I2C peripheral registers to their
 295:..//common/src/lpc17xx_i2c.c ****  *                  default reset values.
 296:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
 297:..//common/src/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 298:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 299:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 300:..//common/src/lpc17xx_i2c.c ****  * @return 		None
 301:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
 302:..//common/src/lpc17xx_i2c.c **** void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
 303:..//common/src/lpc17xx_i2c.c **** {
 646              		.loc 2 303 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 8
 649              		@ frame_needed = 1, uses_anonymous_args = 0
 650 0000 80B5     		push	{r7, lr}
 651              	.LCFI27:
 652              		.cfi_def_cfa_offset 8
 653 0002 82B0     		sub	sp, sp, #8
 654              	.LCFI28:
 655              		.cfi_def_cfa_offset 16
 656 0004 00AF     		add	r7, sp, #0
 657              		.cfi_offset 14, -4
 658              		.cfi_offset 7, -8
 659              	.LCFI29:
 660              		.cfi_def_cfa_register 7
 661 0006 7860     		str	r0, [r7, #4]
 304:..//common/src/lpc17xx_i2c.c **** 	// CHECK_PARAM(PARAM_I2Cx(I2Cx));
 305:..//common/src/lpc17xx_i2c.c **** 
 306:..//common/src/lpc17xx_i2c.c **** 	/* Disable I2C control */
 307:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
 662              		.loc 2 307 0
 663 0008 7B68     		ldr	r3, [r7, #4]
 664 000a 4FF04002 		mov	r2, #64
 665 000e 9A61     		str	r2, [r3, #24]
 308:..//common/src/lpc17xx_i2c.c **** 
 309:..//common/src/lpc17xx_i2c.c **** 	if (I2Cx==LPC_I2C0)
 666              		.loc 2 309 0
 667 0010 7A68     		ldr	r2, [r7, #4]
 668 0012 4CF20003 		movw	r3, #:lower16:1073856512
 669 0016 C4F20103 		movt	r3, #:upper16:1073856512
 670 001a 9A42     		cmp	r2, r3
 671 001c 09D1     		bne	.L40
 310:..//common/src/lpc17xx_i2c.c **** 	{
 311:..//common/src/lpc17xx_i2c.c **** 		/* Disable power for I2C0 module */
 312:..//common/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
 672              		.loc 2 312 0
 673 001e 4FF08000 		mov	r0, #128
 674 0022 4FF00001 		mov	r1, #0
 675 0026 40F20003 		movw	r3, #:lower16:CLKPWR_ConfigPPWR
 676 002a C0F20003 		movt	r3, #:upper16:CLKPWR_ConfigPPWR
 677 002e 9847     		blx	r3
 678 0030 20E0     		b	.L43
 679              	.L40:
 313:..//common/src/lpc17xx_i2c.c **** 	}
 314:..//common/src/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C1)
 680              		.loc 2 314 0
 681 0032 7A68     		ldr	r2, [r7, #4]
 682 0034 4CF20003 		movw	r3, #:lower16:1074118656
 683 0038 C4F20503 		movt	r3, #:upper16:1074118656
 684 003c 9A42     		cmp	r2, r3
 685 003e 09D1     		bne	.L42
 315:..//common/src/lpc17xx_i2c.c **** 	{
 316:..//common/src/lpc17xx_i2c.c **** 		/* Disable power for I2C1 module */
 317:..//common/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
 686              		.loc 2 317 0
 687 0040 4FF40020 		mov	r0, #524288
 688 0044 4FF00001 		mov	r1, #0
 689 0048 40F20003 		movw	r3, #:lower16:CLKPWR_ConfigPPWR
 690 004c C0F20003 		movt	r3, #:upper16:CLKPWR_ConfigPPWR
 691 0050 9847     		blx	r3
 692 0052 0FE0     		b	.L43
 693              	.L42:
 318:..//common/src/lpc17xx_i2c.c **** 	}
 319:..//common/src/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C2)
 694              		.loc 2 319 0
 695 0054 7A68     		ldr	r2, [r7, #4]
 696 0056 40F20003 		movw	r3, #:lower16:1074397184
 697 005a C4F20A03 		movt	r3, #:upper16:1074397184
 698 005e 9A42     		cmp	r2, r3
 699 0060 08D1     		bne	.L43
 320:..//common/src/lpc17xx_i2c.c **** 	{
 321:..//common/src/lpc17xx_i2c.c **** 		/* Disable power for I2C2 module */
 322:..//common/src/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
 700              		.loc 2 322 0
 701 0062 4FF08060 		mov	r0, #67108864
 702 0066 4FF00001 		mov	r1, #0
 703 006a 40F20003 		movw	r3, #:lower16:CLKPWR_ConfigPPWR
 704 006e C0F20003 		movt	r3, #:upper16:CLKPWR_ConfigPPWR
 705 0072 9847     		blx	r3
 706              	.L43:
 323:..//common/src/lpc17xx_i2c.c **** 	}
 324:..//common/src/lpc17xx_i2c.c **** }
 707              		.loc 2 324 0
 708 0074 07F10807 		add	r7, r7, #8
 709 0078 BD46     		mov	sp, r7
 710 007a 80BD     		pop	{r7, pc}
 711              		.cfi_endproc
 712              	.LFE36:
 714              		.section	.text.I2C_Cmd,"ax",%progbits
 715              		.align	2
 716              		.global	I2C_Cmd
 717              		.thumb
 718              		.thumb_func
 720              	I2C_Cmd:
 721              	.LFB37:
 325:..//common/src/lpc17xx_i2c.c **** 
 326:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
 327:..//common/src/lpc17xx_i2c.c ****  * @brief		Enable or disable I2C peripheral's operation
 328:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx I2C peripheral selected, should be
 329:..//common/src/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 330:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 331:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 332:..//common/src/lpc17xx_i2c.c ****  * @param[in]	NewState New State of I2Cx peripheral's operation
 333:..//common/src/lpc17xx_i2c.c ****  * @return 		none
 334:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
 335:..//common/src/lpc17xx_i2c.c **** void I2C_Cmd(LPC_I2C_TypeDef* I2Cx, FunctionalState NewState)
 336:..//common/src/lpc17xx_i2c.c **** {
 722              		.loc 2 336 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 8
 725              		@ frame_needed = 1, uses_anonymous_args = 0
 726              		@ link register save eliminated.
 727 0000 80B4     		push	{r7}
 728              	.LCFI30:
 729              		.cfi_def_cfa_offset 4
 730 0002 83B0     		sub	sp, sp, #12
 731              	.LCFI31:
 732              		.cfi_def_cfa_offset 16
 733 0004 00AF     		add	r7, sp, #0
 734              		.cfi_offset 7, -4
 735              	.LCFI32:
 736              		.cfi_def_cfa_register 7
 737 0006 7860     		str	r0, [r7, #4]
 738 0008 0B46     		mov	r3, r1
 739 000a FB70     		strb	r3, [r7, #3]
 337:..//common/src/lpc17xx_i2c.c **** 	// CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
 338:..//common/src/lpc17xx_i2c.c **** 	// CHECK_PARAM(PARAM_I2Cx(I2Cx));
 339:..//common/src/lpc17xx_i2c.c **** 
 340:..//common/src/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
 740              		.loc 2 340 0
 741 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 742 000e 012B     		cmp	r3, #1
 743 0010 04D1     		bne	.L45
 341:..//common/src/lpc17xx_i2c.c **** 	{
 342:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
 744              		.loc 2 342 0
 745 0012 7B68     		ldr	r3, [r7, #4]
 746 0014 4FF04002 		mov	r2, #64
 747 0018 1A60     		str	r2, [r3, #0]
 748 001a 03E0     		b	.L47
 749              	.L45:
 343:..//common/src/lpc17xx_i2c.c **** 	}
 344:..//common/src/lpc17xx_i2c.c **** 	else
 345:..//common/src/lpc17xx_i2c.c **** 	{
 346:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
 750              		.loc 2 346 0
 751 001c 7B68     		ldr	r3, [r7, #4]
 752 001e 4FF04002 		mov	r2, #64
 753 0022 9A61     		str	r2, [r3, #24]
 754              	.L47:
 347:..//common/src/lpc17xx_i2c.c **** 	}
 348:..//common/src/lpc17xx_i2c.c **** }
 755              		.loc 2 348 0
 756 0024 07F10C07 		add	r7, r7, #12
 757 0028 BD46     		mov	sp, r7
 758 002a 80BC     		pop	{r7}
 759 002c 7047     		bx	lr
 760              		.cfi_endproc
 761              	.LFE37:
 763 002e 00BF     		.section	.text.I2C_IntCmd,"ax",%progbits
 764              		.align	2
 765              		.global	I2C_IntCmd
 766              		.thumb
 767              		.thumb_func
 769              	I2C_IntCmd:
 770              	.LFB38:
 349:..//common/src/lpc17xx_i2c.c **** 
 350:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
 351:..//common/src/lpc17xx_i2c.c ****  * @brief 		Enable/Disable interrupt for I2C peripheral
 352:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
 353:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 354:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 355:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 356:..//common/src/lpc17xx_i2c.c ****  * @param[in]	NewState	New State of I2C peripheral interrupt in NVIC core
 357:..//common/src/lpc17xx_i2c.c ****  * 				should be:
 358:..//common/src/lpc17xx_i2c.c ****  * 				- ENABLE: enable interrupt for this I2C peripheral
 359:..//common/src/lpc17xx_i2c.c ****  * 				- DISABLE: disable interrupt for this I2C peripheral
 360:..//common/src/lpc17xx_i2c.c ****  * @return 		None
 361:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
 362:..//common/src/lpc17xx_i2c.c **** void I2C_IntCmd (LPC_I2C_TypeDef *I2Cx, Bool NewState)
 363:..//common/src/lpc17xx_i2c.c **** {
 771              		.loc 2 363 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 8
 774              		@ frame_needed = 1, uses_anonymous_args = 0
 775 0000 80B5     		push	{r7, lr}
 776              	.LCFI33:
 777              		.cfi_def_cfa_offset 8
 778 0002 82B0     		sub	sp, sp, #8
 779              	.LCFI34:
 780              		.cfi_def_cfa_offset 16
 781 0004 00AF     		add	r7, sp, #0
 782              		.cfi_offset 14, -4
 783              		.cfi_offset 7, -8
 784              	.LCFI35:
 785              		.cfi_def_cfa_register 7
 786 0006 7860     		str	r0, [r7, #4]
 787 0008 0B46     		mov	r3, r1
 788 000a FB70     		strb	r3, [r7, #3]
 364:..//common/src/lpc17xx_i2c.c **** 	if (NewState)
 789              		.loc 2 364 0
 790 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 791 000e 002B     		cmp	r3, #0
 792 0010 2CD0     		beq	.L49
 365:..//common/src/lpc17xx_i2c.c **** 	{
 366:..//common/src/lpc17xx_i2c.c **** 		if(I2Cx == LPC_I2C0)
 793              		.loc 2 366 0
 794 0012 7A68     		ldr	r2, [r7, #4]
 795 0014 4CF20003 		movw	r3, #:lower16:1073856512
 796 0018 C4F20103 		movt	r3, #:upper16:1073856512
 797 001c 9A42     		cmp	r2, r3
 798 001e 07D1     		bne	.L50
 367:..//common/src/lpc17xx_i2c.c **** 		{
 368:..//common/src/lpc17xx_i2c.c **** 			NVIC_EnableIRQ(I2C0_IRQn);
 799              		.loc 2 368 0
 800 0020 4FF00A00 		mov	r0, #10
 801 0024 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 802 0028 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 803 002c 9847     		blx	r3
 369:..//common/src/lpc17xx_i2c.c **** 		}
 370:..//common/src/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C1)
 371:..//common/src/lpc17xx_i2c.c **** 		{
 372:..//common/src/lpc17xx_i2c.c **** 			NVIC_EnableIRQ(I2C1_IRQn);
 373:..//common/src/lpc17xx_i2c.c **** 		}
 374:..//common/src/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C2)
 375:..//common/src/lpc17xx_i2c.c **** 		{
 376:..//common/src/lpc17xx_i2c.c **** 			NVIC_EnableIRQ(I2C2_IRQn);
 804              		.loc 2 376 0
 805 002e 4BE0     		b	.L56
 806              	.L50:
 807              		.loc 2 370 0
 808 0030 7A68     		ldr	r2, [r7, #4]
 809 0032 4CF20003 		movw	r3, #:lower16:1074118656
 810 0036 C4F20503 		movt	r3, #:upper16:1074118656
 811 003a 9A42     		cmp	r2, r3
 812 003c 07D1     		bne	.L52
 813              		.loc 2 372 0
 814 003e 4FF00B00 		mov	r0, #11
 815 0042 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 816 0046 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 817 004a 9847     		blx	r3
 818              		.loc 2 376 0
 819 004c 3CE0     		b	.L56
 820              	.L52:
 821              		.loc 2 374 0
 822 004e 7A68     		ldr	r2, [r7, #4]
 823 0050 40F20003 		movw	r3, #:lower16:1074397184
 824 0054 C4F20A03 		movt	r3, #:upper16:1074397184
 825 0058 9A42     		cmp	r2, r3
 826 005a 34D1     		bne	.L57
 827              		.loc 2 376 0
 828 005c 4FF00C00 		mov	r0, #12
 829 0060 40F20003 		movw	r3, #:lower16:NVIC_EnableIRQ
 830 0064 C0F20003 		movt	r3, #:upper16:NVIC_EnableIRQ
 831 0068 9847     		blx	r3
 832 006a 2DE0     		b	.L56
 833              	.L49:
 377:..//common/src/lpc17xx_i2c.c **** 		}
 378:..//common/src/lpc17xx_i2c.c **** 	}
 379:..//common/src/lpc17xx_i2c.c **** 	else
 380:..//common/src/lpc17xx_i2c.c **** 	{
 381:..//common/src/lpc17xx_i2c.c **** 		if(I2Cx == LPC_I2C0)
 834              		.loc 2 381 0
 835 006c 7A68     		ldr	r2, [r7, #4]
 836 006e 4CF20003 		movw	r3, #:lower16:1073856512
 837 0072 C4F20103 		movt	r3, #:upper16:1073856512
 838 0076 9A42     		cmp	r2, r3
 839 0078 07D1     		bne	.L54
 382:..//common/src/lpc17xx_i2c.c **** 		{
 383:..//common/src/lpc17xx_i2c.c **** 			NVIC_DisableIRQ(I2C0_IRQn);
 840              		.loc 2 383 0
 841 007a 4FF00A00 		mov	r0, #10
 842 007e 40F20003 		movw	r3, #:lower16:NVIC_DisableIRQ
 843 0082 C0F20003 		movt	r3, #:upper16:NVIC_DisableIRQ
 844 0086 9847     		blx	r3
 845 0088 1EE0     		b	.L56
 846              	.L54:
 384:..//common/src/lpc17xx_i2c.c **** 		}
 385:..//common/src/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C1)
 847              		.loc 2 385 0
 848 008a 7A68     		ldr	r2, [r7, #4]
 849 008c 4CF20003 		movw	r3, #:lower16:1074118656
 850 0090 C4F20503 		movt	r3, #:upper16:1074118656
 851 0094 9A42     		cmp	r2, r3
 852 0096 07D1     		bne	.L55
 386:..//common/src/lpc17xx_i2c.c **** 		{
 387:..//common/src/lpc17xx_i2c.c **** 			NVIC_DisableIRQ(I2C1_IRQn);
 853              		.loc 2 387 0
 854 0098 4FF00B00 		mov	r0, #11
 855 009c 40F20003 		movw	r3, #:lower16:NVIC_DisableIRQ
 856 00a0 C0F20003 		movt	r3, #:upper16:NVIC_DisableIRQ
 857 00a4 9847     		blx	r3
 858 00a6 0FE0     		b	.L56
 859              	.L55:
 388:..//common/src/lpc17xx_i2c.c **** 		}
 389:..//common/src/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C2)
 860              		.loc 2 389 0
 861 00a8 7A68     		ldr	r2, [r7, #4]
 862 00aa 40F20003 		movw	r3, #:lower16:1074397184
 863 00ae C4F20A03 		movt	r3, #:upper16:1074397184
 864 00b2 9A42     		cmp	r2, r3
 865 00b4 08D1     		bne	.L56
 390:..//common/src/lpc17xx_i2c.c **** 		{
 391:..//common/src/lpc17xx_i2c.c **** 			NVIC_DisableIRQ(I2C2_IRQn);
 866              		.loc 2 391 0
 867 00b6 4FF00C00 		mov	r0, #12
 868 00ba 40F20003 		movw	r3, #:lower16:NVIC_DisableIRQ
 869 00be C0F20003 		movt	r3, #:upper16:NVIC_DisableIRQ
 870 00c2 9847     		blx	r3
 871 00c4 00E0     		b	.L56
 872              	.L57:
 873              		.loc 2 376 0
 874 00c6 00BF     		nop
 875              	.L56:
 392:..//common/src/lpc17xx_i2c.c **** 		}
 393:..//common/src/lpc17xx_i2c.c **** 	}
 394:..//common/src/lpc17xx_i2c.c ****     return;
 395:..//common/src/lpc17xx_i2c.c **** }
 876              		.loc 2 395 0
 877 00c8 07F10807 		add	r7, r7, #8
 878 00cc BD46     		mov	sp, r7
 879 00ce 80BD     		pop	{r7, pc}
 880              		.cfi_endproc
 881              	.LFE38:
 883              		.section	.text.I2C_MasterHandler,"ax",%progbits
 884              		.align	2
 885              		.global	I2C_MasterHandler
 886              		.thumb
 887              		.thumb_func
 889              	I2C_MasterHandler:
 890              	.LFB39:
 396:..//common/src/lpc17xx_i2c.c **** 
 397:..//common/src/lpc17xx_i2c.c **** 
 398:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
 399:..//common/src/lpc17xx_i2c.c ****  * @brief 		General Master Interrupt handler for I2C peripheral
 400:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
 401:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C
 402:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 403:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 404:..//common/src/lpc17xx_i2c.c ****  * @return 		None
 405:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
 406:..//common/src/lpc17xx_i2c.c **** void I2C_MasterHandler (LPC_I2C_TypeDef  *I2Cx)
 407:..//common/src/lpc17xx_i2c.c **** {
 891              		.loc 2 407 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 24
 894              		@ frame_needed = 1, uses_anonymous_args = 0
 895 0000 80B5     		push	{r7, lr}
 896              	.LCFI36:
 897              		.cfi_def_cfa_offset 8
 898 0002 86B0     		sub	sp, sp, #24
 899              	.LCFI37:
 900              		.cfi_def_cfa_offset 32
 901 0004 00AF     		add	r7, sp, #0
 902              		.cfi_offset 14, -4
 903              		.cfi_offset 7, -8
 904              	.LCFI38:
 905              		.cfi_def_cfa_register 7
 906 0006 7860     		str	r0, [r7, #4]
 408:..//common/src/lpc17xx_i2c.c **** 	int32_t tmp;
 409:..//common/src/lpc17xx_i2c.c **** 	uint8_t returnCode;
 410:..//common/src/lpc17xx_i2c.c **** 	I2C_M_SETUP_Type *txrx_setup;
 411:..//common/src/lpc17xx_i2c.c **** 
 412:..//common/src/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 907              		.loc 2 412 0
 908 0008 7868     		ldr	r0, [r7, #4]
 909 000a 40F20003 		movw	r3, #:lower16:I2C_getNum
 910 000e C0F20003 		movt	r3, #:upper16:I2C_getNum
 911 0012 9847     		blx	r3
 912 0014 0346     		mov	r3, r0
 913 0016 FB60     		str	r3, [r7, #12]
 413:..//common/src/lpc17xx_i2c.c **** 	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
 914              		.loc 2 413 0
 915 0018 FA68     		ldr	r2, [r7, #12]
 916 001a 40F20003 		movw	r3, #:lower16:i2cdat
 917 001e C0F20003 		movt	r3, #:upper16:i2cdat
 918 0022 53F83230 		ldr	r3, [r3, r2, lsl #3]
 919 0026 7B61     		str	r3, [r7, #20]
 414:..//common/src/lpc17xx_i2c.c **** 
 415:..//common/src/lpc17xx_i2c.c **** 	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 920              		.loc 2 415 0
 921 0028 7B68     		ldr	r3, [r7, #4]
 922 002a 5B68     		ldr	r3, [r3, #4]
 923 002c DBB2     		uxtb	r3, r3
 924 002e 23F00703 		bic	r3, r3, #7
 925 0032 FB74     		strb	r3, [r7, #19]
 416:..//common/src/lpc17xx_i2c.c **** 	// Save current status
 417:..//common/src/lpc17xx_i2c.c **** 	txrx_setup->status = returnCode;
 926              		.loc 2 417 0
 927 0034 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 928 0036 7B69     		ldr	r3, [r7, #20]
 929 0038 5A62     		str	r2, [r3, #36]
 418:..//common/src/lpc17xx_i2c.c **** 	// there's no relevant information
 419:..//common/src/lpc17xx_i2c.c **** 	if (returnCode == I2C_I2STAT_NO_INF){
 930              		.loc 2 419 0
 931 003a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 932 003c F82B     		cmp	r3, #248
 933 003e 04D1     		bne	.L59
 420:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 934              		.loc 2 420 0
 935 0040 7B68     		ldr	r3, [r7, #4]
 936 0042 4FF00802 		mov	r2, #8
 937 0046 9A61     		str	r2, [r3, #24]
 421:..//common/src/lpc17xx_i2c.c **** 		return;
 938              		.loc 2 421 0
 939 0048 CBE1     		b	.L89
 940              	.L59:
 422:..//common/src/lpc17xx_i2c.c **** 	}
 423:..//common/src/lpc17xx_i2c.c **** 
 424:..//common/src/lpc17xx_i2c.c **** 	/* ----------------------------- TRANSMIT PHASE --------------------------*/
 425:..//common/src/lpc17xx_i2c.c **** 	if (i2cdat[tmp].dir == 0){
 941              		.loc 2 425 0
 942 004a FB68     		ldr	r3, [r7, #12]
 943 004c 40F20002 		movw	r2, #:lower16:i2cdat
 944 0050 C0F20002 		movt	r2, #:upper16:i2cdat
 945 0054 4FEAC303 		lsl	r3, r3, #3
 946 0058 1344     		add	r3, r3, r2
 947 005a 5B68     		ldr	r3, [r3, #4]
 948 005c 002B     		cmp	r3, #0
 949 005e 40F0DB80 		bne	.L61
 426:..//common/src/lpc17xx_i2c.c **** 		switch (returnCode)
 950              		.loc 2 426 0
 951 0062 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 952 0064 A3F10803 		sub	r3, r3, #8
 953 0068 302B     		cmp	r3, #48
 954 006a 00F28981 		bhi	.L90
 955 006e 01A2     		adr	r2, .L67
 956 0070 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 957              		.align	2
 958              	.L67:
 959 0074 39010000 		.word	.L63+1
 960 0078 81030000 		.word	.L90+1
 961 007c 81030000 		.word	.L90+1
 962 0080 81030000 		.word	.L90+1
 963 0084 81030000 		.word	.L90+1
 964 0088 81030000 		.word	.L90+1
 965 008c 81030000 		.word	.L90+1
 966 0090 81030000 		.word	.L90+1
 967 0094 39010000 		.word	.L63+1
 968 0098 81030000 		.word	.L90+1
 969 009c 81030000 		.word	.L90+1
 970 00a0 81030000 		.word	.L90+1
 971 00a4 81030000 		.word	.L90+1
 972 00a8 81030000 		.word	.L90+1
 973 00ac 81030000 		.word	.L90+1
 974 00b0 81030000 		.word	.L90+1
 975 00b4 67010000 		.word	.L64+1
 976 00b8 81030000 		.word	.L90+1
 977 00bc 81030000 		.word	.L90+1
 978 00c0 81030000 		.word	.L90+1
 979 00c4 81030000 		.word	.L90+1
 980 00c8 81030000 		.word	.L90+1
 981 00cc 81030000 		.word	.L90+1
 982 00d0 81030000 		.word	.L90+1
 983 00d4 FD010000 		.word	.L65+1
 984 00d8 81030000 		.word	.L90+1
 985 00dc 81030000 		.word	.L90+1
 986 00e0 81030000 		.word	.L90+1
 987 00e4 81030000 		.word	.L90+1
 988 00e8 81030000 		.word	.L90+1
 989 00ec 81030000 		.word	.L90+1
 990 00f0 81030000 		.word	.L90+1
 991 00f4 67010000 		.word	.L64+1
 992 00f8 81030000 		.word	.L90+1
 993 00fc 81030000 		.word	.L90+1
 994 0100 81030000 		.word	.L90+1
 995 0104 81030000 		.word	.L90+1
 996 0108 81030000 		.word	.L90+1
 997 010c 81030000 		.word	.L90+1
 998 0110 81030000 		.word	.L90+1
 999 0114 FD010000 		.word	.L65+1
 1000 0118 81030000 		.word	.L90+1
 1001 011c 81030000 		.word	.L90+1
 1002 0120 81030000 		.word	.L90+1
 1003 0124 81030000 		.word	.L90+1
 1004 0128 81030000 		.word	.L90+1
 1005 012c 81030000 		.word	.L90+1
 1006 0130 81030000 		.word	.L90+1
 1007 0134 0B020000 		.word	.L66+1
 1008              	.L63:
 427:..//common/src/lpc17xx_i2c.c **** 		{
 428:..//common/src/lpc17xx_i2c.c **** 		/* A start/repeat start condition has been transmitted -------------------*/
 429:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_START:
 430:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_RESTART:
 431:..//common/src/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 1009              		.loc 2 431 0
 1010 0138 7B68     		ldr	r3, [r7, #4]
 1011 013a 4FF02002 		mov	r2, #32
 1012 013e 9A61     		str	r2, [r3, #24]
 432:..//common/src/lpc17xx_i2c.c **** 			/*
 433:..//common/src/lpc17xx_i2c.c **** 			 * If there's any transmit data, then start to
 434:..//common/src/lpc17xx_i2c.c **** 			 * send SLA+W right now, otherwise check whether if there's
 435:..//common/src/lpc17xx_i2c.c **** 			 * any receive data for next state.
 436:..//common/src/lpc17xx_i2c.c **** 			 */
 437:..//common/src/lpc17xx_i2c.c **** 			if ((txrx_setup->tx_data != NULL) && (txrx_setup->tx_length != 0)){
 1013              		.loc 2 437 0
 1014 0140 7B69     		ldr	r3, [r7, #20]
 1015 0142 5B68     		ldr	r3, [r3, #4]
 1016 0144 002B     		cmp	r3, #0
 1017 0146 2CD0     		beq	.L68
 1018 0148 7B69     		ldr	r3, [r7, #20]
 1019 014a 9B68     		ldr	r3, [r3, #8]
 1020 014c 002B     		cmp	r3, #0
 1021 014e 28D0     		beq	.L68
 438:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1);
 1022              		.loc 2 438 0
 1023 0150 7B69     		ldr	r3, [r7, #20]
 1024 0152 1B68     		ldr	r3, [r3, #0]
 1025 0154 4FEA4302 		lsl	r2, r3, #1
 1026 0158 7B68     		ldr	r3, [r7, #4]
 1027 015a 9A60     		str	r2, [r3, #8]
 439:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1028              		.loc 2 439 0
 1029 015c 7B68     		ldr	r3, [r7, #4]
 1030 015e 4FF00802 		mov	r2, #8
 1031 0162 9A61     		str	r2, [r3, #24]
 440:..//common/src/lpc17xx_i2c.c **** 			} else {
 441:..//common/src/lpc17xx_i2c.c **** 				goto next_stage;
 442:..//common/src/lpc17xx_i2c.c **** 			}
 443:..//common/src/lpc17xx_i2c.c **** 			break;
 1032              		.loc 2 443 0
 1033 0164 3DE1     		b	.L89
 1034              	.L64:
 444:..//common/src/lpc17xx_i2c.c **** 
 445:..//common/src/lpc17xx_i2c.c **** 		/* SLA+W has been transmitted, ACK has been received ----------------------*/
 446:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_SLAW_ACK:
 447:..//common/src/lpc17xx_i2c.c **** 		/* Data has been transmitted, ACK has been received */
 448:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_DAT_ACK:
 449:..//common/src/lpc17xx_i2c.c **** 			/* Send more data */
 450:..//common/src/lpc17xx_i2c.c **** 			if ((txrx_setup->tx_count < txrx_setup->tx_length) \
 1035              		.loc 2 450 0
 1036 0166 7B69     		ldr	r3, [r7, #20]
 1037 0168 DA68     		ldr	r2, [r3, #12]
 1038 016a 7B69     		ldr	r3, [r7, #20]
 1039 016c 9B68     		ldr	r3, [r3, #8]
 1040 016e 9A42     		cmp	r2, r3
 1041 0170 17D2     		bcs	.L68
 451:..//common/src/lpc17xx_i2c.c **** 					&& (txrx_setup->tx_data != NULL)){
 1042              		.loc 2 451 0
 1043 0172 7B69     		ldr	r3, [r7, #20]
 1044 0174 5B68     		ldr	r3, [r3, #4]
 1045              		.loc 2 450 0
 1046 0176 002B     		cmp	r3, #0
 1047 0178 13D0     		beq	.L68
 452:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
 1048              		.loc 2 452 0
 1049 017a 7B69     		ldr	r3, [r7, #20]
 1050 017c 5A68     		ldr	r2, [r3, #4]
 1051 017e 7B69     		ldr	r3, [r7, #20]
 1052 0180 DB68     		ldr	r3, [r3, #12]
 1053 0182 1344     		add	r3, r2, r3
 1054 0184 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1055 0186 1A46     		mov	r2, r3
 1056 0188 7B68     		ldr	r3, [r7, #4]
 1057 018a 9A60     		str	r2, [r3, #8]
 453:..//common/src/lpc17xx_i2c.c **** 				txrx_setup->tx_count++;
 1058              		.loc 2 453 0
 1059 018c 7B69     		ldr	r3, [r7, #20]
 1060 018e DB68     		ldr	r3, [r3, #12]
 1061 0190 03F10102 		add	r2, r3, #1
 1062 0194 7B69     		ldr	r3, [r7, #20]
 1063 0196 DA60     		str	r2, [r3, #12]
 454:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1064              		.loc 2 454 0
 1065 0198 7B68     		ldr	r3, [r7, #4]
 1066 019a 4FF00802 		mov	r2, #8
 1067 019e 9A61     		str	r2, [r3, #24]
 1068              		.loc 2 450 0
 1069 01a0 2AE0     		b	.L70
 1070              	.L68:
 455:..//common/src/lpc17xx_i2c.c **** 			}
 456:..//common/src/lpc17xx_i2c.c **** 			// no more data, switch to next stage
 457:..//common/src/lpc17xx_i2c.c **** 			else {
 458:..//common/src/lpc17xx_i2c.c **** next_stage:
 459:..//common/src/lpc17xx_i2c.c **** 				// change direction
 460:..//common/src/lpc17xx_i2c.c **** 				i2cdat[tmp].dir = 1;
 1071              		.loc 2 460 0
 1072 01a2 FB68     		ldr	r3, [r7, #12]
 1073 01a4 40F20002 		movw	r2, #:lower16:i2cdat
 1074 01a8 C0F20002 		movt	r2, #:upper16:i2cdat
 1075 01ac 4FEAC303 		lsl	r3, r3, #3
 1076 01b0 1344     		add	r3, r3, r2
 1077 01b2 4FF00102 		mov	r2, #1
 1078 01b6 5A60     		str	r2, [r3, #4]
 461:..//common/src/lpc17xx_i2c.c **** 				// Check if any data to receive
 462:..//common/src/lpc17xx_i2c.c **** 				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL)){
 1079              		.loc 2 462 0
 1080 01b8 7B69     		ldr	r3, [r7, #20]
 1081 01ba 5B69     		ldr	r3, [r3, #20]
 1082 01bc 002B     		cmp	r3, #0
 1083 01be 14D0     		beq	.L71
 1084 01c0 7B69     		ldr	r3, [r7, #20]
 1085 01c2 1B69     		ldr	r3, [r3, #16]
 1086 01c4 002B     		cmp	r3, #0
 1087 01c6 10D0     		beq	.L71
 463:..//common/src/lpc17xx_i2c.c **** 						// check whether if we need to issue an repeat start
 464:..//common/src/lpc17xx_i2c.c **** 						if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL)){
 1088              		.loc 2 464 0
 1089 01c8 7B69     		ldr	r3, [r7, #20]
 1090 01ca 9B68     		ldr	r3, [r3, #8]
 1091 01cc 002B     		cmp	r3, #0
 1092 01ce 50D0     		beq	.L72
 1093 01d0 7B69     		ldr	r3, [r7, #20]
 1094 01d2 5B68     		ldr	r3, [r3, #4]
 1095 01d4 002B     		cmp	r3, #0
 1096 01d6 4CD0     		beq	.L72
 465:..//common/src/lpc17xx_i2c.c **** 							// Send out an repeat start command
 466:..//common/src/lpc17xx_i2c.c **** 							I2Cx->I2CONSET = I2C_I2CONSET_STA;
 1097              		.loc 2 466 0
 1098 01d8 7B68     		ldr	r3, [r7, #4]
 1099 01da 4FF02002 		mov	r2, #32
 1100 01de 1A60     		str	r2, [r3, #0]
 467:..//common/src/lpc17xx_i2c.c **** 							I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
 1101              		.loc 2 467 0
 1102 01e0 7B68     		ldr	r3, [r7, #4]
 1103 01e2 4FF00C02 		mov	r2, #12
 1104 01e6 9A61     		str	r2, [r3, #24]
 1105              		.loc 2 462 0
 1106 01e8 06E0     		b	.L70
 1107              	.L71:
 468:..//common/src/lpc17xx_i2c.c **** 						}
 469:..//common/src/lpc17xx_i2c.c **** 						// Don't need issue an repeat start, just goto send SLA+R
 470:..//common/src/lpc17xx_i2c.c **** 						else {
 471:..//common/src/lpc17xx_i2c.c **** 							goto send_slar;
 472:..//common/src/lpc17xx_i2c.c **** 						}
 473:..//common/src/lpc17xx_i2c.c **** 				}
 474:..//common/src/lpc17xx_i2c.c **** 				// no more data send, the go to end stage now
 475:..//common/src/lpc17xx_i2c.c **** 				else {
 476:..//common/src/lpc17xx_i2c.c **** 					// success, goto end stage
 477:..//common/src/lpc17xx_i2c.c **** 					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 1108              		.loc 2 477 0
 1109 01ea 7B69     		ldr	r3, [r7, #20]
 1110 01ec 5B6A     		ldr	r3, [r3, #36]
 1111 01ee 43F48062 		orr	r2, r3, #1024
 1112 01f2 7B69     		ldr	r3, [r7, #20]
 1113 01f4 5A62     		str	r2, [r3, #36]
 478:..//common/src/lpc17xx_i2c.c **** 					goto end_stage;
 1114              		.loc 2 478 0
 1115 01f6 DDE0     		b	.L73
 1116              	.L70:
 479:..//common/src/lpc17xx_i2c.c **** 				}
 480:..//common/src/lpc17xx_i2c.c **** 			}
 481:..//common/src/lpc17xx_i2c.c **** 			break;
 1117              		.loc 2 481 0
 1118 01f8 00BF     		nop
 1119 01fa F2E0     		b	.L89
 1120              	.L65:
 482:..//common/src/lpc17xx_i2c.c **** 
 483:..//common/src/lpc17xx_i2c.c **** 		/* SLA+W has been transmitted, NACK has been received ----------------------*/
 484:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_SLAW_NACK:
 485:..//common/src/lpc17xx_i2c.c **** 		/* Data has been transmitted, NACK has been received -----------------------*/
 486:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_DAT_NACK:
 487:..//common/src/lpc17xx_i2c.c **** 			// update status
 488:..//common/src/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
 1121              		.loc 2 488 0
 1122 01fc 7B69     		ldr	r3, [r7, #20]
 1123 01fe 5B6A     		ldr	r3, [r3, #36]
 1124 0200 43F40072 		orr	r2, r3, #512
 1125 0204 7B69     		ldr	r3, [r7, #20]
 1126 0206 5A62     		str	r2, [r3, #36]
 489:..//common/src/lpc17xx_i2c.c **** 			goto retry;
 1127              		.loc 2 489 0
 1128 0208 BBE0     		b	.L74
 1129              	.L66:
 490:..//common/src/lpc17xx_i2c.c **** 		/* Arbitration lost in SLA+R/W or Data bytes -------------------------------*/
 491:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_ARB_LOST:
 492:..//common/src/lpc17xx_i2c.c **** 			// update status
 493:..//common/src/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
 1130              		.loc 2 493 0
 1131 020a 7B69     		ldr	r3, [r7, #20]
 1132 020c 5B6A     		ldr	r3, [r3, #36]
 1133 020e 43F48072 		orr	r2, r3, #256
 1134 0212 7B69     		ldr	r3, [r7, #20]
 1135 0214 5A62     		str	r2, [r3, #36]
 494:..//common/src/lpc17xx_i2c.c **** 		default:
 495:..//common/src/lpc17xx_i2c.c **** 			goto retry;
 1136              		.loc 2 495 0
 1137 0216 B4E0     		b	.L74
 1138              	.L61:
 496:..//common/src/lpc17xx_i2c.c **** 		}
 497:..//common/src/lpc17xx_i2c.c **** 	}
 498:..//common/src/lpc17xx_i2c.c **** 
 499:..//common/src/lpc17xx_i2c.c **** 	/* ----------------------------- RECEIVE PHASE --------------------------*/
 500:..//common/src/lpc17xx_i2c.c **** 	else if (i2cdat[tmp].dir == 1){
 1139              		.loc 2 500 0
 1140 0218 FB68     		ldr	r3, [r7, #12]
 1141 021a 40F20002 		movw	r2, #:lower16:i2cdat
 1142 021e C0F20002 		movt	r2, #:upper16:i2cdat
 1143 0222 4FEAC303 		lsl	r3, r3, #3
 1144 0226 1344     		add	r3, r3, r2
 1145 0228 5B68     		ldr	r3, [r3, #4]
 1146 022a 012B     		cmp	r3, #1
 1147 022c 40F0D980 		bne	.L89
 501:..//common/src/lpc17xx_i2c.c **** 		switch (returnCode){
 1148              		.loc 2 501 0
 1149 0230 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1150 0232 402B     		cmp	r3, #64
 1151 0234 31D0     		beq	.L77
 1152 0236 402B     		cmp	r3, #64
 1153 0238 07DC     		bgt	.L81
 1154 023a 102B     		cmp	r3, #16
 1155 023c 0DD0     		beq	.L75
 1156 023e 382B     		cmp	r3, #56
 1157 0240 00F09780 		beq	.L76
 1158 0244 082B     		cmp	r3, #8
 1159 0246 08D0     		beq	.L75
 1160 0248 9BE0     		b	.L74
 1161              	.L81:
 1162 024a 502B     		cmp	r3, #80
 1163 024c 3BD0     		beq	.L79
 1164 024e 582B     		cmp	r3, #88
 1165 0250 68D0     		beq	.L80
 1166 0252 482B     		cmp	r3, #72
 1167 0254 00F08680 		beq	.L78
 1168 0258 93E0     		b	.L74
 1169              	.L75:
 502:..//common/src/lpc17xx_i2c.c **** 			/* A start/repeat start condition has been transmitted ---------------------*/
 503:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_START:
 504:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_RESTART:
 505:..//common/src/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 1170              		.loc 2 505 0
 1171 025a 7B68     		ldr	r3, [r7, #4]
 1172 025c 4FF02002 		mov	r2, #32
 1173 0260 9A61     		str	r2, [r3, #24]
 506:..//common/src/lpc17xx_i2c.c **** 			/*
 507:..//common/src/lpc17xx_i2c.c **** 			 * If there's any receive data, then start to
 508:..//common/src/lpc17xx_i2c.c **** 			 * send SLA+R right now, otherwise check whether if there's
 509:..//common/src/lpc17xx_i2c.c **** 			 * any receive data for end of state.
 510:..//common/src/lpc17xx_i2c.c **** 			 */
 511:..//common/src/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0)){
 1174              		.loc 2 511 0
 1175 0262 7B69     		ldr	r3, [r7, #20]
 1176 0264 1B69     		ldr	r3, [r3, #16]
 1177 0266 002B     		cmp	r3, #0
 1178 0268 10D0     		beq	.L82
 1179 026a 7B69     		ldr	r3, [r7, #20]
 1180 026c 5B69     		ldr	r3, [r3, #20]
 1181 026e 002B     		cmp	r3, #0
 1182 0270 0CD0     		beq	.L82
 1183              	.L72:
 512:..//common/src/lpc17xx_i2c.c **** send_slar:
 513:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1) | 0x01;
 1184              		.loc 2 513 0
 1185 0272 7B69     		ldr	r3, [r7, #20]
 1186 0274 1B68     		ldr	r3, [r3, #0]
 1187 0276 4FEA4303 		lsl	r3, r3, #1
 1188 027a 43F00102 		orr	r2, r3, #1
 1189 027e 7B68     		ldr	r3, [r7, #4]
 1190 0280 9A60     		str	r2, [r3, #8]
 514:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1191              		.loc 2 514 0
 1192 0282 7B68     		ldr	r3, [r7, #4]
 1193 0284 4FF00802 		mov	r2, #8
 1194 0288 9A61     		str	r2, [r3, #24]
 515:..//common/src/lpc17xx_i2c.c **** 			} else {
 516:..//common/src/lpc17xx_i2c.c **** 				// Success, goto end stage
 517:..//common/src/lpc17xx_i2c.c **** 				txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 518:..//common/src/lpc17xx_i2c.c **** 				goto end_stage;
 519:..//common/src/lpc17xx_i2c.c **** 			}
 520:..//common/src/lpc17xx_i2c.c **** 			break;
 1195              		.loc 2 520 0
 1196 028a AAE0     		b	.L89
 1197              	.L82:
 1198              		.loc 2 517 0
 1199 028c 7B69     		ldr	r3, [r7, #20]
 1200 028e 5B6A     		ldr	r3, [r3, #36]
 1201 0290 43F48062 		orr	r2, r3, #1024
 1202 0294 7B69     		ldr	r3, [r7, #20]
 1203 0296 5A62     		str	r2, [r3, #36]
 1204              		.loc 2 518 0
 1205 0298 8CE0     		b	.L73
 1206              	.L77:
 521:..//common/src/lpc17xx_i2c.c **** 
 522:..//common/src/lpc17xx_i2c.c **** 		/* SLA+R has been transmitted, ACK has been received -----------------*/
 523:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_SLAR_ACK:
 524:..//common/src/lpc17xx_i2c.c **** 			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1)) {
 1207              		.loc 2 524 0
 1208 029a 7B69     		ldr	r3, [r7, #20]
 1209 029c 9A69     		ldr	r2, [r3, #24]
 1210 029e 7B69     		ldr	r3, [r7, #20]
 1211 02a0 5B69     		ldr	r3, [r3, #20]
 1212 02a2 03F1FF33 		add	r3, r3, #-1
 1213 02a6 9A42     		cmp	r2, r3
 1214 02a8 04D2     		bcs	.L83
 525:..//common/src/lpc17xx_i2c.c **** 				/*Data will be received,  ACK will be return*/
 526:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1215              		.loc 2 526 0
 1216 02aa 7B68     		ldr	r3, [r7, #4]
 1217 02ac 4FF00402 		mov	r2, #4
 1218 02b0 1A60     		str	r2, [r3, #0]
 1219 02b2 03E0     		b	.L84
 1220              	.L83:
 527:..//common/src/lpc17xx_i2c.c **** 			}
 528:..//common/src/lpc17xx_i2c.c **** 			else {
 529:..//common/src/lpc17xx_i2c.c **** 				/*Last data will be received,  NACK will be return*/
 530:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
 1221              		.loc 2 530 0
 1222 02b4 7B68     		ldr	r3, [r7, #4]
 1223 02b6 4FF00402 		mov	r2, #4
 1224 02ba 9A61     		str	r2, [r3, #24]
 1225              	.L84:
 531:..//common/src/lpc17xx_i2c.c **** 			}
 532:..//common/src/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1226              		.loc 2 532 0
 1227 02bc 7B68     		ldr	r3, [r7, #4]
 1228 02be 4FF00802 		mov	r2, #8
 1229 02c2 9A61     		str	r2, [r3, #24]
 533:..//common/src/lpc17xx_i2c.c **** 			break;
 1230              		.loc 2 533 0
 1231 02c4 8DE0     		b	.L89
 1232              	.L79:
 534:..//common/src/lpc17xx_i2c.c **** 
 535:..//common/src/lpc17xx_i2c.c **** 		/* Data has been received, ACK has been returned ----------------------*/
 536:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_DAT_ACK:
 537:..//common/src/lpc17xx_i2c.c **** 			// Note save data and increase counter first, then check later
 538:..//common/src/lpc17xx_i2c.c **** 			/* Save data  */
 539:..//common/src/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length)){
 1233              		.loc 2 539 0
 1234 02c6 7B69     		ldr	r3, [r7, #20]
 1235 02c8 1B69     		ldr	r3, [r3, #16]
 1236 02ca 002B     		cmp	r3, #0
 1237 02cc 14D0     		beq	.L85
 1238 02ce 7B69     		ldr	r3, [r7, #20]
 1239 02d0 9A69     		ldr	r2, [r3, #24]
 1240 02d2 7B69     		ldr	r3, [r7, #20]
 1241 02d4 5B69     		ldr	r3, [r3, #20]
 1242 02d6 9A42     		cmp	r2, r3
 1243 02d8 0ED2     		bcs	.L85
 540:..//common/src/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 1244              		.loc 2 540 0
 1245 02da 7B69     		ldr	r3, [r7, #20]
 1246 02dc 1A69     		ldr	r2, [r3, #16]
 1247 02de 7B69     		ldr	r3, [r7, #20]
 1248 02e0 9B69     		ldr	r3, [r3, #24]
 1249 02e2 1344     		add	r3, r2, r3
 1250 02e4 7A68     		ldr	r2, [r7, #4]
 1251 02e6 9268     		ldr	r2, [r2, #8]
 1252 02e8 D2B2     		uxtb	r2, r2
 1253 02ea 1A70     		strb	r2, [r3, #0]
 541:..//common/src/lpc17xx_i2c.c **** 				txrx_setup->rx_count++;
 1254              		.loc 2 541 0
 1255 02ec 7B69     		ldr	r3, [r7, #20]
 1256 02ee 9B69     		ldr	r3, [r3, #24]
 1257 02f0 03F10102 		add	r2, r3, #1
 1258 02f4 7B69     		ldr	r3, [r7, #20]
 1259 02f6 9A61     		str	r2, [r3, #24]
 1260              	.L85:
 542:..//common/src/lpc17xx_i2c.c **** 			}
 543:..//common/src/lpc17xx_i2c.c **** 			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1)) {
 1261              		.loc 2 543 0
 1262 02f8 7B69     		ldr	r3, [r7, #20]
 1263 02fa 9A69     		ldr	r2, [r3, #24]
 1264 02fc 7B69     		ldr	r3, [r7, #20]
 1265 02fe 5B69     		ldr	r3, [r3, #20]
 1266 0300 03F1FF33 		add	r3, r3, #-1
 1267 0304 9A42     		cmp	r2, r3
 1268 0306 04D2     		bcs	.L86
 544:..//common/src/lpc17xx_i2c.c **** 				/*Data will be received,  ACK will be return*/
 545:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1269              		.loc 2 545 0
 1270 0308 7B68     		ldr	r3, [r7, #4]
 1271 030a 4FF00402 		mov	r2, #4
 1272 030e 1A60     		str	r2, [r3, #0]
 1273 0310 03E0     		b	.L87
 1274              	.L86:
 546:..//common/src/lpc17xx_i2c.c **** 			}
 547:..//common/src/lpc17xx_i2c.c **** 			else {
 548:..//common/src/lpc17xx_i2c.c **** 				/*Last data will be received,  NACK will be return*/
 549:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
 1275              		.loc 2 549 0
 1276 0312 7B68     		ldr	r3, [r7, #4]
 1277 0314 4FF00402 		mov	r2, #4
 1278 0318 9A61     		str	r2, [r3, #24]
 1279              	.L87:
 550:..//common/src/lpc17xx_i2c.c **** 			}
 551:..//common/src/lpc17xx_i2c.c **** 
 552:..//common/src/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1280              		.loc 2 552 0
 1281 031a 7B68     		ldr	r3, [r7, #4]
 1282 031c 4FF00802 		mov	r2, #8
 1283 0320 9A61     		str	r2, [r3, #24]
 553:..//common/src/lpc17xx_i2c.c **** 			break;
 1284              		.loc 2 553 0
 1285 0322 5EE0     		b	.L89
 1286              	.L80:
 554:..//common/src/lpc17xx_i2c.c **** 
 555:..//common/src/lpc17xx_i2c.c **** 		/* Data has been received, NACK has been return -------------------------*/
 556:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_DAT_NACK:
 557:..//common/src/lpc17xx_i2c.c **** 			/* Save the last data */
 558:..//common/src/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length)){
 1287              		.loc 2 558 0
 1288 0324 7B69     		ldr	r3, [r7, #20]
 1289 0326 1B69     		ldr	r3, [r3, #16]
 1290 0328 002B     		cmp	r3, #0
 1291 032a 14D0     		beq	.L88
 1292 032c 7B69     		ldr	r3, [r7, #20]
 1293 032e 9A69     		ldr	r2, [r3, #24]
 1294 0330 7B69     		ldr	r3, [r7, #20]
 1295 0332 5B69     		ldr	r3, [r3, #20]
 1296 0334 9A42     		cmp	r2, r3
 1297 0336 0ED2     		bcs	.L88
 559:..//common/src/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 1298              		.loc 2 559 0
 1299 0338 7B69     		ldr	r3, [r7, #20]
 1300 033a 1A69     		ldr	r2, [r3, #16]
 1301 033c 7B69     		ldr	r3, [r7, #20]
 1302 033e 9B69     		ldr	r3, [r3, #24]
 1303 0340 1344     		add	r3, r2, r3
 1304 0342 7A68     		ldr	r2, [r7, #4]
 1305 0344 9268     		ldr	r2, [r2, #8]
 1306 0346 D2B2     		uxtb	r2, r2
 1307 0348 1A70     		strb	r2, [r3, #0]
 560:..//common/src/lpc17xx_i2c.c **** 				txrx_setup->rx_count++;
 1308              		.loc 2 560 0
 1309 034a 7B69     		ldr	r3, [r7, #20]
 1310 034c 9B69     		ldr	r3, [r3, #24]
 1311 034e 03F10102 		add	r2, r3, #1
 1312 0352 7B69     		ldr	r3, [r7, #20]
 1313 0354 9A61     		str	r2, [r3, #24]
 1314              	.L88:
 561:..//common/src/lpc17xx_i2c.c **** 			}
 562:..//common/src/lpc17xx_i2c.c **** 			// success, go to end stage
 563:..//common/src/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 1315              		.loc 2 563 0
 1316 0356 7B69     		ldr	r3, [r7, #20]
 1317 0358 5B6A     		ldr	r3, [r3, #36]
 1318 035a 43F48062 		orr	r2, r3, #1024
 1319 035e 7B69     		ldr	r3, [r7, #20]
 1320 0360 5A62     		str	r2, [r3, #36]
 564:..//common/src/lpc17xx_i2c.c **** 			goto end_stage;
 1321              		.loc 2 564 0
 1322 0362 27E0     		b	.L73
 1323              	.L78:
 565:..//common/src/lpc17xx_i2c.c **** 
 566:..//common/src/lpc17xx_i2c.c **** 		/* SLA+R has been transmitted, NACK has been received ------------------*/
 567:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_SLAR_NACK:
 568:..//common/src/lpc17xx_i2c.c **** 			// update status
 569:..//common/src/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
 1324              		.loc 2 569 0
 1325 0364 7B69     		ldr	r3, [r7, #20]
 1326 0366 5B6A     		ldr	r3, [r3, #36]
 1327 0368 43F40072 		orr	r2, r3, #512
 1328 036c 7B69     		ldr	r3, [r7, #20]
 1329 036e 5A62     		str	r2, [r3, #36]
 570:..//common/src/lpc17xx_i2c.c **** 			goto retry;
 1330              		.loc 2 570 0
 1331 0370 07E0     		b	.L74
 1332              	.L76:
 571:..//common/src/lpc17xx_i2c.c **** 
 572:..//common/src/lpc17xx_i2c.c **** 		/* Arbitration lost ----------------------------------------------------*/
 573:..//common/src/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_ARB_LOST:
 574:..//common/src/lpc17xx_i2c.c **** 			// update status
 575:..//common/src/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
 1333              		.loc 2 575 0
 1334 0372 7B69     		ldr	r3, [r7, #20]
 1335 0374 5B6A     		ldr	r3, [r3, #36]
 1336 0376 43F48072 		orr	r2, r3, #256
 1337 037a 7B69     		ldr	r3, [r7, #20]
 1338 037c 5A62     		str	r2, [r3, #36]
 1339 037e 00E0     		b	.L74
 1340              	.L90:
 1341              		.loc 2 495 0
 1342 0380 00BF     		nop
 1343              	.L74:
 576:..//common/src/lpc17xx_i2c.c **** 		default:
 577:..//common/src/lpc17xx_i2c.c **** retry:
 578:..//common/src/lpc17xx_i2c.c **** 			// check if retransmission is available
 579:..//common/src/lpc17xx_i2c.c **** 			if (txrx_setup->retransmissions_count < txrx_setup->retransmissions_max){
 1344              		.loc 2 579 0
 1345 0382 7B69     		ldr	r3, [r7, #20]
 1346 0384 1A6A     		ldr	r2, [r3, #32]
 1347 0386 7B69     		ldr	r3, [r7, #20]
 1348 0388 DB69     		ldr	r3, [r3, #28]
 1349 038a 9A42     		cmp	r2, r3
 1350 038c 12D2     		bcs	.L73
 580:..//common/src/lpc17xx_i2c.c **** 				// Clear tx count
 581:..//common/src/lpc17xx_i2c.c **** 				txrx_setup->tx_count = 0;
 1351              		.loc 2 581 0
 1352 038e 7B69     		ldr	r3, [r7, #20]
 1353 0390 4FF00002 		mov	r2, #0
 1354 0394 DA60     		str	r2, [r3, #12]
 582:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_STA;
 1355              		.loc 2 582 0
 1356 0396 7B68     		ldr	r3, [r7, #4]
 1357 0398 4FF02002 		mov	r2, #32
 1358 039c 1A60     		str	r2, [r3, #0]
 583:..//common/src/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
 1359              		.loc 2 583 0
 1360 039e 7B68     		ldr	r3, [r7, #4]
 1361 03a0 4FF00C02 		mov	r2, #12
 1362 03a4 9A61     		str	r2, [r3, #24]
 584:..//common/src/lpc17xx_i2c.c **** 				txrx_setup->retransmissions_count++;
 1363              		.loc 2 584 0
 1364 03a6 7B69     		ldr	r3, [r7, #20]
 1365 03a8 1B6A     		ldr	r3, [r3, #32]
 1366 03aa 03F10102 		add	r2, r3, #1
 1367 03ae 7B69     		ldr	r3, [r7, #20]
 1368 03b0 1A62     		str	r2, [r3, #32]
 1369 03b2 16E0     		b	.L89
 1370              	.L73:
 585:..//common/src/lpc17xx_i2c.c **** 			}
 586:..//common/src/lpc17xx_i2c.c **** 			// End of stage
 587:..//common/src/lpc17xx_i2c.c **** 			else {
 588:..//common/src/lpc17xx_i2c.c **** end_stage:
 589:..//common/src/lpc17xx_i2c.c **** 				// Disable interrupt
 590:..//common/src/lpc17xx_i2c.c **** 				I2C_IntCmd(I2Cx, 0);
 1371              		.loc 2 590 0
 1372 03b4 7868     		ldr	r0, [r7, #4]
 1373 03b6 4FF00001 		mov	r1, #0
 1374 03ba 40F20003 		movw	r3, #:lower16:I2C_IntCmd
 1375 03be C0F20003 		movt	r3, #:upper16:I2C_IntCmd
 1376 03c2 9847     		blx	r3
 591:..//common/src/lpc17xx_i2c.c **** 				// Send stop
 592:..//common/src/lpc17xx_i2c.c **** 				I2C_Stop(I2Cx);
 1377              		.loc 2 592 0
 1378 03c4 7868     		ldr	r0, [r7, #4]
 1379 03c6 40F20003 		movw	r3, #:lower16:I2C_Stop
 1380 03ca C0F20003 		movt	r3, #:upper16:I2C_Stop
 1381 03ce 9847     		blx	r3
 593:..//common/src/lpc17xx_i2c.c **** 
 594:..//common/src/lpc17xx_i2c.c **** 				I2C_MasterComplete[tmp] = TRUE;
 1382              		.loc 2 594 0
 1383 03d0 FA68     		ldr	r2, [r7, #12]
 1384 03d2 40F20003 		movw	r3, #:lower16:I2C_MasterComplete
 1385 03d6 C0F20003 		movt	r3, #:upper16:I2C_MasterComplete
 1386 03da 4FF00101 		mov	r1, #1
 1387 03de 43F82210 		str	r1, [r3, r2, lsl #2]
 1388              	.L89:
 595:..//common/src/lpc17xx_i2c.c **** 			}
 596:..//common/src/lpc17xx_i2c.c **** 			break;
 597:..//common/src/lpc17xx_i2c.c **** 		}
 598:..//common/src/lpc17xx_i2c.c **** 	}
 599:..//common/src/lpc17xx_i2c.c **** }
 1389              		.loc 2 599 0
 1390 03e2 07F11807 		add	r7, r7, #24
 1391 03e6 BD46     		mov	sp, r7
 1392 03e8 80BD     		pop	{r7, pc}
 1393              		.cfi_endproc
 1394              	.LFE39:
 1396 03ea 00BF     		.section	.text.I2C_SlaveHandler,"ax",%progbits
 1397              		.align	2
 1398              		.global	I2C_SlaveHandler
 1399              		.thumb
 1400              		.thumb_func
 1402              	I2C_SlaveHandler:
 1403              	.LFB40:
 600:..//common/src/lpc17xx_i2c.c **** 
 601:..//common/src/lpc17xx_i2c.c **** 
 602:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
 603:..//common/src/lpc17xx_i2c.c ****  * @brief 		General Slave Interrupt handler for I2C peripheral
 604:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
 605:..//common/src/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 606:..//common/src/lpc17xx_i2c.c ****  *  			- LPC_I2C1
 607:..//common/src/lpc17xx_i2c.c ****  *  			- LPC_I2C2
 608:..//common/src/lpc17xx_i2c.c ****  * @return 		None
 609:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
 610:..//common/src/lpc17xx_i2c.c **** void I2C_SlaveHandler (LPC_I2C_TypeDef  *I2Cx)
 611:..//common/src/lpc17xx_i2c.c **** {
 1404              		.loc 2 611 0
 1405              		.cfi_startproc
 1406              		@ args = 0, pretend = 0, frame = 24
 1407              		@ frame_needed = 1, uses_anonymous_args = 0
 1408 0000 80B5     		push	{r7, lr}
 1409              	.LCFI39:
 1410              		.cfi_def_cfa_offset 8
 1411 0002 86B0     		sub	sp, sp, #24
 1412              	.LCFI40:
 1413              		.cfi_def_cfa_offset 32
 1414 0004 00AF     		add	r7, sp, #0
 1415              		.cfi_offset 14, -4
 1416              		.cfi_offset 7, -8
 1417              	.LCFI41:
 1418              		.cfi_def_cfa_register 7
 1419 0006 7860     		str	r0, [r7, #4]
 612:..//common/src/lpc17xx_i2c.c **** 	int32_t tmp;
 613:..//common/src/lpc17xx_i2c.c **** 	uint8_t returnCode;
 614:..//common/src/lpc17xx_i2c.c **** 	I2C_S_SETUP_Type *txrx_setup;
 615:..//common/src/lpc17xx_i2c.c **** 	uint32_t timeout;
 616:..//common/src/lpc17xx_i2c.c **** 
 617:..//common/src/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 1420              		.loc 2 617 0
 1421 0008 7868     		ldr	r0, [r7, #4]
 1422 000a 40F20003 		movw	r3, #:lower16:I2C_getNum
 1423 000e C0F20003 		movt	r3, #:upper16:I2C_getNum
 1424 0012 9847     		blx	r3
 1425 0014 0346     		mov	r3, r0
 1426 0016 BB60     		str	r3, [r7, #8]
 618:..//common/src/lpc17xx_i2c.c **** 	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
 1427              		.loc 2 618 0
 1428 0018 BA68     		ldr	r2, [r7, #8]
 1429 001a 40F20003 		movw	r3, #:lower16:i2cdat
 1430 001e C0F20003 		movt	r3, #:upper16:i2cdat
 1431 0022 53F83230 		ldr	r3, [r3, r2, lsl #3]
 1432 0026 3B61     		str	r3, [r7, #16]
 619:..//common/src/lpc17xx_i2c.c **** 
 620:..//common/src/lpc17xx_i2c.c **** 	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1433              		.loc 2 620 0
 1434 0028 7B68     		ldr	r3, [r7, #4]
 1435 002a 5B68     		ldr	r3, [r3, #4]
 1436 002c DBB2     		uxtb	r3, r3
 1437 002e 23F00703 		bic	r3, r3, #7
 1438 0032 FB73     		strb	r3, [r7, #15]
 621:..//common/src/lpc17xx_i2c.c **** 	// Save current status
 622:..//common/src/lpc17xx_i2c.c **** 	txrx_setup->status = returnCode;
 1439              		.loc 2 622 0
 1440 0034 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1441 0036 3B69     		ldr	r3, [r7, #16]
 1442 0038 9A61     		str	r2, [r3, #24]
 623:..//common/src/lpc17xx_i2c.c **** 	// there's no relevant information
 624:..//common/src/lpc17xx_i2c.c **** 	if (returnCode == I2C_I2STAT_NO_INF){
 1443              		.loc 2 624 0
 1444 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1445 003c F82B     		cmp	r3, #248
 1446 003e 04D1     		bne	.L92
 625:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1447              		.loc 2 625 0
 1448 0040 7B68     		ldr	r3, [r7, #4]
 1449 0042 4FF00802 		mov	r2, #8
 1450 0046 9A61     		str	r2, [r3, #24]
 626:..//common/src/lpc17xx_i2c.c **** 		return;
 1451              		.loc 2 626 0
 1452 0048 CDE0     		b	.L110
 1453              	.L92:
 627:..//common/src/lpc17xx_i2c.c **** 	}
 628:..//common/src/lpc17xx_i2c.c **** 
 629:..//common/src/lpc17xx_i2c.c **** 
 630:..//common/src/lpc17xx_i2c.c **** 	switch (returnCode)
 1454              		.loc 2 630 0
 1455 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1456 004c 982B     		cmp	r3, #152
 1457 004e 52D0     		beq	.L97
 1458 0050 982B     		cmp	r3, #152
 1459 0052 0DDC     		bgt	.L102
 1460 0054 802B     		cmp	r3, #128
 1461 0056 2CD0     		beq	.L96
 1462 0058 802B     		cmp	r3, #128
 1463 005a 04DC     		bgt	.L103
 1464 005c 602B     		cmp	r3, #96
 1465 005e 1FD0     		beq	.L95
 1466 0060 702B     		cmp	r3, #112
 1467 0062 1DD0     		beq	.L95
 1468 0064 AAE0     		b	.L94
 1469              	.L103:
 1470 0066 882B     		cmp	r3, #136
 1471 0068 45D0     		beq	.L97
 1472 006a 902B     		cmp	r3, #144
 1473 006c 21D0     		beq	.L96
 1474 006e A5E0     		b	.L94
 1475              	.L102:
 1476 0070 B82B     		cmp	r3, #184
 1477 0072 73D0     		beq	.L99
 1478 0074 B82B     		cmp	r3, #184
 1479 0076 04DC     		bgt	.L104
 1480 0078 A02B     		cmp	r3, #160
 1481 007a 41D0     		beq	.L98
 1482 007c A82B     		cmp	r3, #168
 1483 007e 6DD0     		beq	.L99
 1484 0080 9CE0     		b	.L94
 1485              	.L104:
 1486 0082 C02B     		cmp	r3, #192
 1487 0084 00F08C80 		beq	.L100
 1488 0088 F82B     		cmp	r3, #248
 1489 008a 40F09780 		bne	.L94
 1490              	.L101:
 631:..//common/src/lpc17xx_i2c.c **** 	{
 632:..//common/src/lpc17xx_i2c.c **** 
 633:..//common/src/lpc17xx_i2c.c **** 	/* No status information */
 634:..//common/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_NO_INF:
 635:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1491              		.loc 2 635 0
 1492 008e 7B68     		ldr	r3, [r7, #4]
 1493 0090 4FF00402 		mov	r2, #4
 1494 0094 1A60     		str	r2, [r3, #0]
 636:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1495              		.loc 2 636 0
 1496 0096 7B68     		ldr	r3, [r7, #4]
 1497 0098 4FF00802 		mov	r2, #8
 1498 009c 9A61     		str	r2, [r3, #24]
 637:..//common/src/lpc17xx_i2c.c **** 		break;
 1499              		.loc 2 637 0
 1500 009e A2E0     		b	.L110
 1501              	.L95:
 638:..//common/src/lpc17xx_i2c.c **** 
 639:..//common/src/lpc17xx_i2c.c **** 	/* Reading phase -------------------------------------------------------- */
 640:..//common/src/lpc17xx_i2c.c **** 	/* Own SLA+R has been received, ACK has been returned */
 641:..//common/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_SLAW_ACK:
 642:..//common/src/lpc17xx_i2c.c **** 	/* General call address has been received, ACK has been returned */
 643:..//common/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_GENCALL_ACK:
 644:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1502              		.loc 2 644 0
 1503 00a0 7B68     		ldr	r3, [r7, #4]
 1504 00a2 4FF00402 		mov	r2, #4
 1505 00a6 1A60     		str	r2, [r3, #0]
 645:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1506              		.loc 2 645 0
 1507 00a8 7B68     		ldr	r3, [r7, #4]
 1508 00aa 4FF00802 		mov	r2, #8
 1509 00ae 9A61     		str	r2, [r3, #24]
 646:..//common/src/lpc17xx_i2c.c **** 		break;
 1510              		.loc 2 646 0
 1511 00b0 99E0     		b	.L110
 1512              	.L96:
 647:..//common/src/lpc17xx_i2c.c **** 
 648:..//common/src/lpc17xx_i2c.c **** 	/* Previously addressed with own SLA;
 649:..//common/src/lpc17xx_i2c.c **** 	 * DATA byte has been received;
 650:..//common/src/lpc17xx_i2c.c **** 	 * ACK has been returned */
 651:..//common/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_SLA_DAT_ACK:
 652:..//common/src/lpc17xx_i2c.c **** 	/* DATA has been received, ACK hasn been return */
 653:..//common/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
 654:..//common/src/lpc17xx_i2c.c **** 		/*
 655:..//common/src/lpc17xx_i2c.c **** 		 * All data bytes that over-flow the specified receive
 656:..//common/src/lpc17xx_i2c.c **** 		 * data length, just ignore them.
 657:..//common/src/lpc17xx_i2c.c **** 		 */
 658:..//common/src/lpc17xx_i2c.c **** 		if ((txrx_setup->rx_count < txrx_setup->rx_length) \
 1513              		.loc 2 658 0
 1514 00b2 3B69     		ldr	r3, [r7, #16]
 1515 00b4 5A69     		ldr	r2, [r3, #20]
 1516 00b6 3B69     		ldr	r3, [r7, #16]
 1517 00b8 1B69     		ldr	r3, [r3, #16]
 1518 00ba 9A42     		cmp	r2, r3
 1519 00bc 12D2     		bcs	.L105
 659:..//common/src/lpc17xx_i2c.c **** 				&& (txrx_setup->rx_data != NULL)){
 1520              		.loc 2 659 0
 1521 00be 3B69     		ldr	r3, [r7, #16]
 1522 00c0 DB68     		ldr	r3, [r3, #12]
 1523              		.loc 2 658 0
 1524 00c2 002B     		cmp	r3, #0
 1525 00c4 0ED0     		beq	.L105
 660:..//common/src/lpc17xx_i2c.c **** 			*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (uint8_t)I2Cx->I2DAT;
 1526              		.loc 2 660 0
 1527 00c6 3B69     		ldr	r3, [r7, #16]
 1528 00c8 DA68     		ldr	r2, [r3, #12]
 1529 00ca 3B69     		ldr	r3, [r7, #16]
 1530 00cc 5B69     		ldr	r3, [r3, #20]
 1531 00ce 1344     		add	r3, r2, r3
 1532 00d0 7A68     		ldr	r2, [r7, #4]
 1533 00d2 9268     		ldr	r2, [r2, #8]
 1534 00d4 D2B2     		uxtb	r2, r2
 1535 00d6 1A70     		strb	r2, [r3, #0]
 661:..//common/src/lpc17xx_i2c.c **** 			txrx_setup->rx_count++;
 1536              		.loc 2 661 0
 1537 00d8 3B69     		ldr	r3, [r7, #16]
 1538 00da 5B69     		ldr	r3, [r3, #20]
 1539 00dc 03F10102 		add	r2, r3, #1
 1540 00e0 3B69     		ldr	r3, [r7, #16]
 1541 00e2 5A61     		str	r2, [r3, #20]
 1542              	.L105:
 662:..//common/src/lpc17xx_i2c.c **** 		}
 663:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1543              		.loc 2 663 0
 1544 00e4 7B68     		ldr	r3, [r7, #4]
 1545 00e6 4FF00402 		mov	r2, #4
 1546 00ea 1A60     		str	r2, [r3, #0]
 664:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1547              		.loc 2 664 0
 1548 00ec 7B68     		ldr	r3, [r7, #4]
 1549 00ee 4FF00802 		mov	r2, #8
 1550 00f2 9A61     		str	r2, [r3, #24]
 665:..//common/src/lpc17xx_i2c.c **** 		break;
 1551              		.loc 2 665 0
 1552 00f4 77E0     		b	.L110
 1553              	.L97:
 666:..//common/src/lpc17xx_i2c.c **** 
 667:..//common/src/lpc17xx_i2c.c **** 	/* Previously addressed with own SLA;
 668:..//common/src/lpc17xx_i2c.c **** 	 * DATA byte has been received;
 669:..//common/src/lpc17xx_i2c.c **** 	 * NOT ACK has been returned */
 670:..//common/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_SLA_DAT_NACK:
 671:..//common/src/lpc17xx_i2c.c **** 	/* DATA has been received, NOT ACK has been returned */
 672:..//common/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_NACK:
 673:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1554              		.loc 2 673 0
 1555 00f6 7B68     		ldr	r3, [r7, #4]
 1556 00f8 4FF00802 		mov	r2, #8
 1557 00fc 9A61     		str	r2, [r3, #24]
 674:..//common/src/lpc17xx_i2c.c **** 		break;
 1558              		.loc 2 674 0
 1559 00fe 72E0     		b	.L110
 1560              	.L98:
 675:..//common/src/lpc17xx_i2c.c **** 
 676:..//common/src/lpc17xx_i2c.c **** 	/*
 677:..//common/src/lpc17xx_i2c.c **** 	 * Note that: Return code only let us know a stop condition mixed
 678:..//common/src/lpc17xx_i2c.c **** 	 * with a repeat start condition in the same code value.
 679:..//common/src/lpc17xx_i2c.c **** 	 * So we should provide a time-out. In case this is really a stop
 680:..//common/src/lpc17xx_i2c.c **** 	 * condition, this will return back after time out condition. Otherwise,
 681:..//common/src/lpc17xx_i2c.c **** 	 * next session that is slave receive data will be completed.
 682:..//common/src/lpc17xx_i2c.c **** 	 */
 683:..//common/src/lpc17xx_i2c.c **** 
 684:..//common/src/lpc17xx_i2c.c **** 	/* A Stop or a repeat start condition */
 685:..//common/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
 686:..//common/src/lpc17xx_i2c.c **** 		// Temporally lock the interrupt for timeout condition
 687:..//common/src/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, 0);
 1561              		.loc 2 687 0
 1562 0100 7868     		ldr	r0, [r7, #4]
 1563 0102 4FF00001 		mov	r1, #0
 1564 0106 40F20003 		movw	r3, #:lower16:I2C_IntCmd
 1565 010a C0F20003 		movt	r3, #:upper16:I2C_IntCmd
 1566 010e 9847     		blx	r3
 688:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1567              		.loc 2 688 0
 1568 0110 7B68     		ldr	r3, [r7, #4]
 1569 0112 4FF00802 		mov	r2, #8
 1570 0116 9A61     		str	r2, [r3, #24]
 689:..//common/src/lpc17xx_i2c.c **** 		// enable time out
 690:..//common/src/lpc17xx_i2c.c **** 		timeout = I2C_SLAVE_TIME_OUT;
 1571              		.loc 2 690 0
 1572 0118 4FF48033 		mov	r3, #65536
 1573 011c 7B61     		str	r3, [r7, #20]
 1574 011e 00E0     		b	.L108
 1575              	.L111:
 691:..//common/src/lpc17xx_i2c.c **** 		while(1){
 692:..//common/src/lpc17xx_i2c.c **** 			if (I2Cx->I2CONSET & I2C_I2CONSET_SI){
 693:..//common/src/lpc17xx_i2c.c **** 				// re-Enable interrupt
 694:..//common/src/lpc17xx_i2c.c **** 				I2C_IntCmd(I2Cx, 1);
 695:..//common/src/lpc17xx_i2c.c **** 				break;
 696:..//common/src/lpc17xx_i2c.c **** 			} else {
 697:..//common/src/lpc17xx_i2c.c **** 				timeout--;
 698:..//common/src/lpc17xx_i2c.c **** 				if (timeout == 0){
 699:..//common/src/lpc17xx_i2c.c **** 					// timeout occur, it's really a stop condition
 700:..//common/src/lpc17xx_i2c.c **** 					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 701:..//common/src/lpc17xx_i2c.c **** 					goto s_int_end;
 702:..//common/src/lpc17xx_i2c.c **** 				}
 703:..//common/src/lpc17xx_i2c.c **** 			}
 704:..//common/src/lpc17xx_i2c.c **** 		}
 1576              		.loc 2 704 0
 1577 0120 00BF     		nop
 1578              	.L108:
 1579              		.loc 2 692 0
 1580 0122 7B68     		ldr	r3, [r7, #4]
 1581 0124 1B68     		ldr	r3, [r3, #0]
 1582 0126 03F00803 		and	r3, r3, #8
 1583 012a 002B     		cmp	r3, #0
 1584 012c 08D0     		beq	.L106
 1585              		.loc 2 694 0
 1586 012e 7868     		ldr	r0, [r7, #4]
 1587 0130 4FF00101 		mov	r1, #1
 1588 0134 40F20003 		movw	r3, #:lower16:I2C_IntCmd
 1589 0138 C0F20003 		movt	r3, #:upper16:I2C_IntCmd
 1590 013c 9847     		blx	r3
 705:..//common/src/lpc17xx_i2c.c **** 		break;
 1591              		.loc 2 705 0
 1592 013e 52E0     		b	.L110
 1593              	.L106:
 1594              		.loc 2 697 0
 1595 0140 7B69     		ldr	r3, [r7, #20]
 1596 0142 03F1FF33 		add	r3, r3, #-1
 1597 0146 7B61     		str	r3, [r7, #20]
 1598              		.loc 2 698 0
 1599 0148 7B69     		ldr	r3, [r7, #20]
 1600 014a 002B     		cmp	r3, #0
 1601 014c E8D1     		bne	.L111
 1602              		.loc 2 700 0
 1603 014e 3B69     		ldr	r3, [r7, #16]
 1604 0150 9B69     		ldr	r3, [r3, #24]
 1605 0152 43F48062 		orr	r2, r3, #1024
 1606 0156 3B69     		ldr	r3, [r7, #16]
 1607 0158 9A61     		str	r2, [r3, #24]
 1608              		.loc 2 701 0
 1609 015a 2FE0     		b	.L94
 1610              	.L99:
 706:..//common/src/lpc17xx_i2c.c **** 
 707:..//common/src/lpc17xx_i2c.c **** 	/* Writing phase -------------------------------------------------------- */
 708:..//common/src/lpc17xx_i2c.c **** 	/* Own SLA+R has been received, ACK has been returned */
 709:..//common/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_TX_SLAR_ACK:
 710:..//common/src/lpc17xx_i2c.c **** 	/* Data has been transmitted, ACK has been received */
 711:..//common/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_TX_DAT_ACK:
 712:..//common/src/lpc17xx_i2c.c **** 		/*
 713:..//common/src/lpc17xx_i2c.c **** 		 * All data bytes that over-flow the specified receive
 714:..//common/src/lpc17xx_i2c.c **** 		 * data length, just ignore them.
 715:..//common/src/lpc17xx_i2c.c **** 		 */
 716:..//common/src/lpc17xx_i2c.c **** 		if ((txrx_setup->tx_count < txrx_setup->tx_length) \
 1611              		.loc 2 716 0
 1612 015c 3B69     		ldr	r3, [r7, #16]
 1613 015e 9A68     		ldr	r2, [r3, #8]
 1614 0160 3B69     		ldr	r3, [r7, #16]
 1615 0162 5B68     		ldr	r3, [r3, #4]
 1616 0164 9A42     		cmp	r2, r3
 1617 0166 12D2     		bcs	.L109
 717:..//common/src/lpc17xx_i2c.c **** 				&& (txrx_setup->tx_data != NULL)){
 1618              		.loc 2 717 0
 1619 0168 3B69     		ldr	r3, [r7, #16]
 1620 016a 1B68     		ldr	r3, [r3, #0]
 1621              		.loc 2 716 0
 1622 016c 002B     		cmp	r3, #0
 1623 016e 0ED0     		beq	.L109
 718:..//common/src/lpc17xx_i2c.c **** 			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
 1624              		.loc 2 718 0
 1625 0170 3B69     		ldr	r3, [r7, #16]
 1626 0172 1A68     		ldr	r2, [r3, #0]
 1627 0174 3B69     		ldr	r3, [r7, #16]
 1628 0176 9B68     		ldr	r3, [r3, #8]
 1629 0178 1344     		add	r3, r2, r3
 1630 017a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1631 017c 1A46     		mov	r2, r3
 1632 017e 7B68     		ldr	r3, [r7, #4]
 1633 0180 9A60     		str	r2, [r3, #8]
 719:..//common/src/lpc17xx_i2c.c **** 			txrx_setup->tx_count++;
 1634              		.loc 2 719 0
 1635 0182 3B69     		ldr	r3, [r7, #16]
 1636 0184 9B68     		ldr	r3, [r3, #8]
 1637 0186 03F10102 		add	r2, r3, #1
 1638 018a 3B69     		ldr	r3, [r7, #16]
 1639 018c 9A60     		str	r2, [r3, #8]
 1640              	.L109:
 720:..//common/src/lpc17xx_i2c.c **** 		}
 721:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1641              		.loc 2 721 0
 1642 018e 7B68     		ldr	r3, [r7, #4]
 1643 0190 4FF00402 		mov	r2, #4
 1644 0194 1A60     		str	r2, [r3, #0]
 722:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1645              		.loc 2 722 0
 1646 0196 7B68     		ldr	r3, [r7, #4]
 1647 0198 4FF00802 		mov	r2, #8
 1648 019c 9A61     		str	r2, [r3, #24]
 723:..//common/src/lpc17xx_i2c.c **** 		break;
 1649              		.loc 2 723 0
 1650 019e 22E0     		b	.L110
 1651              	.L100:
 724:..//common/src/lpc17xx_i2c.c **** 
 725:..//common/src/lpc17xx_i2c.c **** 	/* Data has been transmitted, NACK has been received,
 726:..//common/src/lpc17xx_i2c.c **** 	 * that means there's no more data to send, exit now */
 727:..//common/src/lpc17xx_i2c.c **** 	/*
 728:..//common/src/lpc17xx_i2c.c **** 	 * Note: Don't wait for stop event since in slave transmit mode,
 729:..//common/src/lpc17xx_i2c.c **** 	 * since there no proof lets us know when a stop signal has been received
 730:..//common/src/lpc17xx_i2c.c **** 	 * on slave side.
 731:..//common/src/lpc17xx_i2c.c **** 	 */
 732:..//common/src/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_TX_DAT_NACK:
 733:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1652              		.loc 2 733 0
 1653 01a0 7B68     		ldr	r3, [r7, #4]
 1654 01a2 4FF00402 		mov	r2, #4
 1655 01a6 1A60     		str	r2, [r3, #0]
 734:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1656              		.loc 2 734 0
 1657 01a8 7B68     		ldr	r3, [r7, #4]
 1658 01aa 4FF00802 		mov	r2, #8
 1659 01ae 9A61     		str	r2, [r3, #24]
 735:..//common/src/lpc17xx_i2c.c **** 		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 1660              		.loc 2 735 0
 1661 01b0 3B69     		ldr	r3, [r7, #16]
 1662 01b2 9B69     		ldr	r3, [r3, #24]
 1663 01b4 43F48062 		orr	r2, r3, #1024
 1664 01b8 3B69     		ldr	r3, [r7, #16]
 1665 01ba 9A61     		str	r2, [r3, #24]
 1666              	.L94:
 736:..//common/src/lpc17xx_i2c.c **** 		goto s_int_end;
 737:..//common/src/lpc17xx_i2c.c **** 
 738:..//common/src/lpc17xx_i2c.c **** 	// Other status must be captured
 739:..//common/src/lpc17xx_i2c.c **** 	default:
 740:..//common/src/lpc17xx_i2c.c **** s_int_end:
 741:..//common/src/lpc17xx_i2c.c **** 		// Disable interrupt
 742:..//common/src/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, 0);
 1667              		.loc 2 742 0
 1668 01bc 7868     		ldr	r0, [r7, #4]
 1669 01be 4FF00001 		mov	r1, #0
 1670 01c2 40F20003 		movw	r3, #:lower16:I2C_IntCmd
 1671 01c6 C0F20003 		movt	r3, #:upper16:I2C_IntCmd
 1672 01ca 9847     		blx	r3
 743:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 1673              		.loc 2 743 0
 1674 01cc 7B68     		ldr	r3, [r7, #4]
 1675 01ce 4FF02C02 		mov	r2, #44
 1676 01d2 9A61     		str	r2, [r3, #24]
 744:..//common/src/lpc17xx_i2c.c **** 		I2C_SlaveComplete[tmp] = TRUE;
 1677              		.loc 2 744 0
 1678 01d4 BA68     		ldr	r2, [r7, #8]
 1679 01d6 40F20003 		movw	r3, #:lower16:I2C_SlaveComplete
 1680 01da C0F20003 		movt	r3, #:upper16:I2C_SlaveComplete
 1681 01de 4FF00101 		mov	r1, #1
 1682 01e2 43F82210 		str	r1, [r3, r2, lsl #2]
 1683              	.L110:
 745:..//common/src/lpc17xx_i2c.c **** 		break;
 746:..//common/src/lpc17xx_i2c.c **** 	}
 747:..//common/src/lpc17xx_i2c.c **** }
 1684              		.loc 2 747 0
 1685 01e6 07F11807 		add	r7, r7, #24
 1686 01ea BD46     		mov	sp, r7
 1687 01ec 80BD     		pop	{r7, pc}
 1688              		.cfi_endproc
 1689              	.LFE40:
 1691 01ee 00BF     		.section	.text.I2C_MasterTransferData,"ax",%progbits
 1692              		.align	2
 1693              		.global	I2C_MasterTransferData
 1694              		.thumb
 1695              		.thumb_func
 1697              	I2C_MasterTransferData:
 1698              	.LFB41:
 748:..//common/src/lpc17xx_i2c.c **** 
 749:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
 750:..//common/src/lpc17xx_i2c.c ****  * @brief 		Transmit and Receive data in master mode
 751:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx			I2C peripheral selected, should be:
 752:..//common/src/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 753:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 754:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 755:..//common/src/lpc17xx_i2c.c ****  * @param[in]	TransferCfg		Pointer to a I2C_M_SETUP_Type structure that
 756:..//common/src/lpc17xx_i2c.c ****  * 								contains specified information about the
 757:..//common/src/lpc17xx_i2c.c ****  * 								configuration for master transfer.
 758:..//common/src/lpc17xx_i2c.c ****  * @param[in]	Opt				a I2C_TRANSFER_OPT_Type type that selected for
 759:..//common/src/lpc17xx_i2c.c ****  * 								interrupt or polling mode.
 760:..//common/src/lpc17xx_i2c.c ****  * @return 		SUCCESS or ERROR
 761:..//common/src/lpc17xx_i2c.c ****  *
 762:..//common/src/lpc17xx_i2c.c ****  * Note:
 763:..//common/src/lpc17xx_i2c.c ****  * - In case of using I2C to transmit data only, either transmit length set to 0
 764:..//common/src/lpc17xx_i2c.c ****  * or transmit data pointer set to NULL.
 765:..//common/src/lpc17xx_i2c.c ****  * - In case of using I2C to receive data only, either receive length set to 0
 766:..//common/src/lpc17xx_i2c.c ****  * or receive data pointer set to NULL.
 767:..//common/src/lpc17xx_i2c.c ****  * - In case of using I2C to transmit followed by receive data, transmit length,
 768:..//common/src/lpc17xx_i2c.c ****  * transmit data pointer, receive length and receive data pointer should be set
 769:..//common/src/lpc17xx_i2c.c ****  * corresponding.
 770:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
 771:..//common/src/lpc17xx_i2c.c **** Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
 772:..//common/src/lpc17xx_i2c.c **** 								I2C_TRANSFER_OPT_Type Opt)
 773:..//common/src/lpc17xx_i2c.c **** {
 1699              		.loc 2 773 0
 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 32
 1702              		@ frame_needed = 1, uses_anonymous_args = 0
 1703 0000 80B5     		push	{r7, lr}
 1704              	.LCFI42:
 1705              		.cfi_def_cfa_offset 8
 1706 0002 88B0     		sub	sp, sp, #32
 1707              	.LCFI43:
 1708              		.cfi_def_cfa_offset 40
 1709 0004 00AF     		add	r7, sp, #0
 1710              		.cfi_offset 14, -4
 1711              		.cfi_offset 7, -8
 1712              	.LCFI44:
 1713              		.cfi_def_cfa_register 7
 1714 0006 F860     		str	r0, [r7, #12]
 1715 0008 B960     		str	r1, [r7, #8]
 1716 000a 1346     		mov	r3, r2
 1717 000c FB71     		strb	r3, [r7, #7]
 774:..//common/src/lpc17xx_i2c.c **** 	uint8_t *txdat;
 775:..//common/src/lpc17xx_i2c.c **** 	uint8_t *rxdat;
 776:..//common/src/lpc17xx_i2c.c **** 	uint32_t CodeStatus;
 777:..//common/src/lpc17xx_i2c.c **** 	uint8_t tmp;
 778:..//common/src/lpc17xx_i2c.c **** 
 779:..//common/src/lpc17xx_i2c.c **** 	// reset all default state
 780:..//common/src/lpc17xx_i2c.c **** 	txdat = (uint8_t *) TransferCfg->tx_data;
 1718              		.loc 2 780 0
 1719 000e BB68     		ldr	r3, [r7, #8]
 1720 0010 5B68     		ldr	r3, [r3, #4]
 1721 0012 7B61     		str	r3, [r7, #20]
 781:..//common/src/lpc17xx_i2c.c **** 	rxdat = (uint8_t *) TransferCfg->rx_data;
 1722              		.loc 2 781 0
 1723 0014 BB68     		ldr	r3, [r7, #8]
 1724 0016 1B69     		ldr	r3, [r3, #16]
 1725 0018 BB61     		str	r3, [r7, #24]
 782:..//common/src/lpc17xx_i2c.c **** 	// Reset I2C setup value to default state
 783:..//common/src/lpc17xx_i2c.c **** 	TransferCfg->tx_count = 0;
 1726              		.loc 2 783 0
 1727 001a BB68     		ldr	r3, [r7, #8]
 1728 001c 4FF00002 		mov	r2, #0
 1729 0020 DA60     		str	r2, [r3, #12]
 784:..//common/src/lpc17xx_i2c.c **** 	TransferCfg->rx_count = 0;
 1730              		.loc 2 784 0
 1731 0022 BB68     		ldr	r3, [r7, #8]
 1732 0024 4FF00002 		mov	r2, #0
 1733 0028 9A61     		str	r2, [r3, #24]
 785:..//common/src/lpc17xx_i2c.c **** 	TransferCfg->status = 0;
 1734              		.loc 2 785 0
 1735 002a BB68     		ldr	r3, [r7, #8]
 1736 002c 4FF00002 		mov	r2, #0
 1737 0030 5A62     		str	r2, [r3, #36]
 786:..//common/src/lpc17xx_i2c.c **** 
 787:..//common/src/lpc17xx_i2c.c **** 	if (Opt == I2C_TRANSFER_POLLING){
 1738              		.loc 2 787 0
 1739 0032 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1740 0034 002B     		cmp	r3, #0
 1741 0036 40F07281 		bne	.L113
 788:..//common/src/lpc17xx_i2c.c **** 
 789:..//common/src/lpc17xx_i2c.c **** 		/* First Start condition -------------------------------------------------------------- */
 790:..//common/src/lpc17xx_i2c.c **** 		TransferCfg->retransmissions_count = 0;
 1742              		.loc 2 790 0
 1743 003a BB68     		ldr	r3, [r7, #8]
 1744 003c 4FF00002 		mov	r2, #0
 1745 0040 1A62     		str	r2, [r3, #32]
 1746 0042 0CE0     		b	.L114
 1747              	.L140:
 791:..//common/src/lpc17xx_i2c.c **** retry:
 792:..//common/src/lpc17xx_i2c.c **** 		// reset all default state
 793:..//common/src/lpc17xx_i2c.c **** 		txdat = (uint8_t *) TransferCfg->tx_data;
 794:..//common/src/lpc17xx_i2c.c **** 		rxdat = (uint8_t *) TransferCfg->rx_data;
 795:..//common/src/lpc17xx_i2c.c **** 		// Reset I2C setup value to default state
 796:..//common/src/lpc17xx_i2c.c **** 		TransferCfg->tx_count = 0;
 797:..//common/src/lpc17xx_i2c.c **** 		TransferCfg->rx_count = 0;
 798:..//common/src/lpc17xx_i2c.c **** 		CodeStatus = 0;
 799:..//common/src/lpc17xx_i2c.c **** 
 800:..//common/src/lpc17xx_i2c.c **** 		// Start command
 801:..//common/src/lpc17xx_i2c.c **** 		CodeStatus = I2C_Start(I2Cx);
 802:..//common/src/lpc17xx_i2c.c **** 		if ((CodeStatus != I2C_I2STAT_M_TX_START) \
 803:..//common/src/lpc17xx_i2c.c **** 				&& (CodeStatus != I2C_I2STAT_M_TX_RESTART)){
 804:..//common/src/lpc17xx_i2c.c **** 			TransferCfg->retransmissions_count++;
 805:..//common/src/lpc17xx_i2c.c **** 			if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 806:..//common/src/lpc17xx_i2c.c **** 				// save status
 807:..//common/src/lpc17xx_i2c.c **** 				TransferCfg->status = CodeStatus;
 808:..//common/src/lpc17xx_i2c.c **** 				goto error;
 809:..//common/src/lpc17xx_i2c.c **** 			} else {
 810:..//common/src/lpc17xx_i2c.c **** 				goto retry;
 1748              		.loc 2 810 0
 1749 0044 00BF     		nop
 1750 0046 0AE0     		b	.L114
 1751              	.L142:
 811:..//common/src/lpc17xx_i2c.c **** 			}
 812:..//common/src/lpc17xx_i2c.c **** 		}
 813:..//common/src/lpc17xx_i2c.c **** 
 814:..//common/src/lpc17xx_i2c.c **** 		/* In case of sending data first --------------------------------------------------- */
 815:..//common/src/lpc17xx_i2c.c **** 		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL)){
 816:..//common/src/lpc17xx_i2c.c **** 
 817:..//common/src/lpc17xx_i2c.c **** 			/* Send slave address + WR direction bit = 0 ----------------------------------- */
 818:..//common/src/lpc17xx_i2c.c **** 			CodeStatus = I2C_SendByte(I2Cx, (TransferCfg->sl_addr7bit << 1));
 819:..//common/src/lpc17xx_i2c.c **** 			if (CodeStatus != I2C_I2STAT_M_TX_SLAW_ACK){
 820:..//common/src/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 821:..//common/src/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 822:..//common/src/lpc17xx_i2c.c **** 					// save status
 823:..//common/src/lpc17xx_i2c.c **** 					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
 824:..//common/src/lpc17xx_i2c.c **** 					goto error;
 825:..//common/src/lpc17xx_i2c.c **** 				} else {
 826:..//common/src/lpc17xx_i2c.c **** 					goto retry;
 1752              		.loc 2 826 0
 1753 0048 00BF     		nop
 1754 004a 08E0     		b	.L114
 1755              	.L143:
 827:..//common/src/lpc17xx_i2c.c **** 				}
 828:..//common/src/lpc17xx_i2c.c **** 			}
 829:..//common/src/lpc17xx_i2c.c **** 
 830:..//common/src/lpc17xx_i2c.c **** 			/* Send a number of data bytes ---------------------------------------- */
 831:..//common/src/lpc17xx_i2c.c **** 			while (TransferCfg->tx_count < TransferCfg->tx_length)
 832:..//common/src/lpc17xx_i2c.c **** 			{
 833:..//common/src/lpc17xx_i2c.c **** 				CodeStatus = I2C_SendByte(I2Cx, *txdat);
 834:..//common/src/lpc17xx_i2c.c **** 				if (CodeStatus != I2C_I2STAT_M_TX_DAT_ACK){
 835:..//common/src/lpc17xx_i2c.c **** 					TransferCfg->retransmissions_count++;
 836:..//common/src/lpc17xx_i2c.c **** 					if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 837:..//common/src/lpc17xx_i2c.c **** 						// save status
 838:..//common/src/lpc17xx_i2c.c **** 						TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
 839:..//common/src/lpc17xx_i2c.c **** 						goto error;
 840:..//common/src/lpc17xx_i2c.c **** 					} else {
 841:..//common/src/lpc17xx_i2c.c **** 						goto retry;
 1756              		.loc 2 841 0
 1757 004c 00BF     		nop
 1758 004e 06E0     		b	.L114
 1759              	.L144:
 842:..//common/src/lpc17xx_i2c.c **** 					}
 843:..//common/src/lpc17xx_i2c.c **** 				}
 844:..//common/src/lpc17xx_i2c.c **** 
 845:..//common/src/lpc17xx_i2c.c **** 				txdat++;
 846:..//common/src/lpc17xx_i2c.c **** 				TransferCfg->tx_count++;
 847:..//common/src/lpc17xx_i2c.c **** 			}
 848:..//common/src/lpc17xx_i2c.c **** 		}
 849:..//common/src/lpc17xx_i2c.c **** 
 850:..//common/src/lpc17xx_i2c.c **** 		/* Second Start condition (Repeat Start) ------------------------------------------- */
 851:..//common/src/lpc17xx_i2c.c **** 		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
 852:..//common/src/lpc17xx_i2c.c **** 				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){
 853:..//common/src/lpc17xx_i2c.c **** 
 854:..//common/src/lpc17xx_i2c.c **** 			CodeStatus = I2C_Start(I2Cx);
 855:..//common/src/lpc17xx_i2c.c **** 			if ((CodeStatus != I2C_I2STAT_M_RX_START) \
 856:..//common/src/lpc17xx_i2c.c **** 					&& (CodeStatus != I2C_I2STAT_M_RX_RESTART)){
 857:..//common/src/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 858:..//common/src/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 859:..//common/src/lpc17xx_i2c.c **** 					// Update status
 860:..//common/src/lpc17xx_i2c.c **** 					TransferCfg->status = CodeStatus;
 861:..//common/src/lpc17xx_i2c.c **** 					goto error;
 862:..//common/src/lpc17xx_i2c.c **** 				} else {
 863:..//common/src/lpc17xx_i2c.c **** 					goto retry;
 1760              		.loc 2 863 0
 1761 0050 00BF     		nop
 1762 0052 04E0     		b	.L114
 1763              	.L146:
 864:..//common/src/lpc17xx_i2c.c **** 				}
 865:..//common/src/lpc17xx_i2c.c **** 			}
 866:..//common/src/lpc17xx_i2c.c **** 		}
 867:..//common/src/lpc17xx_i2c.c **** 
 868:..//common/src/lpc17xx_i2c.c **** 		/* Then, start reading after sending data -------------------------------------- */
 869:..//common/src/lpc17xx_i2c.c **** 		if ((TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){
 870:..//common/src/lpc17xx_i2c.c **** 			/* Send slave address + RD direction bit = 1 ----------------------------------- */
 871:..//common/src/lpc17xx_i2c.c **** 
 872:..//common/src/lpc17xx_i2c.c **** 			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
 873:..//common/src/lpc17xx_i2c.c **** 			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK){
 874:..//common/src/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 875:..//common/src/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 876:..//common/src/lpc17xx_i2c.c **** 					// update status
 877:..//common/src/lpc17xx_i2c.c **** 					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
 878:..//common/src/lpc17xx_i2c.c **** 					goto error;
 879:..//common/src/lpc17xx_i2c.c **** 				} else {
 880:..//common/src/lpc17xx_i2c.c **** 					goto retry;
 1764              		.loc 2 880 0
 1765 0054 00BF     		nop
 1766 0056 02E0     		b	.L114
 1767              	.L148:
 881:..//common/src/lpc17xx_i2c.c **** 				}
 882:..//common/src/lpc17xx_i2c.c **** 			}
 883:..//common/src/lpc17xx_i2c.c **** 
 884:..//common/src/lpc17xx_i2c.c **** 			/* Receive a number of data bytes ------------------------------------------------- */
 885:..//common/src/lpc17xx_i2c.c **** 			while (TransferCfg->rx_count < TransferCfg->rx_length){
 886:..//common/src/lpc17xx_i2c.c **** 
 887:..//common/src/lpc17xx_i2c.c **** 				/*
 888:..//common/src/lpc17xx_i2c.c **** 				 * Note that: if data length is only one, the master should not
 889:..//common/src/lpc17xx_i2c.c **** 				 * issue an ACK signal on bus after reading to avoid of next data frame
 890:..//common/src/lpc17xx_i2c.c **** 				 * on slave side
 891:..//common/src/lpc17xx_i2c.c **** 				 */
 892:..//common/src/lpc17xx_i2c.c **** 				if (TransferCfg->rx_count < (TransferCfg->rx_length - 1)){
 893:..//common/src/lpc17xx_i2c.c **** 					// Issue an ACK signal for next data frame
 894:..//common/src/lpc17xx_i2c.c **** 					CodeStatus = I2C_GetByte(I2Cx, &tmp, 1);
 895:..//common/src/lpc17xx_i2c.c **** 					if (CodeStatus != I2C_I2STAT_M_RX_DAT_ACK){
 896:..//common/src/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
 897:..//common/src/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 898:..//common/src/lpc17xx_i2c.c **** 							// update status
 899:..//common/src/lpc17xx_i2c.c **** 							TransferCfg->status = CodeStatus;
 900:..//common/src/lpc17xx_i2c.c **** 							goto error;
 901:..//common/src/lpc17xx_i2c.c **** 						} else {
 902:..//common/src/lpc17xx_i2c.c **** 							goto retry;
 1768              		.loc 2 902 0
 1769 0058 00BF     		nop
 1770 005a 00E0     		b	.L114
 1771              	.L149:
 903:..//common/src/lpc17xx_i2c.c **** 						}
 904:..//common/src/lpc17xx_i2c.c **** 					}
 905:..//common/src/lpc17xx_i2c.c **** 				} else {
 906:..//common/src/lpc17xx_i2c.c **** 					// Do not issue an ACK signal
 907:..//common/src/lpc17xx_i2c.c **** 					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
 908:..//common/src/lpc17xx_i2c.c **** 					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK){
 909:..//common/src/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
 910:..//common/src/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
 911:..//common/src/lpc17xx_i2c.c **** 							// update status
 912:..//common/src/lpc17xx_i2c.c **** 							TransferCfg->status = CodeStatus;
 913:..//common/src/lpc17xx_i2c.c **** 							goto error;
 914:..//common/src/lpc17xx_i2c.c **** 						} else {
 915:..//common/src/lpc17xx_i2c.c **** 							goto retry;
 1772              		.loc 2 915 0
 1773 005c 00BF     		nop
 1774              	.L114:
 1775              		.loc 2 793 0
 1776 005e BB68     		ldr	r3, [r7, #8]
 1777 0060 5B68     		ldr	r3, [r3, #4]
 1778 0062 7B61     		str	r3, [r7, #20]
 1779              		.loc 2 794 0
 1780 0064 BB68     		ldr	r3, [r7, #8]
 1781 0066 1B69     		ldr	r3, [r3, #16]
 1782 0068 BB61     		str	r3, [r7, #24]
 1783              		.loc 2 796 0
 1784 006a BB68     		ldr	r3, [r7, #8]
 1785 006c 4FF00002 		mov	r2, #0
 1786 0070 DA60     		str	r2, [r3, #12]
 1787              		.loc 2 797 0
 1788 0072 BB68     		ldr	r3, [r7, #8]
 1789 0074 4FF00002 		mov	r2, #0
 1790 0078 9A61     		str	r2, [r3, #24]
 1791              		.loc 2 798 0
 1792 007a 4FF00003 		mov	r3, #0
 1793 007e FB61     		str	r3, [r7, #28]
 1794              		.loc 2 801 0
 1795 0080 F868     		ldr	r0, [r7, #12]
 1796 0082 40F20003 		movw	r3, #:lower16:I2C_Start
 1797 0086 C0F20003 		movt	r3, #:upper16:I2C_Start
 1798 008a 9847     		blx	r3
 1799 008c 0346     		mov	r3, r0
 1800 008e FB61     		str	r3, [r7, #28]
 1801              		.loc 2 802 0
 1802 0090 FB69     		ldr	r3, [r7, #28]
 1803 0092 082B     		cmp	r3, #8
 1804 0094 12D0     		beq	.L115
 1805 0096 FB69     		ldr	r3, [r7, #28]
 1806 0098 102B     		cmp	r3, #16
 1807 009a 0FD0     		beq	.L115
 1808              		.loc 2 804 0
 1809 009c BB68     		ldr	r3, [r7, #8]
 1810 009e 1B6A     		ldr	r3, [r3, #32]
 1811 00a0 03F10102 		add	r2, r3, #1
 1812 00a4 BB68     		ldr	r3, [r7, #8]
 1813 00a6 1A62     		str	r2, [r3, #32]
 1814              		.loc 2 805 0
 1815 00a8 BB68     		ldr	r3, [r7, #8]
 1816 00aa 1A6A     		ldr	r2, [r3, #32]
 1817 00ac BB68     		ldr	r3, [r7, #8]
 1818 00ae DB69     		ldr	r3, [r3, #28]
 1819 00b0 9A42     		cmp	r2, r3
 1820 00b2 C7D9     		bls	.L140
 1821              		.loc 2 807 0
 1822 00b4 BB68     		ldr	r3, [r7, #8]
 1823 00b6 FA69     		ldr	r2, [r7, #28]
 1824 00b8 5A62     		str	r2, [r3, #36]
 1825              		.loc 2 808 0
 1826 00ba 27E1     		b	.L117
 1827              	.L115:
 1828              		.loc 2 815 0
 1829 00bc BB68     		ldr	r3, [r7, #8]
 1830 00be 9B68     		ldr	r3, [r3, #8]
 1831 00c0 002B     		cmp	r3, #0
 1832 00c2 59D0     		beq	.L118
 1833 00c4 BB68     		ldr	r3, [r7, #8]
 1834 00c6 5B68     		ldr	r3, [r3, #4]
 1835 00c8 002B     		cmp	r3, #0
 1836 00ca 55D0     		beq	.L118
 1837              		.loc 2 818 0
 1838 00cc BB68     		ldr	r3, [r7, #8]
 1839 00ce 1B68     		ldr	r3, [r3, #0]
 1840 00d0 DBB2     		uxtb	r3, r3
 1841 00d2 4FEA4303 		lsl	r3, r3, #1
 1842 00d6 DBB2     		uxtb	r3, r3
 1843 00d8 F868     		ldr	r0, [r7, #12]
 1844 00da 1946     		mov	r1, r3
 1845 00dc 40F20003 		movw	r3, #:lower16:I2C_SendByte
 1846 00e0 C0F20003 		movt	r3, #:upper16:I2C_SendByte
 1847 00e4 9847     		blx	r3
 1848 00e6 0346     		mov	r3, r0
 1849 00e8 FB61     		str	r3, [r7, #28]
 1850              		.loc 2 819 0
 1851 00ea FB69     		ldr	r3, [r7, #28]
 1852 00ec 182B     		cmp	r3, #24
 1853 00ee 3CD0     		beq	.L141
 1854              		.loc 2 820 0
 1855 00f0 BB68     		ldr	r3, [r7, #8]
 1856 00f2 1B6A     		ldr	r3, [r3, #32]
 1857 00f4 03F10102 		add	r2, r3, #1
 1858 00f8 BB68     		ldr	r3, [r7, #8]
 1859 00fa 1A62     		str	r2, [r3, #32]
 1860              		.loc 2 821 0
 1861 00fc BB68     		ldr	r3, [r7, #8]
 1862 00fe 1A6A     		ldr	r2, [r3, #32]
 1863 0100 BB68     		ldr	r3, [r7, #8]
 1864 0102 DB69     		ldr	r3, [r3, #28]
 1865 0104 9A42     		cmp	r2, r3
 1866 0106 9FD9     		bls	.L142
 1867              		.loc 2 823 0
 1868 0108 FB69     		ldr	r3, [r7, #28]
 1869 010a 43F40072 		orr	r2, r3, #512
 1870 010e BB68     		ldr	r3, [r7, #8]
 1871 0110 5A62     		str	r2, [r3, #36]
 1872              		.loc 2 824 0
 1873 0112 FBE0     		b	.L117
 1874              	.L124:
 1875              		.loc 2 833 0
 1876 0114 7B69     		ldr	r3, [r7, #20]
 1877 0116 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1878 0118 F868     		ldr	r0, [r7, #12]
 1879 011a 1946     		mov	r1, r3
 1880 011c 40F20003 		movw	r3, #:lower16:I2C_SendByte
 1881 0120 C0F20003 		movt	r3, #:upper16:I2C_SendByte
 1882 0124 9847     		blx	r3
 1883 0126 0346     		mov	r3, r0
 1884 0128 FB61     		str	r3, [r7, #28]
 1885              		.loc 2 834 0
 1886 012a FB69     		ldr	r3, [r7, #28]
 1887 012c 282B     		cmp	r3, #40
 1888 012e 11D0     		beq	.L122
 1889              		.loc 2 835 0
 1890 0130 BB68     		ldr	r3, [r7, #8]
 1891 0132 1B6A     		ldr	r3, [r3, #32]
 1892 0134 03F10102 		add	r2, r3, #1
 1893 0138 BB68     		ldr	r3, [r7, #8]
 1894 013a 1A62     		str	r2, [r3, #32]
 1895              		.loc 2 836 0
 1896 013c BB68     		ldr	r3, [r7, #8]
 1897 013e 1A6A     		ldr	r2, [r3, #32]
 1898 0140 BB68     		ldr	r3, [r7, #8]
 1899 0142 DB69     		ldr	r3, [r3, #28]
 1900 0144 9A42     		cmp	r2, r3
 1901 0146 81D9     		bls	.L143
 1902              		.loc 2 838 0
 1903 0148 FB69     		ldr	r3, [r7, #28]
 1904 014a 43F40072 		orr	r2, r3, #512
 1905 014e BB68     		ldr	r3, [r7, #8]
 1906 0150 5A62     		str	r2, [r3, #36]
 1907              		.loc 2 839 0
 1908 0152 DBE0     		b	.L117
 1909              	.L122:
 1910              		.loc 2 845 0
 1911 0154 7B69     		ldr	r3, [r7, #20]
 1912 0156 03F10103 		add	r3, r3, #1
 1913 015a 7B61     		str	r3, [r7, #20]
 1914              		.loc 2 846 0
 1915 015c BB68     		ldr	r3, [r7, #8]
 1916 015e DB68     		ldr	r3, [r3, #12]
 1917 0160 03F10102 		add	r2, r3, #1
 1918 0164 BB68     		ldr	r3, [r7, #8]
 1919 0166 DA60     		str	r2, [r3, #12]
 1920 0168 00E0     		b	.L121
 1921              	.L141:
 1922              		.loc 2 831 0
 1923 016a 00BF     		nop
 1924              	.L121:
 1925 016c BB68     		ldr	r3, [r7, #8]
 1926 016e DA68     		ldr	r2, [r3, #12]
 1927 0170 BB68     		ldr	r3, [r7, #8]
 1928 0172 9B68     		ldr	r3, [r3, #8]
 1929 0174 9A42     		cmp	r2, r3
 1930 0176 CDD3     		bcc	.L124
 1931              	.L118:
 1932              		.loc 2 851 0
 1933 0178 BB68     		ldr	r3, [r7, #8]
 1934 017a 9B68     		ldr	r3, [r3, #8]
 1935 017c 002B     		cmp	r3, #0
 1936 017e 2AD0     		beq	.L125
 1937 0180 BB68     		ldr	r3, [r7, #8]
 1938 0182 5B68     		ldr	r3, [r3, #4]
 1939 0184 002B     		cmp	r3, #0
 1940 0186 26D0     		beq	.L125
 1941              		.loc 2 852 0
 1942 0188 BB68     		ldr	r3, [r7, #8]
 1943 018a 5B69     		ldr	r3, [r3, #20]
 1944              		.loc 2 851 0
 1945 018c 002B     		cmp	r3, #0
 1946 018e 22D0     		beq	.L125
 1947              		.loc 2 852 0
 1948 0190 BB68     		ldr	r3, [r7, #8]
 1949 0192 1B69     		ldr	r3, [r3, #16]
 1950              		.loc 2 851 0
 1951 0194 002B     		cmp	r3, #0
 1952 0196 1ED0     		beq	.L125
 1953              		.loc 2 854 0
 1954 0198 F868     		ldr	r0, [r7, #12]
 1955 019a 40F20003 		movw	r3, #:lower16:I2C_Start
 1956 019e C0F20003 		movt	r3, #:upper16:I2C_Start
 1957 01a2 9847     		blx	r3
 1958 01a4 0346     		mov	r3, r0
 1959 01a6 FB61     		str	r3, [r7, #28]
 1960              		.loc 2 855 0
 1961 01a8 FB69     		ldr	r3, [r7, #28]
 1962 01aa 082B     		cmp	r3, #8
 1963 01ac 13D0     		beq	.L125
 1964 01ae FB69     		ldr	r3, [r7, #28]
 1965 01b0 102B     		cmp	r3, #16
 1966 01b2 10D0     		beq	.L125
 1967              		.loc 2 857 0
 1968 01b4 BB68     		ldr	r3, [r7, #8]
 1969 01b6 1B6A     		ldr	r3, [r3, #32]
 1970 01b8 03F10102 		add	r2, r3, #1
 1971 01bc BB68     		ldr	r3, [r7, #8]
 1972 01be 1A62     		str	r2, [r3, #32]
 1973              		.loc 2 858 0
 1974 01c0 BB68     		ldr	r3, [r7, #8]
 1975 01c2 1A6A     		ldr	r2, [r3, #32]
 1976 01c4 BB68     		ldr	r3, [r7, #8]
 1977 01c6 DB69     		ldr	r3, [r3, #28]
 1978 01c8 9A42     		cmp	r2, r3
 1979 01ca 7FF641AF 		bls	.L144
 1980              		.loc 2 860 0
 1981 01ce BB68     		ldr	r3, [r7, #8]
 1982 01d0 FA69     		ldr	r2, [r7, #28]
 1983 01d2 5A62     		str	r2, [r3, #36]
 1984              		.loc 2 861 0
 1985 01d4 9AE0     		b	.L117
 1986              	.L125:
 1987              		.loc 2 869 0
 1988 01d6 BB68     		ldr	r3, [r7, #8]
 1989 01d8 5B69     		ldr	r3, [r3, #20]
 1990 01da 002B     		cmp	r3, #0
 1991 01dc 00F08D80 		beq	.L127
 1992 01e0 BB68     		ldr	r3, [r7, #8]
 1993 01e2 1B69     		ldr	r3, [r3, #16]
 1994 01e4 002B     		cmp	r3, #0
 1995 01e6 00F08880 		beq	.L127
 1996              		.loc 2 872 0
 1997 01ea BB68     		ldr	r3, [r7, #8]
 1998 01ec 1B68     		ldr	r3, [r3, #0]
 1999 01ee DBB2     		uxtb	r3, r3
 2000 01f0 4FEA4303 		lsl	r3, r3, #1
 2001 01f4 DBB2     		uxtb	r3, r3
 2002 01f6 43F00103 		orr	r3, r3, #1
 2003 01fa DBB2     		uxtb	r3, r3
 2004 01fc F868     		ldr	r0, [r7, #12]
 2005 01fe 1946     		mov	r1, r3
 2006 0200 40F20003 		movw	r3, #:lower16:I2C_SendByte
 2007 0204 C0F20003 		movt	r3, #:upper16:I2C_SendByte
 2008 0208 9847     		blx	r3
 2009 020a 0346     		mov	r3, r0
 2010 020c FB61     		str	r3, [r7, #28]
 2011              		.loc 2 873 0
 2012 020e FB69     		ldr	r3, [r7, #28]
 2013 0210 402B     		cmp	r3, #64
 2014 0212 6BD0     		beq	.L145
 2015              		.loc 2 874 0
 2016 0214 BB68     		ldr	r3, [r7, #8]
 2017 0216 1B6A     		ldr	r3, [r3, #32]
 2018 0218 03F10102 		add	r2, r3, #1
 2019 021c BB68     		ldr	r3, [r7, #8]
 2020 021e 1A62     		str	r2, [r3, #32]
 2021              		.loc 2 875 0
 2022 0220 BB68     		ldr	r3, [r7, #8]
 2023 0222 1A6A     		ldr	r2, [r3, #32]
 2024 0224 BB68     		ldr	r3, [r7, #8]
 2025 0226 DB69     		ldr	r3, [r3, #28]
 2026 0228 9A42     		cmp	r2, r3
 2027 022a 7FF613AF 		bls	.L146
 2028              		.loc 2 877 0
 2029 022e FB69     		ldr	r3, [r7, #28]
 2030 0230 43F40072 		orr	r2, r3, #512
 2031 0234 BB68     		ldr	r3, [r7, #8]
 2032 0236 5A62     		str	r2, [r3, #36]
 2033              		.loc 2 878 0
 2034 0238 68E0     		b	.L117
 2035              	.L136:
 2036              		.loc 2 892 0
 2037 023a BB68     		ldr	r3, [r7, #8]
 2038 023c 9A69     		ldr	r2, [r3, #24]
 2039 023e BB68     		ldr	r3, [r7, #8]
 2040 0240 5B69     		ldr	r3, [r3, #20]
 2041 0242 03F1FF33 		add	r3, r3, #-1
 2042 0246 9A42     		cmp	r2, r3
 2043 0248 20D2     		bcs	.L131
 2044              		.loc 2 894 0
 2045 024a 07F11303 		add	r3, r7, #19
 2046 024e F868     		ldr	r0, [r7, #12]
 2047 0250 1946     		mov	r1, r3
 2048 0252 4FF00102 		mov	r2, #1
 2049 0256 40F20003 		movw	r3, #:lower16:I2C_GetByte
 2050 025a C0F20003 		movt	r3, #:upper16:I2C_GetByte
 2051 025e 9847     		blx	r3
 2052 0260 0346     		mov	r3, r0
 2053 0262 FB61     		str	r3, [r7, #28]
 2054              		.loc 2 895 0
 2055 0264 FB69     		ldr	r3, [r7, #28]
 2056 0266 502B     		cmp	r3, #80
 2057 0268 31D0     		beq	.L147
 2058              		.loc 2 896 0
 2059 026a BB68     		ldr	r3, [r7, #8]
 2060 026c 1B6A     		ldr	r3, [r3, #32]
 2061 026e 03F10102 		add	r2, r3, #1
 2062 0272 BB68     		ldr	r3, [r7, #8]
 2063 0274 1A62     		str	r2, [r3, #32]
 2064              		.loc 2 897 0
 2065 0276 BB68     		ldr	r3, [r7, #8]
 2066 0278 1A6A     		ldr	r2, [r3, #32]
 2067 027a BB68     		ldr	r3, [r7, #8]
 2068 027c DB69     		ldr	r3, [r3, #28]
 2069 027e 9A42     		cmp	r2, r3
 2070 0280 7FF6EAAE 		bls	.L148
 2071              		.loc 2 899 0
 2072 0284 BB68     		ldr	r3, [r7, #8]
 2073 0286 FA69     		ldr	r2, [r7, #28]
 2074 0288 5A62     		str	r2, [r3, #36]
 2075              		.loc 2 900 0
 2076 028a 3FE0     		b	.L117
 2077              	.L131:
 2078              		.loc 2 907 0
 2079 028c 07F11303 		add	r3, r7, #19
 2080 0290 F868     		ldr	r0, [r7, #12]
 2081 0292 1946     		mov	r1, r3
 2082 0294 4FF00002 		mov	r2, #0
 2083 0298 40F20003 		movw	r3, #:lower16:I2C_GetByte
 2084 029c C0F20003 		movt	r3, #:upper16:I2C_GetByte
 2085 02a0 9847     		blx	r3
 2086 02a2 0346     		mov	r3, r0
 2087 02a4 FB61     		str	r3, [r7, #28]
 2088              		.loc 2 908 0
 2089 02a6 FB69     		ldr	r3, [r7, #28]
 2090 02a8 582B     		cmp	r3, #88
 2091 02aa 11D0     		beq	.L134
 2092              		.loc 2 909 0
 2093 02ac BB68     		ldr	r3, [r7, #8]
 2094 02ae 1B6A     		ldr	r3, [r3, #32]
 2095 02b0 03F10102 		add	r2, r3, #1
 2096 02b4 BB68     		ldr	r3, [r7, #8]
 2097 02b6 1A62     		str	r2, [r3, #32]
 2098              		.loc 2 910 0
 2099 02b8 BB68     		ldr	r3, [r7, #8]
 2100 02ba 1A6A     		ldr	r2, [r3, #32]
 2101 02bc BB68     		ldr	r3, [r7, #8]
 2102 02be DB69     		ldr	r3, [r3, #28]
 2103 02c0 9A42     		cmp	r2, r3
 2104 02c2 7FF6CBAE 		bls	.L149
 2105              		.loc 2 912 0
 2106 02c6 BB68     		ldr	r3, [r7, #8]
 2107 02c8 FA69     		ldr	r2, [r7, #28]
 2108 02ca 5A62     		str	r2, [r3, #36]
 2109              		.loc 2 913 0
 2110 02cc 1EE0     		b	.L117
 2111              	.L147:
 2112              		.loc 2 902 0
 2113 02ce 00BF     		nop
 2114              	.L134:
 916:..//common/src/lpc17xx_i2c.c **** 						}
 917:..//common/src/lpc17xx_i2c.c **** 					}
 918:..//common/src/lpc17xx_i2c.c **** 				}
 919:..//common/src/lpc17xx_i2c.c **** 				*rxdat++ = tmp;
 2115              		.loc 2 919 0
 2116 02d0 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 2117 02d2 BB69     		ldr	r3, [r7, #24]
 2118 02d4 1A70     		strb	r2, [r3, #0]
 2119 02d6 BB69     		ldr	r3, [r7, #24]
 2120 02d8 03F10103 		add	r3, r3, #1
 2121 02dc BB61     		str	r3, [r7, #24]
 920:..//common/src/lpc17xx_i2c.c **** 				TransferCfg->rx_count++;
 2122              		.loc 2 920 0
 2123 02de BB68     		ldr	r3, [r7, #8]
 2124 02e0 9B69     		ldr	r3, [r3, #24]
 2125 02e2 03F10102 		add	r2, r3, #1
 2126 02e6 BB68     		ldr	r3, [r7, #8]
 2127 02e8 9A61     		str	r2, [r3, #24]
 2128 02ea 00E0     		b	.L130
 2129              	.L145:
 2130              		.loc 2 885 0
 2131 02ec 00BF     		nop
 2132              	.L130:
 2133 02ee BB68     		ldr	r3, [r7, #8]
 2134 02f0 9A69     		ldr	r2, [r3, #24]
 2135 02f2 BB68     		ldr	r3, [r7, #8]
 2136 02f4 5B69     		ldr	r3, [r3, #20]
 2137 02f6 9A42     		cmp	r2, r3
 2138 02f8 9FD3     		bcc	.L136
 2139              	.L127:
 921:..//common/src/lpc17xx_i2c.c **** 			}
 922:..//common/src/lpc17xx_i2c.c **** 		}
 923:..//common/src/lpc17xx_i2c.c **** 
 924:..//common/src/lpc17xx_i2c.c **** 		/* Send STOP condition ------------------------------------------------- */
 925:..//common/src/lpc17xx_i2c.c **** 		I2C_Stop(I2Cx);
 2140              		.loc 2 925 0
 2141 02fa F868     		ldr	r0, [r7, #12]
 2142 02fc 40F20003 		movw	r3, #:lower16:I2C_Stop
 2143 0300 C0F20003 		movt	r3, #:upper16:I2C_Stop
 2144 0304 9847     		blx	r3
 926:..//common/src/lpc17xx_i2c.c **** 		return SUCCESS;
 2145              		.loc 2 926 0
 2146 0306 4FF00103 		mov	r3, #1
 2147 030a 3DE0     		b	.L137
 2148              	.L117:
 927:..//common/src/lpc17xx_i2c.c **** 
 928:..//common/src/lpc17xx_i2c.c **** error:
 929:..//common/src/lpc17xx_i2c.c **** 		// Send stop condition
 930:..//common/src/lpc17xx_i2c.c **** 		I2C_Stop(I2Cx);
 2149              		.loc 2 930 0
 2150 030c F868     		ldr	r0, [r7, #12]
 2151 030e 40F20003 		movw	r3, #:lower16:I2C_Stop
 2152 0312 C0F20003 		movt	r3, #:upper16:I2C_Stop
 2153 0316 9847     		blx	r3
 931:..//common/src/lpc17xx_i2c.c **** 		return ERROR;
 2154              		.loc 2 931 0
 2155 0318 4FF00003 		mov	r3, #0
 2156 031c 34E0     		b	.L137
 2157              	.L113:
 932:..//common/src/lpc17xx_i2c.c **** 	}
 933:..//common/src/lpc17xx_i2c.c **** 
 934:..//common/src/lpc17xx_i2c.c **** 	else if (Opt == I2C_TRANSFER_INTERRUPT){
 2158              		.loc 2 934 0
 2159 031e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2160 0320 012B     		cmp	r3, #1
 2161 0322 2FD1     		bne	.L138
 935:..//common/src/lpc17xx_i2c.c **** 		// Setup tx_rx data, callback and interrupt handler
 936:..//common/src/lpc17xx_i2c.c **** 		tmp = I2C_getNum(I2Cx);
 2162              		.loc 2 936 0
 2163 0324 F868     		ldr	r0, [r7, #12]
 2164 0326 40F20003 		movw	r3, #:lower16:I2C_getNum
 2165 032a C0F20003 		movt	r3, #:upper16:I2C_getNum
 2166 032e 9847     		blx	r3
 2167 0330 0346     		mov	r3, r0
 2168 0332 DBB2     		uxtb	r3, r3
 2169 0334 FB74     		strb	r3, [r7, #19]
 937:..//common/src/lpc17xx_i2c.c **** 		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
 2170              		.loc 2 937 0
 2171 0336 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2172 0338 1A46     		mov	r2, r3
 2173 033a B968     		ldr	r1, [r7, #8]
 2174 033c 40F20003 		movw	r3, #:lower16:i2cdat
 2175 0340 C0F20003 		movt	r3, #:upper16:i2cdat
 2176 0344 43F83210 		str	r1, [r3, r2, lsl #3]
 938:..//common/src/lpc17xx_i2c.c **** 		// Set direction phase, write first
 939:..//common/src/lpc17xx_i2c.c **** 		i2cdat[tmp].dir = 0;
 2177              		.loc 2 939 0
 2178 0348 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2179 034a 40F20002 		movw	r2, #:lower16:i2cdat
 2180 034e C0F20002 		movt	r2, #:upper16:i2cdat
 2181 0352 4FEAC303 		lsl	r3, r3, #3
 2182 0356 1344     		add	r3, r3, r2
 2183 0358 4FF00002 		mov	r2, #0
 2184 035c 5A60     		str	r2, [r3, #4]
 940:..//common/src/lpc17xx_i2c.c **** 
 941:..//common/src/lpc17xx_i2c.c **** 		/* First Start condition -------------------------------------------------------------- */
 942:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 2185              		.loc 2 942 0
 2186 035e FB68     		ldr	r3, [r7, #12]
 2187 0360 4FF00802 		mov	r2, #8
 2188 0364 9A61     		str	r2, [r3, #24]
 943:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_STA;
 2189              		.loc 2 943 0
 2190 0366 FB68     		ldr	r3, [r7, #12]
 2191 0368 4FF02002 		mov	r2, #32
 2192 036c 1A60     		str	r2, [r3, #0]
 944:..//common/src/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, 1);
 2193              		.loc 2 944 0
 2194 036e F868     		ldr	r0, [r7, #12]
 2195 0370 4FF00101 		mov	r1, #1
 2196 0374 40F20003 		movw	r3, #:lower16:I2C_IntCmd
 2197 0378 C0F20003 		movt	r3, #:upper16:I2C_IntCmd
 2198 037c 9847     		blx	r3
 945:..//common/src/lpc17xx_i2c.c **** 
 946:..//common/src/lpc17xx_i2c.c **** 		return (SUCCESS);
 2199              		.loc 2 946 0
 2200 037e 4FF00103 		mov	r3, #1
 2201 0382 01E0     		b	.L137
 2202              	.L138:
 947:..//common/src/lpc17xx_i2c.c **** 	}
 948:..//common/src/lpc17xx_i2c.c **** 
 949:..//common/src/lpc17xx_i2c.c **** 	return ERROR;
 2203              		.loc 2 949 0
 2204 0384 4FF00003 		mov	r3, #0
 2205              	.L137:
 950:..//common/src/lpc17xx_i2c.c **** }
 2206              		.loc 2 950 0
 2207 0388 1846     		mov	r0, r3
 2208 038a 07F12007 		add	r7, r7, #32
 2209 038e BD46     		mov	sp, r7
 2210 0390 80BD     		pop	{r7, pc}
 2211              		.cfi_endproc
 2212              	.LFE41:
 2214 0392 00BF     		.section	.text.I2C_SlaveTransferData,"ax",%progbits
 2215              		.align	2
 2216              		.global	I2C_SlaveTransferData
 2217              		.thumb
 2218              		.thumb_func
 2220              	I2C_SlaveTransferData:
 2221              	.LFB42:
 951:..//common/src/lpc17xx_i2c.c **** 
 952:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
 953:..//common/src/lpc17xx_i2c.c ****  * @brief 		Receive and Transmit data in slave mode
 954:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx			I2C peripheral selected, should be
 955:..//common/src/lpc17xx_i2c.c ****  *    			- LPC_I2C0
 956:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 957:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 958:..//common/src/lpc17xx_i2c.c ****  * @param[in]	TransferCfg		Pointer to a I2C_S_SETUP_Type structure that
 959:..//common/src/lpc17xx_i2c.c ****  * 								contains specified information about the
 960:..//common/src/lpc17xx_i2c.c ****  * 								configuration for master transfer.
 961:..//common/src/lpc17xx_i2c.c ****  * @param[in]	Opt				I2C_TRANSFER_OPT_Type type that selected for
 962:..//common/src/lpc17xx_i2c.c ****  * 								interrupt or polling mode.
 963:..//common/src/lpc17xx_i2c.c ****  * @return 		SUCCESS or ERROR
 964:..//common/src/lpc17xx_i2c.c ****  *
 965:..//common/src/lpc17xx_i2c.c ****  * Note:
 966:..//common/src/lpc17xx_i2c.c ****  * The mode of slave's operation depends on the command sent from master on
 967:..//common/src/lpc17xx_i2c.c ****  * the I2C bus. If the master send a SLA+W command, this sub-routine will
 968:..//common/src/lpc17xx_i2c.c ****  * use receive data length and receive data pointer. If the master send a SLA+R
 969:..//common/src/lpc17xx_i2c.c ****  * command, this sub-routine will use transmit data length and transmit data
 970:..//common/src/lpc17xx_i2c.c ****  * pointer.
 971:..//common/src/lpc17xx_i2c.c ****  * If the master issue an repeat start command or a stop command, the slave will
 972:..//common/src/lpc17xx_i2c.c ****  * enable an time out condition, during time out condition, if there's no activity
 973:..//common/src/lpc17xx_i2c.c ****  * on I2C bus, the slave will exit, otherwise (i.e. the master send a SLA+R/W),
 974:..//common/src/lpc17xx_i2c.c ****  * the slave then switch to relevant operation mode. The time out should be used
 975:..//common/src/lpc17xx_i2c.c ****  * because the return status code can not show difference from stop and repeat
 976:..//common/src/lpc17xx_i2c.c ****  * start command in slave operation.
 977:..//common/src/lpc17xx_i2c.c ****  * In case of the expected data length from master is greater than data length
 978:..//common/src/lpc17xx_i2c.c ****  * that slave can support:
 979:..//common/src/lpc17xx_i2c.c ****  * - In case of reading operation (from master): slave will return I2C_I2DAT_IDLE_CHAR
 980:..//common/src/lpc17xx_i2c.c ****  * value.
 981:..//common/src/lpc17xx_i2c.c ****  * - In case of writing operation (from master): slave will ignore remain data from master.
 982:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
 983:..//common/src/lpc17xx_i2c.c **** Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
 984:..//common/src/lpc17xx_i2c.c **** 								I2C_TRANSFER_OPT_Type Opt)
 985:..//common/src/lpc17xx_i2c.c **** {
 2222              		.loc 2 985 0
 2223              		.cfi_startproc
 2224              		@ args = 0, pretend = 0, frame = 40
 2225              		@ frame_needed = 1, uses_anonymous_args = 0
 2226 0000 80B5     		push	{r7, lr}
 2227              	.LCFI45:
 2228              		.cfi_def_cfa_offset 8
 2229 0002 8AB0     		sub	sp, sp, #40
 2230              	.LCFI46:
 2231              		.cfi_def_cfa_offset 48
 2232 0004 00AF     		add	r7, sp, #0
 2233              		.cfi_offset 14, -4
 2234              		.cfi_offset 7, -8
 2235              	.LCFI47:
 2236              		.cfi_def_cfa_register 7
 2237 0006 F860     		str	r0, [r7, #12]
 2238 0008 B960     		str	r1, [r7, #8]
 2239 000a 1346     		mov	r3, r2
 2240 000c FB71     		strb	r3, [r7, #7]
 986:..//common/src/lpc17xx_i2c.c **** 	uint8_t *txdat;
 987:..//common/src/lpc17xx_i2c.c **** 	uint8_t *rxdat;
 988:..//common/src/lpc17xx_i2c.c **** 	uint32_t CodeStatus;
 989:..//common/src/lpc17xx_i2c.c **** 	uint32_t timeout;
 990:..//common/src/lpc17xx_i2c.c **** 	int32_t time_en;
 991:..//common/src/lpc17xx_i2c.c **** 	int32_t tmp;
 992:..//common/src/lpc17xx_i2c.c **** 
 993:..//common/src/lpc17xx_i2c.c **** 	// reset all default state
 994:..//common/src/lpc17xx_i2c.c **** 	txdat = (uint8_t *) TransferCfg->tx_data;
 2241              		.loc 2 994 0
 2242 000e BB68     		ldr	r3, [r7, #8]
 2243 0010 1B68     		ldr	r3, [r3, #0]
 2244 0012 3B61     		str	r3, [r7, #16]
 995:..//common/src/lpc17xx_i2c.c **** 	rxdat = (uint8_t *) TransferCfg->rx_data;
 2245              		.loc 2 995 0
 2246 0014 BB68     		ldr	r3, [r7, #8]
 2247 0016 DB68     		ldr	r3, [r3, #12]
 2248 0018 7B61     		str	r3, [r7, #20]
 996:..//common/src/lpc17xx_i2c.c **** 	// Reset I2C setup value to default state
 997:..//common/src/lpc17xx_i2c.c **** 	TransferCfg->tx_count = 0;
 2249              		.loc 2 997 0
 2250 001a BB68     		ldr	r3, [r7, #8]
 2251 001c 4FF00002 		mov	r2, #0
 2252 0020 9A60     		str	r2, [r3, #8]
 998:..//common/src/lpc17xx_i2c.c **** 	TransferCfg->rx_count = 0;
 2253              		.loc 2 998 0
 2254 0022 BB68     		ldr	r3, [r7, #8]
 2255 0024 4FF00002 		mov	r2, #0
 2256 0028 5A61     		str	r2, [r3, #20]
 999:..//common/src/lpc17xx_i2c.c **** 	TransferCfg->status = 0;
 2257              		.loc 2 999 0
 2258 002a BB68     		ldr	r3, [r7, #8]
 2259 002c 4FF00002 		mov	r2, #0
 2260 0030 9A61     		str	r2, [r3, #24]
1000:..//common/src/lpc17xx_i2c.c **** 
1001:..//common/src/lpc17xx_i2c.c **** 
1002:..//common/src/lpc17xx_i2c.c **** 	// Polling option
1003:..//common/src/lpc17xx_i2c.c **** 	if (Opt == I2C_TRANSFER_POLLING){
 2261              		.loc 2 1003 0
 2262 0032 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2263 0034 002B     		cmp	r3, #0
 2264 0036 40F0E580 		bne	.L151
1004:..//common/src/lpc17xx_i2c.c **** 
1005:..//common/src/lpc17xx_i2c.c **** 		/* Set AA bit to ACK command on I2C bus */
1006:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 2265              		.loc 2 1006 0
 2266 003a FB68     		ldr	r3, [r7, #12]
 2267 003c 4FF00402 		mov	r2, #4
 2268 0040 1A60     		str	r2, [r3, #0]
1007:..//common/src/lpc17xx_i2c.c **** 		/* Clear SI bit to be ready ... */
1008:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
 2269              		.loc 2 1008 0
 2270 0042 FB68     		ldr	r3, [r7, #12]
 2271 0044 4FF02802 		mov	r2, #40
 2272 0048 9A61     		str	r2, [r3, #24]
1009:..//common/src/lpc17xx_i2c.c **** 
1010:..//common/src/lpc17xx_i2c.c **** 		time_en = 0;
 2273              		.loc 2 1010 0
 2274 004a 4FF00003 		mov	r3, #0
 2275 004e 3B62     		str	r3, [r7, #32]
1011:..//common/src/lpc17xx_i2c.c **** 		timeout = 0;
 2276              		.loc 2 1011 0
 2277 0050 4FF00003 		mov	r3, #0
 2278 0054 FB61     		str	r3, [r7, #28]
 2279 0056 02E0     		b	.L170
 2280              	.L174:
1012:..//common/src/lpc17xx_i2c.c **** 
1013:..//common/src/lpc17xx_i2c.c **** 		while (1)
1014:..//common/src/lpc17xx_i2c.c **** 		{
1015:..//common/src/lpc17xx_i2c.c **** 			/* Check SI flag ready */
1016:..//common/src/lpc17xx_i2c.c **** 			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
1017:..//common/src/lpc17xx_i2c.c **** 			{
1018:..//common/src/lpc17xx_i2c.c **** 				time_en = 0;
1019:..//common/src/lpc17xx_i2c.c **** 
1020:..//common/src/lpc17xx_i2c.c **** 				switch (CodeStatus = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK))
1021:..//common/src/lpc17xx_i2c.c **** 				{
1022:..//common/src/lpc17xx_i2c.c **** 
1023:..//common/src/lpc17xx_i2c.c **** 				/* No status information */
1024:..//common/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_NO_INF:
1025:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1026:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1027:..//common/src/lpc17xx_i2c.c **** 					break;
1028:..//common/src/lpc17xx_i2c.c **** 
1029:..//common/src/lpc17xx_i2c.c **** 				/* Reading phase -------------------------------------------------------- */
1030:..//common/src/lpc17xx_i2c.c **** 				/* Own SLA+R has been received, ACK has been returned */
1031:..//common/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_SLAW_ACK:
1032:..//common/src/lpc17xx_i2c.c **** 				/* General call address has been received, ACK has been returned */
1033:..//common/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_GENCALL_ACK:
1034:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1035:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1036:..//common/src/lpc17xx_i2c.c **** 					break;
1037:..//common/src/lpc17xx_i2c.c **** 
1038:..//common/src/lpc17xx_i2c.c **** 				/* Previously addressed with own SLA;
1039:..//common/src/lpc17xx_i2c.c **** 				 * DATA byte has been received;
1040:..//common/src/lpc17xx_i2c.c **** 				 * ACK has been returned */
1041:..//common/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_SLA_DAT_ACK:
1042:..//common/src/lpc17xx_i2c.c **** 				/* DATA has been received, ACK hasn been return */
1043:..//common/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
1044:..//common/src/lpc17xx_i2c.c **** 					/*
1045:..//common/src/lpc17xx_i2c.c **** 					 * All data bytes that over-flow the specified receive
1046:..//common/src/lpc17xx_i2c.c **** 					 * data length, just ignore them.
1047:..//common/src/lpc17xx_i2c.c **** 					 */
1048:..//common/src/lpc17xx_i2c.c **** 					if ((TransferCfg->rx_count < TransferCfg->rx_length) \
1049:..//common/src/lpc17xx_i2c.c **** 							&& (TransferCfg->rx_data != NULL)){
1050:..//common/src/lpc17xx_i2c.c **** 						*rxdat++ = (uint8_t)I2Cx->I2DAT;
1051:..//common/src/lpc17xx_i2c.c **** 						TransferCfg->rx_count++;
1052:..//common/src/lpc17xx_i2c.c **** 					}
1053:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1054:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1055:..//common/src/lpc17xx_i2c.c **** 					break;
1056:..//common/src/lpc17xx_i2c.c **** 
1057:..//common/src/lpc17xx_i2c.c **** 				/* Previously addressed with own SLA;
1058:..//common/src/lpc17xx_i2c.c **** 				 * DATA byte has been received;
1059:..//common/src/lpc17xx_i2c.c **** 				 * NOT ACK has been returned */
1060:..//common/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_SLA_DAT_NACK:
1061:..//common/src/lpc17xx_i2c.c **** 				/* DATA has been received, NOT ACK has been returned */
1062:..//common/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_NACK:
1063:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1064:..//common/src/lpc17xx_i2c.c **** 					break;
1065:..//common/src/lpc17xx_i2c.c **** 
1066:..//common/src/lpc17xx_i2c.c **** 				/*
1067:..//common/src/lpc17xx_i2c.c **** 				 * Note that: Return code only let us know a stop condition mixed
1068:..//common/src/lpc17xx_i2c.c **** 				 * with a repeat start condition in the same code value.
1069:..//common/src/lpc17xx_i2c.c **** 				 * So we should provide a time-out. In case this is really a stop
1070:..//common/src/lpc17xx_i2c.c **** 				 * condition, this will return back after time out condition. Otherwise,
1071:..//common/src/lpc17xx_i2c.c **** 				 * next session that is slave receive data will be completed.
1072:..//common/src/lpc17xx_i2c.c **** 				 */
1073:..//common/src/lpc17xx_i2c.c **** 
1074:..//common/src/lpc17xx_i2c.c **** 				/* A Stop or a repeat start condition */
1075:..//common/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
1076:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1077:..//common/src/lpc17xx_i2c.c **** 					// enable time out
1078:..//common/src/lpc17xx_i2c.c **** 					time_en = 1;
1079:..//common/src/lpc17xx_i2c.c **** 					timeout = 0;
1080:..//common/src/lpc17xx_i2c.c **** 					break;
1081:..//common/src/lpc17xx_i2c.c **** 
1082:..//common/src/lpc17xx_i2c.c **** 				/* Writing phase -------------------------------------------------------- */
1083:..//common/src/lpc17xx_i2c.c **** 				/* Own SLA+R has been received, ACK has been returned */
1084:..//common/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_TX_SLAR_ACK:
1085:..//common/src/lpc17xx_i2c.c **** 				/* Data has been transmitted, ACK has been received */
1086:..//common/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_TX_DAT_ACK:
1087:..//common/src/lpc17xx_i2c.c **** 					/*
1088:..//common/src/lpc17xx_i2c.c **** 					 * All data bytes that over-flow the specified receive
1089:..//common/src/lpc17xx_i2c.c **** 					 * data length, just ignore them.
1090:..//common/src/lpc17xx_i2c.c **** 					 */
1091:..//common/src/lpc17xx_i2c.c **** 					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
1092:..//common/src/lpc17xx_i2c.c **** 							&& (TransferCfg->tx_data != NULL)){
1093:..//common/src/lpc17xx_i2c.c **** 						I2Cx->I2DAT = *txdat++;
1094:..//common/src/lpc17xx_i2c.c **** 						TransferCfg->tx_count++;
1095:..//common/src/lpc17xx_i2c.c **** 					}
1096:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1097:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1098:..//common/src/lpc17xx_i2c.c **** 					break;
1099:..//common/src/lpc17xx_i2c.c **** 
1100:..//common/src/lpc17xx_i2c.c **** 				/* Data has been transmitted, NACK has been received,
1101:..//common/src/lpc17xx_i2c.c **** 				 * that means there's no more data to send, exit now */
1102:..//common/src/lpc17xx_i2c.c **** 				/*
1103:..//common/src/lpc17xx_i2c.c **** 				 * Note: Don't wait for stop event since in slave transmit mode,
1104:..//common/src/lpc17xx_i2c.c **** 				 * since there no proof lets us know when a stop signal has been received
1105:..//common/src/lpc17xx_i2c.c **** 				 * on slave side.
1106:..//common/src/lpc17xx_i2c.c **** 				 */
1107:..//common/src/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_TX_DAT_NACK:
1108:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1109:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1110:..//common/src/lpc17xx_i2c.c **** 					// enable time out
1111:..//common/src/lpc17xx_i2c.c **** 					time_en = 1;
1112:..//common/src/lpc17xx_i2c.c **** 					timeout = 0;
1113:..//common/src/lpc17xx_i2c.c **** 					break;
1114:..//common/src/lpc17xx_i2c.c **** 
1115:..//common/src/lpc17xx_i2c.c **** 				// Other status must be captured
1116:..//common/src/lpc17xx_i2c.c **** 				default:
1117:..//common/src/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1118:..//common/src/lpc17xx_i2c.c **** 					goto s_error;
1119:..//common/src/lpc17xx_i2c.c **** 				}
1120:..//common/src/lpc17xx_i2c.c **** 			} else if (time_en){
1121:..//common/src/lpc17xx_i2c.c **** 				if (timeout++ > I2C_SLAVE_TIME_OUT){
1122:..//common/src/lpc17xx_i2c.c **** 					// it's really a stop condition, goto end stage
1123:..//common/src/lpc17xx_i2c.c **** 					goto s_end_stage;
1124:..//common/src/lpc17xx_i2c.c **** 				}
1125:..//common/src/lpc17xx_i2c.c **** 			}
1126:..//common/src/lpc17xx_i2c.c **** 		}
 2281              		.loc 2 1126 0
 2282 0058 00BF     		nop
 2283 005a 00E0     		b	.L170
 2284              	.L175:
 2285 005c 00BF     		nop
 2286              	.L170:
 2287              		.loc 2 1016 0
 2288 005e FB68     		ldr	r3, [r7, #12]
 2289 0060 1B68     		ldr	r3, [r3, #0]
 2290 0062 03F00803 		and	r3, r3, #8
 2291 0066 002B     		cmp	r3, #0
 2292 0068 00F0AD80 		beq	.L152
 2293              		.loc 2 1018 0
 2294 006c 4FF00003 		mov	r3, #0
 2295 0070 3B62     		str	r3, [r7, #32]
 2296              		.loc 2 1020 0
 2297 0072 FB68     		ldr	r3, [r7, #12]
 2298 0074 5B68     		ldr	r3, [r3, #4]
 2299 0076 03F0F803 		and	r3, r3, #248
 2300 007a BB61     		str	r3, [r7, #24]
 2301 007c BB69     		ldr	r3, [r7, #24]
 2302 007e 982B     		cmp	r3, #152
 2303 0080 50D0     		beq	.L156
 2304 0082 982B     		cmp	r3, #152
 2305 0084 0DD8     		bhi	.L161
 2306 0086 802B     		cmp	r3, #128
 2307 0088 2AD0     		beq	.L155
 2308 008a 802B     		cmp	r3, #128
 2309 008c 04D8     		bhi	.L162
 2310 008e 602B     		cmp	r3, #96
 2311 0090 1DD0     		beq	.L154
 2312 0092 702B     		cmp	r3, #112
 2313 0094 1BD0     		beq	.L154
 2314 0096 86E0     		b	.L153
 2315              	.L162:
 2316 0098 882B     		cmp	r3, #136
 2317 009a 43D0     		beq	.L156
 2318 009c 902B     		cmp	r3, #144
 2319 009e 1FD0     		beq	.L155
 2320 00a0 81E0     		b	.L153
 2321              	.L161:
 2322 00a2 B82B     		cmp	r3, #184
 2323 00a4 4ED0     		beq	.L158
 2324 00a6 B82B     		cmp	r3, #184
 2325 00a8 04D8     		bhi	.L163
 2326 00aa A02B     		cmp	r3, #160
 2327 00ac 3FD0     		beq	.L157
 2328 00ae A82B     		cmp	r3, #168
 2329 00b0 48D0     		beq	.L158
 2330 00b2 78E0     		b	.L153
 2331              	.L163:
 2332 00b4 C02B     		cmp	r3, #192
 2333 00b6 67D0     		beq	.L159
 2334 00b8 F82B     		cmp	r3, #248
 2335 00ba 74D1     		bne	.L153
 2336              	.L160:
 2337              		.loc 2 1025 0
 2338 00bc FB68     		ldr	r3, [r7, #12]
 2339 00be 4FF00402 		mov	r2, #4
 2340 00c2 1A60     		str	r2, [r3, #0]
 2341              		.loc 2 1026 0
 2342 00c4 FB68     		ldr	r3, [r7, #12]
 2343 00c6 4FF00802 		mov	r2, #8
 2344 00ca 9A61     		str	r2, [r3, #24]
 2345              		.loc 2 1027 0
 2346 00cc 7AE0     		b	.L164
 2347              	.L154:
 2348              		.loc 2 1034 0
 2349 00ce FB68     		ldr	r3, [r7, #12]
 2350 00d0 4FF00402 		mov	r2, #4
 2351 00d4 1A60     		str	r2, [r3, #0]
 2352              		.loc 2 1035 0
 2353 00d6 FB68     		ldr	r3, [r7, #12]
 2354 00d8 4FF00802 		mov	r2, #8
 2355 00dc 9A61     		str	r2, [r3, #24]
 2356              		.loc 2 1036 0
 2357 00de 71E0     		b	.L164
 2358              	.L155:
 2359              		.loc 2 1048 0
 2360 00e0 BB68     		ldr	r3, [r7, #8]
 2361 00e2 5A69     		ldr	r2, [r3, #20]
 2362 00e4 BB68     		ldr	r3, [r7, #8]
 2363 00e6 1B69     		ldr	r3, [r3, #16]
 2364 00e8 9A42     		cmp	r2, r3
 2365 00ea 12D2     		bcs	.L165
 2366              		.loc 2 1049 0
 2367 00ec BB68     		ldr	r3, [r7, #8]
 2368 00ee DB68     		ldr	r3, [r3, #12]
 2369              		.loc 2 1048 0
 2370 00f0 002B     		cmp	r3, #0
 2371 00f2 0ED0     		beq	.L165
 2372              		.loc 2 1050 0
 2373 00f4 FB68     		ldr	r3, [r7, #12]
 2374 00f6 9B68     		ldr	r3, [r3, #8]
 2375 00f8 DAB2     		uxtb	r2, r3
 2376 00fa 7B69     		ldr	r3, [r7, #20]
 2377 00fc 1A70     		strb	r2, [r3, #0]
 2378 00fe 7B69     		ldr	r3, [r7, #20]
 2379 0100 03F10103 		add	r3, r3, #1
 2380 0104 7B61     		str	r3, [r7, #20]
 2381              		.loc 2 1051 0
 2382 0106 BB68     		ldr	r3, [r7, #8]
 2383 0108 5B69     		ldr	r3, [r3, #20]
 2384 010a 03F10102 		add	r2, r3, #1
 2385 010e BB68     		ldr	r3, [r7, #8]
 2386 0110 5A61     		str	r2, [r3, #20]
 2387              	.L165:
 2388              		.loc 2 1053 0
 2389 0112 FB68     		ldr	r3, [r7, #12]
 2390 0114 4FF00402 		mov	r2, #4
 2391 0118 1A60     		str	r2, [r3, #0]
 2392              		.loc 2 1054 0
 2393 011a FB68     		ldr	r3, [r7, #12]
 2394 011c 4FF00802 		mov	r2, #8
 2395 0120 9A61     		str	r2, [r3, #24]
 2396              		.loc 2 1055 0
 2397 0122 4FE0     		b	.L164
 2398              	.L156:
 2399              		.loc 2 1063 0
 2400 0124 FB68     		ldr	r3, [r7, #12]
 2401 0126 4FF00802 		mov	r2, #8
 2402 012a 9A61     		str	r2, [r3, #24]
 2403              		.loc 2 1064 0
 2404 012c 4AE0     		b	.L164
 2405              	.L157:
 2406              		.loc 2 1076 0
 2407 012e FB68     		ldr	r3, [r7, #12]
 2408 0130 4FF00802 		mov	r2, #8
 2409 0134 9A61     		str	r2, [r3, #24]
 2410              		.loc 2 1078 0
 2411 0136 4FF00103 		mov	r3, #1
 2412 013a 3B62     		str	r3, [r7, #32]
 2413              		.loc 2 1079 0
 2414 013c 4FF00003 		mov	r3, #0
 2415 0140 FB61     		str	r3, [r7, #28]
 2416              		.loc 2 1080 0
 2417 0142 3FE0     		b	.L164
 2418              	.L158:
 2419              		.loc 2 1091 0
 2420 0144 BB68     		ldr	r3, [r7, #8]
 2421 0146 9A68     		ldr	r2, [r3, #8]
 2422 0148 BB68     		ldr	r3, [r7, #8]
 2423 014a 5B68     		ldr	r3, [r3, #4]
 2424 014c 9A42     		cmp	r2, r3
 2425 014e 12D2     		bcs	.L166
 2426              		.loc 2 1092 0
 2427 0150 BB68     		ldr	r3, [r7, #8]
 2428 0152 1B68     		ldr	r3, [r3, #0]
 2429              		.loc 2 1091 0
 2430 0154 002B     		cmp	r3, #0
 2431 0156 0ED0     		beq	.L166
 2432              		.loc 2 1093 0
 2433 0158 3B69     		ldr	r3, [r7, #16]
 2434 015a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2435 015c 1A46     		mov	r2, r3
 2436 015e FB68     		ldr	r3, [r7, #12]
 2437 0160 9A60     		str	r2, [r3, #8]
 2438 0162 3B69     		ldr	r3, [r7, #16]
 2439 0164 03F10103 		add	r3, r3, #1
 2440 0168 3B61     		str	r3, [r7, #16]
 2441              		.loc 2 1094 0
 2442 016a BB68     		ldr	r3, [r7, #8]
 2443 016c 9B68     		ldr	r3, [r3, #8]
 2444 016e 03F10102 		add	r2, r3, #1
 2445 0172 BB68     		ldr	r3, [r7, #8]
 2446 0174 9A60     		str	r2, [r3, #8]
 2447              	.L166:
 2448              		.loc 2 1096 0
 2449 0176 FB68     		ldr	r3, [r7, #12]
 2450 0178 4FF00402 		mov	r2, #4
 2451 017c 1A60     		str	r2, [r3, #0]
 2452              		.loc 2 1097 0
 2453 017e FB68     		ldr	r3, [r7, #12]
 2454 0180 4FF00802 		mov	r2, #8
 2455 0184 9A61     		str	r2, [r3, #24]
 2456              		.loc 2 1098 0
 2457 0186 1DE0     		b	.L164
 2458              	.L159:
 2459              		.loc 2 1108 0
 2460 0188 FB68     		ldr	r3, [r7, #12]
 2461 018a 4FF00402 		mov	r2, #4
 2462 018e 1A60     		str	r2, [r3, #0]
 2463              		.loc 2 1109 0
 2464 0190 FB68     		ldr	r3, [r7, #12]
 2465 0192 4FF00802 		mov	r2, #8
 2466 0196 9A61     		str	r2, [r3, #24]
 2467              		.loc 2 1111 0
 2468 0198 4FF00103 		mov	r3, #1
 2469 019c 3B62     		str	r3, [r7, #32]
 2470              		.loc 2 1112 0
 2471 019e 4FF00003 		mov	r3, #0
 2472 01a2 FB61     		str	r3, [r7, #28]
 2473              		.loc 2 1113 0
 2474 01a4 0EE0     		b	.L164
 2475              	.L153:
 2476              		.loc 2 1117 0
 2477 01a6 FB68     		ldr	r3, [r7, #12]
 2478 01a8 4FF00802 		mov	r2, #8
 2479 01ac 9A61     		str	r2, [r3, #24]
 2480              		.loc 2 1118 0
 2481 01ae 00BF     		nop
 2482              	.L167:
1127:..//common/src/lpc17xx_i2c.c **** 
1128:..//common/src/lpc17xx_i2c.c **** s_end_stage:
1129:..//common/src/lpc17xx_i2c.c **** 		/* Clear AA bit to disable ACK on I2C bus */
1130:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
1131:..//common/src/lpc17xx_i2c.c **** 		// Check if there's no error during operation
1132:..//common/src/lpc17xx_i2c.c **** 		// Update status
1133:..//common/src/lpc17xx_i2c.c **** 		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
1134:..//common/src/lpc17xx_i2c.c **** 		return SUCCESS;
1135:..//common/src/lpc17xx_i2c.c **** 
1136:..//common/src/lpc17xx_i2c.c **** s_error:
1137:..//common/src/lpc17xx_i2c.c **** 		/* Clear AA bit to disable ACK on I2C bus */
1138:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
 2483              		.loc 2 1138 0
 2484 01b0 FB68     		ldr	r3, [r7, #12]
 2485 01b2 4FF00402 		mov	r2, #4
 2486 01b6 9A61     		str	r2, [r3, #24]
1139:..//common/src/lpc17xx_i2c.c **** 		// Update status
1140:..//common/src/lpc17xx_i2c.c **** 		TransferCfg->status = CodeStatus;
 2487              		.loc 2 1140 0
 2488 01b8 BB68     		ldr	r3, [r7, #8]
 2489 01ba BA69     		ldr	r2, [r7, #24]
 2490 01bc 9A61     		str	r2, [r3, #24]
1141:..//common/src/lpc17xx_i2c.c **** 		return ERROR;
 2491              		.loc 2 1141 0
 2492 01be 4FF00003 		mov	r3, #0
 2493 01c2 52E0     		b	.L171
 2494              	.L164:
 2495              		.loc 2 1126 0
 2496 01c4 4BE7     		b	.L170
 2497              	.L152:
 2498              		.loc 2 1120 0
 2499 01c6 3B6A     		ldr	r3, [r7, #32]
 2500 01c8 002B     		cmp	r3, #0
 2501 01ca 3FF445AF 		beq	.L174
 2502              		.loc 2 1121 0
 2503 01ce FB69     		ldr	r3, [r7, #28]
 2504 01d0 B3F5803F 		cmp	r3, #65536
 2505 01d4 94BF     		ite	ls
 2506 01d6 0023     		movls	r3, #0
 2507 01d8 0123     		movhi	r3, #1
 2508 01da DBB2     		uxtb	r3, r3
 2509 01dc FA69     		ldr	r2, [r7, #28]
 2510 01de 02F10102 		add	r2, r2, #1
 2511 01e2 FA61     		str	r2, [r7, #28]
 2512 01e4 002B     		cmp	r3, #0
 2513 01e6 3FF439AF 		beq	.L175
 2514              		.loc 2 1123 0
 2515 01ea 00BF     		nop
 2516              	.L169:
 2517              		.loc 2 1130 0
 2518 01ec FB68     		ldr	r3, [r7, #12]
 2519 01ee 4FF00402 		mov	r2, #4
 2520 01f2 9A61     		str	r2, [r3, #24]
 2521              		.loc 2 1133 0
 2522 01f4 BB69     		ldr	r3, [r7, #24]
 2523 01f6 43F48062 		orr	r2, r3, #1024
 2524 01fa BB68     		ldr	r3, [r7, #8]
 2525 01fc 9A61     		str	r2, [r3, #24]
 2526              		.loc 2 1134 0
 2527 01fe 4FF00103 		mov	r3, #1
 2528 0202 32E0     		b	.L171
 2529              	.L151:
1142:..//common/src/lpc17xx_i2c.c **** 	}
1143:..//common/src/lpc17xx_i2c.c **** 
1144:..//common/src/lpc17xx_i2c.c **** 	else if (Opt == I2C_TRANSFER_INTERRUPT){
 2530              		.loc 2 1144 0
 2531 0204 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2532 0206 012B     		cmp	r3, #1
 2533 0208 2DD1     		bne	.L172
1145:..//common/src/lpc17xx_i2c.c **** 		// Setup tx_rx data, callback and interrupt handler
1146:..//common/src/lpc17xx_i2c.c **** 		tmp = I2C_getNum(I2Cx);
 2534              		.loc 2 1146 0
 2535 020a F868     		ldr	r0, [r7, #12]
 2536 020c 40F20003 		movw	r3, #:lower16:I2C_getNum
 2537 0210 C0F20003 		movt	r3, #:upper16:I2C_getNum
 2538 0214 9847     		blx	r3
 2539 0216 0346     		mov	r3, r0
 2540 0218 7B62     		str	r3, [r7, #36]
1147:..//common/src/lpc17xx_i2c.c **** 		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
 2541              		.loc 2 1147 0
 2542 021a 7A6A     		ldr	r2, [r7, #36]
 2543 021c B968     		ldr	r1, [r7, #8]
 2544 021e 40F20003 		movw	r3, #:lower16:i2cdat
 2545 0222 C0F20003 		movt	r3, #:upper16:i2cdat
 2546 0226 43F83210 		str	r1, [r3, r2, lsl #3]
1148:..//common/src/lpc17xx_i2c.c **** 		// Set direction phase, read first
1149:..//common/src/lpc17xx_i2c.c **** 		i2cdat[tmp].dir = 1;
 2547              		.loc 2 1149 0
 2548 022a 7B6A     		ldr	r3, [r7, #36]
 2549 022c 40F20002 		movw	r2, #:lower16:i2cdat
 2550 0230 C0F20002 		movt	r2, #:upper16:i2cdat
 2551 0234 4FEAC303 		lsl	r3, r3, #3
 2552 0238 1344     		add	r3, r3, r2
 2553 023a 4FF00102 		mov	r2, #1
 2554 023e 5A60     		str	r2, [r3, #4]
1150:..//common/src/lpc17xx_i2c.c **** 
1151:..//common/src/lpc17xx_i2c.c **** 		// Enable AA
1152:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 2555              		.loc 2 1152 0
 2556 0240 FB68     		ldr	r3, [r7, #12]
 2557 0242 4FF00402 		mov	r2, #4
 2558 0246 1A60     		str	r2, [r3, #0]
1153:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 2559              		.loc 2 1153 0
 2560 0248 FB68     		ldr	r3, [r7, #12]
 2561 024a 4FF02802 		mov	r2, #40
 2562 024e 9A61     		str	r2, [r3, #24]
1154:..//common/src/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, 1);
 2563              		.loc 2 1154 0
 2564 0250 F868     		ldr	r0, [r7, #12]
 2565 0252 4FF00101 		mov	r1, #1
 2566 0256 40F20003 		movw	r3, #:lower16:I2C_IntCmd
 2567 025a C0F20003 		movt	r3, #:upper16:I2C_IntCmd
 2568 025e 9847     		blx	r3
1155:..//common/src/lpc17xx_i2c.c **** 
1156:..//common/src/lpc17xx_i2c.c **** 		return (SUCCESS);
 2569              		.loc 2 1156 0
 2570 0260 4FF00103 		mov	r3, #1
 2571 0264 01E0     		b	.L171
 2572              	.L172:
1157:..//common/src/lpc17xx_i2c.c **** 	}
1158:..//common/src/lpc17xx_i2c.c **** 
1159:..//common/src/lpc17xx_i2c.c **** 	return ERROR;
 2573              		.loc 2 1159 0
 2574 0266 4FF00003 		mov	r3, #0
 2575              	.L171:
1160:..//common/src/lpc17xx_i2c.c **** }
 2576              		.loc 2 1160 0
 2577 026a 1846     		mov	r0, r3
 2578 026c 07F12807 		add	r7, r7, #40
 2579 0270 BD46     		mov	sp, r7
 2580 0272 80BD     		pop	{r7, pc}
 2581              		.cfi_endproc
 2582              	.LFE42:
 2584              		.section	.rodata
 2585              		.align	2
 2586              	.LC0:
 2587 0000 2E2E2F2F 		.ascii	"..//common/src/lpc17xx_i2c.c\000"
 2587      636F6D6D 
 2587      6F6E2F73 
 2587      72632F6C 
 2587      70633137 
 2588 001d 000000   		.section	.text.I2C_SetOwnSlaveAddr,"ax",%progbits
 2589              		.align	2
 2590              		.global	I2C_SetOwnSlaveAddr
 2591              		.thumb
 2592              		.thumb_func
 2594              	I2C_SetOwnSlaveAddr:
 2595              	.LFB43:
1161:..//common/src/lpc17xx_i2c.c **** 
1162:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
1163:..//common/src/lpc17xx_i2c.c ****  * @brief		Set Own slave address in I2C peripheral corresponding to
1164:..//common/src/lpc17xx_i2c.c ****  * 				parameter specified in OwnSlaveAddrConfigStruct.
1165:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1166:..//common/src/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1167:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1168:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1169:..//common/src/lpc17xx_i2c.c ****  * @param[in]	OwnSlaveAddrConfigStruct	Pointer to a I2C_OWNSLAVEADDR_CFG_Type
1170:..//common/src/lpc17xx_i2c.c ****  * 				structure that contains the configuration information for the
1171:..//common/src/lpc17xx_i2c.c **** *               specified I2C slave address.
1172:..//common/src/lpc17xx_i2c.c ****  * @return 		None
1173:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
1174:..//common/src/lpc17xx_i2c.c **** void I2C_SetOwnSlaveAddr(LPC_I2C_TypeDef *I2Cx, I2C_OWNSLAVEADDR_CFG_Type *OwnSlaveAddrConfigStruct
1175:..//common/src/lpc17xx_i2c.c **** {
 2596              		.loc 2 1175 0
 2597              		.cfi_startproc
 2598              		@ args = 0, pretend = 0, frame = 16
 2599              		@ frame_needed = 1, uses_anonymous_args = 0
 2600 0000 80B5     		push	{r7, lr}
 2601              	.LCFI48:
 2602              		.cfi_def_cfa_offset 8
 2603 0002 84B0     		sub	sp, sp, #16
 2604              	.LCFI49:
 2605              		.cfi_def_cfa_offset 24
 2606 0004 00AF     		add	r7, sp, #0
 2607              		.cfi_offset 14, -4
 2608              		.cfi_offset 7, -8
 2609              	.LCFI50:
 2610              		.cfi_def_cfa_register 7
 2611 0006 7860     		str	r0, [r7, #4]
 2612 0008 3960     		str	r1, [r7, #0]
1176:..//common/src/lpc17xx_i2c.c **** 	uint32_t tmp;
1177:..//common/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 2613              		.loc 2 1177 0
 2614 000a 7A68     		ldr	r2, [r7, #4]
 2615 000c 4CF20003 		movw	r3, #:lower16:1073856512
 2616 0010 C4F20103 		movt	r3, #:upper16:1073856512
 2617 0014 9A42     		cmp	r2, r3
 2618 0016 18D0     		beq	.L177
 2619 0018 7A68     		ldr	r2, [r7, #4]
 2620 001a 4CF20003 		movw	r3, #:lower16:1074118656
 2621 001e C4F20503 		movt	r3, #:upper16:1074118656
 2622 0022 9A42     		cmp	r2, r3
 2623 0024 11D0     		beq	.L177
 2624 0026 7A68     		ldr	r2, [r7, #4]
 2625 0028 40F20003 		movw	r3, #:lower16:1074397184
 2626 002c C4F20A03 		movt	r3, #:upper16:1074397184
 2627 0030 9A42     		cmp	r2, r3
 2628 0032 0AD0     		beq	.L177
 2629 0034 40F20000 		movw	r0, #:lower16:.LC0
 2630 0038 C0F20000 		movt	r0, #:upper16:.LC0
 2631 003c 40F29941 		movw	r1, #1177
 2632 0040 40F20003 		movw	r3, #:lower16:check_failed
 2633 0044 C0F20003 		movt	r3, #:upper16:check_failed
 2634 0048 9847     		blx	r3
 2635              	.L177:
1178:..//common/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
 2636              		.loc 2 1178 0
 2637 004a 3B68     		ldr	r3, [r7, #0]
 2638 004c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2639 004e 032B     		cmp	r3, #3
 2640 0050 0AD9     		bls	.L178
 2641 0052 40F20000 		movw	r0, #:lower16:.LC0
 2642 0056 C0F20000 		movt	r0, #:upper16:.LC0
 2643 005a 40F29A41 		movw	r1, #1178
 2644 005e 40F20003 		movw	r3, #:lower16:check_failed
 2645 0062 C0F20003 		movt	r3, #:upper16:check_failed
 2646 0066 9847     		blx	r3
 2647              	.L178:
1179:..//common/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));
 2648              		.loc 2 1179 0
 2649 0068 3B68     		ldr	r3, [r7, #0]
 2650 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2651 006c 002B     		cmp	r3, #0
 2652 006e 0ED0     		beq	.L179
 2653 0070 3B68     		ldr	r3, [r7, #0]
 2654 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2655 0074 012B     		cmp	r3, #1
 2656 0076 0AD0     		beq	.L179
 2657 0078 40F20000 		movw	r0, #:lower16:.LC0
 2658 007c C0F20000 		movt	r0, #:upper16:.LC0
 2659 0080 40F29B41 		movw	r1, #1179
 2660 0084 40F20003 		movw	r3, #:lower16:check_failed
 2661 0088 C0F20003 		movt	r3, #:upper16:check_failed
 2662 008c 9847     		blx	r3
 2663              	.L179:
1180:..//common/src/lpc17xx_i2c.c **** 
1181:..//common/src/lpc17xx_i2c.c **** 	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
 2664              		.loc 2 1181 0
 2665 008e 3B68     		ldr	r3, [r7, #0]
 2666 0090 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2667 0092 4FEA4303 		lsl	r3, r3, #1
 2668 0096 1A46     		mov	r2, r3
1182:..//common/src/lpc17xx_i2c.c **** 			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
 2669              		.loc 2 1182 0
 2670 0098 3B68     		ldr	r3, [r7, #0]
 2671 009a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2672 009c 012B     		cmp	r3, #1
 2673 009e 14BF     		ite	ne
 2674 00a0 0023     		movne	r3, #0
 2675 00a2 0123     		moveq	r3, #1
 2676              		.loc 2 1181 0
 2677 00a4 42EA0303 		orr	r3, r2, r3
 2678 00a8 03F0FF03 		and	r3, r3, #255
 2679 00ac FB60     		str	r3, [r7, #12]
1183:..//common/src/lpc17xx_i2c.c **** 	switch (OwnSlaveAddrConfigStruct->SlaveAddrChannel)
 2680              		.loc 2 1183 0
 2681 00ae 3B68     		ldr	r3, [r7, #0]
 2682 00b0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2683 00b2 032B     		cmp	r3, #3
 2684 00b4 31D8     		bhi	.L186
 2685 00b6 01A2     		adr	r2, .L185
 2686 00b8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2687              		.align	2
 2688              	.L185:
 2689 00bc CD000000 		.word	.L181+1
 2690 00c0 E1000000 		.word	.L182+1
 2691 00c4 F5000000 		.word	.L183+1
 2692 00c8 09010000 		.word	.L184+1
 2693              	.L181:
1184:..//common/src/lpc17xx_i2c.c **** 	{
1185:..//common/src/lpc17xx_i2c.c **** 	case 0:
1186:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2ADR0 = tmp;
 2694              		.loc 2 1186 0
 2695 00cc 7B68     		ldr	r3, [r7, #4]
 2696 00ce FA68     		ldr	r2, [r7, #12]
 2697 00d0 DA60     		str	r2, [r3, #12]
1187:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2MASK0 = I2C_I2MASK_MASK((uint32_t) \
 2698              		.loc 2 1187 0
 2699 00d2 3B68     		ldr	r3, [r7, #0]
 2700 00d4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2701 00d6 03F0FE02 		and	r2, r3, #254
 2702 00da 7B68     		ldr	r3, [r7, #4]
 2703 00dc 1A63     		str	r2, [r3, #48]
1188:..//common/src/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1189:..//common/src/lpc17xx_i2c.c **** 		break;
 2704              		.loc 2 1189 0
 2705 00de 1CE0     		b	.L186
 2706              	.L182:
1190:..//common/src/lpc17xx_i2c.c **** 	case 1:
1191:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2ADR1 = tmp;
 2707              		.loc 2 1191 0
 2708 00e0 7B68     		ldr	r3, [r7, #4]
 2709 00e2 FA68     		ldr	r2, [r7, #12]
 2710 00e4 1A62     		str	r2, [r3, #32]
1192:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2MASK1 = I2C_I2MASK_MASK((uint32_t) \
 2711              		.loc 2 1192 0
 2712 00e6 3B68     		ldr	r3, [r7, #0]
 2713 00e8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2714 00ea 03F0FE02 		and	r2, r3, #254
 2715 00ee 7B68     		ldr	r3, [r7, #4]
 2716 00f0 5A63     		str	r2, [r3, #52]
1193:..//common/src/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1194:..//common/src/lpc17xx_i2c.c **** 		break;
 2717              		.loc 2 1194 0
 2718 00f2 12E0     		b	.L186
 2719              	.L183:
1195:..//common/src/lpc17xx_i2c.c **** 	case 2:
1196:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2ADR2 = tmp;
 2720              		.loc 2 1196 0
 2721 00f4 7B68     		ldr	r3, [r7, #4]
 2722 00f6 FA68     		ldr	r2, [r7, #12]
 2723 00f8 5A62     		str	r2, [r3, #36]
1197:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2MASK2 = I2C_I2MASK_MASK((uint32_t) \
 2724              		.loc 2 1197 0
 2725 00fa 3B68     		ldr	r3, [r7, #0]
 2726 00fc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2727 00fe 03F0FE02 		and	r2, r3, #254
 2728 0102 7B68     		ldr	r3, [r7, #4]
 2729 0104 9A63     		str	r2, [r3, #56]
1198:..//common/src/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1199:..//common/src/lpc17xx_i2c.c **** 		break;
 2730              		.loc 2 1199 0
 2731 0106 08E0     		b	.L186
 2732              	.L184:
1200:..//common/src/lpc17xx_i2c.c **** 	case 3:
1201:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2ADR3 = tmp;
 2733              		.loc 2 1201 0
 2734 0108 7B68     		ldr	r3, [r7, #4]
 2735 010a FA68     		ldr	r2, [r7, #12]
 2736 010c 9A62     		str	r2, [r3, #40]
1202:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2MASK3 = I2C_I2MASK_MASK((uint32_t) \
 2737              		.loc 2 1202 0
 2738 010e 3B68     		ldr	r3, [r7, #0]
 2739 0110 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2740 0112 03F0FE02 		and	r2, r3, #254
 2741 0116 7B68     		ldr	r3, [r7, #4]
 2742 0118 DA63     		str	r2, [r3, #60]
 2743              	.L186:
1203:..//common/src/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1204:..//common/src/lpc17xx_i2c.c **** 		break;
1205:..//common/src/lpc17xx_i2c.c **** 	}
1206:..//common/src/lpc17xx_i2c.c **** }
 2744              		.loc 2 1206 0
 2745 011a 07F11007 		add	r7, r7, #16
 2746 011e BD46     		mov	sp, r7
 2747 0120 80BD     		pop	{r7, pc}
 2748              		.cfi_endproc
 2749              	.LFE43:
 2751 0122 00BF     		.section	.text.I2C_MonitorModeConfig,"ax",%progbits
 2752              		.align	2
 2753              		.global	I2C_MonitorModeConfig
 2754              		.thumb
 2755              		.thumb_func
 2757              	I2C_MonitorModeConfig:
 2758              	.LFB44:
1207:..//common/src/lpc17xx_i2c.c **** 
1208:..//common/src/lpc17xx_i2c.c **** 
1209:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
1210:..//common/src/lpc17xx_i2c.c ****  * @brief		Configures functionality in I2C monitor mode
1211:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1212:..//common/src/lpc17xx_i2c.c ****  *   			- LPC_I2C0
1213:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1214:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1215:..//common/src/lpc17xx_i2c.c ****  * @param[in]	MonitorCfgType Monitor Configuration type, should be:
1216:..//common/src/lpc17xx_i2c.c ****  * 				- I2C_MONITOR_CFG_SCL_OUTPUT: I2C module can 'stretch'
1217:..//common/src/lpc17xx_i2c.c ****  * 				the clock line (hold it low) until it has had time to
1218:..//common/src/lpc17xx_i2c.c ****  * 				respond to an I2C interrupt.
1219:..//common/src/lpc17xx_i2c.c ****  * 				- I2C_MONITOR_CFG_MATCHALL: When this bit is set to '1'
1220:..//common/src/lpc17xx_i2c.c ****  * 				and the I2C is in monitor mode, an interrupt will be
1221:..//common/src/lpc17xx_i2c.c ****  * 				generated on ANY address received.
1222:..//common/src/lpc17xx_i2c.c ****  * @param[in]	NewState New State of this function, should be:
1223:..//common/src/lpc17xx_i2c.c ****  * 				- ENABLE: Enable this function.
1224:..//common/src/lpc17xx_i2c.c ****  * 				- DISABLE: Disable this function.
1225:..//common/src/lpc17xx_i2c.c ****  * @return		None
1226:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
1227:..//common/src/lpc17xx_i2c.c **** void I2C_MonitorModeConfig(LPC_I2C_TypeDef *I2Cx, uint32_t MonitorCfgType, FunctionalState NewState
1228:..//common/src/lpc17xx_i2c.c **** {
 2759              		.loc 2 1228 0
 2760              		.cfi_startproc
 2761              		@ args = 0, pretend = 0, frame = 16
 2762              		@ frame_needed = 1, uses_anonymous_args = 0
 2763 0000 80B5     		push	{r7, lr}
 2764              	.LCFI51:
 2765              		.cfi_def_cfa_offset 8
 2766 0002 84B0     		sub	sp, sp, #16
 2767              	.LCFI52:
 2768              		.cfi_def_cfa_offset 24
 2769 0004 00AF     		add	r7, sp, #0
 2770              		.cfi_offset 14, -4
 2771              		.cfi_offset 7, -8
 2772              	.LCFI53:
 2773              		.cfi_def_cfa_register 7
 2774 0006 F860     		str	r0, [r7, #12]
 2775 0008 B960     		str	r1, [r7, #8]
 2776 000a 1346     		mov	r3, r2
 2777 000c FB71     		strb	r3, [r7, #7]
1229:..//common/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 2778              		.loc 2 1229 0
 2779 000e FA68     		ldr	r2, [r7, #12]
 2780 0010 4CF20003 		movw	r3, #:lower16:1073856512
 2781 0014 C4F20103 		movt	r3, #:upper16:1073856512
 2782 0018 9A42     		cmp	r2, r3
 2783 001a 18D0     		beq	.L188
 2784 001c FA68     		ldr	r2, [r7, #12]
 2785 001e 4CF20003 		movw	r3, #:lower16:1074118656
 2786 0022 C4F20503 		movt	r3, #:upper16:1074118656
 2787 0026 9A42     		cmp	r2, r3
 2788 0028 11D0     		beq	.L188
 2789 002a FA68     		ldr	r2, [r7, #12]
 2790 002c 40F20003 		movw	r3, #:lower16:1074397184
 2791 0030 C4F20A03 		movt	r3, #:upper16:1074397184
 2792 0034 9A42     		cmp	r2, r3
 2793 0036 0AD0     		beq	.L188
 2794 0038 40F20000 		movw	r0, #:lower16:.LC0
 2795 003c C0F20000 		movt	r0, #:upper16:.LC0
 2796 0040 40F2CD41 		movw	r1, #1229
 2797 0044 40F20003 		movw	r3, #:lower16:check_failed
 2798 0048 C0F20003 		movt	r3, #:upper16:check_failed
 2799 004c 9847     		blx	r3
 2800              	.L188:
1230:..//common/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
1231:..//common/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
 2801              		.loc 2 1231 0
 2802 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2803 0050 002B     		cmp	r3, #0
 2804 0052 0DD0     		beq	.L189
 2805 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2806 0056 012B     		cmp	r3, #1
 2807 0058 0AD0     		beq	.L189
 2808 005a 40F20000 		movw	r0, #:lower16:.LC0
 2809 005e C0F20000 		movt	r0, #:upper16:.LC0
 2810 0062 40F2CF41 		movw	r1, #1231
 2811 0066 40F20003 		movw	r3, #:lower16:check_failed
 2812 006a C0F20003 		movt	r3, #:upper16:check_failed
 2813 006e 9847     		blx	r3
 2814              	.L189:
1232:..//common/src/lpc17xx_i2c.c **** 
1233:..//common/src/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
 2815              		.loc 2 1233 0
 2816 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2817 0072 012B     		cmp	r3, #1
 2818 0074 07D1     		bne	.L190
1234:..//common/src/lpc17xx_i2c.c **** 	{
1235:..//common/src/lpc17xx_i2c.c **** 		I2Cx->MMCTRL |= MonitorCfgType;
 2819              		.loc 2 1235 0
 2820 0076 FB68     		ldr	r3, [r7, #12]
 2821 0078 DA69     		ldr	r2, [r3, #28]
 2822 007a BB68     		ldr	r3, [r7, #8]
 2823 007c 42EA0302 		orr	r2, r2, r3
 2824 0080 FB68     		ldr	r3, [r7, #12]
 2825 0082 DA61     		str	r2, [r3, #28]
 2826 0084 0AE0     		b	.L192
 2827              	.L190:
1236:..//common/src/lpc17xx_i2c.c **** 	}
1237:..//common/src/lpc17xx_i2c.c **** 	else
1238:..//common/src/lpc17xx_i2c.c **** 	{
1239:..//common/src/lpc17xx_i2c.c **** 		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
 2828              		.loc 2 1239 0
 2829 0086 FB68     		ldr	r3, [r7, #12]
 2830 0088 DA69     		ldr	r2, [r3, #28]
 2831 008a BB68     		ldr	r3, [r7, #8]
 2832 008c 6FEA0303 		mvn	r3, r3
 2833 0090 02EA0303 		and	r3, r2, r3
 2834 0094 03F00702 		and	r2, r3, #7
 2835 0098 FB68     		ldr	r3, [r7, #12]
 2836 009a DA61     		str	r2, [r3, #28]
 2837              	.L192:
1240:..//common/src/lpc17xx_i2c.c **** 	}
1241:..//common/src/lpc17xx_i2c.c **** }
 2838              		.loc 2 1241 0
 2839 009c 07F11007 		add	r7, r7, #16
 2840 00a0 BD46     		mov	sp, r7
 2841 00a2 80BD     		pop	{r7, pc}
 2842              		.cfi_endproc
 2843              	.LFE44:
 2845              		.section	.text.I2C_MonitorModeCmd,"ax",%progbits
 2846              		.align	2
 2847              		.global	I2C_MonitorModeCmd
 2848              		.thumb
 2849              		.thumb_func
 2851              	I2C_MonitorModeCmd:
 2852              	.LFB45:
1242:..//common/src/lpc17xx_i2c.c **** 
1243:..//common/src/lpc17xx_i2c.c **** 
1244:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
1245:..//common/src/lpc17xx_i2c.c ****  * @brief		Enable/Disable I2C monitor mode
1246:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1247:..//common/src/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1248:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1249:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1250:..//common/src/lpc17xx_i2c.c ****  * @param[in]	NewState New State of this function, should be:
1251:..//common/src/lpc17xx_i2c.c ****  * 				- ENABLE: Enable monitor mode.
1252:..//common/src/lpc17xx_i2c.c ****  * 				- DISABLE: Disable monitor mode.
1253:..//common/src/lpc17xx_i2c.c ****  * @return		None
1254:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
1255:..//common/src/lpc17xx_i2c.c **** void I2C_MonitorModeCmd(LPC_I2C_TypeDef *I2Cx, FunctionalState NewState)
1256:..//common/src/lpc17xx_i2c.c **** {
 2853              		.loc 2 1256 0
 2854              		.cfi_startproc
 2855              		@ args = 0, pretend = 0, frame = 8
 2856              		@ frame_needed = 1, uses_anonymous_args = 0
 2857 0000 80B5     		push	{r7, lr}
 2858              	.LCFI54:
 2859              		.cfi_def_cfa_offset 8
 2860 0002 82B0     		sub	sp, sp, #8
 2861              	.LCFI55:
 2862              		.cfi_def_cfa_offset 16
 2863 0004 00AF     		add	r7, sp, #0
 2864              		.cfi_offset 14, -4
 2865              		.cfi_offset 7, -8
 2866              	.LCFI56:
 2867              		.cfi_def_cfa_register 7
 2868 0006 7860     		str	r0, [r7, #4]
 2869 0008 0B46     		mov	r3, r1
 2870 000a FB70     		strb	r3, [r7, #3]
1257:..//common/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 2871              		.loc 2 1257 0
 2872 000c 7A68     		ldr	r2, [r7, #4]
 2873 000e 4CF20003 		movw	r3, #:lower16:1073856512
 2874 0012 C4F20103 		movt	r3, #:upper16:1073856512
 2875 0016 9A42     		cmp	r2, r3
 2876 0018 18D0     		beq	.L194
 2877 001a 7A68     		ldr	r2, [r7, #4]
 2878 001c 4CF20003 		movw	r3, #:lower16:1074118656
 2879 0020 C4F20503 		movt	r3, #:upper16:1074118656
 2880 0024 9A42     		cmp	r2, r3
 2881 0026 11D0     		beq	.L194
 2882 0028 7A68     		ldr	r2, [r7, #4]
 2883 002a 40F20003 		movw	r3, #:lower16:1074397184
 2884 002e C4F20A03 		movt	r3, #:upper16:1074397184
 2885 0032 9A42     		cmp	r2, r3
 2886 0034 0AD0     		beq	.L194
 2887 0036 40F20000 		movw	r0, #:lower16:.LC0
 2888 003a C0F20000 		movt	r0, #:upper16:.LC0
 2889 003e 40F2E941 		movw	r1, #1257
 2890 0042 40F20003 		movw	r3, #:lower16:check_failed
 2891 0046 C0F20003 		movt	r3, #:upper16:check_failed
 2892 004a 9847     		blx	r3
 2893              	.L194:
1258:..//common/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
 2894              		.loc 2 1258 0
 2895 004c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2896 004e 002B     		cmp	r3, #0
 2897 0050 0DD0     		beq	.L195
 2898 0052 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2899 0054 012B     		cmp	r3, #1
 2900 0056 0AD0     		beq	.L195
 2901 0058 40F20000 		movw	r0, #:lower16:.LC0
 2902 005c C0F20000 		movt	r0, #:upper16:.LC0
 2903 0060 40F2EA41 		movw	r1, #1258
 2904 0064 40F20003 		movw	r3, #:lower16:check_failed
 2905 0068 C0F20003 		movt	r3, #:upper16:check_failed
 2906 006c 9847     		blx	r3
 2907              	.L195:
1259:..//common/src/lpc17xx_i2c.c **** 
1260:..//common/src/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
 2908              		.loc 2 1260 0
 2909 006e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2910 0070 012B     		cmp	r3, #1
 2911 0072 0ED1     		bne	.L196
1261:..//common/src/lpc17xx_i2c.c **** 	{
1262:..//common/src/lpc17xx_i2c.c **** 		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
 2912              		.loc 2 1262 0
 2913 0074 7B68     		ldr	r3, [r7, #4]
 2914 0076 DB69     		ldr	r3, [r3, #28]
 2915 0078 43F00102 		orr	r2, r3, #1
 2916 007c 7B68     		ldr	r3, [r7, #4]
 2917 007e DA61     		str	r2, [r3, #28]
1263:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 2918              		.loc 2 1263 0
 2919 0080 7B68     		ldr	r3, [r7, #4]
 2920 0082 4FF00402 		mov	r2, #4
 2921 0086 1A60     		str	r2, [r3, #0]
1264:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 2922              		.loc 2 1264 0
 2923 0088 7B68     		ldr	r3, [r7, #4]
 2924 008a 4FF02802 		mov	r2, #40
 2925 008e 9A61     		str	r2, [r3, #24]
 2926 0090 09E0     		b	.L197
 2927              	.L196:
1265:..//common/src/lpc17xx_i2c.c **** 	}
1266:..//common/src/lpc17xx_i2c.c **** 	else
1267:..//common/src/lpc17xx_i2c.c **** 	{
1268:..//common/src/lpc17xx_i2c.c **** 		I2Cx->MMCTRL &= (~I2C_I2MMCTRL_MM_ENA) & I2C_I2MMCTRL_BITMASK;
 2928              		.loc 2 1268 0
 2929 0092 7B68     		ldr	r3, [r7, #4]
 2930 0094 DB69     		ldr	r3, [r3, #28]
 2931 0096 03F00602 		and	r2, r3, #6
 2932 009a 7B68     		ldr	r3, [r7, #4]
 2933 009c DA61     		str	r2, [r3, #28]
1269:..//common/src/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_AAC;
 2934              		.loc 2 1269 0
 2935 009e 7B68     		ldr	r3, [r7, #4]
 2936 00a0 4FF02C02 		mov	r2, #44
 2937 00a4 9A61     		str	r2, [r3, #24]
 2938              	.L197:
1270:..//common/src/lpc17xx_i2c.c **** 	}
1271:..//common/src/lpc17xx_i2c.c **** 	I2C_MonitorBufferIndex = 0;
 2939              		.loc 2 1271 0
 2940 00a6 40F20003 		movw	r3, #:lower16:I2C_MonitorBufferIndex
 2941 00aa C0F20003 		movt	r3, #:upper16:I2C_MonitorBufferIndex
 2942 00ae 4FF00002 		mov	r2, #0
 2943 00b2 1A60     		str	r2, [r3, #0]
1272:..//common/src/lpc17xx_i2c.c **** }
 2944              		.loc 2 1272 0
 2945 00b4 07F10807 		add	r7, r7, #8
 2946 00b8 BD46     		mov	sp, r7
 2947 00ba 80BD     		pop	{r7, pc}
 2948              		.cfi_endproc
 2949              	.LFE45:
 2951              		.section	.text.I2C_MonitorGetDatabuffer,"ax",%progbits
 2952              		.align	2
 2953              		.global	I2C_MonitorGetDatabuffer
 2954              		.thumb
 2955              		.thumb_func
 2957              	I2C_MonitorGetDatabuffer:
 2958              	.LFB46:
1273:..//common/src/lpc17xx_i2c.c **** 
1274:..//common/src/lpc17xx_i2c.c **** 
1275:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
1276:..//common/src/lpc17xx_i2c.c ****  * @brief		Get data from I2C data buffer in monitor mode.
1277:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1278:..//common/src/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1279:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1280:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1281:..//common/src/lpc17xx_i2c.c ****  * @return		None
1282:..//common/src/lpc17xx_i2c.c ****  * Note:	In monitor mode, the I2C module may lose the ability to stretch
1283:..//common/src/lpc17xx_i2c.c ****  * the clock (stall the bus) if the ENA_SCL bit is not set. This means that
1284:..//common/src/lpc17xx_i2c.c ****  * the processor will have a limited amount of time to read the contents of
1285:..//common/src/lpc17xx_i2c.c ****  * the data received on the bus. If the processor reads the I2DAT shift
1286:..//common/src/lpc17xx_i2c.c ****  * register, as it ordinarily would, it could have only one bit-time to
1287:..//common/src/lpc17xx_i2c.c ****  * respond to the interrupt before the received data is overwritten by
1288:..//common/src/lpc17xx_i2c.c ****  * new data.
1289:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
1290:..//common/src/lpc17xx_i2c.c **** uint8_t I2C_MonitorGetDatabuffer(LPC_I2C_TypeDef *I2Cx)
1291:..//common/src/lpc17xx_i2c.c **** {
 2959              		.loc 2 1291 0
 2960              		.cfi_startproc
 2961              		@ args = 0, pretend = 0, frame = 8
 2962              		@ frame_needed = 1, uses_anonymous_args = 0
 2963 0000 80B5     		push	{r7, lr}
 2964              	.LCFI57:
 2965              		.cfi_def_cfa_offset 8
 2966 0002 82B0     		sub	sp, sp, #8
 2967              	.LCFI58:
 2968              		.cfi_def_cfa_offset 16
 2969 0004 00AF     		add	r7, sp, #0
 2970              		.cfi_offset 14, -4
 2971              		.cfi_offset 7, -8
 2972              	.LCFI59:
 2973              		.cfi_def_cfa_register 7
 2974 0006 7860     		str	r0, [r7, #4]
1292:..//common/src/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 2975              		.loc 2 1292 0
 2976 0008 7A68     		ldr	r2, [r7, #4]
 2977 000a 4CF20003 		movw	r3, #:lower16:1073856512
 2978 000e C4F20103 		movt	r3, #:upper16:1073856512
 2979 0012 9A42     		cmp	r2, r3
 2980 0014 18D0     		beq	.L200
 2981 0016 7A68     		ldr	r2, [r7, #4]
 2982 0018 4CF20003 		movw	r3, #:lower16:1074118656
 2983 001c C4F20503 		movt	r3, #:upper16:1074118656
 2984 0020 9A42     		cmp	r2, r3
 2985 0022 11D0     		beq	.L200
 2986 0024 7A68     		ldr	r2, [r7, #4]
 2987 0026 40F20003 		movw	r3, #:lower16:1074397184
 2988 002a C4F20A03 		movt	r3, #:upper16:1074397184
 2989 002e 9A42     		cmp	r2, r3
 2990 0030 0AD0     		beq	.L200
 2991 0032 40F20000 		movw	r0, #:lower16:.LC0
 2992 0036 C0F20000 		movt	r0, #:upper16:.LC0
 2993 003a 40F20C51 		movw	r1, #1292
 2994 003e 40F20003 		movw	r3, #:lower16:check_failed
 2995 0042 C0F20003 		movt	r3, #:upper16:check_failed
 2996 0046 9847     		blx	r3
 2997              	.L200:
1293:..//common/src/lpc17xx_i2c.c **** 	return ((uint8_t)(I2Cx->I2DATA_BUFFER));
 2998              		.loc 2 1293 0
 2999 0048 7B68     		ldr	r3, [r7, #4]
 3000 004a DB6A     		ldr	r3, [r3, #44]
 3001 004c DBB2     		uxtb	r3, r3
1294:..//common/src/lpc17xx_i2c.c **** }
 3002              		.loc 2 1294 0
 3003 004e 1846     		mov	r0, r3
 3004 0050 07F10807 		add	r7, r7, #8
 3005 0054 BD46     		mov	sp, r7
 3006 0056 80BD     		pop	{r7, pc}
 3007              		.cfi_endproc
 3008              	.LFE46:
 3010              		.section	.text.I2C_MonitorHandler,"ax",%progbits
 3011              		.align	2
 3012              		.global	I2C_MonitorHandler
 3013              		.thumb
 3014              		.thumb_func
 3016              	I2C_MonitorHandler:
 3017              	.LFB47:
1295:..//common/src/lpc17xx_i2c.c **** 
1296:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
1297:..//common/src/lpc17xx_i2c.c ****  * @brief		Get data from I2C data buffer in monitor mode.
1298:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1299:..//common/src/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1300:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1301:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1302:..//common/src/lpc17xx_i2c.c ****  * @return		None
1303:..//common/src/lpc17xx_i2c.c ****  * Note:	In monitor mode, the I2C module may lose the ability to stretch
1304:..//common/src/lpc17xx_i2c.c ****  * the clock (stall the bus) if the ENA_SCL bit is not set. This means that
1305:..//common/src/lpc17xx_i2c.c ****  * the processor will have a limited amount of time to read the contents of
1306:..//common/src/lpc17xx_i2c.c ****  * the data received on the bus. If the processor reads the I2DAT shift
1307:..//common/src/lpc17xx_i2c.c ****  * register, as it ordinarily would, it could have only one bit-time to
1308:..//common/src/lpc17xx_i2c.c ****  * respond to the interrupt before the received data is overwritten by
1309:..//common/src/lpc17xx_i2c.c ****  * new data.
1310:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
1311:..//common/src/lpc17xx_i2c.c **** BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
1312:..//common/src/lpc17xx_i2c.c **** {
 3018              		.loc 2 1312 0
 3019              		.cfi_startproc
 3020              		@ args = 0, pretend = 0, frame = 24
 3021              		@ frame_needed = 1, uses_anonymous_args = 0
 3022              		@ link register save eliminated.
 3023 0000 80B4     		push	{r7}
 3024              	.LCFI60:
 3025              		.cfi_def_cfa_offset 4
 3026 0002 87B0     		sub	sp, sp, #28
 3027              	.LCFI61:
 3028              		.cfi_def_cfa_offset 32
 3029 0004 00AF     		add	r7, sp, #0
 3030              		.cfi_offset 7, -4
 3031              	.LCFI62:
 3032              		.cfi_def_cfa_register 7
 3033 0006 F860     		str	r0, [r7, #12]
 3034 0008 B960     		str	r1, [r7, #8]
 3035 000a 7A60     		str	r2, [r7, #4]
1313:..//common/src/lpc17xx_i2c.c **** 	BOOL_8 ret=FALSE;
 3036              		.loc 2 1313 0
 3037 000c 4FF00003 		mov	r3, #0
 3038 0010 FB75     		strb	r3, [r7, #23]
1314:..//common/src/lpc17xx_i2c.c **** 
1315:..//common/src/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 3039              		.loc 2 1315 0
 3040 0012 FB68     		ldr	r3, [r7, #12]
 3041 0014 4FF00802 		mov	r2, #8
 3042 0018 9A61     		str	r2, [r3, #24]
1316:..//common/src/lpc17xx_i2c.c **** 
1317:..//common/src/lpc17xx_i2c.c **** 	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
 3043              		.loc 2 1317 0
 3044 001a 40F20003 		movw	r3, #:lower16:I2C_MonitorBufferIndex
 3045 001e C0F20003 		movt	r3, #:upper16:I2C_MonitorBufferIndex
 3046 0022 1A68     		ldr	r2, [r3, #0]
 3047 0024 BB68     		ldr	r3, [r7, #8]
 3048 0026 1344     		add	r3, r2, r3
 3049 0028 FA68     		ldr	r2, [r7, #12]
 3050 002a D26A     		ldr	r2, [r2, #44]
 3051 002c D2B2     		uxtb	r2, r2
 3052 002e 1A70     		strb	r2, [r3, #0]
1318:..//common/src/lpc17xx_i2c.c **** 	I2C_MonitorBufferIndex++;
 3053              		.loc 2 1318 0
 3054 0030 40F20003 		movw	r3, #:lower16:I2C_MonitorBufferIndex
 3055 0034 C0F20003 		movt	r3, #:upper16:I2C_MonitorBufferIndex
 3056 0038 1B68     		ldr	r3, [r3, #0]
 3057 003a 03F10102 		add	r2, r3, #1
 3058 003e 40F20003 		movw	r3, #:lower16:I2C_MonitorBufferIndex
 3059 0042 C0F20003 		movt	r3, #:upper16:I2C_MonitorBufferIndex
 3060 0046 1A60     		str	r2, [r3, #0]
1319:..//common/src/lpc17xx_i2c.c **** 	if(I2C_MonitorBufferIndex >= size)
 3061              		.loc 2 1319 0
 3062 0048 40F20003 		movw	r3, #:lower16:I2C_MonitorBufferIndex
 3063 004c C0F20003 		movt	r3, #:upper16:I2C_MonitorBufferIndex
 3064 0050 1A68     		ldr	r2, [r3, #0]
 3065 0052 7B68     		ldr	r3, [r7, #4]
 3066 0054 9A42     		cmp	r2, r3
 3067 0056 02D3     		bcc	.L203
1320:..//common/src/lpc17xx_i2c.c **** 	{
1321:..//common/src/lpc17xx_i2c.c **** 		ret = TRUE;
 3068              		.loc 2 1321 0
 3069 0058 4FF00103 		mov	r3, #1
 3070 005c FB75     		strb	r3, [r7, #23]
 3071              	.L203:
1322:..//common/src/lpc17xx_i2c.c **** 	}
1323:..//common/src/lpc17xx_i2c.c **** 	return ret;
 3072              		.loc 2 1323 0
 3073 005e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1324:..//common/src/lpc17xx_i2c.c **** }
 3074              		.loc 2 1324 0
 3075 0060 1846     		mov	r0, r3
 3076 0062 07F11C07 		add	r7, r7, #28
 3077 0066 BD46     		mov	sp, r7
 3078 0068 80BC     		pop	{r7}
 3079 006a 7047     		bx	lr
 3080              		.cfi_endproc
 3081              	.LFE47:
 3083              		.section	.text.I2C_MasterTransferComplete,"ax",%progbits
 3084              		.align	2
 3085              		.global	I2C_MasterTransferComplete
 3086              		.thumb
 3087              		.thumb_func
 3089              	I2C_MasterTransferComplete:
 3090              	.LFB48:
1325:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
1326:..//common/src/lpc17xx_i2c.c ****  * @brief 		Get status of Master Transfer
1327:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
1328:..//common/src/lpc17xx_i2c.c ****  *  			- LPC_I2C0
1329:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1330:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1331:..//common/src/lpc17xx_i2c.c ****  * @return 		Master transfer status, could be:
1332:..//common/src/lpc17xx_i2c.c ****  * 				- TRUE	master transfer completed
1333:..//common/src/lpc17xx_i2c.c ****  * 				- FALSE master transfer have not completed yet
1334:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
1335:..//common/src/lpc17xx_i2c.c **** uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
1336:..//common/src/lpc17xx_i2c.c **** {
 3091              		.loc 2 1336 0
 3092              		.cfi_startproc
 3093              		@ args = 0, pretend = 0, frame = 16
 3094              		@ frame_needed = 1, uses_anonymous_args = 0
 3095 0000 80B5     		push	{r7, lr}
 3096              	.LCFI63:
 3097              		.cfi_def_cfa_offset 8
 3098 0002 84B0     		sub	sp, sp, #16
 3099              	.LCFI64:
 3100              		.cfi_def_cfa_offset 24
 3101 0004 00AF     		add	r7, sp, #0
 3102              		.cfi_offset 14, -4
 3103              		.cfi_offset 7, -8
 3104              	.LCFI65:
 3105              		.cfi_def_cfa_register 7
 3106 0006 7860     		str	r0, [r7, #4]
1337:..//common/src/lpc17xx_i2c.c **** 	uint32_t retval, tmp;
1338:..//common/src/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 3107              		.loc 2 1338 0
 3108 0008 7868     		ldr	r0, [r7, #4]
 3109 000a 40F20003 		movw	r3, #:lower16:I2C_getNum
 3110 000e C0F20003 		movt	r3, #:upper16:I2C_getNum
 3111 0012 9847     		blx	r3
 3112 0014 0346     		mov	r3, r0
 3113 0016 FB60     		str	r3, [r7, #12]
1339:..//common/src/lpc17xx_i2c.c **** 	retval = I2C_MasterComplete[tmp];
 3114              		.loc 2 1339 0
 3115 0018 FA68     		ldr	r2, [r7, #12]
 3116 001a 40F20003 		movw	r3, #:lower16:I2C_MasterComplete
 3117 001e C0F20003 		movt	r3, #:upper16:I2C_MasterComplete
 3118 0022 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3119 0026 BB60     		str	r3, [r7, #8]
1340:..//common/src/lpc17xx_i2c.c **** 	I2C_MasterComplete[tmp] = FALSE;
 3120              		.loc 2 1340 0
 3121 0028 FA68     		ldr	r2, [r7, #12]
 3122 002a 40F20003 		movw	r3, #:lower16:I2C_MasterComplete
 3123 002e C0F20003 		movt	r3, #:upper16:I2C_MasterComplete
 3124 0032 4FF00001 		mov	r1, #0
 3125 0036 43F82210 		str	r1, [r3, r2, lsl #2]
1341:..//common/src/lpc17xx_i2c.c **** 	return retval;
 3126              		.loc 2 1341 0
 3127 003a BB68     		ldr	r3, [r7, #8]
1342:..//common/src/lpc17xx_i2c.c **** }
 3128              		.loc 2 1342 0
 3129 003c 1846     		mov	r0, r3
 3130 003e 07F11007 		add	r7, r7, #16
 3131 0042 BD46     		mov	sp, r7
 3132 0044 80BD     		pop	{r7, pc}
 3133              		.cfi_endproc
 3134              	.LFE48:
 3136 0046 00BF     		.section	.text.I2C_SlaveTransferComplete,"ax",%progbits
 3137              		.align	2
 3138              		.global	I2C_SlaveTransferComplete
 3139              		.thumb
 3140              		.thumb_func
 3142              	I2C_SlaveTransferComplete:
 3143              	.LFB49:
1343:..//common/src/lpc17xx_i2c.c **** 
1344:..//common/src/lpc17xx_i2c.c **** /*********************************************************************//**
1345:..//common/src/lpc17xx_i2c.c ****  * @brief 		Get status of Slave Transfer
1346:..//common/src/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
1347:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C0
1348:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1349:..//common/src/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1350:..//common/src/lpc17xx_i2c.c ****  * @return 		Complete status, could be: TRUE/FALSE
1351:..//common/src/lpc17xx_i2c.c ****  **********************************************************************/
1352:..//common/src/lpc17xx_i2c.c **** uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
1353:..//common/src/lpc17xx_i2c.c **** {
 3144              		.loc 2 1353 0
 3145              		.cfi_startproc
 3146              		@ args = 0, pretend = 0, frame = 16
 3147              		@ frame_needed = 1, uses_anonymous_args = 0
 3148 0000 80B5     		push	{r7, lr}
 3149              	.LCFI66:
 3150              		.cfi_def_cfa_offset 8
 3151 0002 84B0     		sub	sp, sp, #16
 3152              	.LCFI67:
 3153              		.cfi_def_cfa_offset 24
 3154 0004 00AF     		add	r7, sp, #0
 3155              		.cfi_offset 14, -4
 3156              		.cfi_offset 7, -8
 3157              	.LCFI68:
 3158              		.cfi_def_cfa_register 7
 3159 0006 7860     		str	r0, [r7, #4]
1354:..//common/src/lpc17xx_i2c.c **** 	uint32_t retval, tmp;
1355:..//common/src/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 3160              		.loc 2 1355 0
 3161 0008 7868     		ldr	r0, [r7, #4]
 3162 000a 40F20003 		movw	r3, #:lower16:I2C_getNum
 3163 000e C0F20003 		movt	r3, #:upper16:I2C_getNum
 3164 0012 9847     		blx	r3
 3165 0014 0346     		mov	r3, r0
 3166 0016 FB60     		str	r3, [r7, #12]
1356:..//common/src/lpc17xx_i2c.c **** 	retval = I2C_SlaveComplete[tmp];
 3167              		.loc 2 1356 0
 3168 0018 FA68     		ldr	r2, [r7, #12]
 3169 001a 40F20003 		movw	r3, #:lower16:I2C_SlaveComplete
 3170 001e C0F20003 		movt	r3, #:upper16:I2C_SlaveComplete
 3171 0022 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3172 0026 BB60     		str	r3, [r7, #8]
1357:..//common/src/lpc17xx_i2c.c **** 	I2C_SlaveComplete[tmp] = FALSE;
 3173              		.loc 2 1357 0
 3174 0028 FA68     		ldr	r2, [r7, #12]
 3175 002a 40F20003 		movw	r3, #:lower16:I2C_SlaveComplete
 3176 002e C0F20003 		movt	r3, #:upper16:I2C_SlaveComplete
 3177 0032 4FF00001 		mov	r1, #0
 3178 0036 43F82210 		str	r1, [r3, r2, lsl #2]
1358:..//common/src/lpc17xx_i2c.c **** 	return retval;
 3179              		.loc 2 1358 0
 3180 003a BB68     		ldr	r3, [r7, #8]
1359:..//common/src/lpc17xx_i2c.c **** }
 3181              		.loc 2 1359 0
 3182 003c 1846     		mov	r0, r3
 3183 003e 07F11007 		add	r7, r7, #16
 3184 0042 BD46     		mov	sp, r7
 3185 0044 80BD     		pop	{r7, pc}
 3186              		.cfi_endproc
 3187              	.LFE49:
 3189 0046 00BF     		.text
 3190              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lpc17xx_i2c.c
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:24     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:28     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:67     .text.NVIC_DisableIRQ:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:71     .text.NVIC_DisableIRQ:00000000 NVIC_DisableIRQ
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:110    .bss.i2cdat:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:113    .bss.i2cdat:00000000 i2cdat
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:116    .bss.I2C_MasterComplete:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:119    .bss.I2C_MasterComplete:00000000 I2C_MasterComplete
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:122    .bss.I2C_SlaveComplete:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:125    .bss.I2C_SlaveComplete:00000000 I2C_SlaveComplete
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:128    .bss.I2C_MonitorBufferIndex:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:131    .bss.I2C_MonitorBufferIndex:00000000 I2C_MonitorBufferIndex
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:134    .text.I2C_getNum:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:138    .text.I2C_getNum:00000000 I2C_getNum
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:200    .text.I2C_Start:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:204    .text.I2C_Start:00000000 I2C_Start
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:255    .text.I2C_Stop:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:259    .text.I2C_Stop:00000000 I2C_Stop
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:305    .text.I2C_SendByte:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:309    .text.I2C_SendByte:00000000 I2C_SendByte
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:369    .text.I2C_GetByte:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:373    .text.I2C_GetByte:00000000 I2C_GetByte
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:440    .text.I2C_SetClock:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:444    .text.I2C_SetClock:00000000 I2C_SetClock
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:533    .text.I2C_Init:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:538    .text.I2C_Init:00000000 I2C_Init
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:639    .text.I2C_DeInit:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:644    .text.I2C_DeInit:00000000 I2C_DeInit
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:715    .text.I2C_Cmd:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:720    .text.I2C_Cmd:00000000 I2C_Cmd
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:764    .text.I2C_IntCmd:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:769    .text.I2C_IntCmd:00000000 I2C_IntCmd
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:884    .text.I2C_MasterHandler:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:889    .text.I2C_MasterHandler:00000000 I2C_MasterHandler
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:959    .text.I2C_MasterHandler:00000074 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:1010   .text.I2C_MasterHandler:00000138 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:1397   .text.I2C_SlaveHandler:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:1402   .text.I2C_SlaveHandler:00000000 I2C_SlaveHandler
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:1692   .text.I2C_MasterTransferData:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:1697   .text.I2C_MasterTransferData:00000000 I2C_MasterTransferData
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2215   .text.I2C_SlaveTransferData:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2220   .text.I2C_SlaveTransferData:00000000 I2C_SlaveTransferData
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2585   .rodata:00000000 $d
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2586   .rodata:00000000 .LC0
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2589   .text.I2C_SetOwnSlaveAddr:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2594   .text.I2C_SetOwnSlaveAddr:00000000 I2C_SetOwnSlaveAddr
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2689   .text.I2C_SetOwnSlaveAddr:000000bc $d
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2695   .text.I2C_SetOwnSlaveAddr:000000cc $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2752   .text.I2C_MonitorModeConfig:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2757   .text.I2C_MonitorModeConfig:00000000 I2C_MonitorModeConfig
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2846   .text.I2C_MonitorModeCmd:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2851   .text.I2C_MonitorModeCmd:00000000 I2C_MonitorModeCmd
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2952   .text.I2C_MonitorGetDatabuffer:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:2957   .text.I2C_MonitorGetDatabuffer:00000000 I2C_MonitorGetDatabuffer
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:3011   .text.I2C_MonitorHandler:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:3016   .text.I2C_MonitorHandler:00000000 I2C_MonitorHandler
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:3084   .text.I2C_MasterTransferComplete:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:3089   .text.I2C_MasterTransferComplete:00000000 I2C_MasterTransferComplete
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:3137   .text.I2C_SlaveTransferComplete:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\cc8I4GzZ.s:3142   .text.I2C_SlaveTransferComplete:00000000 I2C_SlaveTransferComplete
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CLKPWR_GetPCLK
CLKPWR_ConfigPPWR
CLKPWR_SetPCLKDiv
check_failed
