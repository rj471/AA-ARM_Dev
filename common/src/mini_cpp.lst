   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"mini_cpp.cpp"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.section	.text._Znwj,"ax",%progbits
  24              		.align	2
  25              		.global	_Znwj
  26              		.thumb
  27              		.thumb_func
  29              	_Znwj:
  30              	.LFB7:
  31              		.file 1 "..//common/src/mini_cpp.cpp"
   1:..//common/src/mini_cpp.cpp **** /*Copyright (C) 2011 by Sagar G V
   2:..//common/src/mini_cpp.cpp **** 
   3:..//common/src/mini_cpp.cpp **** Permission is hereby granted, free of charge, to any person obtaining a copy
   4:..//common/src/mini_cpp.cpp **** of this software and associated documentation files (the "Software"), to deal
   5:..//common/src/mini_cpp.cpp **** in the Software without restriction, including without limitation the rights
   6:..//common/src/mini_cpp.cpp **** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   7:..//common/src/mini_cpp.cpp **** copies of the Software, and to permit persons to whom the Software is
   8:..//common/src/mini_cpp.cpp **** furnished to do so, subject to the following conditions:
   9:..//common/src/mini_cpp.cpp **** 
  10:..//common/src/mini_cpp.cpp **** The above copyright notice and this permission notice shall be included in
  11:..//common/src/mini_cpp.cpp **** all copies or substantial portions of the Software.
  12:..//common/src/mini_cpp.cpp **** 
  13:..//common/src/mini_cpp.cpp **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  14:..//common/src/mini_cpp.cpp **** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  15:..//common/src/mini_cpp.cpp **** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  16:..//common/src/mini_cpp.cpp **** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  17:..//common/src/mini_cpp.cpp **** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  18:..//common/src/mini_cpp.cpp **** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  19:..//common/src/mini_cpp.cpp **** THE SOFTWARE.
  20:..//common/src/mini_cpp.cpp **** */
  21:..//common/src/mini_cpp.cpp **** 
  22:..//common/src/mini_cpp.cpp **** #include "mini_cpp.h"
  23:..//common/src/mini_cpp.cpp **** 
  24:..//common/src/mini_cpp.cpp **** 
  25:..//common/src/mini_cpp.cpp **** #ifdef _NOTHROW_NEW_
  26:..//common/src/mini_cpp.cpp **** void *operator new(size_t size) throw() { return malloc(size); }
  32              		.loc 1 26 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 8
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 80B5     		push	{r7, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39 0002 82B0     		sub	sp, sp, #8
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 16
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_offset 14, -4
  44              		.cfi_offset 7, -8
  45              	.LCFI2:
  46              		.cfi_def_cfa_register 7
  47 0006 7860     		str	r0, [r7, #4]
  48              		.loc 1 26 0
  49 0008 7868     		ldr	r0, [r7, #4]
  50 000a 40F20003 		movw	r3, #:lower16:malloc
  51 000e C0F20003 		movt	r3, #:upper16:malloc
  52 0012 9847     		blx	r3
  53 0014 0346     		mov	r3, r0
  54 0016 1846     		mov	r0, r3
  55 0018 07F10807 		add	r7, r7, #8
  56 001c BD46     		mov	sp, r7
  57 001e 80BD     		pop	{r7, pc}
  58              		.cfi_endproc
  59              	.LFE7:
  61              		.section	.text._Znaj,"ax",%progbits
  62              		.align	2
  63              		.global	_Znaj
  64              		.thumb
  65              		.thumb_func
  67              	_Znaj:
  68              	.LFB8:
  27:..//common/src/mini_cpp.cpp **** void *operator new[](size_t size) throw()
  28:..//common/src/mini_cpp.cpp **** {
  69              		.loc 1 28 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 8
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73 0000 80B5     		push	{r7, lr}
  74              	.LCFI3:
  75              		.cfi_def_cfa_offset 8
  76 0002 82B0     		sub	sp, sp, #8
  77              	.LCFI4:
  78              		.cfi_def_cfa_offset 16
  79 0004 00AF     		add	r7, sp, #0
  80              		.cfi_offset 14, -4
  81              		.cfi_offset 7, -8
  82              	.LCFI5:
  83              		.cfi_def_cfa_register 7
  84 0006 7860     		str	r0, [r7, #4]
  29:..//common/src/mini_cpp.cpp ****     return malloc(size);
  85              		.loc 1 29 0
  86 0008 7868     		ldr	r0, [r7, #4]
  87 000a 40F20003 		movw	r3, #:lower16:malloc
  88 000e C0F20003 		movt	r3, #:upper16:malloc
  89 0012 9847     		blx	r3
  90 0014 0346     		mov	r3, r0
  30:..//common/src/mini_cpp.cpp **** }
  91              		.loc 1 30 0
  92 0016 1846     		mov	r0, r3
  93 0018 07F10807 		add	r7, r7, #8
  94 001c BD46     		mov	sp, r7
  95 001e 80BD     		pop	{r7, pc}
  96              		.cfi_endproc
  97              	.LFE8:
  99              		.section	.text._ZdlPv,"ax",%progbits
 100              		.align	2
 101              		.global	_ZdlPv
 102              		.thumb
 103              		.thumb_func
 105              	_ZdlPv:
 106              	.LFB9:
  31:..//common/src/mini_cpp.cpp **** void operator delete(void *p) throw() { free(p); }
 107              		.loc 1 31 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 8
 110              		@ frame_needed = 1, uses_anonymous_args = 0
 111 0000 80B5     		push	{r7, lr}
 112              	.LCFI6:
 113              		.cfi_def_cfa_offset 8
 114 0002 82B0     		sub	sp, sp, #8
 115              	.LCFI7:
 116              		.cfi_def_cfa_offset 16
 117 0004 00AF     		add	r7, sp, #0
 118              		.cfi_offset 14, -4
 119              		.cfi_offset 7, -8
 120              	.LCFI8:
 121              		.cfi_def_cfa_register 7
 122 0006 7860     		str	r0, [r7, #4]
 123              		.loc 1 31 0
 124 0008 7868     		ldr	r0, [r7, #4]
 125 000a 40F20003 		movw	r3, #:lower16:free
 126 000e C0F20003 		movt	r3, #:upper16:free
 127 0012 9847     		blx	r3
 128 0014 07F10807 		add	r7, r7, #8
 129 0018 BD46     		mov	sp, r7
 130 001a 80BD     		pop	{r7, pc}
 131              		.cfi_endproc
 132              	.LFE9:
 134              		.section	.text.__aeabi_atexit,"ax",%progbits
 135              		.align	2
 136              		.global	__aeabi_atexit
 137              		.thumb
 138              		.thumb_func
 140              	__aeabi_atexit:
 141              	.LFB10:
  32:..//common/src/mini_cpp.cpp **** extern "C" int __aeabi_atexit(void *object,void (*destructor)(void *),void *dso_handle) 
  33:..//common/src/mini_cpp.cpp **** { 
 142              		.loc 1 33 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 16
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 147 0000 80B4     		push	{r7}
 148              	.LCFI9:
 149              		.cfi_def_cfa_offset 4
 150 0002 85B0     		sub	sp, sp, #20
 151              	.LCFI10:
 152              		.cfi_def_cfa_offset 24
 153 0004 00AF     		add	r7, sp, #0
 154              		.cfi_offset 7, -4
 155              	.LCFI11:
 156              		.cfi_def_cfa_register 7
 157 0006 F860     		str	r0, [r7, #12]
 158 0008 B960     		str	r1, [r7, #8]
 159 000a 7A60     		str	r2, [r7, #4]
  34:..//common/src/mini_cpp.cpp **** 	object = object; // avoid warnings
  35:..//common/src/mini_cpp.cpp **** 	destructor = destructor;
  36:..//common/src/mini_cpp.cpp **** 	dso_handle = dso_handle;
  37:..//common/src/mini_cpp.cpp ****     return 0; 
 160              		.loc 1 37 0
 161 000c 4FF00003 		mov	r3, #0
  38:..//common/src/mini_cpp.cpp **** } 
 162              		.loc 1 38 0
 163 0010 1846     		mov	r0, r3
 164 0012 07F11407 		add	r7, r7, #20
 165 0016 BD46     		mov	sp, r7
 166 0018 80BC     		pop	{r7}
 167 001a 7047     		bx	lr
 168              		.cfi_endproc
 169              	.LFE10:
 171              		.text
 172              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 mini_cpp.cpp
C:\Users\ACURAP~1\AppData\Local\Temp\ccb90uTd.s:24     .text._Znwj:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccb90uTd.s:29     .text._Znwj:00000000 _Znwj
C:\Users\ACURAP~1\AppData\Local\Temp\ccb90uTd.s:62     .text._Znaj:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccb90uTd.s:67     .text._Znaj:00000000 _Znaj
C:\Users\ACURAP~1\AppData\Local\Temp\ccb90uTd.s:100    .text._ZdlPv:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccb90uTd.s:105    .text._ZdlPv:00000000 _ZdlPv
C:\Users\ACURAP~1\AppData\Local\Temp\ccb90uTd.s:135    .text.__aeabi_atexit:00000000 $t
C:\Users\ACURAP~1\AppData\Local\Temp\ccb90uTd.s:140    .text.__aeabi_atexit:00000000 __aeabi_atexit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
malloc
free
